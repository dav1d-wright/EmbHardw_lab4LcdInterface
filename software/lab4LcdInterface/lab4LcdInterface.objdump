
lab4LcdInterface.elf:     file format elf32-littlenios2
lab4LcdInterface.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01000244

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02040020 paddr 0x01000020 align 2**12
         filesz 0x00000224 memsz 0x00000224 flags r-x
    LOAD off    0x00001244 vaddr 0x01000244 paddr 0x01000244 align 2**12
         filesz 0x00005bfc memsz 0x00005bfc flags r-x
    LOAD off    0x00006e40 vaddr 0x01005e40 paddr 0x010078c4 align 2**12
         filesz 0x00001a84 memsz 0x00001a84 flags rw-
    LOAD off    0x00009348 vaddr 0x01009348 paddr 0x01009348 align 2**12
         filesz 0x00070954 memsz 0x00070954 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  02040020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005bb4  01000244  01000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  01005df8  01005df8  00006df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a84  01005e40  010078c4  00006e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  01009348  01009348  00009348  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM_ctrl   00070800  0100949c  0100949c  0000949c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .TCIM         00000000  02040244  02040244  00079c9c  2**0
                  CONTENTS
  8 .TCDM         00000000  02041000  02041000  00079c9c  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00079c9c  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000a70  00000000  00000000  00079cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00016924  00000000  00000000  0007a730  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000061d0  00000000  00000000  00091054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006cbc  00000000  00000000  00097224  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001670  00000000  00000000  0009dee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002944  00000000  00000000  0009f550  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00004a4c  00000000  00000000  000a1e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000060  00000000  00000000  000a68e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000680  00000000  00000000  000a6940  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  000a9856  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  000a9859  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000a985c  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000a985d  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000a985e  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  000a9862  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  000a9866  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  000a986a  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  000a9873  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  000a987c  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000a  00000000  00000000  000a9885  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000005d  00000000  00000000  000a988f  2**0
                  CONTENTS, READONLY
 31 .jdi          00005212  00000000  00000000  000a98ec  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     0007fc0d  00000000  00000000  000aeafe  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
02040020 l    d  .exceptions	00000000 .exceptions
01000244 l    d  .text	00000000 .text
01005df8 l    d  .rodata	00000000 .rodata
01005e40 l    d  .rwdata	00000000 .rwdata
01009348 l    d  .bss	00000000 .bss
0100949c l    d  .SDRAM_ctrl	00000000 .SDRAM_ctrl
02040244 l    d  .TCIM	00000000 .TCIM
02041000 l    d  .TCDM	00000000 .TCDM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab4LcdInterface_bsp//obj/HAL/src/crt0.o
0100028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
01000854 l     F .text	00000008 __fp_unlock
01000868 l     F .text	0000019c __sinit.part.1
01000a04 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01005e40 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
010034b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
010035bc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
010035e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
010036d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
010037b4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
010038a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01003a74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
010078b4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
01003cf0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01003e24 l     F .text	00000034 alt_dev_reg
01006814 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01004128 l     F .text	0000020c altera_avalon_jtag_uart_irq
01004334 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0100496c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01004d2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
010051a0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
010052e0 l     F .text	0000003c alt_get_errno
0100531c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
01009370 g     O .bss	00000004 alt_instruction_exception_handler
010032a8 g     F .text	00000054 _isatty_r
010039b0 g     F .text	0000007c alt_main
010006e8 g     F .text	000000c0 _puts_r
0100939c g     O .bss	00000100 alt_irq
01002fd0 g     F .text	00000060 _lseek_r
010078c4 g       *ABS*	00000000 __flash_rwdata_start
01079c9c g       *ABS*	00000000 __alt_heap_start
01002584 g     F .text	0000005c __sseek
01000ba4 g     F .text	00000010 __sinit
01000a0c g     F .text	00000068 __sfmoreglue
01003a50 g     F .text	00000024 __malloc_unlock
01000684 g     F .text	00000034 LCD_Write_Command
01001c70 g     F .text	0000015c memmove
010006b8 g     F .text	00000030 LCD_Write_Data
01000b8c g     F .text	00000018 _cleanup
010056d8 g     F .text	00000024 altera_nios2_gen2_irq_init
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
0100324c g     F .text	0000005c _fstat_r
01009354 g     O .bss	00000004 errno
01002500 g     F .text	00000008 __seofread
0100935c g     O .bss	00000004 alt_argv
0100f874 g       *ABS*	00000000 _gp
01003cc0 g     F .text	00000030 usleep
0105449c g     O .SDRAM_ctrl	00025800 picture_array_tuxAnimation_3
01006694 g     O .rwdata	00000180 alt_fd_list
0100949c g     O .SDRAM_ctrl	00025800 picture_array_tuxAnimation_1
010056fc g     F .text	00000090 alt_find_dev
01001b28 g     F .text	00000148 memcpy
0100085c g     F .text	0000000c _cleanup_r
01005264 g     F .text	0000007c alt_io_redirect
01005df8 g       *ABS*	00000000 __DTOR_END__
010007a8 g     F .text	00000014 puts
010059c8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0100452c g     F .text	0000021c altera_avalon_jtag_uart_read
010033f4 g     F .text	00000064 .hidden __udivsi3
01003710 g     F .text	000000a4 isatty
01000000 g       *ABS*	00000000 __alt_mem_SDRAM_ctrl
01007884 g     O .rwdata	00000004 picture_width_tuxAnimation_3
01005938 g     F .text	00000090 alt_icache_flush
01009350 g     O .bss	00000004 __malloc_top_pad
01000bf4 g     F .text	000004bc __sfvwrite_r
01000468 g     F .text	0000021c init_LCD
01002458 g     F .text	00000054 _sbrk_r
0100787c g     O .rwdata	00000004 picture_width_tuxAnimation_2
010031ec g     F .text	00000060 _read_r
010078ac g     O .rwdata	00000004 alt_max_fd
010027f0 g     F .text	000000f0 _fclose_r
01002b6c g     F .text	00000030 fflush
0100934c g     O .bss	00000004 __malloc_max_sbrked_mem
010038dc g     F .text	000000d4 lseek
0100788c g     O .rwdata	00000004 _global_impure_ptr
01001ef4 g     F .text	00000564 _realloc_r
0100949c g       *ABS*	00000000 __bss_end
010050b0 g     F .text	000000f0 alt_iic_isr_register
010055d0 g     F .text	00000108 alt_tick
01000bc4 g     F .text	00000018 __fp_lock_all
01005064 g     F .text	0000004c alt_ic_irq_enabled
01005534 g     F .text	0000009c alt_alarm_stop
01009364 g     O .bss	00000004 alt_irq_active
020400fc g     F .exceptions	000000d4 alt_irq_handler
0100666c g     O .rwdata	00000028 alt_dev_null
01004ce4 g     F .text	00000048 alt_dcache_flush_all
010078c4 g       *ABS*	00000000 __ram_rwdata_end
010078a4 g     O .rwdata	00000008 alt_dev_list
01007878 g     O .rwdata	00000004 picture_height_tuxAnimation_1
01003d2c g     F .text	000000f8 write
01005e40 g       *ABS*	00000000 __ram_rodata_end
01003624 g     F .text	000000b0 fstat
01003458 g     F .text	00000058 .hidden __umodsi3
01079c9c g       *ABS*	00000000 end
01004068 g     F .text	000000c0 altera_avalon_jtag_uart_init
020401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
01005df8 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
010049e4 g     F .text	0000007c alt_avalon_timer_sc_init
01004748 g     F .text	00000224 altera_avalon_jtag_uart_write
01000bb4 g     F .text	00000004 __sfp_lock_acquire
01001a44 g     F .text	000000e4 memchr
01002cc0 g     F .text	00000310 _free_r
01005c44 g     F .text	00000180 __call_exitprocs
01007894 g     O .rwdata	00000004 __malloc_sbrk_base
01000244 g     F .text	0000004c _start
01009368 g     O .bss	00000004 _alt_tick_rate
0100936c g     O .bss	00000004 _alt_nticks
01003ab0 g     F .text	000000fc read
01003e90 g     F .text	00000074 alt_sys_init
01005b2c g     F .text	00000118 __register_exitproc
010043d4 g     F .text	00000068 altera_avalon_jtag_uart_close
01005e40 g       *ABS*	00000000 __ram_rwdata_start
01005df8 g       *ABS*	00000000 __ram_rodata_start
01009374 g     O .bss	00000028 __malloc_current_mallinfo
01003f04 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
01005894 g     F .text	000000a4 alt_get_fd
01004b8c g     F .text	00000158 alt_busy_sleep
0100279c g     F .text	00000054 _close_r
01005ab0 g     F .text	0000007c memcmp
01003fc4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
01079c9c g       *ABS*	00000000 __alt_stack_base
01004014 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01002648 g     F .text	00000154 __swsetup_r
01000a74 g     F .text	00000118 __sfp
01006264 g     O .rwdata	00000408 __malloc_av_
01000bc0 g     F .text	00000004 __sinit_lock_release
010024ac g     F .text	00000054 __sread
0100578c g     F .text	00000108 alt_find_file
01004d68 g     F .text	000000a4 alt_dev_llist_insert
01003a2c g     F .text	00000024 __malloc_lock
01003c10 g     F .text	000000b0 sbrk
01002b10 g     F .text	0000005c _fflush_r
01009348 g       *ABS*	00000000 __bss_start
01001dcc g     F .text	00000128 memset
01000290 g     F .text	000001d8 main
01009360 g     O .bss	00000004 alt_envp
01009348 g     O .bss	00000004 __malloc_max_total_mem
01003f64 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
010025e0 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
010028e0 g     F .text	00000014 fclose
01007888 g     O .rwdata	00000004 picture_height_tuxAnimation_3
01001238 g     F .text	0000080c _malloc_r
010078b0 g     O .rwdata	00000004 alt_errno
010010b0 g     F .text	000000c4 _fwalk
010032fc g     F .text	00000084 .hidden __divsi3
01002b9c g     F .text	00000124 _malloc_trim_r
01005df8 g       *ABS*	00000000 __CTOR_END__
01005df8 g       *ABS*	00000000 __flash_rodata_start
01005df8 g       *ABS*	00000000 __DTOR_LIST__
01003e58 g     F .text	00000038 alt_irq_init
01003bac g     F .text	00000064 alt_release_fd
01005a64 g     F .text	00000014 atexit
010025e8 g     F .text	00000060 _write_r
01007890 g     O .rwdata	00000004 _impure_ptr
01009358 g     O .bss	00000004 alt_argc
010028f4 g     F .text	0000021c __sflush_r
01004e6c g     F .text	00000060 _do_dtors
02040020 g       .exceptions	00000000 alt_irq_entry
01000bdc g     F .text	00000018 __fp_unlock_all
0100789c g     O .rwdata	00000008 alt_fs_list
02040020 g       *ABS*	00000000 __ram_exceptions_start
01004f00 g     F .text	00000050 alt_ic_isr_register
010078c4 g       *ABS*	00000000 _edata
02041000 g       *ABS*	00000000 __alt_mem_TCDM
01079c9c g       *ABS*	00000000 _end
0102ec9c g     O .SDRAM_ctrl	00025800 picture_array_tuxAnimation_2
02040244 g       *ABS*	00000000 __ram_exceptions_end
0100443c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
01004fd8 g     F .text	0000008c alt_ic_irq_disable
01002508 g     F .text	0000007c __swrite
01007898 g     O .rwdata	00000004 __malloc_trim_threshold
01005a78 g     F .text	00000038 exit
01001174 g     F .text	000000c4 _fwalk_reent
01007880 g     O .rwdata	00000004 picture_height_tuxAnimation_2
01003380 g     F .text	00000074 .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
02040020 g     F .exceptions	00000000 alt_exception
01000bb8 g     F .text	00000004 __sfp_lock_release
01007874 g     O .rwdata	00000004 picture_width_tuxAnimation_1
01005dc4 g     F .text	00000034 _exit
02040000 g       *ABS*	00000000 __alt_mem_TCIM
01004a60 g     F .text	0000012c alt_alarm_start
01003030 g     F .text	000001bc __smakebuf_r
010007bc g     F .text	00000098 strlen
010053e0 g     F .text	00000154 open
01004ecc g     F .text	00000034 alt_icache_flush_all
010078b8 g     O .rwdata	00000004 alt_priority_mask
01004f50 g     F .text	00000088 alt_ic_irq_enable
010078bc g     O .rwdata	00000008 alt_alarm_list
01004e0c g     F .text	00000060 _do_ctors
010034ec g     F .text	000000d0 close
0100381c g     F .text	00000084 alt_load
01000bbc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__alt_mem_TCDM+0xfefbf004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08409114 	ori	at,at,580
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_SDRAM_ctrl-0x1000000>

Disassembly of section .exceptions:

02040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2040020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2040024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2040028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 204002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2040030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2040034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2040038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 204003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2040040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2040044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2040048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 204004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2040050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2040054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2040058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 204005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2040060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2040064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2040068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 204006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2040070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2040074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2040078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 204007c:	10000326 	beq	r2,zero,204008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2040080:	20000226 	beq	r4,zero,204008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2040084:	20400fc0 	call	20400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2040088:	00000706 	br	20400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 204008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2040090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2040094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2040098:	20401d00 	call	20401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 204009c:	1000021e 	bne	r2,zero,20400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20400f8:	ef80083a 	eret

020400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20400fc:	defff904 	addi	sp,sp,-28
 2040100:	dfc00615 	stw	ra,24(sp)
 2040104:	df000515 	stw	fp,20(sp)
 2040108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 204010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2040110:	0005313a 	rdctl	r2,ipending
 2040114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2040118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 204011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2040120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2040124:	00800044 	movi	r2,1
 2040128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 204012c:	e0fffb17 	ldw	r3,-20(fp)
 2040130:	e0bffc17 	ldw	r2,-16(fp)
 2040134:	1884703a 	and	r2,r3,r2
 2040138:	10001426 	beq	r2,zero,204018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 204013c:	00804074 	movhi	r2,257
 2040140:	10a4e704 	addi	r2,r2,-27748
 2040144:	e0fffd17 	ldw	r3,-12(fp)
 2040148:	180690fa 	slli	r3,r3,3
 204014c:	10c5883a 	add	r2,r2,r3
 2040150:	10c00017 	ldw	r3,0(r2)
 2040154:	00804074 	movhi	r2,257
 2040158:	10a4e704 	addi	r2,r2,-27748
 204015c:	e13ffd17 	ldw	r4,-12(fp)
 2040160:	200890fa 	slli	r4,r4,3
 2040164:	1105883a 	add	r2,r2,r4
 2040168:	10800104 	addi	r2,r2,4
 204016c:	10800017 	ldw	r2,0(r2)
 2040170:	1009883a 	mov	r4,r2
 2040174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2040178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 204017c:	0005313a 	rdctl	r2,ipending
 2040180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2040184:	e0bfff17 	ldw	r2,-4(fp)
 2040188:	00000706 	br	20401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 204018c:	e0bffc17 	ldw	r2,-16(fp)
 2040190:	1085883a 	add	r2,r2,r2
 2040194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2040198:	e0bffd17 	ldw	r2,-12(fp)
 204019c:	10800044 	addi	r2,r2,1
 20401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20401a4:	003fe106 	br	204012c <__alt_mem_TCDM+0xfffff12c>

    active = alt_irq_pending ();
 20401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20401ac:	e0bffb17 	ldw	r2,-20(fp)
 20401b0:	103fdb1e 	bne	r2,zero,2040120 <__alt_mem_TCDM+0xfffff120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20401b4:	0001883a 	nop
}
 20401b8:	0001883a 	nop
 20401bc:	e037883a 	mov	sp,fp
 20401c0:	dfc00117 	ldw	ra,4(sp)
 20401c4:	df000017 	ldw	fp,0(sp)
 20401c8:	dec00204 	addi	sp,sp,8
 20401cc:	f800283a 	ret

020401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20401d0:	defffb04 	addi	sp,sp,-20
 20401d4:	dfc00415 	stw	ra,16(sp)
 20401d8:	df000315 	stw	fp,12(sp)
 20401dc:	df000304 	addi	fp,sp,12
 20401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 20401e4:	000531fa 	rdctl	r2,exception
 20401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 20401ec:	e0bffd17 	ldw	r2,-12(fp)
 20401f0:	10801f0c 	andi	r2,r2,124
 20401f4:	1004d0ba 	srli	r2,r2,2
 20401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 20401fc:	0005333a 	rdctl	r2,badaddr
 2040200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 2040204:	d0a6bf17 	ldw	r2,-25860(gp)
 2040208:	10000726 	beq	r2,zero,2040228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204020c:	d0a6bf17 	ldw	r2,-25860(gp)
 2040210:	e0fffd17 	ldw	r3,-12(fp)
 2040214:	e1bffe17 	ldw	r6,-8(fp)
 2040218:	e17fff17 	ldw	r5,-4(fp)
 204021c:	1809883a 	mov	r4,r3
 2040220:	103ee83a 	callr	r2
 2040224:	00000206 	br	2040230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2040228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 204022c:	0005883a 	mov	r2,zero
}
 2040230:	e037883a 	mov	sp,fp
 2040234:	dfc00117 	ldw	ra,4(sp)
 2040238:	df000017 	ldw	fp,0(sp)
 204023c:	dec00204 	addi	sp,sp,8
 2040240:	f800283a 	ret

Disassembly of section .text:

01000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 1000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 1000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 100024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 1000250:	00bffd16 	blt	zero,r2,1000248 <__alt_mem_TCDM+0xfefbf248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1000254:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 1000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 100025c:	06804034 	movhi	gp,256
    ori gp, gp, %lo(_gp)
 1000260:	d6be1d14 	ori	gp,gp,63604
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1000264:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 1000268:	10a4d214 	ori	r2,r2,37704

    movhi r3, %hi(__bss_end)
 100026c:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
 1000270:	18e52714 	ori	r3,r3,38044

    beq r2, r3, 1f
 1000274:	10c00326 	beq	r2,r3,1000284 <_start+0x40>

0:
    stw zero, (r2)
 1000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 100027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1000280:	10fffd36 	bltu	r2,r3,1000278 <__alt_mem_TCDM+0xfefbf278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1000284:	100381c0 	call	100381c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1000288:	10039b00 	call	10039b0 <alt_main>

0100028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 100028c:	003fff06 	br	100028c <__alt_mem_TCDM+0xfefbf28c>

01000290 <main>:
void LCD_Write_Command(int command);
void LCD_Write_Data(int data);
void init_LCD();

int main()
{
 1000290:	defff604 	addi	sp,sp,-40
 1000294:	dfc00915 	stw	ra,36(sp)
 1000298:	df000815 	stw	fp,32(sp)
 100029c:	df000804 	addi	fp,sp,32
  printf("Hello from Nios II!\n");
 10002a0:	01004034 	movhi	r4,256
 10002a4:	21177e04 	addi	r4,r4,24056
 10002a8:	10007a80 	call	10007a8 <puts>
//	  {
//		  IOWR_16DIRECT(LCD_BASE, i, i);
//	  }
//  }

  uint16_t uTestVal = 0xDEADU;
 10002ac:	00b7ab44 	movi	r2,-8531
 10002b0:	e0bfff0d 	sth	r2,-4(fp)
  uint16_t uSrcLsw = (uint16_t)(((uint32_t)(&uTestVal)) & 0x0000FFFFU);
 10002b4:	e0bfff04 	addi	r2,fp,-4
 10002b8:	e0bffe0d 	sth	r2,-8(fp)
  uint16_t uSrcMsw = (uint16_t)((((uint32_t)(&uTestVal)) & 0xFFFF0000U) >> 16U);
 10002bc:	e0bfff04 	addi	r2,fp,-4
 10002c0:	1004d43a 	srli	r2,r2,16
 10002c4:	e0bffe8d 	sth	r2,-6(fp)

  init_LCD();
 10002c8:	10004680 	call	1000468 <init_LCD>

  usleep(500E3);
 10002cc:	01000234 	movhi	r4,8
 10002d0:	21284804 	addi	r4,r4,-24288
 10002d4:	1003cc00 	call	1003cc0 <usleep>

//  IOWR_16DIRECT(DMA_BASE, DMA_REG_SRCLSW, )

  while (true)
  {
	  LCD_Write_Command(0x002CU);
 10002d8:	01000b04 	movi	r4,44
 10002dc:	10006840 	call	1000684 <LCD_Write_Command>
	  for(int i = 0; i < picture_height_tuxAnimation_1; i++)
 10002e0:	e03ff815 	stw	zero,-32(fp)
 10002e4:	00001706 	br	1000344 <main+0xb4>
	  {
		  for(int j = 0; j < picture_width_tuxAnimation_1; j++)
 10002e8:	e03ff915 	stw	zero,-28(fp)
 10002ec:	00000f06 	br	100032c <main+0x9c>
		  {
//			  LCD_Write_Data(0);
			   LCD_Write_Data(picture_array_tuxAnimation_1[i][j]);
 10002f0:	00804074 	movhi	r2,257
 10002f4:	10a52704 	addi	r2,r2,-27492
 10002f8:	e0fff817 	ldw	r3,-32(fp)
 10002fc:	19003c24 	muli	r4,r3,240
 1000300:	e0fff917 	ldw	r3,-28(fp)
 1000304:	20c7883a 	add	r3,r4,r3
 1000308:	18c7883a 	add	r3,r3,r3
 100030c:	10c5883a 	add	r2,r2,r3
 1000310:	1080000b 	ldhu	r2,0(r2)
 1000314:	10bfffcc 	andi	r2,r2,65535
 1000318:	1009883a 	mov	r4,r2
 100031c:	10006b80 	call	10006b8 <LCD_Write_Data>
  while (true)
  {
	  LCD_Write_Command(0x002CU);
	  for(int i = 0; i < picture_height_tuxAnimation_1; i++)
	  {
		  for(int j = 0; j < picture_width_tuxAnimation_1; j++)
 1000320:	e0bff917 	ldw	r2,-28(fp)
 1000324:	10800044 	addi	r2,r2,1
 1000328:	e0bff915 	stw	r2,-28(fp)
 100032c:	e0fff917 	ldw	r3,-28(fp)
 1000330:	00803c04 	movi	r2,240
 1000334:	18bfee36 	bltu	r3,r2,10002f0 <__alt_mem_TCDM+0xfefbf2f0>
//  IOWR_16DIRECT(DMA_BASE, DMA_REG_SRCLSW, )

  while (true)
  {
	  LCD_Write_Command(0x002CU);
	  for(int i = 0; i < picture_height_tuxAnimation_1; i++)
 1000338:	e0bff817 	ldw	r2,-32(fp)
 100033c:	10800044 	addi	r2,r2,1
 1000340:	e0bff815 	stw	r2,-32(fp)
 1000344:	e0fff817 	ldw	r3,-32(fp)
 1000348:	00805004 	movi	r2,320
 100034c:	18bfe636 	bltu	r3,r2,10002e8 <__alt_mem_TCDM+0xfefbf2e8>
//			  LCD_Write_Data(0);
			   LCD_Write_Data(picture_array_tuxAnimation_1[i][j]);
		  }
	  }

	  usleep(500E3);
 1000350:	01000234 	movhi	r4,8
 1000354:	21284804 	addi	r4,r4,-24288
 1000358:	1003cc00 	call	1003cc0 <usleep>

	  LCD_Write_Command(0x002CU);
 100035c:	01000b04 	movi	r4,44
 1000360:	10006840 	call	1000684 <LCD_Write_Command>
	  for(int i = 0; i < picture_height_tuxAnimation_2; i++)
 1000364:	e03ffa15 	stw	zero,-24(fp)
 1000368:	00001706 	br	10003c8 <main+0x138>
	  {
		  for(int j = 0; j < picture_width_tuxAnimation_2; j++)
 100036c:	e03ffb15 	stw	zero,-20(fp)
 1000370:	00000f06 	br	10003b0 <main+0x120>
		  {
			  LCD_Write_Data(picture_array_tuxAnimation_2[i][j]);
 1000374:	008040f4 	movhi	r2,259
 1000378:	10bb2704 	addi	r2,r2,-4964
 100037c:	e0fffa17 	ldw	r3,-24(fp)
 1000380:	19003c24 	muli	r4,r3,240
 1000384:	e0fffb17 	ldw	r3,-20(fp)
 1000388:	20c7883a 	add	r3,r4,r3
 100038c:	18c7883a 	add	r3,r3,r3
 1000390:	10c5883a 	add	r2,r2,r3
 1000394:	1080000b 	ldhu	r2,0(r2)
 1000398:	10bfffcc 	andi	r2,r2,65535
 100039c:	1009883a 	mov	r4,r2
 10003a0:	10006b80 	call	10006b8 <LCD_Write_Data>
	  usleep(500E3);

	  LCD_Write_Command(0x002CU);
	  for(int i = 0; i < picture_height_tuxAnimation_2; i++)
	  {
		  for(int j = 0; j < picture_width_tuxAnimation_2; j++)
 10003a4:	e0bffb17 	ldw	r2,-20(fp)
 10003a8:	10800044 	addi	r2,r2,1
 10003ac:	e0bffb15 	stw	r2,-20(fp)
 10003b0:	e0fffb17 	ldw	r3,-20(fp)
 10003b4:	00803c04 	movi	r2,240
 10003b8:	18bfee36 	bltu	r3,r2,1000374 <__alt_mem_TCDM+0xfefbf374>
	  }

	  usleep(500E3);

	  LCD_Write_Command(0x002CU);
	  for(int i = 0; i < picture_height_tuxAnimation_2; i++)
 10003bc:	e0bffa17 	ldw	r2,-24(fp)
 10003c0:	10800044 	addi	r2,r2,1
 10003c4:	e0bffa15 	stw	r2,-24(fp)
 10003c8:	e0fffa17 	ldw	r3,-24(fp)
 10003cc:	00805004 	movi	r2,320
 10003d0:	18bfe636 	bltu	r3,r2,100036c <__alt_mem_TCDM+0xfefbf36c>
		  {
			  LCD_Write_Data(picture_array_tuxAnimation_2[i][j]);
		  }
	  }

	  usleep(500E3);
 10003d4:	01000234 	movhi	r4,8
 10003d8:	21284804 	addi	r4,r4,-24288
 10003dc:	1003cc00 	call	1003cc0 <usleep>

	  LCD_Write_Command(0x002CU);
 10003e0:	01000b04 	movi	r4,44
 10003e4:	10006840 	call	1000684 <LCD_Write_Command>
	  for(int i = 0; i < picture_height_tuxAnimation_3; i++)
 10003e8:	e03ffc15 	stw	zero,-16(fp)
 10003ec:	00001706 	br	100044c <main+0x1bc>
	  {
		  for(int j = 0; j < picture_width_tuxAnimation_3; j++)
 10003f0:	e03ffd15 	stw	zero,-12(fp)
 10003f4:	00000f06 	br	1000434 <main+0x1a4>
		  {
			  LCD_Write_Data(picture_array_tuxAnimation_3[i][j]);
 10003f8:	00804174 	movhi	r2,261
 10003fc:	10912704 	addi	r2,r2,17564
 1000400:	e0fffc17 	ldw	r3,-16(fp)
 1000404:	19003c24 	muli	r4,r3,240
 1000408:	e0fffd17 	ldw	r3,-12(fp)
 100040c:	20c7883a 	add	r3,r4,r3
 1000410:	18c7883a 	add	r3,r3,r3
 1000414:	10c5883a 	add	r2,r2,r3
 1000418:	1080000b 	ldhu	r2,0(r2)
 100041c:	10bfffcc 	andi	r2,r2,65535
 1000420:	1009883a 	mov	r4,r2
 1000424:	10006b80 	call	10006b8 <LCD_Write_Data>
	  usleep(500E3);

	  LCD_Write_Command(0x002CU);
	  for(int i = 0; i < picture_height_tuxAnimation_3; i++)
	  {
		  for(int j = 0; j < picture_width_tuxAnimation_3; j++)
 1000428:	e0bffd17 	ldw	r2,-12(fp)
 100042c:	10800044 	addi	r2,r2,1
 1000430:	e0bffd15 	stw	r2,-12(fp)
 1000434:	e0fffd17 	ldw	r3,-12(fp)
 1000438:	00803c04 	movi	r2,240
 100043c:	18bfee36 	bltu	r3,r2,10003f8 <__alt_mem_TCDM+0xfefbf3f8>
	  }

	  usleep(500E3);

	  LCD_Write_Command(0x002CU);
	  for(int i = 0; i < picture_height_tuxAnimation_3; i++)
 1000440:	e0bffc17 	ldw	r2,-16(fp)
 1000444:	10800044 	addi	r2,r2,1
 1000448:	e0bffc15 	stw	r2,-16(fp)
 100044c:	e0fffc17 	ldw	r3,-16(fp)
 1000450:	00805004 	movi	r2,320
 1000454:	18bfe636 	bltu	r3,r2,10003f0 <__alt_mem_TCDM+0xfefbf3f0>
		  {
			  LCD_Write_Data(picture_array_tuxAnimation_3[i][j]);

		  }
	  }
	  usleep(500E3);
 1000458:	01000234 	movhi	r4,8
 100045c:	21284804 	addi	r4,r4,-24288
 1000460:	1003cc00 	call	1003cc0 <usleep>
  }
 1000464:	003f9c06 	br	10002d8 <__alt_mem_TCDM+0xfefbf2d8>

01000468 <init_LCD>:


  return 0;
}

void init_LCD() {
 1000468:	defffe04 	addi	sp,sp,-8
 100046c:	dfc00115 	stw	ra,4(sp)
 1000470:	df000015 	stw	fp,0(sp)
 1000474:	d839883a 	mov	fp,sp
	usleep(500E3);
 1000478:	01000234 	movhi	r4,8
 100047c:	21284804 	addi	r4,r4,-24288
 1000480:	1003cc00 	call	1003cc0 <usleep>

	LCD_Write_Command(0x0028);     //display OFF
 1000484:	01000a04 	movi	r4,40
 1000488:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Command(0x0011);     //exit SLEEP mode
 100048c:	01000444 	movi	r4,17
 1000490:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
 1000494:	0009883a 	mov	r4,zero
 1000498:	10006b80 	call	10006b8 <LCD_Write_Data>

	LCD_Write_Command(0x00CB);     //Power Control A
 100049c:	010032c4 	movi	r4,203
 10004a0:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Data(0x0039);     //always 0x39
 10004a4:	01000e44 	movi	r4,57
 10004a8:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x002C);     //always 0x2C
 10004ac:	01000b04 	movi	r4,44
 10004b0:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);     //always 0x00
 10004b4:	0009883a 	mov	r4,zero
 10004b8:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x0034);     //Vcore = 1.6V
 10004bc:	01000d04 	movi	r4,52
 10004c0:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x0002);     //DDVDH = 5.6V
 10004c4:	01000084 	movi	r4,2
 10004c8:	10006b80 	call	10006b8 <LCD_Write_Data>

	LCD_Write_Command(0x00CF);     //Power Control B
 10004cc:	010033c4 	movi	r4,207
 10004d0:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Data(0x0000);     //always 0x00
 10004d4:	0009883a 	mov	r4,zero
 10004d8:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x0081);     //PCEQ off
 10004dc:	01002044 	movi	r4,129
 10004e0:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x0030);     //ESD protection
 10004e4:	01000c04 	movi	r4,48
 10004e8:	10006b80 	call	10006b8 <LCD_Write_Data>

	LCD_Write_Command(0x00E8);     //Driver timing control A
 10004ec:	01003a04 	movi	r4,232
 10004f0:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Data(0x0085);     //non - overlap
 10004f4:	01002144 	movi	r4,133
 10004f8:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x0001);     //EQ timing
 10004fc:	01000044 	movi	r4,1
 1000500:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x0079);     //Pre-chargetiming
 1000504:	01001e44 	movi	r4,121
 1000508:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Command(0x00EA);     //Driver timing control B
 100050c:	01003a84 	movi	r4,234
 1000510:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Data(0x0000);        //Gate driver timing
 1000514:	0009883a 	mov	r4,zero
 1000518:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);        //always 0x00
 100051c:	0009883a 	mov	r4,zero
 1000520:	10006b80 	call	10006b8 <LCD_Write_Data>

	LCD_Write_Data(0x0064);        //soft start
 1000524:	01001904 	movi	r4,100
 1000528:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x0003);        //power on sequence
 100052c:	010000c4 	movi	r4,3
 1000530:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x0012);        //power on sequence
 1000534:	01000484 	movi	r4,18
 1000538:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x0081);        //DDVDH enhance on
 100053c:	01002044 	movi	r4,129
 1000540:	10006b80 	call	10006b8 <LCD_Write_Data>

	LCD_Write_Command(0x00F7);     //Pump ratio control
 1000544:	01003dc4 	movi	r4,247
 1000548:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Data(0x0020);     //DDVDH=2xVCI
 100054c:	01000804 	movi	r4,32
 1000550:	10006b80 	call	10006b8 <LCD_Write_Data>

	LCD_Write_Command(0x00C0);    //power control 1
 1000554:	01003004 	movi	r4,192
 1000558:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Data(0x0026);
 100055c:	01000984 	movi	r4,38
 1000560:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x0004);     //second parameter for ILI9340 (ignored by ILI9341)
 1000564:	01000104 	movi	r4,4
 1000568:	10006b80 	call	10006b8 <LCD_Write_Data>

	LCD_Write_Command(0x00C1);     //power control 2
 100056c:	01003044 	movi	r4,193
 1000570:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Data(0x0011);
 1000574:	01000444 	movi	r4,17
 1000578:	10006b80 	call	10006b8 <LCD_Write_Data>

	LCD_Write_Command(0x00C5);     //VCOM control 1
 100057c:	01003144 	movi	r4,197
 1000580:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Data(0x0035);
 1000584:	01000d44 	movi	r4,53
 1000588:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x003E);
 100058c:	01000f84 	movi	r4,62
 1000590:	10006b80 	call	10006b8 <LCD_Write_Data>

	LCD_Write_Command(0x00C7);     //VCOM control 2
 1000594:	010031c4 	movi	r4,199
 1000598:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Data(0x00BE);
 100059c:	01002f84 	movi	r4,190
 10005a0:	10006b80 	call	10006b8 <LCD_Write_Data>

	LCD_Write_Command(0x00B1);     //frame rate control
 10005a4:	01002c44 	movi	r4,177
 10005a8:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
 10005ac:	0009883a 	mov	r4,zero
 10005b0:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x0010);
 10005b4:	01000404 	movi	r4,16
 10005b8:	10006b80 	call	10006b8 <LCD_Write_Data>

	LCD_Write_Command(0x003A);    //pixel format = 16 bit per pixel
 10005bc:	01000e84 	movi	r4,58
 10005c0:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Data(0x0055);
 10005c4:	01001544 	movi	r4,85
 10005c8:	10006b80 	call	10006b8 <LCD_Write_Data>

	LCD_Write_Command(0x00B6);     //display function control
 10005cc:	01002d84 	movi	r4,182
 10005d0:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Data(0x000A);
 10005d4:	01000284 	movi	r4,10
 10005d8:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x00A2);
 10005dc:	01002884 	movi	r4,162
 10005e0:	10006b80 	call	10006b8 <LCD_Write_Data>

	LCD_Write_Command(0x00F2);     //3G Gamma control
 10005e4:	01003c84 	movi	r4,242
 10005e8:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Data(0x0002);         //off
 10005ec:	01000084 	movi	r4,2
 10005f0:	10006b80 	call	10006b8 <LCD_Write_Data>

	LCD_Write_Command(0x0026);     //Gamma curve 3
 10005f4:	01000984 	movi	r4,38
 10005f8:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Data(0x0001);
 10005fc:	01000044 	movi	r4,1
 1000600:	10006b80 	call	10006b8 <LCD_Write_Data>

	LCD_Write_Command(0x0036);     //memory access control = BGR
 1000604:	01000d84 	movi	r4,54
 1000608:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
 100060c:	0009883a 	mov	r4,zero
 1000610:	10006b80 	call	10006b8 <LCD_Write_Data>

	LCD_Write_Command(0x002A);     //column address set
 1000614:	01000a84 	movi	r4,42
 1000618:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
 100061c:	0009883a 	mov	r4,zero
 1000620:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);        //start 0x0000
 1000624:	0009883a 	mov	r4,zero
 1000628:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);
 100062c:	0009883a 	mov	r4,zero
 1000630:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x00EF);        //end 0x00EF
 1000634:	01003bc4 	movi	r4,239
 1000638:	10006b80 	call	10006b8 <LCD_Write_Data>

	LCD_Write_Command(0x002B);    //page address set
 100063c:	01000ac4 	movi	r4,43
 1000640:	10006840 	call	1000684 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
 1000644:	0009883a 	mov	r4,zero
 1000648:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);        //start 0x0000
 100064c:	0009883a 	mov	r4,zero
 1000650:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x0001);
 1000654:	01000044 	movi	r4,1
 1000658:	10006b80 	call	10006b8 <LCD_Write_Data>
	LCD_Write_Data(0x003F);        //end 0x013F
 100065c:	01000fc4 	movi	r4,63
 1000660:	10006b80 	call	10006b8 <LCD_Write_Data>

	LCD_Write_Command(0x0029);
 1000664:	01000a44 	movi	r4,41
 1000668:	10006840 	call	1000684 <LCD_Write_Command>

}
 100066c:	0001883a 	nop
 1000670:	e037883a 	mov	sp,fp
 1000674:	dfc00117 	ldw	ra,4(sp)
 1000678:	df000017 	ldw	fp,0(sp)
 100067c:	dec00204 	addi	sp,sp,8
 1000680:	f800283a 	ret

01000684 <LCD_Write_Command>:

void LCD_Write_Command(int command) {
 1000684:	defffe04 	addi	sp,sp,-8
 1000688:	df000115 	stw	fp,4(sp)
 100068c:	df000104 	addi	fp,sp,4
 1000690:	e13fff15 	stw	r4,-4(fp)
  IOWR_16DIRECT(LCD_BASE, LCD_REG_WRITECMD, command);
 1000694:	008080b4 	movhi	r2,514
 1000698:	10800104 	addi	r2,r2,4
 100069c:	e0ffff0b 	ldhu	r3,-4(fp)
 10006a0:	10c0002d 	sthio	r3,0(r2)
}
 10006a4:	0001883a 	nop
 10006a8:	e037883a 	mov	sp,fp
 10006ac:	df000017 	ldw	fp,0(sp)
 10006b0:	dec00104 	addi	sp,sp,4
 10006b4:	f800283a 	ret

010006b8 <LCD_Write_Data>:

void LCD_Write_Data(int data) {
 10006b8:	defffe04 	addi	sp,sp,-8
 10006bc:	df000115 	stw	fp,4(sp)
 10006c0:	df000104 	addi	fp,sp,4
 10006c4:	e13fff15 	stw	r4,-4(fp)
  IOWR_16DIRECT(LCD_BASE, LCD_REG_WRITEDATA,data);
 10006c8:	008080b4 	movhi	r2,514
 10006cc:	e0ffff0b 	ldhu	r3,-4(fp)
 10006d0:	10c0002d 	sthio	r3,0(r2)
}
 10006d4:	0001883a 	nop
 10006d8:	e037883a 	mov	sp,fp
 10006dc:	df000017 	ldw	fp,0(sp)
 10006e0:	dec00104 	addi	sp,sp,4
 10006e4:	f800283a 	ret

010006e8 <_puts_r>:
 10006e8:	defff604 	addi	sp,sp,-40
 10006ec:	dc000715 	stw	r16,28(sp)
 10006f0:	2021883a 	mov	r16,r4
 10006f4:	2809883a 	mov	r4,r5
 10006f8:	dc400815 	stw	r17,32(sp)
 10006fc:	dfc00915 	stw	ra,36(sp)
 1000700:	2823883a 	mov	r17,r5
 1000704:	10007bc0 	call	10007bc <strlen>
 1000708:	10c00044 	addi	r3,r2,1
 100070c:	d8800115 	stw	r2,4(sp)
 1000710:	00804034 	movhi	r2,256
 1000714:	10978304 	addi	r2,r2,24076
 1000718:	d8800215 	stw	r2,8(sp)
 100071c:	00800044 	movi	r2,1
 1000720:	d8800315 	stw	r2,12(sp)
 1000724:	00800084 	movi	r2,2
 1000728:	dc400015 	stw	r17,0(sp)
 100072c:	d8c00615 	stw	r3,24(sp)
 1000730:	dec00415 	stw	sp,16(sp)
 1000734:	d8800515 	stw	r2,20(sp)
 1000738:	80000226 	beq	r16,zero,1000744 <_puts_r+0x5c>
 100073c:	80800e17 	ldw	r2,56(r16)
 1000740:	10001426 	beq	r2,zero,1000794 <_puts_r+0xac>
 1000744:	81400217 	ldw	r5,8(r16)
 1000748:	2880030b 	ldhu	r2,12(r5)
 100074c:	10c8000c 	andi	r3,r2,8192
 1000750:	1800061e 	bne	r3,zero,100076c <_puts_r+0x84>
 1000754:	29001917 	ldw	r4,100(r5)
 1000758:	00f7ffc4 	movi	r3,-8193
 100075c:	10880014 	ori	r2,r2,8192
 1000760:	20c6703a 	and	r3,r4,r3
 1000764:	2880030d 	sth	r2,12(r5)
 1000768:	28c01915 	stw	r3,100(r5)
 100076c:	d9800404 	addi	r6,sp,16
 1000770:	8009883a 	mov	r4,r16
 1000774:	1000bf40 	call	1000bf4 <__sfvwrite_r>
 1000778:	1000091e 	bne	r2,zero,10007a0 <_puts_r+0xb8>
 100077c:	00800284 	movi	r2,10
 1000780:	dfc00917 	ldw	ra,36(sp)
 1000784:	dc400817 	ldw	r17,32(sp)
 1000788:	dc000717 	ldw	r16,28(sp)
 100078c:	dec00a04 	addi	sp,sp,40
 1000790:	f800283a 	ret
 1000794:	8009883a 	mov	r4,r16
 1000798:	1000ba40 	call	1000ba4 <__sinit>
 100079c:	003fe906 	br	1000744 <__alt_mem_TCDM+0xfefbf744>
 10007a0:	00bfffc4 	movi	r2,-1
 10007a4:	003ff606 	br	1000780 <__alt_mem_TCDM+0xfefbf780>

010007a8 <puts>:
 10007a8:	00804034 	movhi	r2,256
 10007ac:	109e2404 	addi	r2,r2,30864
 10007b0:	200b883a 	mov	r5,r4
 10007b4:	11000017 	ldw	r4,0(r2)
 10007b8:	10006e81 	jmpi	10006e8 <_puts_r>

010007bc <strlen>:
 10007bc:	208000cc 	andi	r2,r4,3
 10007c0:	10002026 	beq	r2,zero,1000844 <strlen+0x88>
 10007c4:	20800007 	ldb	r2,0(r4)
 10007c8:	10002026 	beq	r2,zero,100084c <strlen+0x90>
 10007cc:	2005883a 	mov	r2,r4
 10007d0:	00000206 	br	10007dc <strlen+0x20>
 10007d4:	10c00007 	ldb	r3,0(r2)
 10007d8:	18001826 	beq	r3,zero,100083c <strlen+0x80>
 10007dc:	10800044 	addi	r2,r2,1
 10007e0:	10c000cc 	andi	r3,r2,3
 10007e4:	183ffb1e 	bne	r3,zero,10007d4 <__alt_mem_TCDM+0xfefbf7d4>
 10007e8:	10c00017 	ldw	r3,0(r2)
 10007ec:	01ffbff4 	movhi	r7,65279
 10007f0:	39ffbfc4 	addi	r7,r7,-257
 10007f4:	00ca303a 	nor	r5,zero,r3
 10007f8:	01a02074 	movhi	r6,32897
 10007fc:	19c7883a 	add	r3,r3,r7
 1000800:	31a02004 	addi	r6,r6,-32640
 1000804:	1946703a 	and	r3,r3,r5
 1000808:	1986703a 	and	r3,r3,r6
 100080c:	1800091e 	bne	r3,zero,1000834 <strlen+0x78>
 1000810:	10800104 	addi	r2,r2,4
 1000814:	10c00017 	ldw	r3,0(r2)
 1000818:	19cb883a 	add	r5,r3,r7
 100081c:	00c6303a 	nor	r3,zero,r3
 1000820:	28c6703a 	and	r3,r5,r3
 1000824:	1986703a 	and	r3,r3,r6
 1000828:	183ff926 	beq	r3,zero,1000810 <__alt_mem_TCDM+0xfefbf810>
 100082c:	00000106 	br	1000834 <strlen+0x78>
 1000830:	10800044 	addi	r2,r2,1
 1000834:	10c00007 	ldb	r3,0(r2)
 1000838:	183ffd1e 	bne	r3,zero,1000830 <__alt_mem_TCDM+0xfefbf830>
 100083c:	1105c83a 	sub	r2,r2,r4
 1000840:	f800283a 	ret
 1000844:	2005883a 	mov	r2,r4
 1000848:	003fe706 	br	10007e8 <__alt_mem_TCDM+0xfefbf7e8>
 100084c:	0005883a 	mov	r2,zero
 1000850:	f800283a 	ret

01000854 <__fp_unlock>:
 1000854:	0005883a 	mov	r2,zero
 1000858:	f800283a 	ret

0100085c <_cleanup_r>:
 100085c:	01404034 	movhi	r5,256
 1000860:	2949fc04 	addi	r5,r5,10224
 1000864:	10011741 	jmpi	1001174 <_fwalk_reent>

01000868 <__sinit.part.1>:
 1000868:	defff704 	addi	sp,sp,-36
 100086c:	00c04034 	movhi	r3,256
 1000870:	dfc00815 	stw	ra,32(sp)
 1000874:	ddc00715 	stw	r23,28(sp)
 1000878:	dd800615 	stw	r22,24(sp)
 100087c:	dd400515 	stw	r21,20(sp)
 1000880:	dd000415 	stw	r20,16(sp)
 1000884:	dcc00315 	stw	r19,12(sp)
 1000888:	dc800215 	stw	r18,8(sp)
 100088c:	dc400115 	stw	r17,4(sp)
 1000890:	dc000015 	stw	r16,0(sp)
 1000894:	18c21704 	addi	r3,r3,2140
 1000898:	24000117 	ldw	r16,4(r4)
 100089c:	20c00f15 	stw	r3,60(r4)
 10008a0:	2080bb04 	addi	r2,r4,748
 10008a4:	00c000c4 	movi	r3,3
 10008a8:	20c0b915 	stw	r3,740(r4)
 10008ac:	2080ba15 	stw	r2,744(r4)
 10008b0:	2000b815 	stw	zero,736(r4)
 10008b4:	05c00204 	movi	r23,8
 10008b8:	00800104 	movi	r2,4
 10008bc:	2025883a 	mov	r18,r4
 10008c0:	b80d883a 	mov	r6,r23
 10008c4:	81001704 	addi	r4,r16,92
 10008c8:	000b883a 	mov	r5,zero
 10008cc:	80000015 	stw	zero,0(r16)
 10008d0:	80000115 	stw	zero,4(r16)
 10008d4:	80000215 	stw	zero,8(r16)
 10008d8:	8080030d 	sth	r2,12(r16)
 10008dc:	80001915 	stw	zero,100(r16)
 10008e0:	8000038d 	sth	zero,14(r16)
 10008e4:	80000415 	stw	zero,16(r16)
 10008e8:	80000515 	stw	zero,20(r16)
 10008ec:	80000615 	stw	zero,24(r16)
 10008f0:	1001dcc0 	call	1001dcc <memset>
 10008f4:	05804034 	movhi	r22,256
 10008f8:	94400217 	ldw	r17,8(r18)
 10008fc:	05404034 	movhi	r21,256
 1000900:	05004034 	movhi	r20,256
 1000904:	04c04034 	movhi	r19,256
 1000908:	b5892b04 	addi	r22,r22,9388
 100090c:	ad494204 	addi	r21,r21,9480
 1000910:	a5096104 	addi	r20,r20,9604
 1000914:	9cc97804 	addi	r19,r19,9696
 1000918:	85800815 	stw	r22,32(r16)
 100091c:	85400915 	stw	r21,36(r16)
 1000920:	85000a15 	stw	r20,40(r16)
 1000924:	84c00b15 	stw	r19,44(r16)
 1000928:	84000715 	stw	r16,28(r16)
 100092c:	00800284 	movi	r2,10
 1000930:	8880030d 	sth	r2,12(r17)
 1000934:	00800044 	movi	r2,1
 1000938:	b80d883a 	mov	r6,r23
 100093c:	89001704 	addi	r4,r17,92
 1000940:	000b883a 	mov	r5,zero
 1000944:	88000015 	stw	zero,0(r17)
 1000948:	88000115 	stw	zero,4(r17)
 100094c:	88000215 	stw	zero,8(r17)
 1000950:	88001915 	stw	zero,100(r17)
 1000954:	8880038d 	sth	r2,14(r17)
 1000958:	88000415 	stw	zero,16(r17)
 100095c:	88000515 	stw	zero,20(r17)
 1000960:	88000615 	stw	zero,24(r17)
 1000964:	1001dcc0 	call	1001dcc <memset>
 1000968:	94000317 	ldw	r16,12(r18)
 100096c:	00800484 	movi	r2,18
 1000970:	8c400715 	stw	r17,28(r17)
 1000974:	8d800815 	stw	r22,32(r17)
 1000978:	8d400915 	stw	r21,36(r17)
 100097c:	8d000a15 	stw	r20,40(r17)
 1000980:	8cc00b15 	stw	r19,44(r17)
 1000984:	8080030d 	sth	r2,12(r16)
 1000988:	00800084 	movi	r2,2
 100098c:	80000015 	stw	zero,0(r16)
 1000990:	80000115 	stw	zero,4(r16)
 1000994:	80000215 	stw	zero,8(r16)
 1000998:	80001915 	stw	zero,100(r16)
 100099c:	8080038d 	sth	r2,14(r16)
 10009a0:	80000415 	stw	zero,16(r16)
 10009a4:	80000515 	stw	zero,20(r16)
 10009a8:	80000615 	stw	zero,24(r16)
 10009ac:	b80d883a 	mov	r6,r23
 10009b0:	000b883a 	mov	r5,zero
 10009b4:	81001704 	addi	r4,r16,92
 10009b8:	1001dcc0 	call	1001dcc <memset>
 10009bc:	00800044 	movi	r2,1
 10009c0:	84000715 	stw	r16,28(r16)
 10009c4:	85800815 	stw	r22,32(r16)
 10009c8:	85400915 	stw	r21,36(r16)
 10009cc:	85000a15 	stw	r20,40(r16)
 10009d0:	84c00b15 	stw	r19,44(r16)
 10009d4:	90800e15 	stw	r2,56(r18)
 10009d8:	dfc00817 	ldw	ra,32(sp)
 10009dc:	ddc00717 	ldw	r23,28(sp)
 10009e0:	dd800617 	ldw	r22,24(sp)
 10009e4:	dd400517 	ldw	r21,20(sp)
 10009e8:	dd000417 	ldw	r20,16(sp)
 10009ec:	dcc00317 	ldw	r19,12(sp)
 10009f0:	dc800217 	ldw	r18,8(sp)
 10009f4:	dc400117 	ldw	r17,4(sp)
 10009f8:	dc000017 	ldw	r16,0(sp)
 10009fc:	dec00904 	addi	sp,sp,36
 1000a00:	f800283a 	ret

01000a04 <__fp_lock>:
 1000a04:	0005883a 	mov	r2,zero
 1000a08:	f800283a 	ret

01000a0c <__sfmoreglue>:
 1000a0c:	defffc04 	addi	sp,sp,-16
 1000a10:	dc400115 	stw	r17,4(sp)
 1000a14:	2c7fffc4 	addi	r17,r5,-1
 1000a18:	8c401a24 	muli	r17,r17,104
 1000a1c:	dc800215 	stw	r18,8(sp)
 1000a20:	2825883a 	mov	r18,r5
 1000a24:	89401d04 	addi	r5,r17,116
 1000a28:	dc000015 	stw	r16,0(sp)
 1000a2c:	dfc00315 	stw	ra,12(sp)
 1000a30:	10012380 	call	1001238 <_malloc_r>
 1000a34:	1021883a 	mov	r16,r2
 1000a38:	10000726 	beq	r2,zero,1000a58 <__sfmoreglue+0x4c>
 1000a3c:	11000304 	addi	r4,r2,12
 1000a40:	10000015 	stw	zero,0(r2)
 1000a44:	14800115 	stw	r18,4(r2)
 1000a48:	11000215 	stw	r4,8(r2)
 1000a4c:	89801a04 	addi	r6,r17,104
 1000a50:	000b883a 	mov	r5,zero
 1000a54:	1001dcc0 	call	1001dcc <memset>
 1000a58:	8005883a 	mov	r2,r16
 1000a5c:	dfc00317 	ldw	ra,12(sp)
 1000a60:	dc800217 	ldw	r18,8(sp)
 1000a64:	dc400117 	ldw	r17,4(sp)
 1000a68:	dc000017 	ldw	r16,0(sp)
 1000a6c:	dec00404 	addi	sp,sp,16
 1000a70:	f800283a 	ret

01000a74 <__sfp>:
 1000a74:	defffb04 	addi	sp,sp,-20
 1000a78:	dc000015 	stw	r16,0(sp)
 1000a7c:	04004034 	movhi	r16,256
 1000a80:	841e2304 	addi	r16,r16,30860
 1000a84:	dcc00315 	stw	r19,12(sp)
 1000a88:	2027883a 	mov	r19,r4
 1000a8c:	81000017 	ldw	r4,0(r16)
 1000a90:	dfc00415 	stw	ra,16(sp)
 1000a94:	dc800215 	stw	r18,8(sp)
 1000a98:	20800e17 	ldw	r2,56(r4)
 1000a9c:	dc400115 	stw	r17,4(sp)
 1000aa0:	1000021e 	bne	r2,zero,1000aac <__sfp+0x38>
 1000aa4:	10008680 	call	1000868 <__sinit.part.1>
 1000aa8:	81000017 	ldw	r4,0(r16)
 1000aac:	2480b804 	addi	r18,r4,736
 1000ab0:	047fffc4 	movi	r17,-1
 1000ab4:	91000117 	ldw	r4,4(r18)
 1000ab8:	94000217 	ldw	r16,8(r18)
 1000abc:	213fffc4 	addi	r4,r4,-1
 1000ac0:	20000a16 	blt	r4,zero,1000aec <__sfp+0x78>
 1000ac4:	8080030f 	ldh	r2,12(r16)
 1000ac8:	10000c26 	beq	r2,zero,1000afc <__sfp+0x88>
 1000acc:	80c01d04 	addi	r3,r16,116
 1000ad0:	00000206 	br	1000adc <__sfp+0x68>
 1000ad4:	18bfe60f 	ldh	r2,-104(r3)
 1000ad8:	10000826 	beq	r2,zero,1000afc <__sfp+0x88>
 1000adc:	213fffc4 	addi	r4,r4,-1
 1000ae0:	1c3ffd04 	addi	r16,r3,-12
 1000ae4:	18c01a04 	addi	r3,r3,104
 1000ae8:	247ffa1e 	bne	r4,r17,1000ad4 <__alt_mem_TCDM+0xfefbfad4>
 1000aec:	90800017 	ldw	r2,0(r18)
 1000af0:	10001d26 	beq	r2,zero,1000b68 <__sfp+0xf4>
 1000af4:	1025883a 	mov	r18,r2
 1000af8:	003fee06 	br	1000ab4 <__alt_mem_TCDM+0xfefbfab4>
 1000afc:	00bfffc4 	movi	r2,-1
 1000b00:	8080038d 	sth	r2,14(r16)
 1000b04:	00800044 	movi	r2,1
 1000b08:	8080030d 	sth	r2,12(r16)
 1000b0c:	80001915 	stw	zero,100(r16)
 1000b10:	80000015 	stw	zero,0(r16)
 1000b14:	80000215 	stw	zero,8(r16)
 1000b18:	80000115 	stw	zero,4(r16)
 1000b1c:	80000415 	stw	zero,16(r16)
 1000b20:	80000515 	stw	zero,20(r16)
 1000b24:	80000615 	stw	zero,24(r16)
 1000b28:	01800204 	movi	r6,8
 1000b2c:	000b883a 	mov	r5,zero
 1000b30:	81001704 	addi	r4,r16,92
 1000b34:	1001dcc0 	call	1001dcc <memset>
 1000b38:	8005883a 	mov	r2,r16
 1000b3c:	80000c15 	stw	zero,48(r16)
 1000b40:	80000d15 	stw	zero,52(r16)
 1000b44:	80001115 	stw	zero,68(r16)
 1000b48:	80001215 	stw	zero,72(r16)
 1000b4c:	dfc00417 	ldw	ra,16(sp)
 1000b50:	dcc00317 	ldw	r19,12(sp)
 1000b54:	dc800217 	ldw	r18,8(sp)
 1000b58:	dc400117 	ldw	r17,4(sp)
 1000b5c:	dc000017 	ldw	r16,0(sp)
 1000b60:	dec00504 	addi	sp,sp,20
 1000b64:	f800283a 	ret
 1000b68:	01400104 	movi	r5,4
 1000b6c:	9809883a 	mov	r4,r19
 1000b70:	1000a0c0 	call	1000a0c <__sfmoreglue>
 1000b74:	90800015 	stw	r2,0(r18)
 1000b78:	103fde1e 	bne	r2,zero,1000af4 <__alt_mem_TCDM+0xfefbfaf4>
 1000b7c:	00800304 	movi	r2,12
 1000b80:	98800015 	stw	r2,0(r19)
 1000b84:	0005883a 	mov	r2,zero
 1000b88:	003ff006 	br	1000b4c <__alt_mem_TCDM+0xfefbfb4c>

01000b8c <_cleanup>:
 1000b8c:	00804034 	movhi	r2,256
 1000b90:	109e2304 	addi	r2,r2,30860
 1000b94:	11000017 	ldw	r4,0(r2)
 1000b98:	01404034 	movhi	r5,256
 1000b9c:	2949fc04 	addi	r5,r5,10224
 1000ba0:	10011741 	jmpi	1001174 <_fwalk_reent>

01000ba4 <__sinit>:
 1000ba4:	20800e17 	ldw	r2,56(r4)
 1000ba8:	10000126 	beq	r2,zero,1000bb0 <__sinit+0xc>
 1000bac:	f800283a 	ret
 1000bb0:	10008681 	jmpi	1000868 <__sinit.part.1>

01000bb4 <__sfp_lock_acquire>:
 1000bb4:	f800283a 	ret

01000bb8 <__sfp_lock_release>:
 1000bb8:	f800283a 	ret

01000bbc <__sinit_lock_acquire>:
 1000bbc:	f800283a 	ret

01000bc0 <__sinit_lock_release>:
 1000bc0:	f800283a 	ret

01000bc4 <__fp_lock_all>:
 1000bc4:	00804034 	movhi	r2,256
 1000bc8:	109e2404 	addi	r2,r2,30864
 1000bcc:	11000017 	ldw	r4,0(r2)
 1000bd0:	01404034 	movhi	r5,256
 1000bd4:	29428104 	addi	r5,r5,2564
 1000bd8:	10010b01 	jmpi	10010b0 <_fwalk>

01000bdc <__fp_unlock_all>:
 1000bdc:	00804034 	movhi	r2,256
 1000be0:	109e2404 	addi	r2,r2,30864
 1000be4:	11000017 	ldw	r4,0(r2)
 1000be8:	01404034 	movhi	r5,256
 1000bec:	29421504 	addi	r5,r5,2132
 1000bf0:	10010b01 	jmpi	10010b0 <_fwalk>

01000bf4 <__sfvwrite_r>:
 1000bf4:	30800217 	ldw	r2,8(r6)
 1000bf8:	10006726 	beq	r2,zero,1000d98 <__sfvwrite_r+0x1a4>
 1000bfc:	28c0030b 	ldhu	r3,12(r5)
 1000c00:	defff404 	addi	sp,sp,-48
 1000c04:	dd400715 	stw	r21,28(sp)
 1000c08:	dd000615 	stw	r20,24(sp)
 1000c0c:	dc000215 	stw	r16,8(sp)
 1000c10:	dfc00b15 	stw	ra,44(sp)
 1000c14:	df000a15 	stw	fp,40(sp)
 1000c18:	ddc00915 	stw	r23,36(sp)
 1000c1c:	dd800815 	stw	r22,32(sp)
 1000c20:	dcc00515 	stw	r19,20(sp)
 1000c24:	dc800415 	stw	r18,16(sp)
 1000c28:	dc400315 	stw	r17,12(sp)
 1000c2c:	1880020c 	andi	r2,r3,8
 1000c30:	2821883a 	mov	r16,r5
 1000c34:	202b883a 	mov	r21,r4
 1000c38:	3029883a 	mov	r20,r6
 1000c3c:	10002726 	beq	r2,zero,1000cdc <__sfvwrite_r+0xe8>
 1000c40:	28800417 	ldw	r2,16(r5)
 1000c44:	10002526 	beq	r2,zero,1000cdc <__sfvwrite_r+0xe8>
 1000c48:	1880008c 	andi	r2,r3,2
 1000c4c:	a4400017 	ldw	r17,0(r20)
 1000c50:	10002a26 	beq	r2,zero,1000cfc <__sfvwrite_r+0x108>
 1000c54:	05a00034 	movhi	r22,32768
 1000c58:	0027883a 	mov	r19,zero
 1000c5c:	0025883a 	mov	r18,zero
 1000c60:	b5bf0004 	addi	r22,r22,-1024
 1000c64:	980d883a 	mov	r6,r19
 1000c68:	a809883a 	mov	r4,r21
 1000c6c:	90004626 	beq	r18,zero,1000d88 <__sfvwrite_r+0x194>
 1000c70:	900f883a 	mov	r7,r18
 1000c74:	b480022e 	bgeu	r22,r18,1000c80 <__sfvwrite_r+0x8c>
 1000c78:	01e00034 	movhi	r7,32768
 1000c7c:	39ff0004 	addi	r7,r7,-1024
 1000c80:	80800917 	ldw	r2,36(r16)
 1000c84:	81400717 	ldw	r5,28(r16)
 1000c88:	103ee83a 	callr	r2
 1000c8c:	0080570e 	bge	zero,r2,1000dec <__sfvwrite_r+0x1f8>
 1000c90:	a0c00217 	ldw	r3,8(r20)
 1000c94:	98a7883a 	add	r19,r19,r2
 1000c98:	90a5c83a 	sub	r18,r18,r2
 1000c9c:	1885c83a 	sub	r2,r3,r2
 1000ca0:	a0800215 	stw	r2,8(r20)
 1000ca4:	103fef1e 	bne	r2,zero,1000c64 <__alt_mem_TCDM+0xfefbfc64>
 1000ca8:	0005883a 	mov	r2,zero
 1000cac:	dfc00b17 	ldw	ra,44(sp)
 1000cb0:	df000a17 	ldw	fp,40(sp)
 1000cb4:	ddc00917 	ldw	r23,36(sp)
 1000cb8:	dd800817 	ldw	r22,32(sp)
 1000cbc:	dd400717 	ldw	r21,28(sp)
 1000cc0:	dd000617 	ldw	r20,24(sp)
 1000cc4:	dcc00517 	ldw	r19,20(sp)
 1000cc8:	dc800417 	ldw	r18,16(sp)
 1000ccc:	dc400317 	ldw	r17,12(sp)
 1000cd0:	dc000217 	ldw	r16,8(sp)
 1000cd4:	dec00c04 	addi	sp,sp,48
 1000cd8:	f800283a 	ret
 1000cdc:	800b883a 	mov	r5,r16
 1000ce0:	a809883a 	mov	r4,r21
 1000ce4:	10026480 	call	1002648 <__swsetup_r>
 1000ce8:	1000eb1e 	bne	r2,zero,1001098 <__sfvwrite_r+0x4a4>
 1000cec:	80c0030b 	ldhu	r3,12(r16)
 1000cf0:	a4400017 	ldw	r17,0(r20)
 1000cf4:	1880008c 	andi	r2,r3,2
 1000cf8:	103fd61e 	bne	r2,zero,1000c54 <__alt_mem_TCDM+0xfefbfc54>
 1000cfc:	1880004c 	andi	r2,r3,1
 1000d00:	10003f1e 	bne	r2,zero,1000e00 <__sfvwrite_r+0x20c>
 1000d04:	0039883a 	mov	fp,zero
 1000d08:	0025883a 	mov	r18,zero
 1000d0c:	90001a26 	beq	r18,zero,1000d78 <__sfvwrite_r+0x184>
 1000d10:	1880800c 	andi	r2,r3,512
 1000d14:	84c00217 	ldw	r19,8(r16)
 1000d18:	10002126 	beq	r2,zero,1000da0 <__sfvwrite_r+0x1ac>
 1000d1c:	982f883a 	mov	r23,r19
 1000d20:	94c09336 	bltu	r18,r19,1000f70 <__sfvwrite_r+0x37c>
 1000d24:	1881200c 	andi	r2,r3,1152
 1000d28:	10009e1e 	bne	r2,zero,1000fa4 <__sfvwrite_r+0x3b0>
 1000d2c:	81000017 	ldw	r4,0(r16)
 1000d30:	b80d883a 	mov	r6,r23
 1000d34:	e00b883a 	mov	r5,fp
 1000d38:	1001c700 	call	1001c70 <memmove>
 1000d3c:	80c00217 	ldw	r3,8(r16)
 1000d40:	81000017 	ldw	r4,0(r16)
 1000d44:	9005883a 	mov	r2,r18
 1000d48:	1ce7c83a 	sub	r19,r3,r19
 1000d4c:	25cf883a 	add	r7,r4,r23
 1000d50:	84c00215 	stw	r19,8(r16)
 1000d54:	81c00015 	stw	r7,0(r16)
 1000d58:	a0c00217 	ldw	r3,8(r20)
 1000d5c:	e0b9883a 	add	fp,fp,r2
 1000d60:	90a5c83a 	sub	r18,r18,r2
 1000d64:	18a7c83a 	sub	r19,r3,r2
 1000d68:	a4c00215 	stw	r19,8(r20)
 1000d6c:	983fce26 	beq	r19,zero,1000ca8 <__alt_mem_TCDM+0xfefbfca8>
 1000d70:	80c0030b 	ldhu	r3,12(r16)
 1000d74:	903fe61e 	bne	r18,zero,1000d10 <__alt_mem_TCDM+0xfefbfd10>
 1000d78:	8f000017 	ldw	fp,0(r17)
 1000d7c:	8c800117 	ldw	r18,4(r17)
 1000d80:	8c400204 	addi	r17,r17,8
 1000d84:	003fe106 	br	1000d0c <__alt_mem_TCDM+0xfefbfd0c>
 1000d88:	8cc00017 	ldw	r19,0(r17)
 1000d8c:	8c800117 	ldw	r18,4(r17)
 1000d90:	8c400204 	addi	r17,r17,8
 1000d94:	003fb306 	br	1000c64 <__alt_mem_TCDM+0xfefbfc64>
 1000d98:	0005883a 	mov	r2,zero
 1000d9c:	f800283a 	ret
 1000da0:	81000017 	ldw	r4,0(r16)
 1000da4:	80800417 	ldw	r2,16(r16)
 1000da8:	11005736 	bltu	r2,r4,1000f08 <__sfvwrite_r+0x314>
 1000dac:	85c00517 	ldw	r23,20(r16)
 1000db0:	95c05536 	bltu	r18,r23,1000f08 <__sfvwrite_r+0x314>
 1000db4:	00a00034 	movhi	r2,32768
 1000db8:	10bfffc4 	addi	r2,r2,-1
 1000dbc:	9009883a 	mov	r4,r18
 1000dc0:	1480012e 	bgeu	r2,r18,1000dc8 <__sfvwrite_r+0x1d4>
 1000dc4:	1009883a 	mov	r4,r2
 1000dc8:	b80b883a 	mov	r5,r23
 1000dcc:	10032fc0 	call	10032fc <__divsi3>
 1000dd0:	15cf383a 	mul	r7,r2,r23
 1000dd4:	81400717 	ldw	r5,28(r16)
 1000dd8:	80800917 	ldw	r2,36(r16)
 1000ddc:	e00d883a 	mov	r6,fp
 1000de0:	a809883a 	mov	r4,r21
 1000de4:	103ee83a 	callr	r2
 1000de8:	00bfdb16 	blt	zero,r2,1000d58 <__alt_mem_TCDM+0xfefbfd58>
 1000dec:	8080030b 	ldhu	r2,12(r16)
 1000df0:	10801014 	ori	r2,r2,64
 1000df4:	8080030d 	sth	r2,12(r16)
 1000df8:	00bfffc4 	movi	r2,-1
 1000dfc:	003fab06 	br	1000cac <__alt_mem_TCDM+0xfefbfcac>
 1000e00:	0027883a 	mov	r19,zero
 1000e04:	0011883a 	mov	r8,zero
 1000e08:	0039883a 	mov	fp,zero
 1000e0c:	0025883a 	mov	r18,zero
 1000e10:	90001f26 	beq	r18,zero,1000e90 <__sfvwrite_r+0x29c>
 1000e14:	40005a26 	beq	r8,zero,1000f80 <__sfvwrite_r+0x38c>
 1000e18:	982d883a 	mov	r22,r19
 1000e1c:	94c0012e 	bgeu	r18,r19,1000e24 <__sfvwrite_r+0x230>
 1000e20:	902d883a 	mov	r22,r18
 1000e24:	81000017 	ldw	r4,0(r16)
 1000e28:	80800417 	ldw	r2,16(r16)
 1000e2c:	b02f883a 	mov	r23,r22
 1000e30:	81c00517 	ldw	r7,20(r16)
 1000e34:	1100032e 	bgeu	r2,r4,1000e44 <__sfvwrite_r+0x250>
 1000e38:	80c00217 	ldw	r3,8(r16)
 1000e3c:	38c7883a 	add	r3,r7,r3
 1000e40:	1d801816 	blt	r3,r22,1000ea4 <__sfvwrite_r+0x2b0>
 1000e44:	b1c03e16 	blt	r22,r7,1000f40 <__sfvwrite_r+0x34c>
 1000e48:	80800917 	ldw	r2,36(r16)
 1000e4c:	81400717 	ldw	r5,28(r16)
 1000e50:	e00d883a 	mov	r6,fp
 1000e54:	da000115 	stw	r8,4(sp)
 1000e58:	a809883a 	mov	r4,r21
 1000e5c:	103ee83a 	callr	r2
 1000e60:	102f883a 	mov	r23,r2
 1000e64:	da000117 	ldw	r8,4(sp)
 1000e68:	00bfe00e 	bge	zero,r2,1000dec <__alt_mem_TCDM+0xfefbfdec>
 1000e6c:	9de7c83a 	sub	r19,r19,r23
 1000e70:	98001f26 	beq	r19,zero,1000ef0 <__sfvwrite_r+0x2fc>
 1000e74:	a0800217 	ldw	r2,8(r20)
 1000e78:	e5f9883a 	add	fp,fp,r23
 1000e7c:	95e5c83a 	sub	r18,r18,r23
 1000e80:	15efc83a 	sub	r23,r2,r23
 1000e84:	a5c00215 	stw	r23,8(r20)
 1000e88:	b83f8726 	beq	r23,zero,1000ca8 <__alt_mem_TCDM+0xfefbfca8>
 1000e8c:	903fe11e 	bne	r18,zero,1000e14 <__alt_mem_TCDM+0xfefbfe14>
 1000e90:	8f000017 	ldw	fp,0(r17)
 1000e94:	8c800117 	ldw	r18,4(r17)
 1000e98:	0011883a 	mov	r8,zero
 1000e9c:	8c400204 	addi	r17,r17,8
 1000ea0:	003fdb06 	br	1000e10 <__alt_mem_TCDM+0xfefbfe10>
 1000ea4:	180d883a 	mov	r6,r3
 1000ea8:	e00b883a 	mov	r5,fp
 1000eac:	da000115 	stw	r8,4(sp)
 1000eb0:	d8c00015 	stw	r3,0(sp)
 1000eb4:	1001c700 	call	1001c70 <memmove>
 1000eb8:	d8c00017 	ldw	r3,0(sp)
 1000ebc:	80800017 	ldw	r2,0(r16)
 1000ec0:	800b883a 	mov	r5,r16
 1000ec4:	a809883a 	mov	r4,r21
 1000ec8:	10c5883a 	add	r2,r2,r3
 1000ecc:	80800015 	stw	r2,0(r16)
 1000ed0:	d8c00015 	stw	r3,0(sp)
 1000ed4:	1002b100 	call	1002b10 <_fflush_r>
 1000ed8:	d8c00017 	ldw	r3,0(sp)
 1000edc:	da000117 	ldw	r8,4(sp)
 1000ee0:	103fc21e 	bne	r2,zero,1000dec <__alt_mem_TCDM+0xfefbfdec>
 1000ee4:	182f883a 	mov	r23,r3
 1000ee8:	9de7c83a 	sub	r19,r19,r23
 1000eec:	983fe11e 	bne	r19,zero,1000e74 <__alt_mem_TCDM+0xfefbfe74>
 1000ef0:	800b883a 	mov	r5,r16
 1000ef4:	a809883a 	mov	r4,r21
 1000ef8:	1002b100 	call	1002b10 <_fflush_r>
 1000efc:	103fbb1e 	bne	r2,zero,1000dec <__alt_mem_TCDM+0xfefbfdec>
 1000f00:	0011883a 	mov	r8,zero
 1000f04:	003fdb06 	br	1000e74 <__alt_mem_TCDM+0xfefbfe74>
 1000f08:	94c0012e 	bgeu	r18,r19,1000f10 <__sfvwrite_r+0x31c>
 1000f0c:	9027883a 	mov	r19,r18
 1000f10:	980d883a 	mov	r6,r19
 1000f14:	e00b883a 	mov	r5,fp
 1000f18:	1001c700 	call	1001c70 <memmove>
 1000f1c:	80800217 	ldw	r2,8(r16)
 1000f20:	80c00017 	ldw	r3,0(r16)
 1000f24:	14c5c83a 	sub	r2,r2,r19
 1000f28:	1cc7883a 	add	r3,r3,r19
 1000f2c:	80800215 	stw	r2,8(r16)
 1000f30:	80c00015 	stw	r3,0(r16)
 1000f34:	10004326 	beq	r2,zero,1001044 <__sfvwrite_r+0x450>
 1000f38:	9805883a 	mov	r2,r19
 1000f3c:	003f8606 	br	1000d58 <__alt_mem_TCDM+0xfefbfd58>
 1000f40:	b00d883a 	mov	r6,r22
 1000f44:	e00b883a 	mov	r5,fp
 1000f48:	da000115 	stw	r8,4(sp)
 1000f4c:	1001c700 	call	1001c70 <memmove>
 1000f50:	80800217 	ldw	r2,8(r16)
 1000f54:	80c00017 	ldw	r3,0(r16)
 1000f58:	da000117 	ldw	r8,4(sp)
 1000f5c:	1585c83a 	sub	r2,r2,r22
 1000f60:	1dad883a 	add	r22,r3,r22
 1000f64:	80800215 	stw	r2,8(r16)
 1000f68:	85800015 	stw	r22,0(r16)
 1000f6c:	003fbf06 	br	1000e6c <__alt_mem_TCDM+0xfefbfe6c>
 1000f70:	81000017 	ldw	r4,0(r16)
 1000f74:	9027883a 	mov	r19,r18
 1000f78:	902f883a 	mov	r23,r18
 1000f7c:	003f6c06 	br	1000d30 <__alt_mem_TCDM+0xfefbfd30>
 1000f80:	900d883a 	mov	r6,r18
 1000f84:	01400284 	movi	r5,10
 1000f88:	e009883a 	mov	r4,fp
 1000f8c:	1001a440 	call	1001a44 <memchr>
 1000f90:	10003e26 	beq	r2,zero,100108c <__sfvwrite_r+0x498>
 1000f94:	10800044 	addi	r2,r2,1
 1000f98:	1727c83a 	sub	r19,r2,fp
 1000f9c:	02000044 	movi	r8,1
 1000fa0:	003f9d06 	br	1000e18 <__alt_mem_TCDM+0xfefbfe18>
 1000fa4:	80800517 	ldw	r2,20(r16)
 1000fa8:	81400417 	ldw	r5,16(r16)
 1000fac:	81c00017 	ldw	r7,0(r16)
 1000fb0:	10a7883a 	add	r19,r2,r2
 1000fb4:	9885883a 	add	r2,r19,r2
 1000fb8:	1026d7fa 	srli	r19,r2,31
 1000fbc:	396dc83a 	sub	r22,r7,r5
 1000fc0:	b1000044 	addi	r4,r22,1
 1000fc4:	9885883a 	add	r2,r19,r2
 1000fc8:	1027d07a 	srai	r19,r2,1
 1000fcc:	2485883a 	add	r2,r4,r18
 1000fd0:	980d883a 	mov	r6,r19
 1000fd4:	9880022e 	bgeu	r19,r2,1000fe0 <__sfvwrite_r+0x3ec>
 1000fd8:	1027883a 	mov	r19,r2
 1000fdc:	100d883a 	mov	r6,r2
 1000fe0:	18c1000c 	andi	r3,r3,1024
 1000fe4:	18001c26 	beq	r3,zero,1001058 <__sfvwrite_r+0x464>
 1000fe8:	300b883a 	mov	r5,r6
 1000fec:	a809883a 	mov	r4,r21
 1000ff0:	10012380 	call	1001238 <_malloc_r>
 1000ff4:	102f883a 	mov	r23,r2
 1000ff8:	10002926 	beq	r2,zero,10010a0 <__sfvwrite_r+0x4ac>
 1000ffc:	81400417 	ldw	r5,16(r16)
 1001000:	b00d883a 	mov	r6,r22
 1001004:	1009883a 	mov	r4,r2
 1001008:	1001b280 	call	1001b28 <memcpy>
 100100c:	8080030b 	ldhu	r2,12(r16)
 1001010:	00fedfc4 	movi	r3,-1153
 1001014:	10c4703a 	and	r2,r2,r3
 1001018:	10802014 	ori	r2,r2,128
 100101c:	8080030d 	sth	r2,12(r16)
 1001020:	bd89883a 	add	r4,r23,r22
 1001024:	9d8fc83a 	sub	r7,r19,r22
 1001028:	85c00415 	stw	r23,16(r16)
 100102c:	84c00515 	stw	r19,20(r16)
 1001030:	81000015 	stw	r4,0(r16)
 1001034:	9027883a 	mov	r19,r18
 1001038:	81c00215 	stw	r7,8(r16)
 100103c:	902f883a 	mov	r23,r18
 1001040:	003f3b06 	br	1000d30 <__alt_mem_TCDM+0xfefbfd30>
 1001044:	800b883a 	mov	r5,r16
 1001048:	a809883a 	mov	r4,r21
 100104c:	1002b100 	call	1002b10 <_fflush_r>
 1001050:	103fb926 	beq	r2,zero,1000f38 <__alt_mem_TCDM+0xfefbff38>
 1001054:	003f6506 	br	1000dec <__alt_mem_TCDM+0xfefbfdec>
 1001058:	a809883a 	mov	r4,r21
 100105c:	1001ef40 	call	1001ef4 <_realloc_r>
 1001060:	102f883a 	mov	r23,r2
 1001064:	103fee1e 	bne	r2,zero,1001020 <__alt_mem_TCDM+0xfefc0020>
 1001068:	81400417 	ldw	r5,16(r16)
 100106c:	a809883a 	mov	r4,r21
 1001070:	1002cc00 	call	1002cc0 <_free_r>
 1001074:	8080030b 	ldhu	r2,12(r16)
 1001078:	00ffdfc4 	movi	r3,-129
 100107c:	1884703a 	and	r2,r3,r2
 1001080:	00c00304 	movi	r3,12
 1001084:	a8c00015 	stw	r3,0(r21)
 1001088:	003f5906 	br	1000df0 <__alt_mem_TCDM+0xfefbfdf0>
 100108c:	94c00044 	addi	r19,r18,1
 1001090:	02000044 	movi	r8,1
 1001094:	003f6006 	br	1000e18 <__alt_mem_TCDM+0xfefbfe18>
 1001098:	00bfffc4 	movi	r2,-1
 100109c:	003f0306 	br	1000cac <__alt_mem_TCDM+0xfefbfcac>
 10010a0:	00800304 	movi	r2,12
 10010a4:	a8800015 	stw	r2,0(r21)
 10010a8:	8080030b 	ldhu	r2,12(r16)
 10010ac:	003f5006 	br	1000df0 <__alt_mem_TCDM+0xfefbfdf0>

010010b0 <_fwalk>:
 10010b0:	defff704 	addi	sp,sp,-36
 10010b4:	dd000415 	stw	r20,16(sp)
 10010b8:	dfc00815 	stw	ra,32(sp)
 10010bc:	ddc00715 	stw	r23,28(sp)
 10010c0:	dd800615 	stw	r22,24(sp)
 10010c4:	dd400515 	stw	r21,20(sp)
 10010c8:	dcc00315 	stw	r19,12(sp)
 10010cc:	dc800215 	stw	r18,8(sp)
 10010d0:	dc400115 	stw	r17,4(sp)
 10010d4:	dc000015 	stw	r16,0(sp)
 10010d8:	2500b804 	addi	r20,r4,736
 10010dc:	a0002326 	beq	r20,zero,100116c <_fwalk+0xbc>
 10010e0:	282b883a 	mov	r21,r5
 10010e4:	002f883a 	mov	r23,zero
 10010e8:	05800044 	movi	r22,1
 10010ec:	04ffffc4 	movi	r19,-1
 10010f0:	a4400117 	ldw	r17,4(r20)
 10010f4:	a4800217 	ldw	r18,8(r20)
 10010f8:	8c7fffc4 	addi	r17,r17,-1
 10010fc:	88000d16 	blt	r17,zero,1001134 <_fwalk+0x84>
 1001100:	94000304 	addi	r16,r18,12
 1001104:	94800384 	addi	r18,r18,14
 1001108:	8080000b 	ldhu	r2,0(r16)
 100110c:	8c7fffc4 	addi	r17,r17,-1
 1001110:	813ffd04 	addi	r4,r16,-12
 1001114:	b080042e 	bgeu	r22,r2,1001128 <_fwalk+0x78>
 1001118:	9080000f 	ldh	r2,0(r18)
 100111c:	14c00226 	beq	r2,r19,1001128 <_fwalk+0x78>
 1001120:	a83ee83a 	callr	r21
 1001124:	b8aeb03a 	or	r23,r23,r2
 1001128:	84001a04 	addi	r16,r16,104
 100112c:	94801a04 	addi	r18,r18,104
 1001130:	8cfff51e 	bne	r17,r19,1001108 <__alt_mem_TCDM+0xfefc0108>
 1001134:	a5000017 	ldw	r20,0(r20)
 1001138:	a03fed1e 	bne	r20,zero,10010f0 <__alt_mem_TCDM+0xfefc00f0>
 100113c:	b805883a 	mov	r2,r23
 1001140:	dfc00817 	ldw	ra,32(sp)
 1001144:	ddc00717 	ldw	r23,28(sp)
 1001148:	dd800617 	ldw	r22,24(sp)
 100114c:	dd400517 	ldw	r21,20(sp)
 1001150:	dd000417 	ldw	r20,16(sp)
 1001154:	dcc00317 	ldw	r19,12(sp)
 1001158:	dc800217 	ldw	r18,8(sp)
 100115c:	dc400117 	ldw	r17,4(sp)
 1001160:	dc000017 	ldw	r16,0(sp)
 1001164:	dec00904 	addi	sp,sp,36
 1001168:	f800283a 	ret
 100116c:	002f883a 	mov	r23,zero
 1001170:	003ff206 	br	100113c <__alt_mem_TCDM+0xfefc013c>

01001174 <_fwalk_reent>:
 1001174:	defff704 	addi	sp,sp,-36
 1001178:	dd000415 	stw	r20,16(sp)
 100117c:	dfc00815 	stw	ra,32(sp)
 1001180:	ddc00715 	stw	r23,28(sp)
 1001184:	dd800615 	stw	r22,24(sp)
 1001188:	dd400515 	stw	r21,20(sp)
 100118c:	dcc00315 	stw	r19,12(sp)
 1001190:	dc800215 	stw	r18,8(sp)
 1001194:	dc400115 	stw	r17,4(sp)
 1001198:	dc000015 	stw	r16,0(sp)
 100119c:	2500b804 	addi	r20,r4,736
 10011a0:	a0002326 	beq	r20,zero,1001230 <_fwalk_reent+0xbc>
 10011a4:	282b883a 	mov	r21,r5
 10011a8:	2027883a 	mov	r19,r4
 10011ac:	002f883a 	mov	r23,zero
 10011b0:	05800044 	movi	r22,1
 10011b4:	04bfffc4 	movi	r18,-1
 10011b8:	a4400117 	ldw	r17,4(r20)
 10011bc:	a4000217 	ldw	r16,8(r20)
 10011c0:	8c7fffc4 	addi	r17,r17,-1
 10011c4:	88000c16 	blt	r17,zero,10011f8 <_fwalk_reent+0x84>
 10011c8:	84000304 	addi	r16,r16,12
 10011cc:	8080000b 	ldhu	r2,0(r16)
 10011d0:	8c7fffc4 	addi	r17,r17,-1
 10011d4:	817ffd04 	addi	r5,r16,-12
 10011d8:	b080052e 	bgeu	r22,r2,10011f0 <_fwalk_reent+0x7c>
 10011dc:	8080008f 	ldh	r2,2(r16)
 10011e0:	9809883a 	mov	r4,r19
 10011e4:	14800226 	beq	r2,r18,10011f0 <_fwalk_reent+0x7c>
 10011e8:	a83ee83a 	callr	r21
 10011ec:	b8aeb03a 	or	r23,r23,r2
 10011f0:	84001a04 	addi	r16,r16,104
 10011f4:	8cbff51e 	bne	r17,r18,10011cc <__alt_mem_TCDM+0xfefc01cc>
 10011f8:	a5000017 	ldw	r20,0(r20)
 10011fc:	a03fee1e 	bne	r20,zero,10011b8 <__alt_mem_TCDM+0xfefc01b8>
 1001200:	b805883a 	mov	r2,r23
 1001204:	dfc00817 	ldw	ra,32(sp)
 1001208:	ddc00717 	ldw	r23,28(sp)
 100120c:	dd800617 	ldw	r22,24(sp)
 1001210:	dd400517 	ldw	r21,20(sp)
 1001214:	dd000417 	ldw	r20,16(sp)
 1001218:	dcc00317 	ldw	r19,12(sp)
 100121c:	dc800217 	ldw	r18,8(sp)
 1001220:	dc400117 	ldw	r17,4(sp)
 1001224:	dc000017 	ldw	r16,0(sp)
 1001228:	dec00904 	addi	sp,sp,36
 100122c:	f800283a 	ret
 1001230:	002f883a 	mov	r23,zero
 1001234:	003ff206 	br	1001200 <__alt_mem_TCDM+0xfefc0200>

01001238 <_malloc_r>:
 1001238:	defff504 	addi	sp,sp,-44
 100123c:	dc800315 	stw	r18,12(sp)
 1001240:	dfc00a15 	stw	ra,40(sp)
 1001244:	df000915 	stw	fp,36(sp)
 1001248:	ddc00815 	stw	r23,32(sp)
 100124c:	dd800715 	stw	r22,28(sp)
 1001250:	dd400615 	stw	r21,24(sp)
 1001254:	dd000515 	stw	r20,20(sp)
 1001258:	dcc00415 	stw	r19,16(sp)
 100125c:	dc400215 	stw	r17,8(sp)
 1001260:	dc000115 	stw	r16,4(sp)
 1001264:	288002c4 	addi	r2,r5,11
 1001268:	00c00584 	movi	r3,22
 100126c:	2025883a 	mov	r18,r4
 1001270:	18807f2e 	bgeu	r3,r2,1001470 <_malloc_r+0x238>
 1001274:	047ffe04 	movi	r17,-8
 1001278:	1462703a 	and	r17,r2,r17
 100127c:	8800a316 	blt	r17,zero,100150c <_malloc_r+0x2d4>
 1001280:	8940a236 	bltu	r17,r5,100150c <_malloc_r+0x2d4>
 1001284:	1003a2c0 	call	1003a2c <__malloc_lock>
 1001288:	00807dc4 	movi	r2,503
 100128c:	1441e92e 	bgeu	r2,r17,1001a34 <_malloc_r+0x7fc>
 1001290:	8804d27a 	srli	r2,r17,9
 1001294:	1000a126 	beq	r2,zero,100151c <_malloc_r+0x2e4>
 1001298:	00c00104 	movi	r3,4
 100129c:	18811e36 	bltu	r3,r2,1001718 <_malloc_r+0x4e0>
 10012a0:	8804d1ba 	srli	r2,r17,6
 10012a4:	12000e44 	addi	r8,r2,57
 10012a8:	11c00e04 	addi	r7,r2,56
 10012ac:	4209883a 	add	r4,r8,r8
 10012b0:	04c04034 	movhi	r19,256
 10012b4:	2109883a 	add	r4,r4,r4
 10012b8:	9cd89904 	addi	r19,r19,25188
 10012bc:	2109883a 	add	r4,r4,r4
 10012c0:	9909883a 	add	r4,r19,r4
 10012c4:	24000117 	ldw	r16,4(r4)
 10012c8:	213ffe04 	addi	r4,r4,-8
 10012cc:	24009726 	beq	r4,r16,100152c <_malloc_r+0x2f4>
 10012d0:	80800117 	ldw	r2,4(r16)
 10012d4:	01bfff04 	movi	r6,-4
 10012d8:	014003c4 	movi	r5,15
 10012dc:	1184703a 	and	r2,r2,r6
 10012e0:	1447c83a 	sub	r3,r2,r17
 10012e4:	28c00716 	blt	r5,r3,1001304 <_malloc_r+0xcc>
 10012e8:	1800920e 	bge	r3,zero,1001534 <_malloc_r+0x2fc>
 10012ec:	84000317 	ldw	r16,12(r16)
 10012f0:	24008e26 	beq	r4,r16,100152c <_malloc_r+0x2f4>
 10012f4:	80800117 	ldw	r2,4(r16)
 10012f8:	1184703a 	and	r2,r2,r6
 10012fc:	1447c83a 	sub	r3,r2,r17
 1001300:	28fff90e 	bge	r5,r3,10012e8 <__alt_mem_TCDM+0xfefc02e8>
 1001304:	3809883a 	mov	r4,r7
 1001308:	01804034 	movhi	r6,256
 100130c:	9c000417 	ldw	r16,16(r19)
 1001310:	31989904 	addi	r6,r6,25188
 1001314:	32000204 	addi	r8,r6,8
 1001318:	82013426 	beq	r16,r8,10017ec <_malloc_r+0x5b4>
 100131c:	80c00117 	ldw	r3,4(r16)
 1001320:	00bfff04 	movi	r2,-4
 1001324:	188e703a 	and	r7,r3,r2
 1001328:	3c45c83a 	sub	r2,r7,r17
 100132c:	00c003c4 	movi	r3,15
 1001330:	18811f16 	blt	r3,r2,10017b0 <_malloc_r+0x578>
 1001334:	32000515 	stw	r8,20(r6)
 1001338:	32000415 	stw	r8,16(r6)
 100133c:	10007f0e 	bge	r2,zero,100153c <_malloc_r+0x304>
 1001340:	00807fc4 	movi	r2,511
 1001344:	11c0fd36 	bltu	r2,r7,100173c <_malloc_r+0x504>
 1001348:	3806d0fa 	srli	r3,r7,3
 100134c:	01c00044 	movi	r7,1
 1001350:	30800117 	ldw	r2,4(r6)
 1001354:	19400044 	addi	r5,r3,1
 1001358:	294b883a 	add	r5,r5,r5
 100135c:	1807d0ba 	srai	r3,r3,2
 1001360:	294b883a 	add	r5,r5,r5
 1001364:	294b883a 	add	r5,r5,r5
 1001368:	298b883a 	add	r5,r5,r6
 100136c:	38c6983a 	sll	r3,r7,r3
 1001370:	29c00017 	ldw	r7,0(r5)
 1001374:	2a7ffe04 	addi	r9,r5,-8
 1001378:	1886b03a 	or	r3,r3,r2
 100137c:	82400315 	stw	r9,12(r16)
 1001380:	81c00215 	stw	r7,8(r16)
 1001384:	30c00115 	stw	r3,4(r6)
 1001388:	2c000015 	stw	r16,0(r5)
 100138c:	3c000315 	stw	r16,12(r7)
 1001390:	2005d0ba 	srai	r2,r4,2
 1001394:	01400044 	movi	r5,1
 1001398:	288a983a 	sll	r5,r5,r2
 100139c:	19406f36 	bltu	r3,r5,100155c <_malloc_r+0x324>
 10013a0:	28c4703a 	and	r2,r5,r3
 10013a4:	10000a1e 	bne	r2,zero,10013d0 <_malloc_r+0x198>
 10013a8:	00bfff04 	movi	r2,-4
 10013ac:	294b883a 	add	r5,r5,r5
 10013b0:	2088703a 	and	r4,r4,r2
 10013b4:	28c4703a 	and	r2,r5,r3
 10013b8:	21000104 	addi	r4,r4,4
 10013bc:	1000041e 	bne	r2,zero,10013d0 <_malloc_r+0x198>
 10013c0:	294b883a 	add	r5,r5,r5
 10013c4:	28c4703a 	and	r2,r5,r3
 10013c8:	21000104 	addi	r4,r4,4
 10013cc:	103ffc26 	beq	r2,zero,10013c0 <__alt_mem_TCDM+0xfefc03c0>
 10013d0:	02bfff04 	movi	r10,-4
 10013d4:	024003c4 	movi	r9,15
 10013d8:	21800044 	addi	r6,r4,1
 10013dc:	318d883a 	add	r6,r6,r6
 10013e0:	318d883a 	add	r6,r6,r6
 10013e4:	318d883a 	add	r6,r6,r6
 10013e8:	998d883a 	add	r6,r19,r6
 10013ec:	333ffe04 	addi	r12,r6,-8
 10013f0:	2017883a 	mov	r11,r4
 10013f4:	31800104 	addi	r6,r6,4
 10013f8:	34000017 	ldw	r16,0(r6)
 10013fc:	31fffd04 	addi	r7,r6,-12
 1001400:	81c0041e 	bne	r16,r7,1001414 <_malloc_r+0x1dc>
 1001404:	0000fb06 	br	10017f4 <_malloc_r+0x5bc>
 1001408:	1801030e 	bge	r3,zero,1001818 <_malloc_r+0x5e0>
 100140c:	84000317 	ldw	r16,12(r16)
 1001410:	81c0f826 	beq	r16,r7,10017f4 <_malloc_r+0x5bc>
 1001414:	80800117 	ldw	r2,4(r16)
 1001418:	1284703a 	and	r2,r2,r10
 100141c:	1447c83a 	sub	r3,r2,r17
 1001420:	48fff90e 	bge	r9,r3,1001408 <__alt_mem_TCDM+0xfefc0408>
 1001424:	80800317 	ldw	r2,12(r16)
 1001428:	81000217 	ldw	r4,8(r16)
 100142c:	89400054 	ori	r5,r17,1
 1001430:	81400115 	stw	r5,4(r16)
 1001434:	20800315 	stw	r2,12(r4)
 1001438:	11000215 	stw	r4,8(r2)
 100143c:	8463883a 	add	r17,r16,r17
 1001440:	9c400515 	stw	r17,20(r19)
 1001444:	9c400415 	stw	r17,16(r19)
 1001448:	18800054 	ori	r2,r3,1
 100144c:	88800115 	stw	r2,4(r17)
 1001450:	8a000315 	stw	r8,12(r17)
 1001454:	8a000215 	stw	r8,8(r17)
 1001458:	88e3883a 	add	r17,r17,r3
 100145c:	88c00015 	stw	r3,0(r17)
 1001460:	9009883a 	mov	r4,r18
 1001464:	1003a500 	call	1003a50 <__malloc_unlock>
 1001468:	80800204 	addi	r2,r16,8
 100146c:	00001b06 	br	10014dc <_malloc_r+0x2a4>
 1001470:	04400404 	movi	r17,16
 1001474:	89402536 	bltu	r17,r5,100150c <_malloc_r+0x2d4>
 1001478:	1003a2c0 	call	1003a2c <__malloc_lock>
 100147c:	00800184 	movi	r2,6
 1001480:	01000084 	movi	r4,2
 1001484:	04c04034 	movhi	r19,256
 1001488:	1085883a 	add	r2,r2,r2
 100148c:	9cd89904 	addi	r19,r19,25188
 1001490:	1085883a 	add	r2,r2,r2
 1001494:	9885883a 	add	r2,r19,r2
 1001498:	14000117 	ldw	r16,4(r2)
 100149c:	10fffe04 	addi	r3,r2,-8
 10014a0:	80c0d926 	beq	r16,r3,1001808 <_malloc_r+0x5d0>
 10014a4:	80c00117 	ldw	r3,4(r16)
 10014a8:	81000317 	ldw	r4,12(r16)
 10014ac:	00bfff04 	movi	r2,-4
 10014b0:	1884703a 	and	r2,r3,r2
 10014b4:	81400217 	ldw	r5,8(r16)
 10014b8:	8085883a 	add	r2,r16,r2
 10014bc:	10c00117 	ldw	r3,4(r2)
 10014c0:	29000315 	stw	r4,12(r5)
 10014c4:	21400215 	stw	r5,8(r4)
 10014c8:	18c00054 	ori	r3,r3,1
 10014cc:	10c00115 	stw	r3,4(r2)
 10014d0:	9009883a 	mov	r4,r18
 10014d4:	1003a500 	call	1003a50 <__malloc_unlock>
 10014d8:	80800204 	addi	r2,r16,8
 10014dc:	dfc00a17 	ldw	ra,40(sp)
 10014e0:	df000917 	ldw	fp,36(sp)
 10014e4:	ddc00817 	ldw	r23,32(sp)
 10014e8:	dd800717 	ldw	r22,28(sp)
 10014ec:	dd400617 	ldw	r21,24(sp)
 10014f0:	dd000517 	ldw	r20,20(sp)
 10014f4:	dcc00417 	ldw	r19,16(sp)
 10014f8:	dc800317 	ldw	r18,12(sp)
 10014fc:	dc400217 	ldw	r17,8(sp)
 1001500:	dc000117 	ldw	r16,4(sp)
 1001504:	dec00b04 	addi	sp,sp,44
 1001508:	f800283a 	ret
 100150c:	00800304 	movi	r2,12
 1001510:	90800015 	stw	r2,0(r18)
 1001514:	0005883a 	mov	r2,zero
 1001518:	003ff006 	br	10014dc <__alt_mem_TCDM+0xfefc04dc>
 100151c:	01002004 	movi	r4,128
 1001520:	02001004 	movi	r8,64
 1001524:	01c00fc4 	movi	r7,63
 1001528:	003f6106 	br	10012b0 <__alt_mem_TCDM+0xfefc02b0>
 100152c:	4009883a 	mov	r4,r8
 1001530:	003f7506 	br	1001308 <__alt_mem_TCDM+0xfefc0308>
 1001534:	81000317 	ldw	r4,12(r16)
 1001538:	003fde06 	br	10014b4 <__alt_mem_TCDM+0xfefc04b4>
 100153c:	81c5883a 	add	r2,r16,r7
 1001540:	11400117 	ldw	r5,4(r2)
 1001544:	9009883a 	mov	r4,r18
 1001548:	29400054 	ori	r5,r5,1
 100154c:	11400115 	stw	r5,4(r2)
 1001550:	1003a500 	call	1003a50 <__malloc_unlock>
 1001554:	80800204 	addi	r2,r16,8
 1001558:	003fe006 	br	10014dc <__alt_mem_TCDM+0xfefc04dc>
 100155c:	9c000217 	ldw	r16,8(r19)
 1001560:	00bfff04 	movi	r2,-4
 1001564:	85800117 	ldw	r22,4(r16)
 1001568:	b0ac703a 	and	r22,r22,r2
 100156c:	b4400336 	bltu	r22,r17,100157c <_malloc_r+0x344>
 1001570:	b445c83a 	sub	r2,r22,r17
 1001574:	00c003c4 	movi	r3,15
 1001578:	18805d16 	blt	r3,r2,10016f0 <_malloc_r+0x4b8>
 100157c:	05c04034 	movhi	r23,256
 1001580:	00804074 	movhi	r2,257
 1001584:	10a4d404 	addi	r2,r2,-27824
 1001588:	bdde2504 	addi	r23,r23,30868
 100158c:	15400017 	ldw	r21,0(r2)
 1001590:	b8c00017 	ldw	r3,0(r23)
 1001594:	00bfffc4 	movi	r2,-1
 1001598:	858d883a 	add	r6,r16,r22
 100159c:	8d6b883a 	add	r21,r17,r21
 10015a0:	1880ea26 	beq	r3,r2,100194c <_malloc_r+0x714>
 10015a4:	ad4403c4 	addi	r21,r21,4111
 10015a8:	00bc0004 	movi	r2,-4096
 10015ac:	a8aa703a 	and	r21,r21,r2
 10015b0:	a80b883a 	mov	r5,r21
 10015b4:	9009883a 	mov	r4,r18
 10015b8:	d9800015 	stw	r6,0(sp)
 10015bc:	10024580 	call	1002458 <_sbrk_r>
 10015c0:	1029883a 	mov	r20,r2
 10015c4:	00bfffc4 	movi	r2,-1
 10015c8:	d9800017 	ldw	r6,0(sp)
 10015cc:	a080e826 	beq	r20,r2,1001970 <_malloc_r+0x738>
 10015d0:	a180a636 	bltu	r20,r6,100186c <_malloc_r+0x634>
 10015d4:	07004074 	movhi	fp,257
 10015d8:	e724dd04 	addi	fp,fp,-27788
 10015dc:	e0800017 	ldw	r2,0(fp)
 10015e0:	a887883a 	add	r3,r21,r2
 10015e4:	e0c00015 	stw	r3,0(fp)
 10015e8:	3500e626 	beq	r6,r20,1001984 <_malloc_r+0x74c>
 10015ec:	b9000017 	ldw	r4,0(r23)
 10015f0:	00bfffc4 	movi	r2,-1
 10015f4:	2080ee26 	beq	r4,r2,10019b0 <_malloc_r+0x778>
 10015f8:	a185c83a 	sub	r2,r20,r6
 10015fc:	10c5883a 	add	r2,r2,r3
 1001600:	e0800015 	stw	r2,0(fp)
 1001604:	a0c001cc 	andi	r3,r20,7
 1001608:	1800bc26 	beq	r3,zero,10018fc <_malloc_r+0x6c4>
 100160c:	a0e9c83a 	sub	r20,r20,r3
 1001610:	00840204 	movi	r2,4104
 1001614:	a5000204 	addi	r20,r20,8
 1001618:	10c7c83a 	sub	r3,r2,r3
 100161c:	a545883a 	add	r2,r20,r21
 1001620:	1083ffcc 	andi	r2,r2,4095
 1001624:	18abc83a 	sub	r21,r3,r2
 1001628:	a80b883a 	mov	r5,r21
 100162c:	9009883a 	mov	r4,r18
 1001630:	10024580 	call	1002458 <_sbrk_r>
 1001634:	00ffffc4 	movi	r3,-1
 1001638:	10c0e126 	beq	r2,r3,10019c0 <_malloc_r+0x788>
 100163c:	1505c83a 	sub	r2,r2,r20
 1001640:	1545883a 	add	r2,r2,r21
 1001644:	10800054 	ori	r2,r2,1
 1001648:	e0c00017 	ldw	r3,0(fp)
 100164c:	9d000215 	stw	r20,8(r19)
 1001650:	a0800115 	stw	r2,4(r20)
 1001654:	a8c7883a 	add	r3,r21,r3
 1001658:	e0c00015 	stw	r3,0(fp)
 100165c:	84c00e26 	beq	r16,r19,1001698 <_malloc_r+0x460>
 1001660:	018003c4 	movi	r6,15
 1001664:	3580a72e 	bgeu	r6,r22,1001904 <_malloc_r+0x6cc>
 1001668:	81400117 	ldw	r5,4(r16)
 100166c:	013ffe04 	movi	r4,-8
 1001670:	b0bffd04 	addi	r2,r22,-12
 1001674:	1104703a 	and	r2,r2,r4
 1001678:	2900004c 	andi	r4,r5,1
 100167c:	2088b03a 	or	r4,r4,r2
 1001680:	81000115 	stw	r4,4(r16)
 1001684:	01400144 	movi	r5,5
 1001688:	8089883a 	add	r4,r16,r2
 100168c:	21400115 	stw	r5,4(r4)
 1001690:	21400215 	stw	r5,8(r4)
 1001694:	3080cd36 	bltu	r6,r2,10019cc <_malloc_r+0x794>
 1001698:	00804074 	movhi	r2,257
 100169c:	10a4d304 	addi	r2,r2,-27828
 10016a0:	11000017 	ldw	r4,0(r2)
 10016a4:	20c0012e 	bgeu	r4,r3,10016ac <_malloc_r+0x474>
 10016a8:	10c00015 	stw	r3,0(r2)
 10016ac:	00804074 	movhi	r2,257
 10016b0:	10a4d204 	addi	r2,r2,-27832
 10016b4:	11000017 	ldw	r4,0(r2)
 10016b8:	9c000217 	ldw	r16,8(r19)
 10016bc:	20c0012e 	bgeu	r4,r3,10016c4 <_malloc_r+0x48c>
 10016c0:	10c00015 	stw	r3,0(r2)
 10016c4:	80c00117 	ldw	r3,4(r16)
 10016c8:	00bfff04 	movi	r2,-4
 10016cc:	1886703a 	and	r3,r3,r2
 10016d0:	1c45c83a 	sub	r2,r3,r17
 10016d4:	1c400236 	bltu	r3,r17,10016e0 <_malloc_r+0x4a8>
 10016d8:	00c003c4 	movi	r3,15
 10016dc:	18800416 	blt	r3,r2,10016f0 <_malloc_r+0x4b8>
 10016e0:	9009883a 	mov	r4,r18
 10016e4:	1003a500 	call	1003a50 <__malloc_unlock>
 10016e8:	0005883a 	mov	r2,zero
 10016ec:	003f7b06 	br	10014dc <__alt_mem_TCDM+0xfefc04dc>
 10016f0:	88c00054 	ori	r3,r17,1
 10016f4:	80c00115 	stw	r3,4(r16)
 10016f8:	8463883a 	add	r17,r16,r17
 10016fc:	10800054 	ori	r2,r2,1
 1001700:	9c400215 	stw	r17,8(r19)
 1001704:	88800115 	stw	r2,4(r17)
 1001708:	9009883a 	mov	r4,r18
 100170c:	1003a500 	call	1003a50 <__malloc_unlock>
 1001710:	80800204 	addi	r2,r16,8
 1001714:	003f7106 	br	10014dc <__alt_mem_TCDM+0xfefc04dc>
 1001718:	00c00504 	movi	r3,20
 100171c:	18804a2e 	bgeu	r3,r2,1001848 <_malloc_r+0x610>
 1001720:	00c01504 	movi	r3,84
 1001724:	18806e36 	bltu	r3,r2,10018e0 <_malloc_r+0x6a8>
 1001728:	8804d33a 	srli	r2,r17,12
 100172c:	12001bc4 	addi	r8,r2,111
 1001730:	11c01b84 	addi	r7,r2,110
 1001734:	4209883a 	add	r4,r8,r8
 1001738:	003edd06 	br	10012b0 <__alt_mem_TCDM+0xfefc02b0>
 100173c:	3804d27a 	srli	r2,r7,9
 1001740:	00c00104 	movi	r3,4
 1001744:	1880442e 	bgeu	r3,r2,1001858 <_malloc_r+0x620>
 1001748:	00c00504 	movi	r3,20
 100174c:	18808136 	bltu	r3,r2,1001954 <_malloc_r+0x71c>
 1001750:	11401704 	addi	r5,r2,92
 1001754:	10c016c4 	addi	r3,r2,91
 1001758:	294b883a 	add	r5,r5,r5
 100175c:	294b883a 	add	r5,r5,r5
 1001760:	294b883a 	add	r5,r5,r5
 1001764:	994b883a 	add	r5,r19,r5
 1001768:	28800017 	ldw	r2,0(r5)
 100176c:	01804034 	movhi	r6,256
 1001770:	297ffe04 	addi	r5,r5,-8
 1001774:	31989904 	addi	r6,r6,25188
 1001778:	28806526 	beq	r5,r2,1001910 <_malloc_r+0x6d8>
 100177c:	01bfff04 	movi	r6,-4
 1001780:	10c00117 	ldw	r3,4(r2)
 1001784:	1986703a 	and	r3,r3,r6
 1001788:	38c0022e 	bgeu	r7,r3,1001794 <_malloc_r+0x55c>
 100178c:	10800217 	ldw	r2,8(r2)
 1001790:	28bffb1e 	bne	r5,r2,1001780 <__alt_mem_TCDM+0xfefc0780>
 1001794:	11400317 	ldw	r5,12(r2)
 1001798:	98c00117 	ldw	r3,4(r19)
 100179c:	81400315 	stw	r5,12(r16)
 10017a0:	80800215 	stw	r2,8(r16)
 10017a4:	2c000215 	stw	r16,8(r5)
 10017a8:	14000315 	stw	r16,12(r2)
 10017ac:	003ef806 	br	1001390 <__alt_mem_TCDM+0xfefc0390>
 10017b0:	88c00054 	ori	r3,r17,1
 10017b4:	80c00115 	stw	r3,4(r16)
 10017b8:	8463883a 	add	r17,r16,r17
 10017bc:	34400515 	stw	r17,20(r6)
 10017c0:	34400415 	stw	r17,16(r6)
 10017c4:	10c00054 	ori	r3,r2,1
 10017c8:	8a000315 	stw	r8,12(r17)
 10017cc:	8a000215 	stw	r8,8(r17)
 10017d0:	88c00115 	stw	r3,4(r17)
 10017d4:	88a3883a 	add	r17,r17,r2
 10017d8:	88800015 	stw	r2,0(r17)
 10017dc:	9009883a 	mov	r4,r18
 10017e0:	1003a500 	call	1003a50 <__malloc_unlock>
 10017e4:	80800204 	addi	r2,r16,8
 10017e8:	003f3c06 	br	10014dc <__alt_mem_TCDM+0xfefc04dc>
 10017ec:	30c00117 	ldw	r3,4(r6)
 10017f0:	003ee706 	br	1001390 <__alt_mem_TCDM+0xfefc0390>
 10017f4:	5ac00044 	addi	r11,r11,1
 10017f8:	588000cc 	andi	r2,r11,3
 10017fc:	31800204 	addi	r6,r6,8
 1001800:	103efd1e 	bne	r2,zero,10013f8 <__alt_mem_TCDM+0xfefc03f8>
 1001804:	00002406 	br	1001898 <_malloc_r+0x660>
 1001808:	14000317 	ldw	r16,12(r2)
 100180c:	143f251e 	bne	r2,r16,10014a4 <__alt_mem_TCDM+0xfefc04a4>
 1001810:	21000084 	addi	r4,r4,2
 1001814:	003ebc06 	br	1001308 <__alt_mem_TCDM+0xfefc0308>
 1001818:	8085883a 	add	r2,r16,r2
 100181c:	10c00117 	ldw	r3,4(r2)
 1001820:	81000317 	ldw	r4,12(r16)
 1001824:	81400217 	ldw	r5,8(r16)
 1001828:	18c00054 	ori	r3,r3,1
 100182c:	10c00115 	stw	r3,4(r2)
 1001830:	29000315 	stw	r4,12(r5)
 1001834:	21400215 	stw	r5,8(r4)
 1001838:	9009883a 	mov	r4,r18
 100183c:	1003a500 	call	1003a50 <__malloc_unlock>
 1001840:	80800204 	addi	r2,r16,8
 1001844:	003f2506 	br	10014dc <__alt_mem_TCDM+0xfefc04dc>
 1001848:	12001704 	addi	r8,r2,92
 100184c:	11c016c4 	addi	r7,r2,91
 1001850:	4209883a 	add	r4,r8,r8
 1001854:	003e9606 	br	10012b0 <__alt_mem_TCDM+0xfefc02b0>
 1001858:	3804d1ba 	srli	r2,r7,6
 100185c:	11400e44 	addi	r5,r2,57
 1001860:	10c00e04 	addi	r3,r2,56
 1001864:	294b883a 	add	r5,r5,r5
 1001868:	003fbc06 	br	100175c <__alt_mem_TCDM+0xfefc075c>
 100186c:	84ff5926 	beq	r16,r19,10015d4 <__alt_mem_TCDM+0xfefc05d4>
 1001870:	00804034 	movhi	r2,256
 1001874:	10989904 	addi	r2,r2,25188
 1001878:	14000217 	ldw	r16,8(r2)
 100187c:	00bfff04 	movi	r2,-4
 1001880:	80c00117 	ldw	r3,4(r16)
 1001884:	1886703a 	and	r3,r3,r2
 1001888:	003f9106 	br	10016d0 <__alt_mem_TCDM+0xfefc06d0>
 100188c:	60800217 	ldw	r2,8(r12)
 1001890:	213fffc4 	addi	r4,r4,-1
 1001894:	1300651e 	bne	r2,r12,1001a2c <_malloc_r+0x7f4>
 1001898:	208000cc 	andi	r2,r4,3
 100189c:	633ffe04 	addi	r12,r12,-8
 10018a0:	103ffa1e 	bne	r2,zero,100188c <__alt_mem_TCDM+0xfefc088c>
 10018a4:	98800117 	ldw	r2,4(r19)
 10018a8:	0146303a 	nor	r3,zero,r5
 10018ac:	1884703a 	and	r2,r3,r2
 10018b0:	98800115 	stw	r2,4(r19)
 10018b4:	294b883a 	add	r5,r5,r5
 10018b8:	117f2836 	bltu	r2,r5,100155c <__alt_mem_TCDM+0xfefc055c>
 10018bc:	283f2726 	beq	r5,zero,100155c <__alt_mem_TCDM+0xfefc055c>
 10018c0:	2886703a 	and	r3,r5,r2
 10018c4:	5809883a 	mov	r4,r11
 10018c8:	183ec31e 	bne	r3,zero,10013d8 <__alt_mem_TCDM+0xfefc03d8>
 10018cc:	294b883a 	add	r5,r5,r5
 10018d0:	2886703a 	and	r3,r5,r2
 10018d4:	21000104 	addi	r4,r4,4
 10018d8:	183ffc26 	beq	r3,zero,10018cc <__alt_mem_TCDM+0xfefc08cc>
 10018dc:	003ebe06 	br	10013d8 <__alt_mem_TCDM+0xfefc03d8>
 10018e0:	00c05504 	movi	r3,340
 10018e4:	18801236 	bltu	r3,r2,1001930 <_malloc_r+0x6f8>
 10018e8:	8804d3fa 	srli	r2,r17,15
 10018ec:	12001e04 	addi	r8,r2,120
 10018f0:	11c01dc4 	addi	r7,r2,119
 10018f4:	4209883a 	add	r4,r8,r8
 10018f8:	003e6d06 	br	10012b0 <__alt_mem_TCDM+0xfefc02b0>
 10018fc:	00c40004 	movi	r3,4096
 1001900:	003f4606 	br	100161c <__alt_mem_TCDM+0xfefc061c>
 1001904:	00800044 	movi	r2,1
 1001908:	a0800115 	stw	r2,4(r20)
 100190c:	003f7406 	br	10016e0 <__alt_mem_TCDM+0xfefc06e0>
 1001910:	1805d0ba 	srai	r2,r3,2
 1001914:	01c00044 	movi	r7,1
 1001918:	30c00117 	ldw	r3,4(r6)
 100191c:	388e983a 	sll	r7,r7,r2
 1001920:	2805883a 	mov	r2,r5
 1001924:	38c6b03a 	or	r3,r7,r3
 1001928:	30c00115 	stw	r3,4(r6)
 100192c:	003f9b06 	br	100179c <__alt_mem_TCDM+0xfefc079c>
 1001930:	00c15504 	movi	r3,1364
 1001934:	18801a36 	bltu	r3,r2,10019a0 <_malloc_r+0x768>
 1001938:	8804d4ba 	srli	r2,r17,18
 100193c:	12001f44 	addi	r8,r2,125
 1001940:	11c01f04 	addi	r7,r2,124
 1001944:	4209883a 	add	r4,r8,r8
 1001948:	003e5906 	br	10012b0 <__alt_mem_TCDM+0xfefc02b0>
 100194c:	ad400404 	addi	r21,r21,16
 1001950:	003f1706 	br	10015b0 <__alt_mem_TCDM+0xfefc05b0>
 1001954:	00c01504 	movi	r3,84
 1001958:	18802336 	bltu	r3,r2,10019e8 <_malloc_r+0x7b0>
 100195c:	3804d33a 	srli	r2,r7,12
 1001960:	11401bc4 	addi	r5,r2,111
 1001964:	10c01b84 	addi	r3,r2,110
 1001968:	294b883a 	add	r5,r5,r5
 100196c:	003f7b06 	br	100175c <__alt_mem_TCDM+0xfefc075c>
 1001970:	9c000217 	ldw	r16,8(r19)
 1001974:	00bfff04 	movi	r2,-4
 1001978:	80c00117 	ldw	r3,4(r16)
 100197c:	1886703a 	and	r3,r3,r2
 1001980:	003f5306 	br	10016d0 <__alt_mem_TCDM+0xfefc06d0>
 1001984:	3083ffcc 	andi	r2,r6,4095
 1001988:	103f181e 	bne	r2,zero,10015ec <__alt_mem_TCDM+0xfefc05ec>
 100198c:	99000217 	ldw	r4,8(r19)
 1001990:	b545883a 	add	r2,r22,r21
 1001994:	10800054 	ori	r2,r2,1
 1001998:	20800115 	stw	r2,4(r4)
 100199c:	003f3e06 	br	1001698 <__alt_mem_TCDM+0xfefc0698>
 10019a0:	01003f84 	movi	r4,254
 10019a4:	02001fc4 	movi	r8,127
 10019a8:	01c01f84 	movi	r7,126
 10019ac:	003e4006 	br	10012b0 <__alt_mem_TCDM+0xfefc02b0>
 10019b0:	00804034 	movhi	r2,256
 10019b4:	109e2504 	addi	r2,r2,30868
 10019b8:	15000015 	stw	r20,0(r2)
 10019bc:	003f1106 	br	1001604 <__alt_mem_TCDM+0xfefc0604>
 10019c0:	00800044 	movi	r2,1
 10019c4:	002b883a 	mov	r21,zero
 10019c8:	003f1f06 	br	1001648 <__alt_mem_TCDM+0xfefc0648>
 10019cc:	81400204 	addi	r5,r16,8
 10019d0:	9009883a 	mov	r4,r18
 10019d4:	1002cc00 	call	1002cc0 <_free_r>
 10019d8:	00804074 	movhi	r2,257
 10019dc:	10a4dd04 	addi	r2,r2,-27788
 10019e0:	10c00017 	ldw	r3,0(r2)
 10019e4:	003f2c06 	br	1001698 <__alt_mem_TCDM+0xfefc0698>
 10019e8:	00c05504 	movi	r3,340
 10019ec:	18800536 	bltu	r3,r2,1001a04 <_malloc_r+0x7cc>
 10019f0:	3804d3fa 	srli	r2,r7,15
 10019f4:	11401e04 	addi	r5,r2,120
 10019f8:	10c01dc4 	addi	r3,r2,119
 10019fc:	294b883a 	add	r5,r5,r5
 1001a00:	003f5606 	br	100175c <__alt_mem_TCDM+0xfefc075c>
 1001a04:	00c15504 	movi	r3,1364
 1001a08:	18800536 	bltu	r3,r2,1001a20 <_malloc_r+0x7e8>
 1001a0c:	3804d4ba 	srli	r2,r7,18
 1001a10:	11401f44 	addi	r5,r2,125
 1001a14:	10c01f04 	addi	r3,r2,124
 1001a18:	294b883a 	add	r5,r5,r5
 1001a1c:	003f4f06 	br	100175c <__alt_mem_TCDM+0xfefc075c>
 1001a20:	01403f84 	movi	r5,254
 1001a24:	00c01f84 	movi	r3,126
 1001a28:	003f4c06 	br	100175c <__alt_mem_TCDM+0xfefc075c>
 1001a2c:	98800117 	ldw	r2,4(r19)
 1001a30:	003fa006 	br	10018b4 <__alt_mem_TCDM+0xfefc08b4>
 1001a34:	8808d0fa 	srli	r4,r17,3
 1001a38:	20800044 	addi	r2,r4,1
 1001a3c:	1085883a 	add	r2,r2,r2
 1001a40:	003e9006 	br	1001484 <__alt_mem_TCDM+0xfefc0484>

01001a44 <memchr>:
 1001a44:	208000cc 	andi	r2,r4,3
 1001a48:	280f883a 	mov	r7,r5
 1001a4c:	10003426 	beq	r2,zero,1001b20 <memchr+0xdc>
 1001a50:	30bfffc4 	addi	r2,r6,-1
 1001a54:	30001a26 	beq	r6,zero,1001ac0 <memchr+0x7c>
 1001a58:	20c00003 	ldbu	r3,0(r4)
 1001a5c:	29803fcc 	andi	r6,r5,255
 1001a60:	30c0051e 	bne	r6,r3,1001a78 <memchr+0x34>
 1001a64:	00001806 	br	1001ac8 <memchr+0x84>
 1001a68:	10001526 	beq	r2,zero,1001ac0 <memchr+0x7c>
 1001a6c:	20c00003 	ldbu	r3,0(r4)
 1001a70:	10bfffc4 	addi	r2,r2,-1
 1001a74:	30c01426 	beq	r6,r3,1001ac8 <memchr+0x84>
 1001a78:	21000044 	addi	r4,r4,1
 1001a7c:	20c000cc 	andi	r3,r4,3
 1001a80:	183ff91e 	bne	r3,zero,1001a68 <__alt_mem_TCDM+0xfefc0a68>
 1001a84:	020000c4 	movi	r8,3
 1001a88:	40801136 	bltu	r8,r2,1001ad0 <memchr+0x8c>
 1001a8c:	10000c26 	beq	r2,zero,1001ac0 <memchr+0x7c>
 1001a90:	20c00003 	ldbu	r3,0(r4)
 1001a94:	29403fcc 	andi	r5,r5,255
 1001a98:	28c00b26 	beq	r5,r3,1001ac8 <memchr+0x84>
 1001a9c:	20c00044 	addi	r3,r4,1
 1001aa0:	39803fcc 	andi	r6,r7,255
 1001aa4:	2089883a 	add	r4,r4,r2
 1001aa8:	00000306 	br	1001ab8 <memchr+0x74>
 1001aac:	18c00044 	addi	r3,r3,1
 1001ab0:	197fffc3 	ldbu	r5,-1(r3)
 1001ab4:	31400526 	beq	r6,r5,1001acc <memchr+0x88>
 1001ab8:	1805883a 	mov	r2,r3
 1001abc:	20fffb1e 	bne	r4,r3,1001aac <__alt_mem_TCDM+0xfefc0aac>
 1001ac0:	0005883a 	mov	r2,zero
 1001ac4:	f800283a 	ret
 1001ac8:	2005883a 	mov	r2,r4
 1001acc:	f800283a 	ret
 1001ad0:	28c03fcc 	andi	r3,r5,255
 1001ad4:	1812923a 	slli	r9,r3,8
 1001ad8:	02ffbff4 	movhi	r11,65279
 1001adc:	02a02074 	movhi	r10,32897
 1001ae0:	48d2b03a 	or	r9,r9,r3
 1001ae4:	4806943a 	slli	r3,r9,16
 1001ae8:	5affbfc4 	addi	r11,r11,-257
 1001aec:	52a02004 	addi	r10,r10,-32640
 1001af0:	48d2b03a 	or	r9,r9,r3
 1001af4:	20c00017 	ldw	r3,0(r4)
 1001af8:	48c6f03a 	xor	r3,r9,r3
 1001afc:	1acd883a 	add	r6,r3,r11
 1001b00:	00c6303a 	nor	r3,zero,r3
 1001b04:	30c6703a 	and	r3,r6,r3
 1001b08:	1a86703a 	and	r3,r3,r10
 1001b0c:	183fe01e 	bne	r3,zero,1001a90 <__alt_mem_TCDM+0xfefc0a90>
 1001b10:	10bfff04 	addi	r2,r2,-4
 1001b14:	21000104 	addi	r4,r4,4
 1001b18:	40bff636 	bltu	r8,r2,1001af4 <__alt_mem_TCDM+0xfefc0af4>
 1001b1c:	003fdb06 	br	1001a8c <__alt_mem_TCDM+0xfefc0a8c>
 1001b20:	3005883a 	mov	r2,r6
 1001b24:	003fd706 	br	1001a84 <__alt_mem_TCDM+0xfefc0a84>

01001b28 <memcpy>:
 1001b28:	defffd04 	addi	sp,sp,-12
 1001b2c:	dfc00215 	stw	ra,8(sp)
 1001b30:	dc400115 	stw	r17,4(sp)
 1001b34:	dc000015 	stw	r16,0(sp)
 1001b38:	00c003c4 	movi	r3,15
 1001b3c:	2005883a 	mov	r2,r4
 1001b40:	1980452e 	bgeu	r3,r6,1001c58 <memcpy+0x130>
 1001b44:	2906b03a 	or	r3,r5,r4
 1001b48:	18c000cc 	andi	r3,r3,3
 1001b4c:	1800441e 	bne	r3,zero,1001c60 <memcpy+0x138>
 1001b50:	347ffc04 	addi	r17,r6,-16
 1001b54:	8822d13a 	srli	r17,r17,4
 1001b58:	28c00104 	addi	r3,r5,4
 1001b5c:	23400104 	addi	r13,r4,4
 1001b60:	8820913a 	slli	r16,r17,4
 1001b64:	2b000204 	addi	r12,r5,8
 1001b68:	22c00204 	addi	r11,r4,8
 1001b6c:	84000504 	addi	r16,r16,20
 1001b70:	2a800304 	addi	r10,r5,12
 1001b74:	22400304 	addi	r9,r4,12
 1001b78:	2c21883a 	add	r16,r5,r16
 1001b7c:	2811883a 	mov	r8,r5
 1001b80:	200f883a 	mov	r7,r4
 1001b84:	41000017 	ldw	r4,0(r8)
 1001b88:	1fc00017 	ldw	ra,0(r3)
 1001b8c:	63c00017 	ldw	r15,0(r12)
 1001b90:	39000015 	stw	r4,0(r7)
 1001b94:	53800017 	ldw	r14,0(r10)
 1001b98:	6fc00015 	stw	ra,0(r13)
 1001b9c:	5bc00015 	stw	r15,0(r11)
 1001ba0:	4b800015 	stw	r14,0(r9)
 1001ba4:	18c00404 	addi	r3,r3,16
 1001ba8:	39c00404 	addi	r7,r7,16
 1001bac:	42000404 	addi	r8,r8,16
 1001bb0:	6b400404 	addi	r13,r13,16
 1001bb4:	63000404 	addi	r12,r12,16
 1001bb8:	5ac00404 	addi	r11,r11,16
 1001bbc:	52800404 	addi	r10,r10,16
 1001bc0:	4a400404 	addi	r9,r9,16
 1001bc4:	1c3fef1e 	bne	r3,r16,1001b84 <__alt_mem_TCDM+0xfefc0b84>
 1001bc8:	89c00044 	addi	r7,r17,1
 1001bcc:	380e913a 	slli	r7,r7,4
 1001bd0:	310003cc 	andi	r4,r6,15
 1001bd4:	02c000c4 	movi	r11,3
 1001bd8:	11c7883a 	add	r3,r2,r7
 1001bdc:	29cb883a 	add	r5,r5,r7
 1001be0:	5900212e 	bgeu	r11,r4,1001c68 <memcpy+0x140>
 1001be4:	1813883a 	mov	r9,r3
 1001be8:	2811883a 	mov	r8,r5
 1001bec:	200f883a 	mov	r7,r4
 1001bf0:	42800017 	ldw	r10,0(r8)
 1001bf4:	4a400104 	addi	r9,r9,4
 1001bf8:	39ffff04 	addi	r7,r7,-4
 1001bfc:	4abfff15 	stw	r10,-4(r9)
 1001c00:	42000104 	addi	r8,r8,4
 1001c04:	59fffa36 	bltu	r11,r7,1001bf0 <__alt_mem_TCDM+0xfefc0bf0>
 1001c08:	213fff04 	addi	r4,r4,-4
 1001c0c:	2008d0ba 	srli	r4,r4,2
 1001c10:	318000cc 	andi	r6,r6,3
 1001c14:	21000044 	addi	r4,r4,1
 1001c18:	2109883a 	add	r4,r4,r4
 1001c1c:	2109883a 	add	r4,r4,r4
 1001c20:	1907883a 	add	r3,r3,r4
 1001c24:	290b883a 	add	r5,r5,r4
 1001c28:	30000626 	beq	r6,zero,1001c44 <memcpy+0x11c>
 1001c2c:	198d883a 	add	r6,r3,r6
 1001c30:	29c00003 	ldbu	r7,0(r5)
 1001c34:	18c00044 	addi	r3,r3,1
 1001c38:	29400044 	addi	r5,r5,1
 1001c3c:	19ffffc5 	stb	r7,-1(r3)
 1001c40:	19bffb1e 	bne	r3,r6,1001c30 <__alt_mem_TCDM+0xfefc0c30>
 1001c44:	dfc00217 	ldw	ra,8(sp)
 1001c48:	dc400117 	ldw	r17,4(sp)
 1001c4c:	dc000017 	ldw	r16,0(sp)
 1001c50:	dec00304 	addi	sp,sp,12
 1001c54:	f800283a 	ret
 1001c58:	2007883a 	mov	r3,r4
 1001c5c:	003ff206 	br	1001c28 <__alt_mem_TCDM+0xfefc0c28>
 1001c60:	2007883a 	mov	r3,r4
 1001c64:	003ff106 	br	1001c2c <__alt_mem_TCDM+0xfefc0c2c>
 1001c68:	200d883a 	mov	r6,r4
 1001c6c:	003fee06 	br	1001c28 <__alt_mem_TCDM+0xfefc0c28>

01001c70 <memmove>:
 1001c70:	2005883a 	mov	r2,r4
 1001c74:	29000b2e 	bgeu	r5,r4,1001ca4 <memmove+0x34>
 1001c78:	298f883a 	add	r7,r5,r6
 1001c7c:	21c0092e 	bgeu	r4,r7,1001ca4 <memmove+0x34>
 1001c80:	2187883a 	add	r3,r4,r6
 1001c84:	198bc83a 	sub	r5,r3,r6
 1001c88:	30004826 	beq	r6,zero,1001dac <memmove+0x13c>
 1001c8c:	39ffffc4 	addi	r7,r7,-1
 1001c90:	39000003 	ldbu	r4,0(r7)
 1001c94:	18ffffc4 	addi	r3,r3,-1
 1001c98:	19000005 	stb	r4,0(r3)
 1001c9c:	28fffb1e 	bne	r5,r3,1001c8c <__alt_mem_TCDM+0xfefc0c8c>
 1001ca0:	f800283a 	ret
 1001ca4:	00c003c4 	movi	r3,15
 1001ca8:	1980412e 	bgeu	r3,r6,1001db0 <memmove+0x140>
 1001cac:	2886b03a 	or	r3,r5,r2
 1001cb0:	18c000cc 	andi	r3,r3,3
 1001cb4:	1800401e 	bne	r3,zero,1001db8 <memmove+0x148>
 1001cb8:	33fffc04 	addi	r15,r6,-16
 1001cbc:	781ed13a 	srli	r15,r15,4
 1001cc0:	28c00104 	addi	r3,r5,4
 1001cc4:	13400104 	addi	r13,r2,4
 1001cc8:	781c913a 	slli	r14,r15,4
 1001ccc:	2b000204 	addi	r12,r5,8
 1001cd0:	12c00204 	addi	r11,r2,8
 1001cd4:	73800504 	addi	r14,r14,20
 1001cd8:	2a800304 	addi	r10,r5,12
 1001cdc:	12400304 	addi	r9,r2,12
 1001ce0:	2b9d883a 	add	r14,r5,r14
 1001ce4:	2811883a 	mov	r8,r5
 1001ce8:	100f883a 	mov	r7,r2
 1001cec:	41000017 	ldw	r4,0(r8)
 1001cf0:	39c00404 	addi	r7,r7,16
 1001cf4:	18c00404 	addi	r3,r3,16
 1001cf8:	393ffc15 	stw	r4,-16(r7)
 1001cfc:	193ffc17 	ldw	r4,-16(r3)
 1001d00:	6b400404 	addi	r13,r13,16
 1001d04:	5ac00404 	addi	r11,r11,16
 1001d08:	693ffc15 	stw	r4,-16(r13)
 1001d0c:	61000017 	ldw	r4,0(r12)
 1001d10:	4a400404 	addi	r9,r9,16
 1001d14:	42000404 	addi	r8,r8,16
 1001d18:	593ffc15 	stw	r4,-16(r11)
 1001d1c:	51000017 	ldw	r4,0(r10)
 1001d20:	63000404 	addi	r12,r12,16
 1001d24:	52800404 	addi	r10,r10,16
 1001d28:	493ffc15 	stw	r4,-16(r9)
 1001d2c:	1bbfef1e 	bne	r3,r14,1001cec <__alt_mem_TCDM+0xfefc0cec>
 1001d30:	79000044 	addi	r4,r15,1
 1001d34:	2008913a 	slli	r4,r4,4
 1001d38:	328003cc 	andi	r10,r6,15
 1001d3c:	02c000c4 	movi	r11,3
 1001d40:	1107883a 	add	r3,r2,r4
 1001d44:	290b883a 	add	r5,r5,r4
 1001d48:	5a801e2e 	bgeu	r11,r10,1001dc4 <memmove+0x154>
 1001d4c:	1813883a 	mov	r9,r3
 1001d50:	2811883a 	mov	r8,r5
 1001d54:	500f883a 	mov	r7,r10
 1001d58:	41000017 	ldw	r4,0(r8)
 1001d5c:	4a400104 	addi	r9,r9,4
 1001d60:	39ffff04 	addi	r7,r7,-4
 1001d64:	493fff15 	stw	r4,-4(r9)
 1001d68:	42000104 	addi	r8,r8,4
 1001d6c:	59fffa36 	bltu	r11,r7,1001d58 <__alt_mem_TCDM+0xfefc0d58>
 1001d70:	513fff04 	addi	r4,r10,-4
 1001d74:	2008d0ba 	srli	r4,r4,2
 1001d78:	318000cc 	andi	r6,r6,3
 1001d7c:	21000044 	addi	r4,r4,1
 1001d80:	2109883a 	add	r4,r4,r4
 1001d84:	2109883a 	add	r4,r4,r4
 1001d88:	1907883a 	add	r3,r3,r4
 1001d8c:	290b883a 	add	r5,r5,r4
 1001d90:	30000b26 	beq	r6,zero,1001dc0 <memmove+0x150>
 1001d94:	198d883a 	add	r6,r3,r6
 1001d98:	29c00003 	ldbu	r7,0(r5)
 1001d9c:	18c00044 	addi	r3,r3,1
 1001da0:	29400044 	addi	r5,r5,1
 1001da4:	19ffffc5 	stb	r7,-1(r3)
 1001da8:	19bffb1e 	bne	r3,r6,1001d98 <__alt_mem_TCDM+0xfefc0d98>
 1001dac:	f800283a 	ret
 1001db0:	1007883a 	mov	r3,r2
 1001db4:	003ff606 	br	1001d90 <__alt_mem_TCDM+0xfefc0d90>
 1001db8:	1007883a 	mov	r3,r2
 1001dbc:	003ff506 	br	1001d94 <__alt_mem_TCDM+0xfefc0d94>
 1001dc0:	f800283a 	ret
 1001dc4:	500d883a 	mov	r6,r10
 1001dc8:	003ff106 	br	1001d90 <__alt_mem_TCDM+0xfefc0d90>

01001dcc <memset>:
 1001dcc:	20c000cc 	andi	r3,r4,3
 1001dd0:	2005883a 	mov	r2,r4
 1001dd4:	18004426 	beq	r3,zero,1001ee8 <memset+0x11c>
 1001dd8:	31ffffc4 	addi	r7,r6,-1
 1001ddc:	30004026 	beq	r6,zero,1001ee0 <memset+0x114>
 1001de0:	2813883a 	mov	r9,r5
 1001de4:	200d883a 	mov	r6,r4
 1001de8:	2007883a 	mov	r3,r4
 1001dec:	00000406 	br	1001e00 <memset+0x34>
 1001df0:	3a3fffc4 	addi	r8,r7,-1
 1001df4:	31800044 	addi	r6,r6,1
 1001df8:	38003926 	beq	r7,zero,1001ee0 <memset+0x114>
 1001dfc:	400f883a 	mov	r7,r8
 1001e00:	18c00044 	addi	r3,r3,1
 1001e04:	32400005 	stb	r9,0(r6)
 1001e08:	1a0000cc 	andi	r8,r3,3
 1001e0c:	403ff81e 	bne	r8,zero,1001df0 <__alt_mem_TCDM+0xfefc0df0>
 1001e10:	010000c4 	movi	r4,3
 1001e14:	21c02d2e 	bgeu	r4,r7,1001ecc <memset+0x100>
 1001e18:	29003fcc 	andi	r4,r5,255
 1001e1c:	200c923a 	slli	r6,r4,8
 1001e20:	3108b03a 	or	r4,r6,r4
 1001e24:	200c943a 	slli	r6,r4,16
 1001e28:	218cb03a 	or	r6,r4,r6
 1001e2c:	010003c4 	movi	r4,15
 1001e30:	21c0182e 	bgeu	r4,r7,1001e94 <memset+0xc8>
 1001e34:	3b3ffc04 	addi	r12,r7,-16
 1001e38:	6018d13a 	srli	r12,r12,4
 1001e3c:	1a000104 	addi	r8,r3,4
 1001e40:	1ac00204 	addi	r11,r3,8
 1001e44:	6008913a 	slli	r4,r12,4
 1001e48:	1a800304 	addi	r10,r3,12
 1001e4c:	1813883a 	mov	r9,r3
 1001e50:	21000504 	addi	r4,r4,20
 1001e54:	1909883a 	add	r4,r3,r4
 1001e58:	49800015 	stw	r6,0(r9)
 1001e5c:	41800015 	stw	r6,0(r8)
 1001e60:	59800015 	stw	r6,0(r11)
 1001e64:	51800015 	stw	r6,0(r10)
 1001e68:	42000404 	addi	r8,r8,16
 1001e6c:	4a400404 	addi	r9,r9,16
 1001e70:	5ac00404 	addi	r11,r11,16
 1001e74:	52800404 	addi	r10,r10,16
 1001e78:	413ff71e 	bne	r8,r4,1001e58 <__alt_mem_TCDM+0xfefc0e58>
 1001e7c:	63000044 	addi	r12,r12,1
 1001e80:	6018913a 	slli	r12,r12,4
 1001e84:	39c003cc 	andi	r7,r7,15
 1001e88:	010000c4 	movi	r4,3
 1001e8c:	1b07883a 	add	r3,r3,r12
 1001e90:	21c00e2e 	bgeu	r4,r7,1001ecc <memset+0x100>
 1001e94:	1813883a 	mov	r9,r3
 1001e98:	3811883a 	mov	r8,r7
 1001e9c:	010000c4 	movi	r4,3
 1001ea0:	49800015 	stw	r6,0(r9)
 1001ea4:	423fff04 	addi	r8,r8,-4
 1001ea8:	4a400104 	addi	r9,r9,4
 1001eac:	223ffc36 	bltu	r4,r8,1001ea0 <__alt_mem_TCDM+0xfefc0ea0>
 1001eb0:	393fff04 	addi	r4,r7,-4
 1001eb4:	2008d0ba 	srli	r4,r4,2
 1001eb8:	39c000cc 	andi	r7,r7,3
 1001ebc:	21000044 	addi	r4,r4,1
 1001ec0:	2109883a 	add	r4,r4,r4
 1001ec4:	2109883a 	add	r4,r4,r4
 1001ec8:	1907883a 	add	r3,r3,r4
 1001ecc:	38000526 	beq	r7,zero,1001ee4 <memset+0x118>
 1001ed0:	19cf883a 	add	r7,r3,r7
 1001ed4:	19400005 	stb	r5,0(r3)
 1001ed8:	18c00044 	addi	r3,r3,1
 1001edc:	38fffd1e 	bne	r7,r3,1001ed4 <__alt_mem_TCDM+0xfefc0ed4>
 1001ee0:	f800283a 	ret
 1001ee4:	f800283a 	ret
 1001ee8:	2007883a 	mov	r3,r4
 1001eec:	300f883a 	mov	r7,r6
 1001ef0:	003fc706 	br	1001e10 <__alt_mem_TCDM+0xfefc0e10>

01001ef4 <_realloc_r>:
 1001ef4:	defff604 	addi	sp,sp,-40
 1001ef8:	dc800215 	stw	r18,8(sp)
 1001efc:	dfc00915 	stw	ra,36(sp)
 1001f00:	df000815 	stw	fp,32(sp)
 1001f04:	ddc00715 	stw	r23,28(sp)
 1001f08:	dd800615 	stw	r22,24(sp)
 1001f0c:	dd400515 	stw	r21,20(sp)
 1001f10:	dd000415 	stw	r20,16(sp)
 1001f14:	dcc00315 	stw	r19,12(sp)
 1001f18:	dc400115 	stw	r17,4(sp)
 1001f1c:	dc000015 	stw	r16,0(sp)
 1001f20:	3025883a 	mov	r18,r6
 1001f24:	2800b726 	beq	r5,zero,1002204 <_realloc_r+0x310>
 1001f28:	282b883a 	mov	r21,r5
 1001f2c:	2029883a 	mov	r20,r4
 1001f30:	1003a2c0 	call	1003a2c <__malloc_lock>
 1001f34:	a8bfff17 	ldw	r2,-4(r21)
 1001f38:	043fff04 	movi	r16,-4
 1001f3c:	90c002c4 	addi	r3,r18,11
 1001f40:	01000584 	movi	r4,22
 1001f44:	acfffe04 	addi	r19,r21,-8
 1001f48:	1420703a 	and	r16,r2,r16
 1001f4c:	20c0332e 	bgeu	r4,r3,100201c <_realloc_r+0x128>
 1001f50:	047ffe04 	movi	r17,-8
 1001f54:	1c62703a 	and	r17,r3,r17
 1001f58:	8807883a 	mov	r3,r17
 1001f5c:	88005816 	blt	r17,zero,10020c0 <_realloc_r+0x1cc>
 1001f60:	8c805736 	bltu	r17,r18,10020c0 <_realloc_r+0x1cc>
 1001f64:	80c0300e 	bge	r16,r3,1002028 <_realloc_r+0x134>
 1001f68:	07004034 	movhi	fp,256
 1001f6c:	e7189904 	addi	fp,fp,25188
 1001f70:	e1c00217 	ldw	r7,8(fp)
 1001f74:	9c09883a 	add	r4,r19,r16
 1001f78:	22000117 	ldw	r8,4(r4)
 1001f7c:	21c06326 	beq	r4,r7,100210c <_realloc_r+0x218>
 1001f80:	017fff84 	movi	r5,-2
 1001f84:	414a703a 	and	r5,r8,r5
 1001f88:	214b883a 	add	r5,r4,r5
 1001f8c:	29800117 	ldw	r6,4(r5)
 1001f90:	3180004c 	andi	r6,r6,1
 1001f94:	30003f26 	beq	r6,zero,1002094 <_realloc_r+0x1a0>
 1001f98:	1080004c 	andi	r2,r2,1
 1001f9c:	10008326 	beq	r2,zero,10021ac <_realloc_r+0x2b8>
 1001fa0:	900b883a 	mov	r5,r18
 1001fa4:	a009883a 	mov	r4,r20
 1001fa8:	10012380 	call	1001238 <_malloc_r>
 1001fac:	1025883a 	mov	r18,r2
 1001fb0:	10011e26 	beq	r2,zero,100242c <_realloc_r+0x538>
 1001fb4:	a93fff17 	ldw	r4,-4(r21)
 1001fb8:	10fffe04 	addi	r3,r2,-8
 1001fbc:	00bfff84 	movi	r2,-2
 1001fc0:	2084703a 	and	r2,r4,r2
 1001fc4:	9885883a 	add	r2,r19,r2
 1001fc8:	1880ee26 	beq	r3,r2,1002384 <_realloc_r+0x490>
 1001fcc:	81bfff04 	addi	r6,r16,-4
 1001fd0:	00800904 	movi	r2,36
 1001fd4:	1180b836 	bltu	r2,r6,10022b8 <_realloc_r+0x3c4>
 1001fd8:	00c004c4 	movi	r3,19
 1001fdc:	19809636 	bltu	r3,r6,1002238 <_realloc_r+0x344>
 1001fe0:	9005883a 	mov	r2,r18
 1001fe4:	a807883a 	mov	r3,r21
 1001fe8:	19000017 	ldw	r4,0(r3)
 1001fec:	11000015 	stw	r4,0(r2)
 1001ff0:	19000117 	ldw	r4,4(r3)
 1001ff4:	11000115 	stw	r4,4(r2)
 1001ff8:	18c00217 	ldw	r3,8(r3)
 1001ffc:	10c00215 	stw	r3,8(r2)
 1002000:	a80b883a 	mov	r5,r21
 1002004:	a009883a 	mov	r4,r20
 1002008:	1002cc00 	call	1002cc0 <_free_r>
 100200c:	a009883a 	mov	r4,r20
 1002010:	1003a500 	call	1003a50 <__malloc_unlock>
 1002014:	9005883a 	mov	r2,r18
 1002018:	00001206 	br	1002064 <_realloc_r+0x170>
 100201c:	00c00404 	movi	r3,16
 1002020:	1823883a 	mov	r17,r3
 1002024:	003fce06 	br	1001f60 <__alt_mem_TCDM+0xfefc0f60>
 1002028:	a825883a 	mov	r18,r21
 100202c:	8445c83a 	sub	r2,r16,r17
 1002030:	00c003c4 	movi	r3,15
 1002034:	18802636 	bltu	r3,r2,10020d0 <_realloc_r+0x1dc>
 1002038:	99800117 	ldw	r6,4(r19)
 100203c:	9c07883a 	add	r3,r19,r16
 1002040:	3180004c 	andi	r6,r6,1
 1002044:	3420b03a 	or	r16,r6,r16
 1002048:	9c000115 	stw	r16,4(r19)
 100204c:	18800117 	ldw	r2,4(r3)
 1002050:	10800054 	ori	r2,r2,1
 1002054:	18800115 	stw	r2,4(r3)
 1002058:	a009883a 	mov	r4,r20
 100205c:	1003a500 	call	1003a50 <__malloc_unlock>
 1002060:	9005883a 	mov	r2,r18
 1002064:	dfc00917 	ldw	ra,36(sp)
 1002068:	df000817 	ldw	fp,32(sp)
 100206c:	ddc00717 	ldw	r23,28(sp)
 1002070:	dd800617 	ldw	r22,24(sp)
 1002074:	dd400517 	ldw	r21,20(sp)
 1002078:	dd000417 	ldw	r20,16(sp)
 100207c:	dcc00317 	ldw	r19,12(sp)
 1002080:	dc800217 	ldw	r18,8(sp)
 1002084:	dc400117 	ldw	r17,4(sp)
 1002088:	dc000017 	ldw	r16,0(sp)
 100208c:	dec00a04 	addi	sp,sp,40
 1002090:	f800283a 	ret
 1002094:	017fff04 	movi	r5,-4
 1002098:	414a703a 	and	r5,r8,r5
 100209c:	814d883a 	add	r6,r16,r5
 10020a0:	30c01f16 	blt	r6,r3,1002120 <_realloc_r+0x22c>
 10020a4:	20800317 	ldw	r2,12(r4)
 10020a8:	20c00217 	ldw	r3,8(r4)
 10020ac:	a825883a 	mov	r18,r21
 10020b0:	3021883a 	mov	r16,r6
 10020b4:	18800315 	stw	r2,12(r3)
 10020b8:	10c00215 	stw	r3,8(r2)
 10020bc:	003fdb06 	br	100202c <__alt_mem_TCDM+0xfefc102c>
 10020c0:	00800304 	movi	r2,12
 10020c4:	a0800015 	stw	r2,0(r20)
 10020c8:	0005883a 	mov	r2,zero
 10020cc:	003fe506 	br	1002064 <__alt_mem_TCDM+0xfefc1064>
 10020d0:	98c00117 	ldw	r3,4(r19)
 10020d4:	9c4b883a 	add	r5,r19,r17
 10020d8:	11000054 	ori	r4,r2,1
 10020dc:	18c0004c 	andi	r3,r3,1
 10020e0:	1c62b03a 	or	r17,r3,r17
 10020e4:	9c400115 	stw	r17,4(r19)
 10020e8:	29000115 	stw	r4,4(r5)
 10020ec:	2885883a 	add	r2,r5,r2
 10020f0:	10c00117 	ldw	r3,4(r2)
 10020f4:	29400204 	addi	r5,r5,8
 10020f8:	a009883a 	mov	r4,r20
 10020fc:	18c00054 	ori	r3,r3,1
 1002100:	10c00115 	stw	r3,4(r2)
 1002104:	1002cc00 	call	1002cc0 <_free_r>
 1002108:	003fd306 	br	1002058 <__alt_mem_TCDM+0xfefc1058>
 100210c:	017fff04 	movi	r5,-4
 1002110:	414a703a 	and	r5,r8,r5
 1002114:	89800404 	addi	r6,r17,16
 1002118:	8151883a 	add	r8,r16,r5
 100211c:	4180590e 	bge	r8,r6,1002284 <_realloc_r+0x390>
 1002120:	1080004c 	andi	r2,r2,1
 1002124:	103f9e1e 	bne	r2,zero,1001fa0 <__alt_mem_TCDM+0xfefc0fa0>
 1002128:	adbffe17 	ldw	r22,-8(r21)
 100212c:	00bfff04 	movi	r2,-4
 1002130:	9dadc83a 	sub	r22,r19,r22
 1002134:	b1800117 	ldw	r6,4(r22)
 1002138:	3084703a 	and	r2,r6,r2
 100213c:	20002026 	beq	r4,zero,10021c0 <_realloc_r+0x2cc>
 1002140:	80af883a 	add	r23,r16,r2
 1002144:	b96f883a 	add	r23,r23,r5
 1002148:	21c05f26 	beq	r4,r7,10022c8 <_realloc_r+0x3d4>
 100214c:	b8c01c16 	blt	r23,r3,10021c0 <_realloc_r+0x2cc>
 1002150:	20800317 	ldw	r2,12(r4)
 1002154:	20c00217 	ldw	r3,8(r4)
 1002158:	81bfff04 	addi	r6,r16,-4
 100215c:	01000904 	movi	r4,36
 1002160:	18800315 	stw	r2,12(r3)
 1002164:	10c00215 	stw	r3,8(r2)
 1002168:	b0c00217 	ldw	r3,8(r22)
 100216c:	b0800317 	ldw	r2,12(r22)
 1002170:	b4800204 	addi	r18,r22,8
 1002174:	18800315 	stw	r2,12(r3)
 1002178:	10c00215 	stw	r3,8(r2)
 100217c:	21801b36 	bltu	r4,r6,10021ec <_realloc_r+0x2f8>
 1002180:	008004c4 	movi	r2,19
 1002184:	1180352e 	bgeu	r2,r6,100225c <_realloc_r+0x368>
 1002188:	a8800017 	ldw	r2,0(r21)
 100218c:	b0800215 	stw	r2,8(r22)
 1002190:	a8800117 	ldw	r2,4(r21)
 1002194:	b0800315 	stw	r2,12(r22)
 1002198:	008006c4 	movi	r2,27
 100219c:	11807f36 	bltu	r2,r6,100239c <_realloc_r+0x4a8>
 10021a0:	b0800404 	addi	r2,r22,16
 10021a4:	ad400204 	addi	r21,r21,8
 10021a8:	00002d06 	br	1002260 <_realloc_r+0x36c>
 10021ac:	adbffe17 	ldw	r22,-8(r21)
 10021b0:	00bfff04 	movi	r2,-4
 10021b4:	9dadc83a 	sub	r22,r19,r22
 10021b8:	b1000117 	ldw	r4,4(r22)
 10021bc:	2084703a 	and	r2,r4,r2
 10021c0:	b03f7726 	beq	r22,zero,1001fa0 <__alt_mem_TCDM+0xfefc0fa0>
 10021c4:	80af883a 	add	r23,r16,r2
 10021c8:	b8ff7516 	blt	r23,r3,1001fa0 <__alt_mem_TCDM+0xfefc0fa0>
 10021cc:	b0800317 	ldw	r2,12(r22)
 10021d0:	b0c00217 	ldw	r3,8(r22)
 10021d4:	81bfff04 	addi	r6,r16,-4
 10021d8:	01000904 	movi	r4,36
 10021dc:	18800315 	stw	r2,12(r3)
 10021e0:	10c00215 	stw	r3,8(r2)
 10021e4:	b4800204 	addi	r18,r22,8
 10021e8:	21bfe52e 	bgeu	r4,r6,1002180 <__alt_mem_TCDM+0xfefc1180>
 10021ec:	a80b883a 	mov	r5,r21
 10021f0:	9009883a 	mov	r4,r18
 10021f4:	1001c700 	call	1001c70 <memmove>
 10021f8:	b821883a 	mov	r16,r23
 10021fc:	b027883a 	mov	r19,r22
 1002200:	003f8a06 	br	100202c <__alt_mem_TCDM+0xfefc102c>
 1002204:	300b883a 	mov	r5,r6
 1002208:	dfc00917 	ldw	ra,36(sp)
 100220c:	df000817 	ldw	fp,32(sp)
 1002210:	ddc00717 	ldw	r23,28(sp)
 1002214:	dd800617 	ldw	r22,24(sp)
 1002218:	dd400517 	ldw	r21,20(sp)
 100221c:	dd000417 	ldw	r20,16(sp)
 1002220:	dcc00317 	ldw	r19,12(sp)
 1002224:	dc800217 	ldw	r18,8(sp)
 1002228:	dc400117 	ldw	r17,4(sp)
 100222c:	dc000017 	ldw	r16,0(sp)
 1002230:	dec00a04 	addi	sp,sp,40
 1002234:	10012381 	jmpi	1001238 <_malloc_r>
 1002238:	a8c00017 	ldw	r3,0(r21)
 100223c:	90c00015 	stw	r3,0(r18)
 1002240:	a8c00117 	ldw	r3,4(r21)
 1002244:	90c00115 	stw	r3,4(r18)
 1002248:	00c006c4 	movi	r3,27
 100224c:	19804536 	bltu	r3,r6,1002364 <_realloc_r+0x470>
 1002250:	90800204 	addi	r2,r18,8
 1002254:	a8c00204 	addi	r3,r21,8
 1002258:	003f6306 	br	1001fe8 <__alt_mem_TCDM+0xfefc0fe8>
 100225c:	9005883a 	mov	r2,r18
 1002260:	a8c00017 	ldw	r3,0(r21)
 1002264:	b821883a 	mov	r16,r23
 1002268:	b027883a 	mov	r19,r22
 100226c:	10c00015 	stw	r3,0(r2)
 1002270:	a8c00117 	ldw	r3,4(r21)
 1002274:	10c00115 	stw	r3,4(r2)
 1002278:	a8c00217 	ldw	r3,8(r21)
 100227c:	10c00215 	stw	r3,8(r2)
 1002280:	003f6a06 	br	100202c <__alt_mem_TCDM+0xfefc102c>
 1002284:	9c67883a 	add	r19,r19,r17
 1002288:	4445c83a 	sub	r2,r8,r17
 100228c:	e4c00215 	stw	r19,8(fp)
 1002290:	10800054 	ori	r2,r2,1
 1002294:	98800115 	stw	r2,4(r19)
 1002298:	a8bfff17 	ldw	r2,-4(r21)
 100229c:	a009883a 	mov	r4,r20
 10022a0:	1080004c 	andi	r2,r2,1
 10022a4:	1462b03a 	or	r17,r2,r17
 10022a8:	ac7fff15 	stw	r17,-4(r21)
 10022ac:	1003a500 	call	1003a50 <__malloc_unlock>
 10022b0:	a805883a 	mov	r2,r21
 10022b4:	003f6b06 	br	1002064 <__alt_mem_TCDM+0xfefc1064>
 10022b8:	a80b883a 	mov	r5,r21
 10022bc:	9009883a 	mov	r4,r18
 10022c0:	1001c700 	call	1001c70 <memmove>
 10022c4:	003f4e06 	br	1002000 <__alt_mem_TCDM+0xfefc1000>
 10022c8:	89000404 	addi	r4,r17,16
 10022cc:	b93fbc16 	blt	r23,r4,10021c0 <__alt_mem_TCDM+0xfefc11c0>
 10022d0:	b0800317 	ldw	r2,12(r22)
 10022d4:	b0c00217 	ldw	r3,8(r22)
 10022d8:	81bfff04 	addi	r6,r16,-4
 10022dc:	01000904 	movi	r4,36
 10022e0:	18800315 	stw	r2,12(r3)
 10022e4:	10c00215 	stw	r3,8(r2)
 10022e8:	b4800204 	addi	r18,r22,8
 10022ec:	21804336 	bltu	r4,r6,10023fc <_realloc_r+0x508>
 10022f0:	008004c4 	movi	r2,19
 10022f4:	11803f2e 	bgeu	r2,r6,10023f4 <_realloc_r+0x500>
 10022f8:	a8800017 	ldw	r2,0(r21)
 10022fc:	b0800215 	stw	r2,8(r22)
 1002300:	a8800117 	ldw	r2,4(r21)
 1002304:	b0800315 	stw	r2,12(r22)
 1002308:	008006c4 	movi	r2,27
 100230c:	11803f36 	bltu	r2,r6,100240c <_realloc_r+0x518>
 1002310:	b0800404 	addi	r2,r22,16
 1002314:	ad400204 	addi	r21,r21,8
 1002318:	a8c00017 	ldw	r3,0(r21)
 100231c:	10c00015 	stw	r3,0(r2)
 1002320:	a8c00117 	ldw	r3,4(r21)
 1002324:	10c00115 	stw	r3,4(r2)
 1002328:	a8c00217 	ldw	r3,8(r21)
 100232c:	10c00215 	stw	r3,8(r2)
 1002330:	b447883a 	add	r3,r22,r17
 1002334:	bc45c83a 	sub	r2,r23,r17
 1002338:	e0c00215 	stw	r3,8(fp)
 100233c:	10800054 	ori	r2,r2,1
 1002340:	18800115 	stw	r2,4(r3)
 1002344:	b0800117 	ldw	r2,4(r22)
 1002348:	a009883a 	mov	r4,r20
 100234c:	1080004c 	andi	r2,r2,1
 1002350:	1462b03a 	or	r17,r2,r17
 1002354:	b4400115 	stw	r17,4(r22)
 1002358:	1003a500 	call	1003a50 <__malloc_unlock>
 100235c:	9005883a 	mov	r2,r18
 1002360:	003f4006 	br	1002064 <__alt_mem_TCDM+0xfefc1064>
 1002364:	a8c00217 	ldw	r3,8(r21)
 1002368:	90c00215 	stw	r3,8(r18)
 100236c:	a8c00317 	ldw	r3,12(r21)
 1002370:	90c00315 	stw	r3,12(r18)
 1002374:	30801126 	beq	r6,r2,10023bc <_realloc_r+0x4c8>
 1002378:	90800404 	addi	r2,r18,16
 100237c:	a8c00404 	addi	r3,r21,16
 1002380:	003f1906 	br	1001fe8 <__alt_mem_TCDM+0xfefc0fe8>
 1002384:	90ffff17 	ldw	r3,-4(r18)
 1002388:	00bfff04 	movi	r2,-4
 100238c:	a825883a 	mov	r18,r21
 1002390:	1884703a 	and	r2,r3,r2
 1002394:	80a1883a 	add	r16,r16,r2
 1002398:	003f2406 	br	100202c <__alt_mem_TCDM+0xfefc102c>
 100239c:	a8800217 	ldw	r2,8(r21)
 10023a0:	b0800415 	stw	r2,16(r22)
 10023a4:	a8800317 	ldw	r2,12(r21)
 10023a8:	b0800515 	stw	r2,20(r22)
 10023ac:	31000a26 	beq	r6,r4,10023d8 <_realloc_r+0x4e4>
 10023b0:	b0800604 	addi	r2,r22,24
 10023b4:	ad400404 	addi	r21,r21,16
 10023b8:	003fa906 	br	1002260 <__alt_mem_TCDM+0xfefc1260>
 10023bc:	a9000417 	ldw	r4,16(r21)
 10023c0:	90800604 	addi	r2,r18,24
 10023c4:	a8c00604 	addi	r3,r21,24
 10023c8:	91000415 	stw	r4,16(r18)
 10023cc:	a9000517 	ldw	r4,20(r21)
 10023d0:	91000515 	stw	r4,20(r18)
 10023d4:	003f0406 	br	1001fe8 <__alt_mem_TCDM+0xfefc0fe8>
 10023d8:	a8c00417 	ldw	r3,16(r21)
 10023dc:	ad400604 	addi	r21,r21,24
 10023e0:	b0800804 	addi	r2,r22,32
 10023e4:	b0c00615 	stw	r3,24(r22)
 10023e8:	a8ffff17 	ldw	r3,-4(r21)
 10023ec:	b0c00715 	stw	r3,28(r22)
 10023f0:	003f9b06 	br	1002260 <__alt_mem_TCDM+0xfefc1260>
 10023f4:	9005883a 	mov	r2,r18
 10023f8:	003fc706 	br	1002318 <__alt_mem_TCDM+0xfefc1318>
 10023fc:	a80b883a 	mov	r5,r21
 1002400:	9009883a 	mov	r4,r18
 1002404:	1001c700 	call	1001c70 <memmove>
 1002408:	003fc906 	br	1002330 <__alt_mem_TCDM+0xfefc1330>
 100240c:	a8800217 	ldw	r2,8(r21)
 1002410:	b0800415 	stw	r2,16(r22)
 1002414:	a8800317 	ldw	r2,12(r21)
 1002418:	b0800515 	stw	r2,20(r22)
 100241c:	31000726 	beq	r6,r4,100243c <_realloc_r+0x548>
 1002420:	b0800604 	addi	r2,r22,24
 1002424:	ad400404 	addi	r21,r21,16
 1002428:	003fbb06 	br	1002318 <__alt_mem_TCDM+0xfefc1318>
 100242c:	a009883a 	mov	r4,r20
 1002430:	1003a500 	call	1003a50 <__malloc_unlock>
 1002434:	0005883a 	mov	r2,zero
 1002438:	003f0a06 	br	1002064 <__alt_mem_TCDM+0xfefc1064>
 100243c:	a8c00417 	ldw	r3,16(r21)
 1002440:	ad400604 	addi	r21,r21,24
 1002444:	b0800804 	addi	r2,r22,32
 1002448:	b0c00615 	stw	r3,24(r22)
 100244c:	a8ffff17 	ldw	r3,-4(r21)
 1002450:	b0c00715 	stw	r3,28(r22)
 1002454:	003fb006 	br	1002318 <__alt_mem_TCDM+0xfefc1318>

01002458 <_sbrk_r>:
 1002458:	defffd04 	addi	sp,sp,-12
 100245c:	dc000015 	stw	r16,0(sp)
 1002460:	04004074 	movhi	r16,257
 1002464:	dc400115 	stw	r17,4(sp)
 1002468:	8424d504 	addi	r16,r16,-27820
 100246c:	2023883a 	mov	r17,r4
 1002470:	2809883a 	mov	r4,r5
 1002474:	dfc00215 	stw	ra,8(sp)
 1002478:	80000015 	stw	zero,0(r16)
 100247c:	1003c100 	call	1003c10 <sbrk>
 1002480:	00ffffc4 	movi	r3,-1
 1002484:	10c00526 	beq	r2,r3,100249c <_sbrk_r+0x44>
 1002488:	dfc00217 	ldw	ra,8(sp)
 100248c:	dc400117 	ldw	r17,4(sp)
 1002490:	dc000017 	ldw	r16,0(sp)
 1002494:	dec00304 	addi	sp,sp,12
 1002498:	f800283a 	ret
 100249c:	80c00017 	ldw	r3,0(r16)
 10024a0:	183ff926 	beq	r3,zero,1002488 <__alt_mem_TCDM+0xfefc1488>
 10024a4:	88c00015 	stw	r3,0(r17)
 10024a8:	003ff706 	br	1002488 <__alt_mem_TCDM+0xfefc1488>

010024ac <__sread>:
 10024ac:	defffe04 	addi	sp,sp,-8
 10024b0:	dc000015 	stw	r16,0(sp)
 10024b4:	2821883a 	mov	r16,r5
 10024b8:	2940038f 	ldh	r5,14(r5)
 10024bc:	dfc00115 	stw	ra,4(sp)
 10024c0:	10031ec0 	call	10031ec <_read_r>
 10024c4:	10000716 	blt	r2,zero,10024e4 <__sread+0x38>
 10024c8:	80c01417 	ldw	r3,80(r16)
 10024cc:	1887883a 	add	r3,r3,r2
 10024d0:	80c01415 	stw	r3,80(r16)
 10024d4:	dfc00117 	ldw	ra,4(sp)
 10024d8:	dc000017 	ldw	r16,0(sp)
 10024dc:	dec00204 	addi	sp,sp,8
 10024e0:	f800283a 	ret
 10024e4:	80c0030b 	ldhu	r3,12(r16)
 10024e8:	18fbffcc 	andi	r3,r3,61439
 10024ec:	80c0030d 	sth	r3,12(r16)
 10024f0:	dfc00117 	ldw	ra,4(sp)
 10024f4:	dc000017 	ldw	r16,0(sp)
 10024f8:	dec00204 	addi	sp,sp,8
 10024fc:	f800283a 	ret

01002500 <__seofread>:
 1002500:	0005883a 	mov	r2,zero
 1002504:	f800283a 	ret

01002508 <__swrite>:
 1002508:	2880030b 	ldhu	r2,12(r5)
 100250c:	defffb04 	addi	sp,sp,-20
 1002510:	dcc00315 	stw	r19,12(sp)
 1002514:	dc800215 	stw	r18,8(sp)
 1002518:	dc400115 	stw	r17,4(sp)
 100251c:	dc000015 	stw	r16,0(sp)
 1002520:	dfc00415 	stw	ra,16(sp)
 1002524:	10c0400c 	andi	r3,r2,256
 1002528:	2821883a 	mov	r16,r5
 100252c:	2023883a 	mov	r17,r4
 1002530:	3025883a 	mov	r18,r6
 1002534:	3827883a 	mov	r19,r7
 1002538:	18000526 	beq	r3,zero,1002550 <__swrite+0x48>
 100253c:	2940038f 	ldh	r5,14(r5)
 1002540:	01c00084 	movi	r7,2
 1002544:	000d883a 	mov	r6,zero
 1002548:	1002fd00 	call	1002fd0 <_lseek_r>
 100254c:	8080030b 	ldhu	r2,12(r16)
 1002550:	8140038f 	ldh	r5,14(r16)
 1002554:	10bbffcc 	andi	r2,r2,61439
 1002558:	980f883a 	mov	r7,r19
 100255c:	900d883a 	mov	r6,r18
 1002560:	8809883a 	mov	r4,r17
 1002564:	8080030d 	sth	r2,12(r16)
 1002568:	dfc00417 	ldw	ra,16(sp)
 100256c:	dcc00317 	ldw	r19,12(sp)
 1002570:	dc800217 	ldw	r18,8(sp)
 1002574:	dc400117 	ldw	r17,4(sp)
 1002578:	dc000017 	ldw	r16,0(sp)
 100257c:	dec00504 	addi	sp,sp,20
 1002580:	10025e81 	jmpi	10025e8 <_write_r>

01002584 <__sseek>:
 1002584:	defffe04 	addi	sp,sp,-8
 1002588:	dc000015 	stw	r16,0(sp)
 100258c:	2821883a 	mov	r16,r5
 1002590:	2940038f 	ldh	r5,14(r5)
 1002594:	dfc00115 	stw	ra,4(sp)
 1002598:	1002fd00 	call	1002fd0 <_lseek_r>
 100259c:	00ffffc4 	movi	r3,-1
 10025a0:	10c00826 	beq	r2,r3,10025c4 <__sseek+0x40>
 10025a4:	80c0030b 	ldhu	r3,12(r16)
 10025a8:	80801415 	stw	r2,80(r16)
 10025ac:	18c40014 	ori	r3,r3,4096
 10025b0:	80c0030d 	sth	r3,12(r16)
 10025b4:	dfc00117 	ldw	ra,4(sp)
 10025b8:	dc000017 	ldw	r16,0(sp)
 10025bc:	dec00204 	addi	sp,sp,8
 10025c0:	f800283a 	ret
 10025c4:	80c0030b 	ldhu	r3,12(r16)
 10025c8:	18fbffcc 	andi	r3,r3,61439
 10025cc:	80c0030d 	sth	r3,12(r16)
 10025d0:	dfc00117 	ldw	ra,4(sp)
 10025d4:	dc000017 	ldw	r16,0(sp)
 10025d8:	dec00204 	addi	sp,sp,8
 10025dc:	f800283a 	ret

010025e0 <__sclose>:
 10025e0:	2940038f 	ldh	r5,14(r5)
 10025e4:	100279c1 	jmpi	100279c <_close_r>

010025e8 <_write_r>:
 10025e8:	defffd04 	addi	sp,sp,-12
 10025ec:	2805883a 	mov	r2,r5
 10025f0:	dc000015 	stw	r16,0(sp)
 10025f4:	04004074 	movhi	r16,257
 10025f8:	dc400115 	stw	r17,4(sp)
 10025fc:	300b883a 	mov	r5,r6
 1002600:	8424d504 	addi	r16,r16,-27820
 1002604:	2023883a 	mov	r17,r4
 1002608:	380d883a 	mov	r6,r7
 100260c:	1009883a 	mov	r4,r2
 1002610:	dfc00215 	stw	ra,8(sp)
 1002614:	80000015 	stw	zero,0(r16)
 1002618:	1003d2c0 	call	1003d2c <write>
 100261c:	00ffffc4 	movi	r3,-1
 1002620:	10c00526 	beq	r2,r3,1002638 <_write_r+0x50>
 1002624:	dfc00217 	ldw	ra,8(sp)
 1002628:	dc400117 	ldw	r17,4(sp)
 100262c:	dc000017 	ldw	r16,0(sp)
 1002630:	dec00304 	addi	sp,sp,12
 1002634:	f800283a 	ret
 1002638:	80c00017 	ldw	r3,0(r16)
 100263c:	183ff926 	beq	r3,zero,1002624 <__alt_mem_TCDM+0xfefc1624>
 1002640:	88c00015 	stw	r3,0(r17)
 1002644:	003ff706 	br	1002624 <__alt_mem_TCDM+0xfefc1624>

01002648 <__swsetup_r>:
 1002648:	00804034 	movhi	r2,256
 100264c:	defffd04 	addi	sp,sp,-12
 1002650:	109e2404 	addi	r2,r2,30864
 1002654:	dc400115 	stw	r17,4(sp)
 1002658:	2023883a 	mov	r17,r4
 100265c:	11000017 	ldw	r4,0(r2)
 1002660:	dc000015 	stw	r16,0(sp)
 1002664:	dfc00215 	stw	ra,8(sp)
 1002668:	2821883a 	mov	r16,r5
 100266c:	20000226 	beq	r4,zero,1002678 <__swsetup_r+0x30>
 1002670:	20800e17 	ldw	r2,56(r4)
 1002674:	10003126 	beq	r2,zero,100273c <__swsetup_r+0xf4>
 1002678:	8080030b 	ldhu	r2,12(r16)
 100267c:	10c0020c 	andi	r3,r2,8
 1002680:	1009883a 	mov	r4,r2
 1002684:	18000f26 	beq	r3,zero,10026c4 <__swsetup_r+0x7c>
 1002688:	80c00417 	ldw	r3,16(r16)
 100268c:	18001526 	beq	r3,zero,10026e4 <__swsetup_r+0x9c>
 1002690:	1100004c 	andi	r4,r2,1
 1002694:	20001c1e 	bne	r4,zero,1002708 <__swsetup_r+0xc0>
 1002698:	1080008c 	andi	r2,r2,2
 100269c:	1000291e 	bne	r2,zero,1002744 <__swsetup_r+0xfc>
 10026a0:	80800517 	ldw	r2,20(r16)
 10026a4:	80800215 	stw	r2,8(r16)
 10026a8:	18001c26 	beq	r3,zero,100271c <__swsetup_r+0xd4>
 10026ac:	0005883a 	mov	r2,zero
 10026b0:	dfc00217 	ldw	ra,8(sp)
 10026b4:	dc400117 	ldw	r17,4(sp)
 10026b8:	dc000017 	ldw	r16,0(sp)
 10026bc:	dec00304 	addi	sp,sp,12
 10026c0:	f800283a 	ret
 10026c4:	2080040c 	andi	r2,r4,16
 10026c8:	10002e26 	beq	r2,zero,1002784 <__swsetup_r+0x13c>
 10026cc:	2080010c 	andi	r2,r4,4
 10026d0:	10001e1e 	bne	r2,zero,100274c <__swsetup_r+0x104>
 10026d4:	80c00417 	ldw	r3,16(r16)
 10026d8:	20800214 	ori	r2,r4,8
 10026dc:	8080030d 	sth	r2,12(r16)
 10026e0:	183feb1e 	bne	r3,zero,1002690 <__alt_mem_TCDM+0xfefc1690>
 10026e4:	1100a00c 	andi	r4,r2,640
 10026e8:	01408004 	movi	r5,512
 10026ec:	217fe826 	beq	r4,r5,1002690 <__alt_mem_TCDM+0xfefc1690>
 10026f0:	800b883a 	mov	r5,r16
 10026f4:	8809883a 	mov	r4,r17
 10026f8:	10030300 	call	1003030 <__smakebuf_r>
 10026fc:	8080030b 	ldhu	r2,12(r16)
 1002700:	80c00417 	ldw	r3,16(r16)
 1002704:	003fe206 	br	1002690 <__alt_mem_TCDM+0xfefc1690>
 1002708:	80800517 	ldw	r2,20(r16)
 100270c:	80000215 	stw	zero,8(r16)
 1002710:	0085c83a 	sub	r2,zero,r2
 1002714:	80800615 	stw	r2,24(r16)
 1002718:	183fe41e 	bne	r3,zero,10026ac <__alt_mem_TCDM+0xfefc16ac>
 100271c:	80c0030b 	ldhu	r3,12(r16)
 1002720:	0005883a 	mov	r2,zero
 1002724:	1900200c 	andi	r4,r3,128
 1002728:	203fe126 	beq	r4,zero,10026b0 <__alt_mem_TCDM+0xfefc16b0>
 100272c:	18c01014 	ori	r3,r3,64
 1002730:	80c0030d 	sth	r3,12(r16)
 1002734:	00bfffc4 	movi	r2,-1
 1002738:	003fdd06 	br	10026b0 <__alt_mem_TCDM+0xfefc16b0>
 100273c:	1000ba40 	call	1000ba4 <__sinit>
 1002740:	003fcd06 	br	1002678 <__alt_mem_TCDM+0xfefc1678>
 1002744:	0005883a 	mov	r2,zero
 1002748:	003fd606 	br	10026a4 <__alt_mem_TCDM+0xfefc16a4>
 100274c:	81400c17 	ldw	r5,48(r16)
 1002750:	28000626 	beq	r5,zero,100276c <__swsetup_r+0x124>
 1002754:	80801004 	addi	r2,r16,64
 1002758:	28800326 	beq	r5,r2,1002768 <__swsetup_r+0x120>
 100275c:	8809883a 	mov	r4,r17
 1002760:	1002cc00 	call	1002cc0 <_free_r>
 1002764:	8100030b 	ldhu	r4,12(r16)
 1002768:	80000c15 	stw	zero,48(r16)
 100276c:	80c00417 	ldw	r3,16(r16)
 1002770:	00bff6c4 	movi	r2,-37
 1002774:	1108703a 	and	r4,r2,r4
 1002778:	80000115 	stw	zero,4(r16)
 100277c:	80c00015 	stw	r3,0(r16)
 1002780:	003fd506 	br	10026d8 <__alt_mem_TCDM+0xfefc16d8>
 1002784:	00800244 	movi	r2,9
 1002788:	88800015 	stw	r2,0(r17)
 100278c:	20801014 	ori	r2,r4,64
 1002790:	8080030d 	sth	r2,12(r16)
 1002794:	00bfffc4 	movi	r2,-1
 1002798:	003fc506 	br	10026b0 <__alt_mem_TCDM+0xfefc16b0>

0100279c <_close_r>:
 100279c:	defffd04 	addi	sp,sp,-12
 10027a0:	dc000015 	stw	r16,0(sp)
 10027a4:	04004074 	movhi	r16,257
 10027a8:	dc400115 	stw	r17,4(sp)
 10027ac:	8424d504 	addi	r16,r16,-27820
 10027b0:	2023883a 	mov	r17,r4
 10027b4:	2809883a 	mov	r4,r5
 10027b8:	dfc00215 	stw	ra,8(sp)
 10027bc:	80000015 	stw	zero,0(r16)
 10027c0:	10034ec0 	call	10034ec <close>
 10027c4:	00ffffc4 	movi	r3,-1
 10027c8:	10c00526 	beq	r2,r3,10027e0 <_close_r+0x44>
 10027cc:	dfc00217 	ldw	ra,8(sp)
 10027d0:	dc400117 	ldw	r17,4(sp)
 10027d4:	dc000017 	ldw	r16,0(sp)
 10027d8:	dec00304 	addi	sp,sp,12
 10027dc:	f800283a 	ret
 10027e0:	80c00017 	ldw	r3,0(r16)
 10027e4:	183ff926 	beq	r3,zero,10027cc <__alt_mem_TCDM+0xfefc17cc>
 10027e8:	88c00015 	stw	r3,0(r17)
 10027ec:	003ff706 	br	10027cc <__alt_mem_TCDM+0xfefc17cc>

010027f0 <_fclose_r>:
 10027f0:	28003926 	beq	r5,zero,10028d8 <_fclose_r+0xe8>
 10027f4:	defffc04 	addi	sp,sp,-16
 10027f8:	dc400115 	stw	r17,4(sp)
 10027fc:	dc000015 	stw	r16,0(sp)
 1002800:	dfc00315 	stw	ra,12(sp)
 1002804:	dc800215 	stw	r18,8(sp)
 1002808:	2023883a 	mov	r17,r4
 100280c:	2821883a 	mov	r16,r5
 1002810:	20000226 	beq	r4,zero,100281c <_fclose_r+0x2c>
 1002814:	20800e17 	ldw	r2,56(r4)
 1002818:	10002726 	beq	r2,zero,10028b8 <_fclose_r+0xc8>
 100281c:	8080030f 	ldh	r2,12(r16)
 1002820:	1000071e 	bne	r2,zero,1002840 <_fclose_r+0x50>
 1002824:	0005883a 	mov	r2,zero
 1002828:	dfc00317 	ldw	ra,12(sp)
 100282c:	dc800217 	ldw	r18,8(sp)
 1002830:	dc400117 	ldw	r17,4(sp)
 1002834:	dc000017 	ldw	r16,0(sp)
 1002838:	dec00404 	addi	sp,sp,16
 100283c:	f800283a 	ret
 1002840:	800b883a 	mov	r5,r16
 1002844:	8809883a 	mov	r4,r17
 1002848:	10028f40 	call	10028f4 <__sflush_r>
 100284c:	1025883a 	mov	r18,r2
 1002850:	80800b17 	ldw	r2,44(r16)
 1002854:	10000426 	beq	r2,zero,1002868 <_fclose_r+0x78>
 1002858:	81400717 	ldw	r5,28(r16)
 100285c:	8809883a 	mov	r4,r17
 1002860:	103ee83a 	callr	r2
 1002864:	10001616 	blt	r2,zero,10028c0 <_fclose_r+0xd0>
 1002868:	8080030b 	ldhu	r2,12(r16)
 100286c:	1080200c 	andi	r2,r2,128
 1002870:	1000151e 	bne	r2,zero,10028c8 <_fclose_r+0xd8>
 1002874:	81400c17 	ldw	r5,48(r16)
 1002878:	28000526 	beq	r5,zero,1002890 <_fclose_r+0xa0>
 100287c:	80801004 	addi	r2,r16,64
 1002880:	28800226 	beq	r5,r2,100288c <_fclose_r+0x9c>
 1002884:	8809883a 	mov	r4,r17
 1002888:	1002cc00 	call	1002cc0 <_free_r>
 100288c:	80000c15 	stw	zero,48(r16)
 1002890:	81401117 	ldw	r5,68(r16)
 1002894:	28000326 	beq	r5,zero,10028a4 <_fclose_r+0xb4>
 1002898:	8809883a 	mov	r4,r17
 100289c:	1002cc00 	call	1002cc0 <_free_r>
 10028a0:	80001115 	stw	zero,68(r16)
 10028a4:	1000bb40 	call	1000bb4 <__sfp_lock_acquire>
 10028a8:	8000030d 	sth	zero,12(r16)
 10028ac:	1000bb80 	call	1000bb8 <__sfp_lock_release>
 10028b0:	9005883a 	mov	r2,r18
 10028b4:	003fdc06 	br	1002828 <__alt_mem_TCDM+0xfefc1828>
 10028b8:	1000ba40 	call	1000ba4 <__sinit>
 10028bc:	003fd706 	br	100281c <__alt_mem_TCDM+0xfefc181c>
 10028c0:	04bfffc4 	movi	r18,-1
 10028c4:	003fe806 	br	1002868 <__alt_mem_TCDM+0xfefc1868>
 10028c8:	81400417 	ldw	r5,16(r16)
 10028cc:	8809883a 	mov	r4,r17
 10028d0:	1002cc00 	call	1002cc0 <_free_r>
 10028d4:	003fe706 	br	1002874 <__alt_mem_TCDM+0xfefc1874>
 10028d8:	0005883a 	mov	r2,zero
 10028dc:	f800283a 	ret

010028e0 <fclose>:
 10028e0:	00804034 	movhi	r2,256
 10028e4:	109e2404 	addi	r2,r2,30864
 10028e8:	200b883a 	mov	r5,r4
 10028ec:	11000017 	ldw	r4,0(r2)
 10028f0:	10027f01 	jmpi	10027f0 <_fclose_r>

010028f4 <__sflush_r>:
 10028f4:	2880030b 	ldhu	r2,12(r5)
 10028f8:	defffb04 	addi	sp,sp,-20
 10028fc:	dcc00315 	stw	r19,12(sp)
 1002900:	dc400115 	stw	r17,4(sp)
 1002904:	dfc00415 	stw	ra,16(sp)
 1002908:	dc800215 	stw	r18,8(sp)
 100290c:	dc000015 	stw	r16,0(sp)
 1002910:	10c0020c 	andi	r3,r2,8
 1002914:	2823883a 	mov	r17,r5
 1002918:	2027883a 	mov	r19,r4
 100291c:	1800311e 	bne	r3,zero,10029e4 <__sflush_r+0xf0>
 1002920:	28c00117 	ldw	r3,4(r5)
 1002924:	10820014 	ori	r2,r2,2048
 1002928:	2880030d 	sth	r2,12(r5)
 100292c:	00c04b0e 	bge	zero,r3,1002a5c <__sflush_r+0x168>
 1002930:	8a000a17 	ldw	r8,40(r17)
 1002934:	40002326 	beq	r8,zero,10029c4 <__sflush_r+0xd0>
 1002938:	9c000017 	ldw	r16,0(r19)
 100293c:	10c4000c 	andi	r3,r2,4096
 1002940:	98000015 	stw	zero,0(r19)
 1002944:	18004826 	beq	r3,zero,1002a68 <__sflush_r+0x174>
 1002948:	89801417 	ldw	r6,80(r17)
 100294c:	10c0010c 	andi	r3,r2,4
 1002950:	18000626 	beq	r3,zero,100296c <__sflush_r+0x78>
 1002954:	88c00117 	ldw	r3,4(r17)
 1002958:	88800c17 	ldw	r2,48(r17)
 100295c:	30cdc83a 	sub	r6,r6,r3
 1002960:	10000226 	beq	r2,zero,100296c <__sflush_r+0x78>
 1002964:	88800f17 	ldw	r2,60(r17)
 1002968:	308dc83a 	sub	r6,r6,r2
 100296c:	89400717 	ldw	r5,28(r17)
 1002970:	000f883a 	mov	r7,zero
 1002974:	9809883a 	mov	r4,r19
 1002978:	403ee83a 	callr	r8
 100297c:	00ffffc4 	movi	r3,-1
 1002980:	10c04426 	beq	r2,r3,1002a94 <__sflush_r+0x1a0>
 1002984:	88c0030b 	ldhu	r3,12(r17)
 1002988:	89000417 	ldw	r4,16(r17)
 100298c:	88000115 	stw	zero,4(r17)
 1002990:	197dffcc 	andi	r5,r3,63487
 1002994:	8940030d 	sth	r5,12(r17)
 1002998:	89000015 	stw	r4,0(r17)
 100299c:	18c4000c 	andi	r3,r3,4096
 10029a0:	18002c1e 	bne	r3,zero,1002a54 <__sflush_r+0x160>
 10029a4:	89400c17 	ldw	r5,48(r17)
 10029a8:	9c000015 	stw	r16,0(r19)
 10029ac:	28000526 	beq	r5,zero,10029c4 <__sflush_r+0xd0>
 10029b0:	88801004 	addi	r2,r17,64
 10029b4:	28800226 	beq	r5,r2,10029c0 <__sflush_r+0xcc>
 10029b8:	9809883a 	mov	r4,r19
 10029bc:	1002cc00 	call	1002cc0 <_free_r>
 10029c0:	88000c15 	stw	zero,48(r17)
 10029c4:	0005883a 	mov	r2,zero
 10029c8:	dfc00417 	ldw	ra,16(sp)
 10029cc:	dcc00317 	ldw	r19,12(sp)
 10029d0:	dc800217 	ldw	r18,8(sp)
 10029d4:	dc400117 	ldw	r17,4(sp)
 10029d8:	dc000017 	ldw	r16,0(sp)
 10029dc:	dec00504 	addi	sp,sp,20
 10029e0:	f800283a 	ret
 10029e4:	2c800417 	ldw	r18,16(r5)
 10029e8:	903ff626 	beq	r18,zero,10029c4 <__alt_mem_TCDM+0xfefc19c4>
 10029ec:	2c000017 	ldw	r16,0(r5)
 10029f0:	108000cc 	andi	r2,r2,3
 10029f4:	2c800015 	stw	r18,0(r5)
 10029f8:	84a1c83a 	sub	r16,r16,r18
 10029fc:	1000131e 	bne	r2,zero,1002a4c <__sflush_r+0x158>
 1002a00:	28800517 	ldw	r2,20(r5)
 1002a04:	88800215 	stw	r2,8(r17)
 1002a08:	04000316 	blt	zero,r16,1002a18 <__sflush_r+0x124>
 1002a0c:	003fed06 	br	10029c4 <__alt_mem_TCDM+0xfefc19c4>
 1002a10:	90a5883a 	add	r18,r18,r2
 1002a14:	043feb0e 	bge	zero,r16,10029c4 <__alt_mem_TCDM+0xfefc19c4>
 1002a18:	88800917 	ldw	r2,36(r17)
 1002a1c:	89400717 	ldw	r5,28(r17)
 1002a20:	800f883a 	mov	r7,r16
 1002a24:	900d883a 	mov	r6,r18
 1002a28:	9809883a 	mov	r4,r19
 1002a2c:	103ee83a 	callr	r2
 1002a30:	80a1c83a 	sub	r16,r16,r2
 1002a34:	00bff616 	blt	zero,r2,1002a10 <__alt_mem_TCDM+0xfefc1a10>
 1002a38:	88c0030b 	ldhu	r3,12(r17)
 1002a3c:	00bfffc4 	movi	r2,-1
 1002a40:	18c01014 	ori	r3,r3,64
 1002a44:	88c0030d 	sth	r3,12(r17)
 1002a48:	003fdf06 	br	10029c8 <__alt_mem_TCDM+0xfefc19c8>
 1002a4c:	0005883a 	mov	r2,zero
 1002a50:	003fec06 	br	1002a04 <__alt_mem_TCDM+0xfefc1a04>
 1002a54:	88801415 	stw	r2,80(r17)
 1002a58:	003fd206 	br	10029a4 <__alt_mem_TCDM+0xfefc19a4>
 1002a5c:	28c00f17 	ldw	r3,60(r5)
 1002a60:	00ffb316 	blt	zero,r3,1002930 <__alt_mem_TCDM+0xfefc1930>
 1002a64:	003fd706 	br	10029c4 <__alt_mem_TCDM+0xfefc19c4>
 1002a68:	89400717 	ldw	r5,28(r17)
 1002a6c:	000d883a 	mov	r6,zero
 1002a70:	01c00044 	movi	r7,1
 1002a74:	9809883a 	mov	r4,r19
 1002a78:	403ee83a 	callr	r8
 1002a7c:	100d883a 	mov	r6,r2
 1002a80:	00bfffc4 	movi	r2,-1
 1002a84:	30801426 	beq	r6,r2,1002ad8 <__sflush_r+0x1e4>
 1002a88:	8880030b 	ldhu	r2,12(r17)
 1002a8c:	8a000a17 	ldw	r8,40(r17)
 1002a90:	003fae06 	br	100294c <__alt_mem_TCDM+0xfefc194c>
 1002a94:	98c00017 	ldw	r3,0(r19)
 1002a98:	183fba26 	beq	r3,zero,1002984 <__alt_mem_TCDM+0xfefc1984>
 1002a9c:	01000744 	movi	r4,29
 1002aa0:	19000626 	beq	r3,r4,1002abc <__sflush_r+0x1c8>
 1002aa4:	01000584 	movi	r4,22
 1002aa8:	19000426 	beq	r3,r4,1002abc <__sflush_r+0x1c8>
 1002aac:	88c0030b 	ldhu	r3,12(r17)
 1002ab0:	18c01014 	ori	r3,r3,64
 1002ab4:	88c0030d 	sth	r3,12(r17)
 1002ab8:	003fc306 	br	10029c8 <__alt_mem_TCDM+0xfefc19c8>
 1002abc:	8880030b 	ldhu	r2,12(r17)
 1002ac0:	88c00417 	ldw	r3,16(r17)
 1002ac4:	88000115 	stw	zero,4(r17)
 1002ac8:	10bdffcc 	andi	r2,r2,63487
 1002acc:	8880030d 	sth	r2,12(r17)
 1002ad0:	88c00015 	stw	r3,0(r17)
 1002ad4:	003fb306 	br	10029a4 <__alt_mem_TCDM+0xfefc19a4>
 1002ad8:	98800017 	ldw	r2,0(r19)
 1002adc:	103fea26 	beq	r2,zero,1002a88 <__alt_mem_TCDM+0xfefc1a88>
 1002ae0:	00c00744 	movi	r3,29
 1002ae4:	10c00226 	beq	r2,r3,1002af0 <__sflush_r+0x1fc>
 1002ae8:	00c00584 	movi	r3,22
 1002aec:	10c0031e 	bne	r2,r3,1002afc <__sflush_r+0x208>
 1002af0:	9c000015 	stw	r16,0(r19)
 1002af4:	0005883a 	mov	r2,zero
 1002af8:	003fb306 	br	10029c8 <__alt_mem_TCDM+0xfefc19c8>
 1002afc:	88c0030b 	ldhu	r3,12(r17)
 1002b00:	3005883a 	mov	r2,r6
 1002b04:	18c01014 	ori	r3,r3,64
 1002b08:	88c0030d 	sth	r3,12(r17)
 1002b0c:	003fae06 	br	10029c8 <__alt_mem_TCDM+0xfefc19c8>

01002b10 <_fflush_r>:
 1002b10:	defffd04 	addi	sp,sp,-12
 1002b14:	dc000115 	stw	r16,4(sp)
 1002b18:	dfc00215 	stw	ra,8(sp)
 1002b1c:	2021883a 	mov	r16,r4
 1002b20:	20000226 	beq	r4,zero,1002b2c <_fflush_r+0x1c>
 1002b24:	20800e17 	ldw	r2,56(r4)
 1002b28:	10000c26 	beq	r2,zero,1002b5c <_fflush_r+0x4c>
 1002b2c:	2880030f 	ldh	r2,12(r5)
 1002b30:	1000051e 	bne	r2,zero,1002b48 <_fflush_r+0x38>
 1002b34:	0005883a 	mov	r2,zero
 1002b38:	dfc00217 	ldw	ra,8(sp)
 1002b3c:	dc000117 	ldw	r16,4(sp)
 1002b40:	dec00304 	addi	sp,sp,12
 1002b44:	f800283a 	ret
 1002b48:	8009883a 	mov	r4,r16
 1002b4c:	dfc00217 	ldw	ra,8(sp)
 1002b50:	dc000117 	ldw	r16,4(sp)
 1002b54:	dec00304 	addi	sp,sp,12
 1002b58:	10028f41 	jmpi	10028f4 <__sflush_r>
 1002b5c:	d9400015 	stw	r5,0(sp)
 1002b60:	1000ba40 	call	1000ba4 <__sinit>
 1002b64:	d9400017 	ldw	r5,0(sp)
 1002b68:	003ff006 	br	1002b2c <__alt_mem_TCDM+0xfefc1b2c>

01002b6c <fflush>:
 1002b6c:	20000526 	beq	r4,zero,1002b84 <fflush+0x18>
 1002b70:	00804034 	movhi	r2,256
 1002b74:	109e2404 	addi	r2,r2,30864
 1002b78:	200b883a 	mov	r5,r4
 1002b7c:	11000017 	ldw	r4,0(r2)
 1002b80:	1002b101 	jmpi	1002b10 <_fflush_r>
 1002b84:	00804034 	movhi	r2,256
 1002b88:	109e2304 	addi	r2,r2,30860
 1002b8c:	11000017 	ldw	r4,0(r2)
 1002b90:	01404034 	movhi	r5,256
 1002b94:	294ac404 	addi	r5,r5,11024
 1002b98:	10011741 	jmpi	1001174 <_fwalk_reent>

01002b9c <_malloc_trim_r>:
 1002b9c:	defffb04 	addi	sp,sp,-20
 1002ba0:	dcc00315 	stw	r19,12(sp)
 1002ba4:	04c04034 	movhi	r19,256
 1002ba8:	dc800215 	stw	r18,8(sp)
 1002bac:	dc400115 	stw	r17,4(sp)
 1002bb0:	dc000015 	stw	r16,0(sp)
 1002bb4:	dfc00415 	stw	ra,16(sp)
 1002bb8:	2821883a 	mov	r16,r5
 1002bbc:	9cd89904 	addi	r19,r19,25188
 1002bc0:	2025883a 	mov	r18,r4
 1002bc4:	1003a2c0 	call	1003a2c <__malloc_lock>
 1002bc8:	98800217 	ldw	r2,8(r19)
 1002bcc:	14400117 	ldw	r17,4(r2)
 1002bd0:	00bfff04 	movi	r2,-4
 1002bd4:	88a2703a 	and	r17,r17,r2
 1002bd8:	8c21c83a 	sub	r16,r17,r16
 1002bdc:	8403fbc4 	addi	r16,r16,4079
 1002be0:	8020d33a 	srli	r16,r16,12
 1002be4:	0083ffc4 	movi	r2,4095
 1002be8:	843fffc4 	addi	r16,r16,-1
 1002bec:	8020933a 	slli	r16,r16,12
 1002bf0:	1400060e 	bge	r2,r16,1002c0c <_malloc_trim_r+0x70>
 1002bf4:	000b883a 	mov	r5,zero
 1002bf8:	9009883a 	mov	r4,r18
 1002bfc:	10024580 	call	1002458 <_sbrk_r>
 1002c00:	98c00217 	ldw	r3,8(r19)
 1002c04:	1c47883a 	add	r3,r3,r17
 1002c08:	10c00a26 	beq	r2,r3,1002c34 <_malloc_trim_r+0x98>
 1002c0c:	9009883a 	mov	r4,r18
 1002c10:	1003a500 	call	1003a50 <__malloc_unlock>
 1002c14:	0005883a 	mov	r2,zero
 1002c18:	dfc00417 	ldw	ra,16(sp)
 1002c1c:	dcc00317 	ldw	r19,12(sp)
 1002c20:	dc800217 	ldw	r18,8(sp)
 1002c24:	dc400117 	ldw	r17,4(sp)
 1002c28:	dc000017 	ldw	r16,0(sp)
 1002c2c:	dec00504 	addi	sp,sp,20
 1002c30:	f800283a 	ret
 1002c34:	040bc83a 	sub	r5,zero,r16
 1002c38:	9009883a 	mov	r4,r18
 1002c3c:	10024580 	call	1002458 <_sbrk_r>
 1002c40:	00ffffc4 	movi	r3,-1
 1002c44:	10c00d26 	beq	r2,r3,1002c7c <_malloc_trim_r+0xe0>
 1002c48:	00c04074 	movhi	r3,257
 1002c4c:	18e4dd04 	addi	r3,r3,-27788
 1002c50:	18800017 	ldw	r2,0(r3)
 1002c54:	99000217 	ldw	r4,8(r19)
 1002c58:	8c23c83a 	sub	r17,r17,r16
 1002c5c:	8c400054 	ori	r17,r17,1
 1002c60:	1421c83a 	sub	r16,r2,r16
 1002c64:	24400115 	stw	r17,4(r4)
 1002c68:	9009883a 	mov	r4,r18
 1002c6c:	1c000015 	stw	r16,0(r3)
 1002c70:	1003a500 	call	1003a50 <__malloc_unlock>
 1002c74:	00800044 	movi	r2,1
 1002c78:	003fe706 	br	1002c18 <__alt_mem_TCDM+0xfefc1c18>
 1002c7c:	000b883a 	mov	r5,zero
 1002c80:	9009883a 	mov	r4,r18
 1002c84:	10024580 	call	1002458 <_sbrk_r>
 1002c88:	99000217 	ldw	r4,8(r19)
 1002c8c:	014003c4 	movi	r5,15
 1002c90:	1107c83a 	sub	r3,r2,r4
 1002c94:	28ffdd0e 	bge	r5,r3,1002c0c <__alt_mem_TCDM+0xfefc1c0c>
 1002c98:	01404034 	movhi	r5,256
 1002c9c:	295e2504 	addi	r5,r5,30868
 1002ca0:	29400017 	ldw	r5,0(r5)
 1002ca4:	18c00054 	ori	r3,r3,1
 1002ca8:	20c00115 	stw	r3,4(r4)
 1002cac:	00c04074 	movhi	r3,257
 1002cb0:	1145c83a 	sub	r2,r2,r5
 1002cb4:	18e4dd04 	addi	r3,r3,-27788
 1002cb8:	18800015 	stw	r2,0(r3)
 1002cbc:	003fd306 	br	1002c0c <__alt_mem_TCDM+0xfefc1c0c>

01002cc0 <_free_r>:
 1002cc0:	28004126 	beq	r5,zero,1002dc8 <_free_r+0x108>
 1002cc4:	defffd04 	addi	sp,sp,-12
 1002cc8:	dc400115 	stw	r17,4(sp)
 1002ccc:	dc000015 	stw	r16,0(sp)
 1002cd0:	2023883a 	mov	r17,r4
 1002cd4:	2821883a 	mov	r16,r5
 1002cd8:	dfc00215 	stw	ra,8(sp)
 1002cdc:	1003a2c0 	call	1003a2c <__malloc_lock>
 1002ce0:	81ffff17 	ldw	r7,-4(r16)
 1002ce4:	00bfff84 	movi	r2,-2
 1002ce8:	01004034 	movhi	r4,256
 1002cec:	81bffe04 	addi	r6,r16,-8
 1002cf0:	3884703a 	and	r2,r7,r2
 1002cf4:	21189904 	addi	r4,r4,25188
 1002cf8:	308b883a 	add	r5,r6,r2
 1002cfc:	2a400117 	ldw	r9,4(r5)
 1002d00:	22000217 	ldw	r8,8(r4)
 1002d04:	00ffff04 	movi	r3,-4
 1002d08:	48c6703a 	and	r3,r9,r3
 1002d0c:	2a005726 	beq	r5,r8,1002e6c <_free_r+0x1ac>
 1002d10:	28c00115 	stw	r3,4(r5)
 1002d14:	39c0004c 	andi	r7,r7,1
 1002d18:	3800091e 	bne	r7,zero,1002d40 <_free_r+0x80>
 1002d1c:	823ffe17 	ldw	r8,-8(r16)
 1002d20:	22400204 	addi	r9,r4,8
 1002d24:	320dc83a 	sub	r6,r6,r8
 1002d28:	31c00217 	ldw	r7,8(r6)
 1002d2c:	1205883a 	add	r2,r2,r8
 1002d30:	3a406526 	beq	r7,r9,1002ec8 <_free_r+0x208>
 1002d34:	32000317 	ldw	r8,12(r6)
 1002d38:	3a000315 	stw	r8,12(r7)
 1002d3c:	41c00215 	stw	r7,8(r8)
 1002d40:	28cf883a 	add	r7,r5,r3
 1002d44:	39c00117 	ldw	r7,4(r7)
 1002d48:	39c0004c 	andi	r7,r7,1
 1002d4c:	38003a26 	beq	r7,zero,1002e38 <_free_r+0x178>
 1002d50:	10c00054 	ori	r3,r2,1
 1002d54:	30c00115 	stw	r3,4(r6)
 1002d58:	3087883a 	add	r3,r6,r2
 1002d5c:	18800015 	stw	r2,0(r3)
 1002d60:	00c07fc4 	movi	r3,511
 1002d64:	18801936 	bltu	r3,r2,1002dcc <_free_r+0x10c>
 1002d68:	1004d0fa 	srli	r2,r2,3
 1002d6c:	01c00044 	movi	r7,1
 1002d70:	21400117 	ldw	r5,4(r4)
 1002d74:	10c00044 	addi	r3,r2,1
 1002d78:	18c7883a 	add	r3,r3,r3
 1002d7c:	1005d0ba 	srai	r2,r2,2
 1002d80:	18c7883a 	add	r3,r3,r3
 1002d84:	18c7883a 	add	r3,r3,r3
 1002d88:	1907883a 	add	r3,r3,r4
 1002d8c:	3884983a 	sll	r2,r7,r2
 1002d90:	19c00017 	ldw	r7,0(r3)
 1002d94:	1a3ffe04 	addi	r8,r3,-8
 1002d98:	1144b03a 	or	r2,r2,r5
 1002d9c:	32000315 	stw	r8,12(r6)
 1002da0:	31c00215 	stw	r7,8(r6)
 1002da4:	20800115 	stw	r2,4(r4)
 1002da8:	19800015 	stw	r6,0(r3)
 1002dac:	39800315 	stw	r6,12(r7)
 1002db0:	8809883a 	mov	r4,r17
 1002db4:	dfc00217 	ldw	ra,8(sp)
 1002db8:	dc400117 	ldw	r17,4(sp)
 1002dbc:	dc000017 	ldw	r16,0(sp)
 1002dc0:	dec00304 	addi	sp,sp,12
 1002dc4:	1003a501 	jmpi	1003a50 <__malloc_unlock>
 1002dc8:	f800283a 	ret
 1002dcc:	100ad27a 	srli	r5,r2,9
 1002dd0:	00c00104 	movi	r3,4
 1002dd4:	19404a36 	bltu	r3,r5,1002f00 <_free_r+0x240>
 1002dd8:	100ad1ba 	srli	r5,r2,6
 1002ddc:	28c00e44 	addi	r3,r5,57
 1002de0:	18c7883a 	add	r3,r3,r3
 1002de4:	29400e04 	addi	r5,r5,56
 1002de8:	18c7883a 	add	r3,r3,r3
 1002dec:	18c7883a 	add	r3,r3,r3
 1002df0:	1909883a 	add	r4,r3,r4
 1002df4:	20c00017 	ldw	r3,0(r4)
 1002df8:	01c04034 	movhi	r7,256
 1002dfc:	213ffe04 	addi	r4,r4,-8
 1002e00:	39d89904 	addi	r7,r7,25188
 1002e04:	20c04426 	beq	r4,r3,1002f18 <_free_r+0x258>
 1002e08:	01ffff04 	movi	r7,-4
 1002e0c:	19400117 	ldw	r5,4(r3)
 1002e10:	29ca703a 	and	r5,r5,r7
 1002e14:	1140022e 	bgeu	r2,r5,1002e20 <_free_r+0x160>
 1002e18:	18c00217 	ldw	r3,8(r3)
 1002e1c:	20fffb1e 	bne	r4,r3,1002e0c <__alt_mem_TCDM+0xfefc1e0c>
 1002e20:	19000317 	ldw	r4,12(r3)
 1002e24:	31000315 	stw	r4,12(r6)
 1002e28:	30c00215 	stw	r3,8(r6)
 1002e2c:	21800215 	stw	r6,8(r4)
 1002e30:	19800315 	stw	r6,12(r3)
 1002e34:	003fde06 	br	1002db0 <__alt_mem_TCDM+0xfefc1db0>
 1002e38:	29c00217 	ldw	r7,8(r5)
 1002e3c:	10c5883a 	add	r2,r2,r3
 1002e40:	00c04034 	movhi	r3,256
 1002e44:	18d89b04 	addi	r3,r3,25196
 1002e48:	38c03b26 	beq	r7,r3,1002f38 <_free_r+0x278>
 1002e4c:	2a000317 	ldw	r8,12(r5)
 1002e50:	11400054 	ori	r5,r2,1
 1002e54:	3087883a 	add	r3,r6,r2
 1002e58:	3a000315 	stw	r8,12(r7)
 1002e5c:	41c00215 	stw	r7,8(r8)
 1002e60:	31400115 	stw	r5,4(r6)
 1002e64:	18800015 	stw	r2,0(r3)
 1002e68:	003fbd06 	br	1002d60 <__alt_mem_TCDM+0xfefc1d60>
 1002e6c:	39c0004c 	andi	r7,r7,1
 1002e70:	10c5883a 	add	r2,r2,r3
 1002e74:	3800071e 	bne	r7,zero,1002e94 <_free_r+0x1d4>
 1002e78:	81fffe17 	ldw	r7,-8(r16)
 1002e7c:	31cdc83a 	sub	r6,r6,r7
 1002e80:	30c00317 	ldw	r3,12(r6)
 1002e84:	31400217 	ldw	r5,8(r6)
 1002e88:	11c5883a 	add	r2,r2,r7
 1002e8c:	28c00315 	stw	r3,12(r5)
 1002e90:	19400215 	stw	r5,8(r3)
 1002e94:	10c00054 	ori	r3,r2,1
 1002e98:	30c00115 	stw	r3,4(r6)
 1002e9c:	00c04034 	movhi	r3,256
 1002ea0:	18de2604 	addi	r3,r3,30872
 1002ea4:	18c00017 	ldw	r3,0(r3)
 1002ea8:	21800215 	stw	r6,8(r4)
 1002eac:	10ffc036 	bltu	r2,r3,1002db0 <__alt_mem_TCDM+0xfefc1db0>
 1002eb0:	00804074 	movhi	r2,257
 1002eb4:	10a4d404 	addi	r2,r2,-27824
 1002eb8:	11400017 	ldw	r5,0(r2)
 1002ebc:	8809883a 	mov	r4,r17
 1002ec0:	1002b9c0 	call	1002b9c <_malloc_trim_r>
 1002ec4:	003fba06 	br	1002db0 <__alt_mem_TCDM+0xfefc1db0>
 1002ec8:	28c9883a 	add	r4,r5,r3
 1002ecc:	21000117 	ldw	r4,4(r4)
 1002ed0:	2100004c 	andi	r4,r4,1
 1002ed4:	2000391e 	bne	r4,zero,1002fbc <_free_r+0x2fc>
 1002ed8:	29c00217 	ldw	r7,8(r5)
 1002edc:	29000317 	ldw	r4,12(r5)
 1002ee0:	1885883a 	add	r2,r3,r2
 1002ee4:	10c00054 	ori	r3,r2,1
 1002ee8:	39000315 	stw	r4,12(r7)
 1002eec:	21c00215 	stw	r7,8(r4)
 1002ef0:	30c00115 	stw	r3,4(r6)
 1002ef4:	308d883a 	add	r6,r6,r2
 1002ef8:	30800015 	stw	r2,0(r6)
 1002efc:	003fac06 	br	1002db0 <__alt_mem_TCDM+0xfefc1db0>
 1002f00:	00c00504 	movi	r3,20
 1002f04:	19401536 	bltu	r3,r5,1002f5c <_free_r+0x29c>
 1002f08:	28c01704 	addi	r3,r5,92
 1002f0c:	18c7883a 	add	r3,r3,r3
 1002f10:	294016c4 	addi	r5,r5,91
 1002f14:	003fb406 	br	1002de8 <__alt_mem_TCDM+0xfefc1de8>
 1002f18:	280bd0ba 	srai	r5,r5,2
 1002f1c:	00c00044 	movi	r3,1
 1002f20:	38800117 	ldw	r2,4(r7)
 1002f24:	194a983a 	sll	r5,r3,r5
 1002f28:	2007883a 	mov	r3,r4
 1002f2c:	2884b03a 	or	r2,r5,r2
 1002f30:	38800115 	stw	r2,4(r7)
 1002f34:	003fbb06 	br	1002e24 <__alt_mem_TCDM+0xfefc1e24>
 1002f38:	21800515 	stw	r6,20(r4)
 1002f3c:	21800415 	stw	r6,16(r4)
 1002f40:	10c00054 	ori	r3,r2,1
 1002f44:	31c00315 	stw	r7,12(r6)
 1002f48:	31c00215 	stw	r7,8(r6)
 1002f4c:	30c00115 	stw	r3,4(r6)
 1002f50:	308d883a 	add	r6,r6,r2
 1002f54:	30800015 	stw	r2,0(r6)
 1002f58:	003f9506 	br	1002db0 <__alt_mem_TCDM+0xfefc1db0>
 1002f5c:	00c01504 	movi	r3,84
 1002f60:	19400536 	bltu	r3,r5,1002f78 <_free_r+0x2b8>
 1002f64:	100ad33a 	srli	r5,r2,12
 1002f68:	28c01bc4 	addi	r3,r5,111
 1002f6c:	18c7883a 	add	r3,r3,r3
 1002f70:	29401b84 	addi	r5,r5,110
 1002f74:	003f9c06 	br	1002de8 <__alt_mem_TCDM+0xfefc1de8>
 1002f78:	00c05504 	movi	r3,340
 1002f7c:	19400536 	bltu	r3,r5,1002f94 <_free_r+0x2d4>
 1002f80:	100ad3fa 	srli	r5,r2,15
 1002f84:	28c01e04 	addi	r3,r5,120
 1002f88:	18c7883a 	add	r3,r3,r3
 1002f8c:	29401dc4 	addi	r5,r5,119
 1002f90:	003f9506 	br	1002de8 <__alt_mem_TCDM+0xfefc1de8>
 1002f94:	00c15504 	movi	r3,1364
 1002f98:	19400536 	bltu	r3,r5,1002fb0 <_free_r+0x2f0>
 1002f9c:	100ad4ba 	srli	r5,r2,18
 1002fa0:	28c01f44 	addi	r3,r5,125
 1002fa4:	18c7883a 	add	r3,r3,r3
 1002fa8:	29401f04 	addi	r5,r5,124
 1002fac:	003f8e06 	br	1002de8 <__alt_mem_TCDM+0xfefc1de8>
 1002fb0:	00c03f84 	movi	r3,254
 1002fb4:	01401f84 	movi	r5,126
 1002fb8:	003f8b06 	br	1002de8 <__alt_mem_TCDM+0xfefc1de8>
 1002fbc:	10c00054 	ori	r3,r2,1
 1002fc0:	30c00115 	stw	r3,4(r6)
 1002fc4:	308d883a 	add	r6,r6,r2
 1002fc8:	30800015 	stw	r2,0(r6)
 1002fcc:	003f7806 	br	1002db0 <__alt_mem_TCDM+0xfefc1db0>

01002fd0 <_lseek_r>:
 1002fd0:	defffd04 	addi	sp,sp,-12
 1002fd4:	2805883a 	mov	r2,r5
 1002fd8:	dc000015 	stw	r16,0(sp)
 1002fdc:	04004074 	movhi	r16,257
 1002fe0:	dc400115 	stw	r17,4(sp)
 1002fe4:	300b883a 	mov	r5,r6
 1002fe8:	8424d504 	addi	r16,r16,-27820
 1002fec:	2023883a 	mov	r17,r4
 1002ff0:	380d883a 	mov	r6,r7
 1002ff4:	1009883a 	mov	r4,r2
 1002ff8:	dfc00215 	stw	ra,8(sp)
 1002ffc:	80000015 	stw	zero,0(r16)
 1003000:	10038dc0 	call	10038dc <lseek>
 1003004:	00ffffc4 	movi	r3,-1
 1003008:	10c00526 	beq	r2,r3,1003020 <_lseek_r+0x50>
 100300c:	dfc00217 	ldw	ra,8(sp)
 1003010:	dc400117 	ldw	r17,4(sp)
 1003014:	dc000017 	ldw	r16,0(sp)
 1003018:	dec00304 	addi	sp,sp,12
 100301c:	f800283a 	ret
 1003020:	80c00017 	ldw	r3,0(r16)
 1003024:	183ff926 	beq	r3,zero,100300c <__alt_mem_TCDM+0xfefc200c>
 1003028:	88c00015 	stw	r3,0(r17)
 100302c:	003ff706 	br	100300c <__alt_mem_TCDM+0xfefc200c>

01003030 <__smakebuf_r>:
 1003030:	2880030b 	ldhu	r2,12(r5)
 1003034:	10c0008c 	andi	r3,r2,2
 1003038:	1800411e 	bne	r3,zero,1003140 <__smakebuf_r+0x110>
 100303c:	deffec04 	addi	sp,sp,-80
 1003040:	dc000f15 	stw	r16,60(sp)
 1003044:	2821883a 	mov	r16,r5
 1003048:	2940038f 	ldh	r5,14(r5)
 100304c:	dc401015 	stw	r17,64(sp)
 1003050:	dfc01315 	stw	ra,76(sp)
 1003054:	dcc01215 	stw	r19,72(sp)
 1003058:	dc801115 	stw	r18,68(sp)
 100305c:	2023883a 	mov	r17,r4
 1003060:	28001c16 	blt	r5,zero,10030d4 <__smakebuf_r+0xa4>
 1003064:	d80d883a 	mov	r6,sp
 1003068:	100324c0 	call	100324c <_fstat_r>
 100306c:	10001816 	blt	r2,zero,10030d0 <__smakebuf_r+0xa0>
 1003070:	d8800117 	ldw	r2,4(sp)
 1003074:	00e00014 	movui	r3,32768
 1003078:	10bc000c 	andi	r2,r2,61440
 100307c:	14c80020 	cmpeqi	r19,r2,8192
 1003080:	10c03726 	beq	r2,r3,1003160 <__smakebuf_r+0x130>
 1003084:	80c0030b 	ldhu	r3,12(r16)
 1003088:	18c20014 	ori	r3,r3,2048
 100308c:	80c0030d 	sth	r3,12(r16)
 1003090:	00c80004 	movi	r3,8192
 1003094:	10c0521e 	bne	r2,r3,10031e0 <__smakebuf_r+0x1b0>
 1003098:	8140038f 	ldh	r5,14(r16)
 100309c:	8809883a 	mov	r4,r17
 10030a0:	10032a80 	call	10032a8 <_isatty_r>
 10030a4:	10004c26 	beq	r2,zero,10031d8 <__smakebuf_r+0x1a8>
 10030a8:	8080030b 	ldhu	r2,12(r16)
 10030ac:	80c010c4 	addi	r3,r16,67
 10030b0:	80c00015 	stw	r3,0(r16)
 10030b4:	10800054 	ori	r2,r2,1
 10030b8:	8080030d 	sth	r2,12(r16)
 10030bc:	00800044 	movi	r2,1
 10030c0:	80c00415 	stw	r3,16(r16)
 10030c4:	80800515 	stw	r2,20(r16)
 10030c8:	04810004 	movi	r18,1024
 10030cc:	00000706 	br	10030ec <__smakebuf_r+0xbc>
 10030d0:	8080030b 	ldhu	r2,12(r16)
 10030d4:	10c0200c 	andi	r3,r2,128
 10030d8:	18001f1e 	bne	r3,zero,1003158 <__smakebuf_r+0x128>
 10030dc:	04810004 	movi	r18,1024
 10030e0:	10820014 	ori	r2,r2,2048
 10030e4:	8080030d 	sth	r2,12(r16)
 10030e8:	0027883a 	mov	r19,zero
 10030ec:	900b883a 	mov	r5,r18
 10030f0:	8809883a 	mov	r4,r17
 10030f4:	10012380 	call	1001238 <_malloc_r>
 10030f8:	10002c26 	beq	r2,zero,10031ac <__smakebuf_r+0x17c>
 10030fc:	80c0030b 	ldhu	r3,12(r16)
 1003100:	01004034 	movhi	r4,256
 1003104:	21021704 	addi	r4,r4,2140
 1003108:	89000f15 	stw	r4,60(r17)
 100310c:	18c02014 	ori	r3,r3,128
 1003110:	80c0030d 	sth	r3,12(r16)
 1003114:	80800015 	stw	r2,0(r16)
 1003118:	80800415 	stw	r2,16(r16)
 100311c:	84800515 	stw	r18,20(r16)
 1003120:	98001a1e 	bne	r19,zero,100318c <__smakebuf_r+0x15c>
 1003124:	dfc01317 	ldw	ra,76(sp)
 1003128:	dcc01217 	ldw	r19,72(sp)
 100312c:	dc801117 	ldw	r18,68(sp)
 1003130:	dc401017 	ldw	r17,64(sp)
 1003134:	dc000f17 	ldw	r16,60(sp)
 1003138:	dec01404 	addi	sp,sp,80
 100313c:	f800283a 	ret
 1003140:	288010c4 	addi	r2,r5,67
 1003144:	28800015 	stw	r2,0(r5)
 1003148:	28800415 	stw	r2,16(r5)
 100314c:	00800044 	movi	r2,1
 1003150:	28800515 	stw	r2,20(r5)
 1003154:	f800283a 	ret
 1003158:	04801004 	movi	r18,64
 100315c:	003fe006 	br	10030e0 <__alt_mem_TCDM+0xfefc20e0>
 1003160:	81000a17 	ldw	r4,40(r16)
 1003164:	00c04034 	movhi	r3,256
 1003168:	18c96104 	addi	r3,r3,9604
 100316c:	20ffc51e 	bne	r4,r3,1003084 <__alt_mem_TCDM+0xfefc2084>
 1003170:	8080030b 	ldhu	r2,12(r16)
 1003174:	04810004 	movi	r18,1024
 1003178:	84801315 	stw	r18,76(r16)
 100317c:	1484b03a 	or	r2,r2,r18
 1003180:	8080030d 	sth	r2,12(r16)
 1003184:	0027883a 	mov	r19,zero
 1003188:	003fd806 	br	10030ec <__alt_mem_TCDM+0xfefc20ec>
 100318c:	8140038f 	ldh	r5,14(r16)
 1003190:	8809883a 	mov	r4,r17
 1003194:	10032a80 	call	10032a8 <_isatty_r>
 1003198:	103fe226 	beq	r2,zero,1003124 <__alt_mem_TCDM+0xfefc2124>
 100319c:	8080030b 	ldhu	r2,12(r16)
 10031a0:	10800054 	ori	r2,r2,1
 10031a4:	8080030d 	sth	r2,12(r16)
 10031a8:	003fde06 	br	1003124 <__alt_mem_TCDM+0xfefc2124>
 10031ac:	8080030b 	ldhu	r2,12(r16)
 10031b0:	10c0800c 	andi	r3,r2,512
 10031b4:	183fdb1e 	bne	r3,zero,1003124 <__alt_mem_TCDM+0xfefc2124>
 10031b8:	10800094 	ori	r2,r2,2
 10031bc:	80c010c4 	addi	r3,r16,67
 10031c0:	8080030d 	sth	r2,12(r16)
 10031c4:	00800044 	movi	r2,1
 10031c8:	80c00015 	stw	r3,0(r16)
 10031cc:	80c00415 	stw	r3,16(r16)
 10031d0:	80800515 	stw	r2,20(r16)
 10031d4:	003fd306 	br	1003124 <__alt_mem_TCDM+0xfefc2124>
 10031d8:	04810004 	movi	r18,1024
 10031dc:	003fc306 	br	10030ec <__alt_mem_TCDM+0xfefc20ec>
 10031e0:	0027883a 	mov	r19,zero
 10031e4:	04810004 	movi	r18,1024
 10031e8:	003fc006 	br	10030ec <__alt_mem_TCDM+0xfefc20ec>

010031ec <_read_r>:
 10031ec:	defffd04 	addi	sp,sp,-12
 10031f0:	2805883a 	mov	r2,r5
 10031f4:	dc000015 	stw	r16,0(sp)
 10031f8:	04004074 	movhi	r16,257
 10031fc:	dc400115 	stw	r17,4(sp)
 1003200:	300b883a 	mov	r5,r6
 1003204:	8424d504 	addi	r16,r16,-27820
 1003208:	2023883a 	mov	r17,r4
 100320c:	380d883a 	mov	r6,r7
 1003210:	1009883a 	mov	r4,r2
 1003214:	dfc00215 	stw	ra,8(sp)
 1003218:	80000015 	stw	zero,0(r16)
 100321c:	1003ab00 	call	1003ab0 <read>
 1003220:	00ffffc4 	movi	r3,-1
 1003224:	10c00526 	beq	r2,r3,100323c <_read_r+0x50>
 1003228:	dfc00217 	ldw	ra,8(sp)
 100322c:	dc400117 	ldw	r17,4(sp)
 1003230:	dc000017 	ldw	r16,0(sp)
 1003234:	dec00304 	addi	sp,sp,12
 1003238:	f800283a 	ret
 100323c:	80c00017 	ldw	r3,0(r16)
 1003240:	183ff926 	beq	r3,zero,1003228 <__alt_mem_TCDM+0xfefc2228>
 1003244:	88c00015 	stw	r3,0(r17)
 1003248:	003ff706 	br	1003228 <__alt_mem_TCDM+0xfefc2228>

0100324c <_fstat_r>:
 100324c:	defffd04 	addi	sp,sp,-12
 1003250:	2805883a 	mov	r2,r5
 1003254:	dc000015 	stw	r16,0(sp)
 1003258:	04004074 	movhi	r16,257
 100325c:	dc400115 	stw	r17,4(sp)
 1003260:	8424d504 	addi	r16,r16,-27820
 1003264:	2023883a 	mov	r17,r4
 1003268:	300b883a 	mov	r5,r6
 100326c:	1009883a 	mov	r4,r2
 1003270:	dfc00215 	stw	ra,8(sp)
 1003274:	80000015 	stw	zero,0(r16)
 1003278:	10036240 	call	1003624 <fstat>
 100327c:	00ffffc4 	movi	r3,-1
 1003280:	10c00526 	beq	r2,r3,1003298 <_fstat_r+0x4c>
 1003284:	dfc00217 	ldw	ra,8(sp)
 1003288:	dc400117 	ldw	r17,4(sp)
 100328c:	dc000017 	ldw	r16,0(sp)
 1003290:	dec00304 	addi	sp,sp,12
 1003294:	f800283a 	ret
 1003298:	80c00017 	ldw	r3,0(r16)
 100329c:	183ff926 	beq	r3,zero,1003284 <__alt_mem_TCDM+0xfefc2284>
 10032a0:	88c00015 	stw	r3,0(r17)
 10032a4:	003ff706 	br	1003284 <__alt_mem_TCDM+0xfefc2284>

010032a8 <_isatty_r>:
 10032a8:	defffd04 	addi	sp,sp,-12
 10032ac:	dc000015 	stw	r16,0(sp)
 10032b0:	04004074 	movhi	r16,257
 10032b4:	dc400115 	stw	r17,4(sp)
 10032b8:	8424d504 	addi	r16,r16,-27820
 10032bc:	2023883a 	mov	r17,r4
 10032c0:	2809883a 	mov	r4,r5
 10032c4:	dfc00215 	stw	ra,8(sp)
 10032c8:	80000015 	stw	zero,0(r16)
 10032cc:	10037100 	call	1003710 <isatty>
 10032d0:	00ffffc4 	movi	r3,-1
 10032d4:	10c00526 	beq	r2,r3,10032ec <_isatty_r+0x44>
 10032d8:	dfc00217 	ldw	ra,8(sp)
 10032dc:	dc400117 	ldw	r17,4(sp)
 10032e0:	dc000017 	ldw	r16,0(sp)
 10032e4:	dec00304 	addi	sp,sp,12
 10032e8:	f800283a 	ret
 10032ec:	80c00017 	ldw	r3,0(r16)
 10032f0:	183ff926 	beq	r3,zero,10032d8 <__alt_mem_TCDM+0xfefc22d8>
 10032f4:	88c00015 	stw	r3,0(r17)
 10032f8:	003ff706 	br	10032d8 <__alt_mem_TCDM+0xfefc22d8>

010032fc <__divsi3>:
 10032fc:	20001b16 	blt	r4,zero,100336c <__divsi3+0x70>
 1003300:	000f883a 	mov	r7,zero
 1003304:	28001616 	blt	r5,zero,1003360 <__divsi3+0x64>
 1003308:	200d883a 	mov	r6,r4
 100330c:	29001a2e 	bgeu	r5,r4,1003378 <__divsi3+0x7c>
 1003310:	00800804 	movi	r2,32
 1003314:	00c00044 	movi	r3,1
 1003318:	00000106 	br	1003320 <__divsi3+0x24>
 100331c:	10000d26 	beq	r2,zero,1003354 <__divsi3+0x58>
 1003320:	294b883a 	add	r5,r5,r5
 1003324:	10bfffc4 	addi	r2,r2,-1
 1003328:	18c7883a 	add	r3,r3,r3
 100332c:	293ffb36 	bltu	r5,r4,100331c <__alt_mem_TCDM+0xfefc231c>
 1003330:	0005883a 	mov	r2,zero
 1003334:	18000726 	beq	r3,zero,1003354 <__divsi3+0x58>
 1003338:	0005883a 	mov	r2,zero
 100333c:	31400236 	bltu	r6,r5,1003348 <__divsi3+0x4c>
 1003340:	314dc83a 	sub	r6,r6,r5
 1003344:	10c4b03a 	or	r2,r2,r3
 1003348:	1806d07a 	srli	r3,r3,1
 100334c:	280ad07a 	srli	r5,r5,1
 1003350:	183ffa1e 	bne	r3,zero,100333c <__alt_mem_TCDM+0xfefc233c>
 1003354:	38000126 	beq	r7,zero,100335c <__divsi3+0x60>
 1003358:	0085c83a 	sub	r2,zero,r2
 100335c:	f800283a 	ret
 1003360:	014bc83a 	sub	r5,zero,r5
 1003364:	39c0005c 	xori	r7,r7,1
 1003368:	003fe706 	br	1003308 <__alt_mem_TCDM+0xfefc2308>
 100336c:	0109c83a 	sub	r4,zero,r4
 1003370:	01c00044 	movi	r7,1
 1003374:	003fe306 	br	1003304 <__alt_mem_TCDM+0xfefc2304>
 1003378:	00c00044 	movi	r3,1
 100337c:	003fee06 	br	1003338 <__alt_mem_TCDM+0xfefc2338>

01003380 <__modsi3>:
 1003380:	20001716 	blt	r4,zero,10033e0 <__modsi3+0x60>
 1003384:	000f883a 	mov	r7,zero
 1003388:	2005883a 	mov	r2,r4
 100338c:	28001216 	blt	r5,zero,10033d8 <__modsi3+0x58>
 1003390:	2900162e 	bgeu	r5,r4,10033ec <__modsi3+0x6c>
 1003394:	01800804 	movi	r6,32
 1003398:	00c00044 	movi	r3,1
 100339c:	00000106 	br	10033a4 <__modsi3+0x24>
 10033a0:	30000a26 	beq	r6,zero,10033cc <__modsi3+0x4c>
 10033a4:	294b883a 	add	r5,r5,r5
 10033a8:	31bfffc4 	addi	r6,r6,-1
 10033ac:	18c7883a 	add	r3,r3,r3
 10033b0:	293ffb36 	bltu	r5,r4,10033a0 <__alt_mem_TCDM+0xfefc23a0>
 10033b4:	18000526 	beq	r3,zero,10033cc <__modsi3+0x4c>
 10033b8:	1806d07a 	srli	r3,r3,1
 10033bc:	11400136 	bltu	r2,r5,10033c4 <__modsi3+0x44>
 10033c0:	1145c83a 	sub	r2,r2,r5
 10033c4:	280ad07a 	srli	r5,r5,1
 10033c8:	183ffb1e 	bne	r3,zero,10033b8 <__alt_mem_TCDM+0xfefc23b8>
 10033cc:	38000126 	beq	r7,zero,10033d4 <__modsi3+0x54>
 10033d0:	0085c83a 	sub	r2,zero,r2
 10033d4:	f800283a 	ret
 10033d8:	014bc83a 	sub	r5,zero,r5
 10033dc:	003fec06 	br	1003390 <__alt_mem_TCDM+0xfefc2390>
 10033e0:	0109c83a 	sub	r4,zero,r4
 10033e4:	01c00044 	movi	r7,1
 10033e8:	003fe706 	br	1003388 <__alt_mem_TCDM+0xfefc2388>
 10033ec:	00c00044 	movi	r3,1
 10033f0:	003ff106 	br	10033b8 <__alt_mem_TCDM+0xfefc23b8>

010033f4 <__udivsi3>:
 10033f4:	200d883a 	mov	r6,r4
 10033f8:	2900152e 	bgeu	r5,r4,1003450 <__udivsi3+0x5c>
 10033fc:	28001416 	blt	r5,zero,1003450 <__udivsi3+0x5c>
 1003400:	00800804 	movi	r2,32
 1003404:	00c00044 	movi	r3,1
 1003408:	00000206 	br	1003414 <__udivsi3+0x20>
 100340c:	10000e26 	beq	r2,zero,1003448 <__udivsi3+0x54>
 1003410:	28000516 	blt	r5,zero,1003428 <__udivsi3+0x34>
 1003414:	294b883a 	add	r5,r5,r5
 1003418:	10bfffc4 	addi	r2,r2,-1
 100341c:	18c7883a 	add	r3,r3,r3
 1003420:	293ffa36 	bltu	r5,r4,100340c <__alt_mem_TCDM+0xfefc240c>
 1003424:	18000826 	beq	r3,zero,1003448 <__udivsi3+0x54>
 1003428:	0005883a 	mov	r2,zero
 100342c:	31400236 	bltu	r6,r5,1003438 <__udivsi3+0x44>
 1003430:	314dc83a 	sub	r6,r6,r5
 1003434:	10c4b03a 	or	r2,r2,r3
 1003438:	1806d07a 	srli	r3,r3,1
 100343c:	280ad07a 	srli	r5,r5,1
 1003440:	183ffa1e 	bne	r3,zero,100342c <__alt_mem_TCDM+0xfefc242c>
 1003444:	f800283a 	ret
 1003448:	0005883a 	mov	r2,zero
 100344c:	f800283a 	ret
 1003450:	00c00044 	movi	r3,1
 1003454:	003ff406 	br	1003428 <__alt_mem_TCDM+0xfefc2428>

01003458 <__umodsi3>:
 1003458:	2005883a 	mov	r2,r4
 100345c:	2900122e 	bgeu	r5,r4,10034a8 <__umodsi3+0x50>
 1003460:	28001116 	blt	r5,zero,10034a8 <__umodsi3+0x50>
 1003464:	01800804 	movi	r6,32
 1003468:	00c00044 	movi	r3,1
 100346c:	00000206 	br	1003478 <__umodsi3+0x20>
 1003470:	30000c26 	beq	r6,zero,10034a4 <__umodsi3+0x4c>
 1003474:	28000516 	blt	r5,zero,100348c <__umodsi3+0x34>
 1003478:	294b883a 	add	r5,r5,r5
 100347c:	31bfffc4 	addi	r6,r6,-1
 1003480:	18c7883a 	add	r3,r3,r3
 1003484:	293ffa36 	bltu	r5,r4,1003470 <__alt_mem_TCDM+0xfefc2470>
 1003488:	18000626 	beq	r3,zero,10034a4 <__umodsi3+0x4c>
 100348c:	1806d07a 	srli	r3,r3,1
 1003490:	11400136 	bltu	r2,r5,1003498 <__umodsi3+0x40>
 1003494:	1145c83a 	sub	r2,r2,r5
 1003498:	280ad07a 	srli	r5,r5,1
 100349c:	183ffb1e 	bne	r3,zero,100348c <__alt_mem_TCDM+0xfefc248c>
 10034a0:	f800283a 	ret
 10034a4:	f800283a 	ret
 10034a8:	00c00044 	movi	r3,1
 10034ac:	003ff706 	br	100348c <__alt_mem_TCDM+0xfefc248c>

010034b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10034b0:	defffe04 	addi	sp,sp,-8
 10034b4:	dfc00115 	stw	ra,4(sp)
 10034b8:	df000015 	stw	fp,0(sp)
 10034bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10034c0:	d0a00f17 	ldw	r2,-32708(gp)
 10034c4:	10000326 	beq	r2,zero,10034d4 <alt_get_errno+0x24>
 10034c8:	d0a00f17 	ldw	r2,-32708(gp)
 10034cc:	103ee83a 	callr	r2
 10034d0:	00000106 	br	10034d8 <alt_get_errno+0x28>
 10034d4:	d0a6b804 	addi	r2,gp,-25888
}
 10034d8:	e037883a 	mov	sp,fp
 10034dc:	dfc00117 	ldw	ra,4(sp)
 10034e0:	df000017 	ldw	fp,0(sp)
 10034e4:	dec00204 	addi	sp,sp,8
 10034e8:	f800283a 	ret

010034ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 10034ec:	defffb04 	addi	sp,sp,-20
 10034f0:	dfc00415 	stw	ra,16(sp)
 10034f4:	df000315 	stw	fp,12(sp)
 10034f8:	df000304 	addi	fp,sp,12
 10034fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1003500:	e0bfff17 	ldw	r2,-4(fp)
 1003504:	10000616 	blt	r2,zero,1003520 <close+0x34>
 1003508:	e0bfff17 	ldw	r2,-4(fp)
 100350c:	10c00324 	muli	r3,r2,12
 1003510:	00804034 	movhi	r2,256
 1003514:	1099a504 	addi	r2,r2,26260
 1003518:	1885883a 	add	r2,r3,r2
 100351c:	00000106 	br	1003524 <close+0x38>
 1003520:	0005883a 	mov	r2,zero
 1003524:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 1003528:	e0bffd17 	ldw	r2,-12(fp)
 100352c:	10001926 	beq	r2,zero,1003594 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1003530:	e0bffd17 	ldw	r2,-12(fp)
 1003534:	10800017 	ldw	r2,0(r2)
 1003538:	10800417 	ldw	r2,16(r2)
 100353c:	10000626 	beq	r2,zero,1003558 <close+0x6c>
 1003540:	e0bffd17 	ldw	r2,-12(fp)
 1003544:	10800017 	ldw	r2,0(r2)
 1003548:	10800417 	ldw	r2,16(r2)
 100354c:	e13ffd17 	ldw	r4,-12(fp)
 1003550:	103ee83a 	callr	r2
 1003554:	00000106 	br	100355c <close+0x70>
 1003558:	0005883a 	mov	r2,zero
 100355c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1003560:	e13fff17 	ldw	r4,-4(fp)
 1003564:	1003bac0 	call	1003bac <alt_release_fd>
    if (rval < 0)
 1003568:	e0bffe17 	ldw	r2,-8(fp)
 100356c:	1000070e 	bge	r2,zero,100358c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 1003570:	10034b00 	call	10034b0 <alt_get_errno>
 1003574:	1007883a 	mov	r3,r2
 1003578:	e0bffe17 	ldw	r2,-8(fp)
 100357c:	0085c83a 	sub	r2,zero,r2
 1003580:	18800015 	stw	r2,0(r3)
      return -1;
 1003584:	00bfffc4 	movi	r2,-1
 1003588:	00000706 	br	10035a8 <close+0xbc>
    }
    return 0;
 100358c:	0005883a 	mov	r2,zero
 1003590:	00000506 	br	10035a8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1003594:	10034b00 	call	10034b0 <alt_get_errno>
 1003598:	1007883a 	mov	r3,r2
 100359c:	00801444 	movi	r2,81
 10035a0:	18800015 	stw	r2,0(r3)
    return -1;
 10035a4:	00bfffc4 	movi	r2,-1
  }
}
 10035a8:	e037883a 	mov	sp,fp
 10035ac:	dfc00117 	ldw	ra,4(sp)
 10035b0:	df000017 	ldw	fp,0(sp)
 10035b4:	dec00204 	addi	sp,sp,8
 10035b8:	f800283a 	ret

010035bc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 10035bc:	defffc04 	addi	sp,sp,-16
 10035c0:	df000315 	stw	fp,12(sp)
 10035c4:	df000304 	addi	fp,sp,12
 10035c8:	e13ffd15 	stw	r4,-12(fp)
 10035cc:	e17ffe15 	stw	r5,-8(fp)
 10035d0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 10035d4:	e0bfff17 	ldw	r2,-4(fp)
}
 10035d8:	e037883a 	mov	sp,fp
 10035dc:	df000017 	ldw	fp,0(sp)
 10035e0:	dec00104 	addi	sp,sp,4
 10035e4:	f800283a 	ret

010035e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10035e8:	defffe04 	addi	sp,sp,-8
 10035ec:	dfc00115 	stw	ra,4(sp)
 10035f0:	df000015 	stw	fp,0(sp)
 10035f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10035f8:	d0a00f17 	ldw	r2,-32708(gp)
 10035fc:	10000326 	beq	r2,zero,100360c <alt_get_errno+0x24>
 1003600:	d0a00f17 	ldw	r2,-32708(gp)
 1003604:	103ee83a 	callr	r2
 1003608:	00000106 	br	1003610 <alt_get_errno+0x28>
 100360c:	d0a6b804 	addi	r2,gp,-25888
}
 1003610:	e037883a 	mov	sp,fp
 1003614:	dfc00117 	ldw	ra,4(sp)
 1003618:	df000017 	ldw	fp,0(sp)
 100361c:	dec00204 	addi	sp,sp,8
 1003620:	f800283a 	ret

01003624 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1003624:	defffb04 	addi	sp,sp,-20
 1003628:	dfc00415 	stw	ra,16(sp)
 100362c:	df000315 	stw	fp,12(sp)
 1003630:	df000304 	addi	fp,sp,12
 1003634:	e13ffe15 	stw	r4,-8(fp)
 1003638:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100363c:	e0bffe17 	ldw	r2,-8(fp)
 1003640:	10000616 	blt	r2,zero,100365c <fstat+0x38>
 1003644:	e0bffe17 	ldw	r2,-8(fp)
 1003648:	10c00324 	muli	r3,r2,12
 100364c:	00804034 	movhi	r2,256
 1003650:	1099a504 	addi	r2,r2,26260
 1003654:	1885883a 	add	r2,r3,r2
 1003658:	00000106 	br	1003660 <fstat+0x3c>
 100365c:	0005883a 	mov	r2,zero
 1003660:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 1003664:	e0bffd17 	ldw	r2,-12(fp)
 1003668:	10001026 	beq	r2,zero,10036ac <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100366c:	e0bffd17 	ldw	r2,-12(fp)
 1003670:	10800017 	ldw	r2,0(r2)
 1003674:	10800817 	ldw	r2,32(r2)
 1003678:	10000726 	beq	r2,zero,1003698 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 100367c:	e0bffd17 	ldw	r2,-12(fp)
 1003680:	10800017 	ldw	r2,0(r2)
 1003684:	10800817 	ldw	r2,32(r2)
 1003688:	e17fff17 	ldw	r5,-4(fp)
 100368c:	e13ffd17 	ldw	r4,-12(fp)
 1003690:	103ee83a 	callr	r2
 1003694:	00000a06 	br	10036c0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1003698:	e0bfff17 	ldw	r2,-4(fp)
 100369c:	00c80004 	movi	r3,8192
 10036a0:	10c00115 	stw	r3,4(r2)
      return 0;
 10036a4:	0005883a 	mov	r2,zero
 10036a8:	00000506 	br	10036c0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10036ac:	10035e80 	call	10035e8 <alt_get_errno>
 10036b0:	1007883a 	mov	r3,r2
 10036b4:	00801444 	movi	r2,81
 10036b8:	18800015 	stw	r2,0(r3)
    return -1;
 10036bc:	00bfffc4 	movi	r2,-1
  }
}
 10036c0:	e037883a 	mov	sp,fp
 10036c4:	dfc00117 	ldw	ra,4(sp)
 10036c8:	df000017 	ldw	fp,0(sp)
 10036cc:	dec00204 	addi	sp,sp,8
 10036d0:	f800283a 	ret

010036d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10036d4:	defffe04 	addi	sp,sp,-8
 10036d8:	dfc00115 	stw	ra,4(sp)
 10036dc:	df000015 	stw	fp,0(sp)
 10036e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10036e4:	d0a00f17 	ldw	r2,-32708(gp)
 10036e8:	10000326 	beq	r2,zero,10036f8 <alt_get_errno+0x24>
 10036ec:	d0a00f17 	ldw	r2,-32708(gp)
 10036f0:	103ee83a 	callr	r2
 10036f4:	00000106 	br	10036fc <alt_get_errno+0x28>
 10036f8:	d0a6b804 	addi	r2,gp,-25888
}
 10036fc:	e037883a 	mov	sp,fp
 1003700:	dfc00117 	ldw	ra,4(sp)
 1003704:	df000017 	ldw	fp,0(sp)
 1003708:	dec00204 	addi	sp,sp,8
 100370c:	f800283a 	ret

01003710 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1003710:	deffed04 	addi	sp,sp,-76
 1003714:	dfc01215 	stw	ra,72(sp)
 1003718:	df001115 	stw	fp,68(sp)
 100371c:	df001104 	addi	fp,sp,68
 1003720:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003724:	e0bfff17 	ldw	r2,-4(fp)
 1003728:	10000616 	blt	r2,zero,1003744 <isatty+0x34>
 100372c:	e0bfff17 	ldw	r2,-4(fp)
 1003730:	10c00324 	muli	r3,r2,12
 1003734:	00804034 	movhi	r2,256
 1003738:	1099a504 	addi	r2,r2,26260
 100373c:	1885883a 	add	r2,r3,r2
 1003740:	00000106 	br	1003748 <isatty+0x38>
 1003744:	0005883a 	mov	r2,zero
 1003748:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 100374c:	e0bfef17 	ldw	r2,-68(fp)
 1003750:	10000e26 	beq	r2,zero,100378c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1003754:	e0bfef17 	ldw	r2,-68(fp)
 1003758:	10800017 	ldw	r2,0(r2)
 100375c:	10800817 	ldw	r2,32(r2)
 1003760:	1000021e 	bne	r2,zero,100376c <isatty+0x5c>
    {
      return 1;
 1003764:	00800044 	movi	r2,1
 1003768:	00000d06 	br	10037a0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100376c:	e0bff004 	addi	r2,fp,-64
 1003770:	100b883a 	mov	r5,r2
 1003774:	e13fff17 	ldw	r4,-4(fp)
 1003778:	10036240 	call	1003624 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100377c:	e0bff117 	ldw	r2,-60(fp)
 1003780:	10880020 	cmpeqi	r2,r2,8192
 1003784:	10803fcc 	andi	r2,r2,255
 1003788:	00000506 	br	10037a0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100378c:	10036d40 	call	10036d4 <alt_get_errno>
 1003790:	1007883a 	mov	r3,r2
 1003794:	00801444 	movi	r2,81
 1003798:	18800015 	stw	r2,0(r3)
    return 0;
 100379c:	0005883a 	mov	r2,zero
  }
}
 10037a0:	e037883a 	mov	sp,fp
 10037a4:	dfc00117 	ldw	ra,4(sp)
 10037a8:	df000017 	ldw	fp,0(sp)
 10037ac:	dec00204 	addi	sp,sp,8
 10037b0:	f800283a 	ret

010037b4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 10037b4:	defffc04 	addi	sp,sp,-16
 10037b8:	df000315 	stw	fp,12(sp)
 10037bc:	df000304 	addi	fp,sp,12
 10037c0:	e13ffd15 	stw	r4,-12(fp)
 10037c4:	e17ffe15 	stw	r5,-8(fp)
 10037c8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 10037cc:	e0fffe17 	ldw	r3,-8(fp)
 10037d0:	e0bffd17 	ldw	r2,-12(fp)
 10037d4:	18800c26 	beq	r3,r2,1003808 <alt_load_section+0x54>
  {
    while( to != end )
 10037d8:	00000806 	br	10037fc <alt_load_section+0x48>
    {
      *to++ = *from++;
 10037dc:	e0bffe17 	ldw	r2,-8(fp)
 10037e0:	10c00104 	addi	r3,r2,4
 10037e4:	e0fffe15 	stw	r3,-8(fp)
 10037e8:	e0fffd17 	ldw	r3,-12(fp)
 10037ec:	19000104 	addi	r4,r3,4
 10037f0:	e13ffd15 	stw	r4,-12(fp)
 10037f4:	18c00017 	ldw	r3,0(r3)
 10037f8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 10037fc:	e0fffe17 	ldw	r3,-8(fp)
 1003800:	e0bfff17 	ldw	r2,-4(fp)
 1003804:	18bff51e 	bne	r3,r2,10037dc <__alt_mem_TCDM+0xfefc27dc>
    {
      *to++ = *from++;
    }
  }
}
 1003808:	0001883a 	nop
 100380c:	e037883a 	mov	sp,fp
 1003810:	df000017 	ldw	fp,0(sp)
 1003814:	dec00104 	addi	sp,sp,4
 1003818:	f800283a 	ret

0100381c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100381c:	defffe04 	addi	sp,sp,-8
 1003820:	dfc00115 	stw	ra,4(sp)
 1003824:	df000015 	stw	fp,0(sp)
 1003828:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100382c:	01804034 	movhi	r6,256
 1003830:	319e3104 	addi	r6,r6,30916
 1003834:	01404034 	movhi	r5,256
 1003838:	29579004 	addi	r5,r5,24128
 100383c:	01004034 	movhi	r4,256
 1003840:	211e3104 	addi	r4,r4,30916
 1003844:	10037b40 	call	10037b4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1003848:	01808134 	movhi	r6,516
 100384c:	31809104 	addi	r6,r6,580
 1003850:	01408134 	movhi	r5,516
 1003854:	29400804 	addi	r5,r5,32
 1003858:	01004034 	movhi	r4,256
 100385c:	21000804 	addi	r4,r4,32
 1003860:	10037b40 	call	10037b4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1003864:	01804034 	movhi	r6,256
 1003868:	31979004 	addi	r6,r6,24128
 100386c:	01404034 	movhi	r5,256
 1003870:	29577e04 	addi	r5,r5,24056
 1003874:	01004034 	movhi	r4,256
 1003878:	21177e04 	addi	r4,r4,24056
 100387c:	10037b40 	call	10037b4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1003880:	1004ce40 	call	1004ce4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1003884:	1004ecc0 	call	1004ecc <alt_icache_flush_all>
}
 1003888:	0001883a 	nop
 100388c:	e037883a 	mov	sp,fp
 1003890:	dfc00117 	ldw	ra,4(sp)
 1003894:	df000017 	ldw	fp,0(sp)
 1003898:	dec00204 	addi	sp,sp,8
 100389c:	f800283a 	ret

010038a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10038a0:	defffe04 	addi	sp,sp,-8
 10038a4:	dfc00115 	stw	ra,4(sp)
 10038a8:	df000015 	stw	fp,0(sp)
 10038ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10038b0:	d0a00f17 	ldw	r2,-32708(gp)
 10038b4:	10000326 	beq	r2,zero,10038c4 <alt_get_errno+0x24>
 10038b8:	d0a00f17 	ldw	r2,-32708(gp)
 10038bc:	103ee83a 	callr	r2
 10038c0:	00000106 	br	10038c8 <alt_get_errno+0x28>
 10038c4:	d0a6b804 	addi	r2,gp,-25888
}
 10038c8:	e037883a 	mov	sp,fp
 10038cc:	dfc00117 	ldw	ra,4(sp)
 10038d0:	df000017 	ldw	fp,0(sp)
 10038d4:	dec00204 	addi	sp,sp,8
 10038d8:	f800283a 	ret

010038dc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 10038dc:	defff904 	addi	sp,sp,-28
 10038e0:	dfc00615 	stw	ra,24(sp)
 10038e4:	df000515 	stw	fp,20(sp)
 10038e8:	df000504 	addi	fp,sp,20
 10038ec:	e13ffd15 	stw	r4,-12(fp)
 10038f0:	e17ffe15 	stw	r5,-8(fp)
 10038f4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 10038f8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10038fc:	e0bffd17 	ldw	r2,-12(fp)
 1003900:	10000616 	blt	r2,zero,100391c <lseek+0x40>
 1003904:	e0bffd17 	ldw	r2,-12(fp)
 1003908:	10c00324 	muli	r3,r2,12
 100390c:	00804034 	movhi	r2,256
 1003910:	1099a504 	addi	r2,r2,26260
 1003914:	1885883a 	add	r2,r3,r2
 1003918:	00000106 	br	1003920 <lseek+0x44>
 100391c:	0005883a 	mov	r2,zero
 1003920:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 1003924:	e0bffc17 	ldw	r2,-16(fp)
 1003928:	10001026 	beq	r2,zero,100396c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100392c:	e0bffc17 	ldw	r2,-16(fp)
 1003930:	10800017 	ldw	r2,0(r2)
 1003934:	10800717 	ldw	r2,28(r2)
 1003938:	10000926 	beq	r2,zero,1003960 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100393c:	e0bffc17 	ldw	r2,-16(fp)
 1003940:	10800017 	ldw	r2,0(r2)
 1003944:	10800717 	ldw	r2,28(r2)
 1003948:	e1bfff17 	ldw	r6,-4(fp)
 100394c:	e17ffe17 	ldw	r5,-8(fp)
 1003950:	e13ffc17 	ldw	r4,-16(fp)
 1003954:	103ee83a 	callr	r2
 1003958:	e0bffb15 	stw	r2,-20(fp)
 100395c:	00000506 	br	1003974 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1003960:	00bfde84 	movi	r2,-134
 1003964:	e0bffb15 	stw	r2,-20(fp)
 1003968:	00000206 	br	1003974 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 100396c:	00bfebc4 	movi	r2,-81
 1003970:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 1003974:	e0bffb17 	ldw	r2,-20(fp)
 1003978:	1000070e 	bge	r2,zero,1003998 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 100397c:	10038a00 	call	10038a0 <alt_get_errno>
 1003980:	1007883a 	mov	r3,r2
 1003984:	e0bffb17 	ldw	r2,-20(fp)
 1003988:	0085c83a 	sub	r2,zero,r2
 100398c:	18800015 	stw	r2,0(r3)
    rc = -1;
 1003990:	00bfffc4 	movi	r2,-1
 1003994:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 1003998:	e0bffb17 	ldw	r2,-20(fp)
}
 100399c:	e037883a 	mov	sp,fp
 10039a0:	dfc00117 	ldw	ra,4(sp)
 10039a4:	df000017 	ldw	fp,0(sp)
 10039a8:	dec00204 	addi	sp,sp,8
 10039ac:	f800283a 	ret

010039b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 10039b0:	defffd04 	addi	sp,sp,-12
 10039b4:	dfc00215 	stw	ra,8(sp)
 10039b8:	df000115 	stw	fp,4(sp)
 10039bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 10039c0:	0009883a 	mov	r4,zero
 10039c4:	1003e580 	call	1003e58 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 10039c8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 10039cc:	1003e900 	call	1003e90 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 10039d0:	01804034 	movhi	r6,256
 10039d4:	31978804 	addi	r6,r6,24096
 10039d8:	01404034 	movhi	r5,256
 10039dc:	29578804 	addi	r5,r5,24096
 10039e0:	01004034 	movhi	r4,256
 10039e4:	21178804 	addi	r4,r4,24096
 10039e8:	10052640 	call	1005264 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 10039ec:	1004e0c0 	call	1004e0c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 10039f0:	01004034 	movhi	r4,256
 10039f4:	21139b04 	addi	r4,r4,20076
 10039f8:	1005a640 	call	1005a64 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 10039fc:	d0a6b917 	ldw	r2,-25884(gp)
 1003a00:	d0e6ba17 	ldw	r3,-25880(gp)
 1003a04:	d126bb17 	ldw	r4,-25876(gp)
 1003a08:	200d883a 	mov	r6,r4
 1003a0c:	180b883a 	mov	r5,r3
 1003a10:	1009883a 	mov	r4,r2
 1003a14:	10002900 	call	1000290 <main>
 1003a18:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1003a1c:	01000044 	movi	r4,1
 1003a20:	10034ec0 	call	10034ec <close>
  exit (result);
 1003a24:	e13fff17 	ldw	r4,-4(fp)
 1003a28:	1005a780 	call	1005a78 <exit>

01003a2c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1003a2c:	defffe04 	addi	sp,sp,-8
 1003a30:	df000115 	stw	fp,4(sp)
 1003a34:	df000104 	addi	fp,sp,4
 1003a38:	e13fff15 	stw	r4,-4(fp)
}
 1003a3c:	0001883a 	nop
 1003a40:	e037883a 	mov	sp,fp
 1003a44:	df000017 	ldw	fp,0(sp)
 1003a48:	dec00104 	addi	sp,sp,4
 1003a4c:	f800283a 	ret

01003a50 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1003a50:	defffe04 	addi	sp,sp,-8
 1003a54:	df000115 	stw	fp,4(sp)
 1003a58:	df000104 	addi	fp,sp,4
 1003a5c:	e13fff15 	stw	r4,-4(fp)
}
 1003a60:	0001883a 	nop
 1003a64:	e037883a 	mov	sp,fp
 1003a68:	df000017 	ldw	fp,0(sp)
 1003a6c:	dec00104 	addi	sp,sp,4
 1003a70:	f800283a 	ret

01003a74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003a74:	defffe04 	addi	sp,sp,-8
 1003a78:	dfc00115 	stw	ra,4(sp)
 1003a7c:	df000015 	stw	fp,0(sp)
 1003a80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1003a84:	d0a00f17 	ldw	r2,-32708(gp)
 1003a88:	10000326 	beq	r2,zero,1003a98 <alt_get_errno+0x24>
 1003a8c:	d0a00f17 	ldw	r2,-32708(gp)
 1003a90:	103ee83a 	callr	r2
 1003a94:	00000106 	br	1003a9c <alt_get_errno+0x28>
 1003a98:	d0a6b804 	addi	r2,gp,-25888
}
 1003a9c:	e037883a 	mov	sp,fp
 1003aa0:	dfc00117 	ldw	ra,4(sp)
 1003aa4:	df000017 	ldw	fp,0(sp)
 1003aa8:	dec00204 	addi	sp,sp,8
 1003aac:	f800283a 	ret

01003ab0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1003ab0:	defff904 	addi	sp,sp,-28
 1003ab4:	dfc00615 	stw	ra,24(sp)
 1003ab8:	df000515 	stw	fp,20(sp)
 1003abc:	df000504 	addi	fp,sp,20
 1003ac0:	e13ffd15 	stw	r4,-12(fp)
 1003ac4:	e17ffe15 	stw	r5,-8(fp)
 1003ac8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003acc:	e0bffd17 	ldw	r2,-12(fp)
 1003ad0:	10000616 	blt	r2,zero,1003aec <read+0x3c>
 1003ad4:	e0bffd17 	ldw	r2,-12(fp)
 1003ad8:	10c00324 	muli	r3,r2,12
 1003adc:	00804034 	movhi	r2,256
 1003ae0:	1099a504 	addi	r2,r2,26260
 1003ae4:	1885883a 	add	r2,r3,r2
 1003ae8:	00000106 	br	1003af0 <read+0x40>
 1003aec:	0005883a 	mov	r2,zero
 1003af0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1003af4:	e0bffb17 	ldw	r2,-20(fp)
 1003af8:	10002226 	beq	r2,zero,1003b84 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1003afc:	e0bffb17 	ldw	r2,-20(fp)
 1003b00:	10800217 	ldw	r2,8(r2)
 1003b04:	108000cc 	andi	r2,r2,3
 1003b08:	10800060 	cmpeqi	r2,r2,1
 1003b0c:	1000181e 	bne	r2,zero,1003b70 <read+0xc0>
        (fd->dev->read))
 1003b10:	e0bffb17 	ldw	r2,-20(fp)
 1003b14:	10800017 	ldw	r2,0(r2)
 1003b18:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1003b1c:	10001426 	beq	r2,zero,1003b70 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1003b20:	e0bffb17 	ldw	r2,-20(fp)
 1003b24:	10800017 	ldw	r2,0(r2)
 1003b28:	10800517 	ldw	r2,20(r2)
 1003b2c:	e0ffff17 	ldw	r3,-4(fp)
 1003b30:	180d883a 	mov	r6,r3
 1003b34:	e17ffe17 	ldw	r5,-8(fp)
 1003b38:	e13ffb17 	ldw	r4,-20(fp)
 1003b3c:	103ee83a 	callr	r2
 1003b40:	e0bffc15 	stw	r2,-16(fp)
 1003b44:	e0bffc17 	ldw	r2,-16(fp)
 1003b48:	1000070e 	bge	r2,zero,1003b68 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 1003b4c:	1003a740 	call	1003a74 <alt_get_errno>
 1003b50:	1007883a 	mov	r3,r2
 1003b54:	e0bffc17 	ldw	r2,-16(fp)
 1003b58:	0085c83a 	sub	r2,zero,r2
 1003b5c:	18800015 	stw	r2,0(r3)
          return -1;
 1003b60:	00bfffc4 	movi	r2,-1
 1003b64:	00000c06 	br	1003b98 <read+0xe8>
        }
        return rval;
 1003b68:	e0bffc17 	ldw	r2,-16(fp)
 1003b6c:	00000a06 	br	1003b98 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1003b70:	1003a740 	call	1003a74 <alt_get_errno>
 1003b74:	1007883a 	mov	r3,r2
 1003b78:	00800344 	movi	r2,13
 1003b7c:	18800015 	stw	r2,0(r3)
 1003b80:	00000406 	br	1003b94 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1003b84:	1003a740 	call	1003a74 <alt_get_errno>
 1003b88:	1007883a 	mov	r3,r2
 1003b8c:	00801444 	movi	r2,81
 1003b90:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1003b94:	00bfffc4 	movi	r2,-1
}
 1003b98:	e037883a 	mov	sp,fp
 1003b9c:	dfc00117 	ldw	ra,4(sp)
 1003ba0:	df000017 	ldw	fp,0(sp)
 1003ba4:	dec00204 	addi	sp,sp,8
 1003ba8:	f800283a 	ret

01003bac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1003bac:	defffe04 	addi	sp,sp,-8
 1003bb0:	df000115 	stw	fp,4(sp)
 1003bb4:	df000104 	addi	fp,sp,4
 1003bb8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1003bbc:	e0bfff17 	ldw	r2,-4(fp)
 1003bc0:	108000d0 	cmplti	r2,r2,3
 1003bc4:	10000d1e 	bne	r2,zero,1003bfc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1003bc8:	00804034 	movhi	r2,256
 1003bcc:	1099a504 	addi	r2,r2,26260
 1003bd0:	e0ffff17 	ldw	r3,-4(fp)
 1003bd4:	18c00324 	muli	r3,r3,12
 1003bd8:	10c5883a 	add	r2,r2,r3
 1003bdc:	10800204 	addi	r2,r2,8
 1003be0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1003be4:	00804034 	movhi	r2,256
 1003be8:	1099a504 	addi	r2,r2,26260
 1003bec:	e0ffff17 	ldw	r3,-4(fp)
 1003bf0:	18c00324 	muli	r3,r3,12
 1003bf4:	10c5883a 	add	r2,r2,r3
 1003bf8:	10000015 	stw	zero,0(r2)
  }
}
 1003bfc:	0001883a 	nop
 1003c00:	e037883a 	mov	sp,fp
 1003c04:	df000017 	ldw	fp,0(sp)
 1003c08:	dec00104 	addi	sp,sp,4
 1003c0c:	f800283a 	ret

01003c10 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1003c10:	defff904 	addi	sp,sp,-28
 1003c14:	df000615 	stw	fp,24(sp)
 1003c18:	df000604 	addi	fp,sp,24
 1003c1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1003c20:	0005303a 	rdctl	r2,status
 1003c24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003c28:	e0fffe17 	ldw	r3,-8(fp)
 1003c2c:	00bfff84 	movi	r2,-2
 1003c30:	1884703a 	and	r2,r3,r2
 1003c34:	1001703a 	wrctl	status,r2
  
  return context;
 1003c38:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1003c3c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1003c40:	d0a01017 	ldw	r2,-32704(gp)
 1003c44:	10c000c4 	addi	r3,r2,3
 1003c48:	00bfff04 	movi	r2,-4
 1003c4c:	1884703a 	and	r2,r3,r2
 1003c50:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1003c54:	d0e01017 	ldw	r3,-32704(gp)
 1003c58:	e0bfff17 	ldw	r2,-4(fp)
 1003c5c:	1887883a 	add	r3,r3,r2
 1003c60:	00808034 	movhi	r2,512
 1003c64:	10800004 	addi	r2,r2,0
 1003c68:	10c0062e 	bgeu	r2,r3,1003c84 <sbrk+0x74>
 1003c6c:	e0bffb17 	ldw	r2,-20(fp)
 1003c70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1003c74:	e0bffa17 	ldw	r2,-24(fp)
 1003c78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1003c7c:	00bfffc4 	movi	r2,-1
 1003c80:	00000b06 	br	1003cb0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 1003c84:	d0a01017 	ldw	r2,-32704(gp)
 1003c88:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 1003c8c:	d0e01017 	ldw	r3,-32704(gp)
 1003c90:	e0bfff17 	ldw	r2,-4(fp)
 1003c94:	1885883a 	add	r2,r3,r2
 1003c98:	d0a01015 	stw	r2,-32704(gp)
 1003c9c:	e0bffb17 	ldw	r2,-20(fp)
 1003ca0:	e0bffc15 	stw	r2,-16(fp)
 1003ca4:	e0bffc17 	ldw	r2,-16(fp)
 1003ca8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1003cac:	e0bffd17 	ldw	r2,-12(fp)
} 
 1003cb0:	e037883a 	mov	sp,fp
 1003cb4:	df000017 	ldw	fp,0(sp)
 1003cb8:	dec00104 	addi	sp,sp,4
 1003cbc:	f800283a 	ret

01003cc0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 1003cc0:	defffd04 	addi	sp,sp,-12
 1003cc4:	dfc00215 	stw	ra,8(sp)
 1003cc8:	df000115 	stw	fp,4(sp)
 1003ccc:	df000104 	addi	fp,sp,4
 1003cd0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 1003cd4:	e13fff17 	ldw	r4,-4(fp)
 1003cd8:	1004b8c0 	call	1004b8c <alt_busy_sleep>
}
 1003cdc:	e037883a 	mov	sp,fp
 1003ce0:	dfc00117 	ldw	ra,4(sp)
 1003ce4:	df000017 	ldw	fp,0(sp)
 1003ce8:	dec00204 	addi	sp,sp,8
 1003cec:	f800283a 	ret

01003cf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003cf0:	defffe04 	addi	sp,sp,-8
 1003cf4:	dfc00115 	stw	ra,4(sp)
 1003cf8:	df000015 	stw	fp,0(sp)
 1003cfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1003d00:	d0a00f17 	ldw	r2,-32708(gp)
 1003d04:	10000326 	beq	r2,zero,1003d14 <alt_get_errno+0x24>
 1003d08:	d0a00f17 	ldw	r2,-32708(gp)
 1003d0c:	103ee83a 	callr	r2
 1003d10:	00000106 	br	1003d18 <alt_get_errno+0x28>
 1003d14:	d0a6b804 	addi	r2,gp,-25888
}
 1003d18:	e037883a 	mov	sp,fp
 1003d1c:	dfc00117 	ldw	ra,4(sp)
 1003d20:	df000017 	ldw	fp,0(sp)
 1003d24:	dec00204 	addi	sp,sp,8
 1003d28:	f800283a 	ret

01003d2c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1003d2c:	defff904 	addi	sp,sp,-28
 1003d30:	dfc00615 	stw	ra,24(sp)
 1003d34:	df000515 	stw	fp,20(sp)
 1003d38:	df000504 	addi	fp,sp,20
 1003d3c:	e13ffd15 	stw	r4,-12(fp)
 1003d40:	e17ffe15 	stw	r5,-8(fp)
 1003d44:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003d48:	e0bffd17 	ldw	r2,-12(fp)
 1003d4c:	10000616 	blt	r2,zero,1003d68 <write+0x3c>
 1003d50:	e0bffd17 	ldw	r2,-12(fp)
 1003d54:	10c00324 	muli	r3,r2,12
 1003d58:	00804034 	movhi	r2,256
 1003d5c:	1099a504 	addi	r2,r2,26260
 1003d60:	1885883a 	add	r2,r3,r2
 1003d64:	00000106 	br	1003d6c <write+0x40>
 1003d68:	0005883a 	mov	r2,zero
 1003d6c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1003d70:	e0bffb17 	ldw	r2,-20(fp)
 1003d74:	10002126 	beq	r2,zero,1003dfc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1003d78:	e0bffb17 	ldw	r2,-20(fp)
 1003d7c:	10800217 	ldw	r2,8(r2)
 1003d80:	108000cc 	andi	r2,r2,3
 1003d84:	10001826 	beq	r2,zero,1003de8 <write+0xbc>
 1003d88:	e0bffb17 	ldw	r2,-20(fp)
 1003d8c:	10800017 	ldw	r2,0(r2)
 1003d90:	10800617 	ldw	r2,24(r2)
 1003d94:	10001426 	beq	r2,zero,1003de8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1003d98:	e0bffb17 	ldw	r2,-20(fp)
 1003d9c:	10800017 	ldw	r2,0(r2)
 1003da0:	10800617 	ldw	r2,24(r2)
 1003da4:	e0ffff17 	ldw	r3,-4(fp)
 1003da8:	180d883a 	mov	r6,r3
 1003dac:	e17ffe17 	ldw	r5,-8(fp)
 1003db0:	e13ffb17 	ldw	r4,-20(fp)
 1003db4:	103ee83a 	callr	r2
 1003db8:	e0bffc15 	stw	r2,-16(fp)
 1003dbc:	e0bffc17 	ldw	r2,-16(fp)
 1003dc0:	1000070e 	bge	r2,zero,1003de0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 1003dc4:	1003cf00 	call	1003cf0 <alt_get_errno>
 1003dc8:	1007883a 	mov	r3,r2
 1003dcc:	e0bffc17 	ldw	r2,-16(fp)
 1003dd0:	0085c83a 	sub	r2,zero,r2
 1003dd4:	18800015 	stw	r2,0(r3)
        return -1;
 1003dd8:	00bfffc4 	movi	r2,-1
 1003ddc:	00000c06 	br	1003e10 <write+0xe4>
      }
      return rval;
 1003de0:	e0bffc17 	ldw	r2,-16(fp)
 1003de4:	00000a06 	br	1003e10 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1003de8:	1003cf00 	call	1003cf0 <alt_get_errno>
 1003dec:	1007883a 	mov	r3,r2
 1003df0:	00800344 	movi	r2,13
 1003df4:	18800015 	stw	r2,0(r3)
 1003df8:	00000406 	br	1003e0c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1003dfc:	1003cf00 	call	1003cf0 <alt_get_errno>
 1003e00:	1007883a 	mov	r3,r2
 1003e04:	00801444 	movi	r2,81
 1003e08:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1003e0c:	00bfffc4 	movi	r2,-1
}
 1003e10:	e037883a 	mov	sp,fp
 1003e14:	dfc00117 	ldw	ra,4(sp)
 1003e18:	df000017 	ldw	fp,0(sp)
 1003e1c:	dec00204 	addi	sp,sp,8
 1003e20:	f800283a 	ret

01003e24 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1003e24:	defffd04 	addi	sp,sp,-12
 1003e28:	dfc00215 	stw	ra,8(sp)
 1003e2c:	df000115 	stw	fp,4(sp)
 1003e30:	df000104 	addi	fp,sp,4
 1003e34:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1003e38:	d1600c04 	addi	r5,gp,-32720
 1003e3c:	e13fff17 	ldw	r4,-4(fp)
 1003e40:	1004d680 	call	1004d68 <alt_dev_llist_insert>
}
 1003e44:	e037883a 	mov	sp,fp
 1003e48:	dfc00117 	ldw	ra,4(sp)
 1003e4c:	df000017 	ldw	fp,0(sp)
 1003e50:	dec00204 	addi	sp,sp,8
 1003e54:	f800283a 	ret

01003e58 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1003e58:	defffd04 	addi	sp,sp,-12
 1003e5c:	dfc00215 	stw	ra,8(sp)
 1003e60:	df000115 	stw	fp,4(sp)
 1003e64:	df000104 	addi	fp,sp,4
 1003e68:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
 1003e6c:	10056d80 	call	10056d8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1003e70:	00800044 	movi	r2,1
 1003e74:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1003e78:	0001883a 	nop
 1003e7c:	e037883a 	mov	sp,fp
 1003e80:	dfc00117 	ldw	ra,4(sp)
 1003e84:	df000017 	ldw	fp,0(sp)
 1003e88:	dec00204 	addi	sp,sp,8
 1003e8c:	f800283a 	ret

01003e90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1003e90:	defffe04 	addi	sp,sp,-8
 1003e94:	dfc00115 	stw	ra,4(sp)
 1003e98:	df000015 	stw	fp,0(sp)
 1003e9c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 1003ea0:	01c01904 	movi	r7,100
 1003ea4:	01800044 	movi	r6,1
 1003ea8:	000b883a 	mov	r5,zero
 1003eac:	01008134 	movhi	r4,516
 1003eb0:	210c2004 	addi	r4,r4,12416
 1003eb4:	10049e40 	call	10049e4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 1003eb8:	000d883a 	mov	r6,zero
 1003ebc:	000b883a 	mov	r5,zero
 1003ec0:	01004034 	movhi	r4,256
 1003ec4:	211a0f04 	addi	r4,r4,26684
 1003ec8:	10040680 	call	1004068 <altera_avalon_jtag_uart_init>
 1003ecc:	01004034 	movhi	r4,256
 1003ed0:	211a0504 	addi	r4,r4,26644
 1003ed4:	1003e240 	call	1003e24 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 1003ed8:	00c00044 	movi	r3,1
 1003edc:	00808134 	movhi	r2,516
 1003ee0:	108c0004 	addi	r2,r2,12288
 1003ee4:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 1003ee8:	0001883a 	nop
}
 1003eec:	0001883a 	nop
 1003ef0:	e037883a 	mov	sp,fp
 1003ef4:	dfc00117 	ldw	ra,4(sp)
 1003ef8:	df000017 	ldw	fp,0(sp)
 1003efc:	dec00204 	addi	sp,sp,8
 1003f00:	f800283a 	ret

01003f04 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1003f04:	defffa04 	addi	sp,sp,-24
 1003f08:	dfc00515 	stw	ra,20(sp)
 1003f0c:	df000415 	stw	fp,16(sp)
 1003f10:	df000404 	addi	fp,sp,16
 1003f14:	e13ffd15 	stw	r4,-12(fp)
 1003f18:	e17ffe15 	stw	r5,-8(fp)
 1003f1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003f20:	e0bffd17 	ldw	r2,-12(fp)
 1003f24:	10800017 	ldw	r2,0(r2)
 1003f28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1003f2c:	e0bffc17 	ldw	r2,-16(fp)
 1003f30:	10c00a04 	addi	r3,r2,40
 1003f34:	e0bffd17 	ldw	r2,-12(fp)
 1003f38:	10800217 	ldw	r2,8(r2)
 1003f3c:	100f883a 	mov	r7,r2
 1003f40:	e1bfff17 	ldw	r6,-4(fp)
 1003f44:	e17ffe17 	ldw	r5,-8(fp)
 1003f48:	1809883a 	mov	r4,r3
 1003f4c:	100452c0 	call	100452c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1003f50:	e037883a 	mov	sp,fp
 1003f54:	dfc00117 	ldw	ra,4(sp)
 1003f58:	df000017 	ldw	fp,0(sp)
 1003f5c:	dec00204 	addi	sp,sp,8
 1003f60:	f800283a 	ret

01003f64 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1003f64:	defffa04 	addi	sp,sp,-24
 1003f68:	dfc00515 	stw	ra,20(sp)
 1003f6c:	df000415 	stw	fp,16(sp)
 1003f70:	df000404 	addi	fp,sp,16
 1003f74:	e13ffd15 	stw	r4,-12(fp)
 1003f78:	e17ffe15 	stw	r5,-8(fp)
 1003f7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003f80:	e0bffd17 	ldw	r2,-12(fp)
 1003f84:	10800017 	ldw	r2,0(r2)
 1003f88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1003f8c:	e0bffc17 	ldw	r2,-16(fp)
 1003f90:	10c00a04 	addi	r3,r2,40
 1003f94:	e0bffd17 	ldw	r2,-12(fp)
 1003f98:	10800217 	ldw	r2,8(r2)
 1003f9c:	100f883a 	mov	r7,r2
 1003fa0:	e1bfff17 	ldw	r6,-4(fp)
 1003fa4:	e17ffe17 	ldw	r5,-8(fp)
 1003fa8:	1809883a 	mov	r4,r3
 1003fac:	10047480 	call	1004748 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1003fb0:	e037883a 	mov	sp,fp
 1003fb4:	dfc00117 	ldw	ra,4(sp)
 1003fb8:	df000017 	ldw	fp,0(sp)
 1003fbc:	dec00204 	addi	sp,sp,8
 1003fc0:	f800283a 	ret

01003fc4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1003fc4:	defffc04 	addi	sp,sp,-16
 1003fc8:	dfc00315 	stw	ra,12(sp)
 1003fcc:	df000215 	stw	fp,8(sp)
 1003fd0:	df000204 	addi	fp,sp,8
 1003fd4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003fd8:	e0bfff17 	ldw	r2,-4(fp)
 1003fdc:	10800017 	ldw	r2,0(r2)
 1003fe0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1003fe4:	e0bffe17 	ldw	r2,-8(fp)
 1003fe8:	10c00a04 	addi	r3,r2,40
 1003fec:	e0bfff17 	ldw	r2,-4(fp)
 1003ff0:	10800217 	ldw	r2,8(r2)
 1003ff4:	100b883a 	mov	r5,r2
 1003ff8:	1809883a 	mov	r4,r3
 1003ffc:	10043d40 	call	10043d4 <altera_avalon_jtag_uart_close>
}
 1004000:	e037883a 	mov	sp,fp
 1004004:	dfc00117 	ldw	ra,4(sp)
 1004008:	df000017 	ldw	fp,0(sp)
 100400c:	dec00204 	addi	sp,sp,8
 1004010:	f800283a 	ret

01004014 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1004014:	defffa04 	addi	sp,sp,-24
 1004018:	dfc00515 	stw	ra,20(sp)
 100401c:	df000415 	stw	fp,16(sp)
 1004020:	df000404 	addi	fp,sp,16
 1004024:	e13ffd15 	stw	r4,-12(fp)
 1004028:	e17ffe15 	stw	r5,-8(fp)
 100402c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1004030:	e0bffd17 	ldw	r2,-12(fp)
 1004034:	10800017 	ldw	r2,0(r2)
 1004038:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100403c:	e0bffc17 	ldw	r2,-16(fp)
 1004040:	10800a04 	addi	r2,r2,40
 1004044:	e1bfff17 	ldw	r6,-4(fp)
 1004048:	e17ffe17 	ldw	r5,-8(fp)
 100404c:	1009883a 	mov	r4,r2
 1004050:	100443c0 	call	100443c <altera_avalon_jtag_uart_ioctl>
}
 1004054:	e037883a 	mov	sp,fp
 1004058:	dfc00117 	ldw	ra,4(sp)
 100405c:	df000017 	ldw	fp,0(sp)
 1004060:	dec00204 	addi	sp,sp,8
 1004064:	f800283a 	ret

01004068 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1004068:	defffa04 	addi	sp,sp,-24
 100406c:	dfc00515 	stw	ra,20(sp)
 1004070:	df000415 	stw	fp,16(sp)
 1004074:	df000404 	addi	fp,sp,16
 1004078:	e13ffd15 	stw	r4,-12(fp)
 100407c:	e17ffe15 	stw	r5,-8(fp)
 1004080:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1004084:	e0bffd17 	ldw	r2,-12(fp)
 1004088:	00c00044 	movi	r3,1
 100408c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1004090:	e0bffd17 	ldw	r2,-12(fp)
 1004094:	10800017 	ldw	r2,0(r2)
 1004098:	10800104 	addi	r2,r2,4
 100409c:	1007883a 	mov	r3,r2
 10040a0:	e0bffd17 	ldw	r2,-12(fp)
 10040a4:	10800817 	ldw	r2,32(r2)
 10040a8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 10040ac:	e0bffe17 	ldw	r2,-8(fp)
 10040b0:	e0ffff17 	ldw	r3,-4(fp)
 10040b4:	d8000015 	stw	zero,0(sp)
 10040b8:	e1fffd17 	ldw	r7,-12(fp)
 10040bc:	01804034 	movhi	r6,256
 10040c0:	31904a04 	addi	r6,r6,16680
 10040c4:	180b883a 	mov	r5,r3
 10040c8:	1009883a 	mov	r4,r2
 10040cc:	1004f000 	call	1004f00 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 10040d0:	e0bffd17 	ldw	r2,-12(fp)
 10040d4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 10040d8:	e0bffd17 	ldw	r2,-12(fp)
 10040dc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 10040e0:	d0e6bd17 	ldw	r3,-25868(gp)
 10040e4:	e1fffd17 	ldw	r7,-12(fp)
 10040e8:	01804034 	movhi	r6,256
 10040ec:	3190cd04 	addi	r6,r6,17204
 10040f0:	180b883a 	mov	r5,r3
 10040f4:	1009883a 	mov	r4,r2
 10040f8:	1004a600 	call	1004a60 <alt_alarm_start>
 10040fc:	1000040e 	bge	r2,zero,1004110 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1004100:	e0fffd17 	ldw	r3,-12(fp)
 1004104:	00a00034 	movhi	r2,32768
 1004108:	10bfffc4 	addi	r2,r2,-1
 100410c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1004110:	0001883a 	nop
 1004114:	e037883a 	mov	sp,fp
 1004118:	dfc00117 	ldw	ra,4(sp)
 100411c:	df000017 	ldw	fp,0(sp)
 1004120:	dec00204 	addi	sp,sp,8
 1004124:	f800283a 	ret

01004128 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1004128:	defff804 	addi	sp,sp,-32
 100412c:	df000715 	stw	fp,28(sp)
 1004130:	df000704 	addi	fp,sp,28
 1004134:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1004138:	e0bfff17 	ldw	r2,-4(fp)
 100413c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 1004140:	e0bffb17 	ldw	r2,-20(fp)
 1004144:	10800017 	ldw	r2,0(r2)
 1004148:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100414c:	e0bffc17 	ldw	r2,-16(fp)
 1004150:	10800104 	addi	r2,r2,4
 1004154:	10800037 	ldwio	r2,0(r2)
 1004158:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100415c:	e0bffd17 	ldw	r2,-12(fp)
 1004160:	1080c00c 	andi	r2,r2,768
 1004164:	10006d26 	beq	r2,zero,100431c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1004168:	e0bffd17 	ldw	r2,-12(fp)
 100416c:	1080400c 	andi	r2,r2,256
 1004170:	10003526 	beq	r2,zero,1004248 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1004174:	00800074 	movhi	r2,1
 1004178:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100417c:	e0bffb17 	ldw	r2,-20(fp)
 1004180:	10800a17 	ldw	r2,40(r2)
 1004184:	10800044 	addi	r2,r2,1
 1004188:	1081ffcc 	andi	r2,r2,2047
 100418c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 1004190:	e0bffb17 	ldw	r2,-20(fp)
 1004194:	10c00b17 	ldw	r3,44(r2)
 1004198:	e0bffe17 	ldw	r2,-8(fp)
 100419c:	18801526 	beq	r3,r2,10041f4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 10041a0:	e0bffc17 	ldw	r2,-16(fp)
 10041a4:	10800037 	ldwio	r2,0(r2)
 10041a8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 10041ac:	e0bff917 	ldw	r2,-28(fp)
 10041b0:	10a0000c 	andi	r2,r2,32768
 10041b4:	10001126 	beq	r2,zero,10041fc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 10041b8:	e0bffb17 	ldw	r2,-20(fp)
 10041bc:	10800a17 	ldw	r2,40(r2)
 10041c0:	e0fff917 	ldw	r3,-28(fp)
 10041c4:	1809883a 	mov	r4,r3
 10041c8:	e0fffb17 	ldw	r3,-20(fp)
 10041cc:	1885883a 	add	r2,r3,r2
 10041d0:	10800e04 	addi	r2,r2,56
 10041d4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10041d8:	e0bffb17 	ldw	r2,-20(fp)
 10041dc:	10800a17 	ldw	r2,40(r2)
 10041e0:	10800044 	addi	r2,r2,1
 10041e4:	10c1ffcc 	andi	r3,r2,2047
 10041e8:	e0bffb17 	ldw	r2,-20(fp)
 10041ec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 10041f0:	003fe206 	br	100417c <__alt_mem_TCDM+0xfefc317c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 10041f4:	0001883a 	nop
 10041f8:	00000106 	br	1004200 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 10041fc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1004200:	e0bff917 	ldw	r2,-28(fp)
 1004204:	10bfffec 	andhi	r2,r2,65535
 1004208:	10000f26 	beq	r2,zero,1004248 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100420c:	e0bffb17 	ldw	r2,-20(fp)
 1004210:	10c00817 	ldw	r3,32(r2)
 1004214:	00bfff84 	movi	r2,-2
 1004218:	1886703a 	and	r3,r3,r2
 100421c:	e0bffb17 	ldw	r2,-20(fp)
 1004220:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1004224:	e0bffc17 	ldw	r2,-16(fp)
 1004228:	10800104 	addi	r2,r2,4
 100422c:	1007883a 	mov	r3,r2
 1004230:	e0bffb17 	ldw	r2,-20(fp)
 1004234:	10800817 	ldw	r2,32(r2)
 1004238:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100423c:	e0bffc17 	ldw	r2,-16(fp)
 1004240:	10800104 	addi	r2,r2,4
 1004244:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1004248:	e0bffd17 	ldw	r2,-12(fp)
 100424c:	1080800c 	andi	r2,r2,512
 1004250:	103fbe26 	beq	r2,zero,100414c <__alt_mem_TCDM+0xfefc314c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1004254:	e0bffd17 	ldw	r2,-12(fp)
 1004258:	1004d43a 	srli	r2,r2,16
 100425c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1004260:	00001406 	br	10042b4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1004264:	e0bffc17 	ldw	r2,-16(fp)
 1004268:	e0fffb17 	ldw	r3,-20(fp)
 100426c:	18c00d17 	ldw	r3,52(r3)
 1004270:	e13ffb17 	ldw	r4,-20(fp)
 1004274:	20c7883a 	add	r3,r4,r3
 1004278:	18c20e04 	addi	r3,r3,2104
 100427c:	18c00003 	ldbu	r3,0(r3)
 1004280:	18c03fcc 	andi	r3,r3,255
 1004284:	18c0201c 	xori	r3,r3,128
 1004288:	18ffe004 	addi	r3,r3,-128
 100428c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1004290:	e0bffb17 	ldw	r2,-20(fp)
 1004294:	10800d17 	ldw	r2,52(r2)
 1004298:	10800044 	addi	r2,r2,1
 100429c:	10c1ffcc 	andi	r3,r2,2047
 10042a0:	e0bffb17 	ldw	r2,-20(fp)
 10042a4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 10042a8:	e0bffa17 	ldw	r2,-24(fp)
 10042ac:	10bfffc4 	addi	r2,r2,-1
 10042b0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 10042b4:	e0bffa17 	ldw	r2,-24(fp)
 10042b8:	10000526 	beq	r2,zero,10042d0 <altera_avalon_jtag_uart_irq+0x1a8>
 10042bc:	e0bffb17 	ldw	r2,-20(fp)
 10042c0:	10c00d17 	ldw	r3,52(r2)
 10042c4:	e0bffb17 	ldw	r2,-20(fp)
 10042c8:	10800c17 	ldw	r2,48(r2)
 10042cc:	18bfe51e 	bne	r3,r2,1004264 <__alt_mem_TCDM+0xfefc3264>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 10042d0:	e0bffa17 	ldw	r2,-24(fp)
 10042d4:	103f9d26 	beq	r2,zero,100414c <__alt_mem_TCDM+0xfefc314c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10042d8:	e0bffb17 	ldw	r2,-20(fp)
 10042dc:	10c00817 	ldw	r3,32(r2)
 10042e0:	00bfff44 	movi	r2,-3
 10042e4:	1886703a 	and	r3,r3,r2
 10042e8:	e0bffb17 	ldw	r2,-20(fp)
 10042ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10042f0:	e0bffb17 	ldw	r2,-20(fp)
 10042f4:	10800017 	ldw	r2,0(r2)
 10042f8:	10800104 	addi	r2,r2,4
 10042fc:	1007883a 	mov	r3,r2
 1004300:	e0bffb17 	ldw	r2,-20(fp)
 1004304:	10800817 	ldw	r2,32(r2)
 1004308:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100430c:	e0bffc17 	ldw	r2,-16(fp)
 1004310:	10800104 	addi	r2,r2,4
 1004314:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1004318:	003f8c06 	br	100414c <__alt_mem_TCDM+0xfefc314c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 100431c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 1004320:	0001883a 	nop
 1004324:	e037883a 	mov	sp,fp
 1004328:	df000017 	ldw	fp,0(sp)
 100432c:	dec00104 	addi	sp,sp,4
 1004330:	f800283a 	ret

01004334 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1004334:	defff804 	addi	sp,sp,-32
 1004338:	df000715 	stw	fp,28(sp)
 100433c:	df000704 	addi	fp,sp,28
 1004340:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1004344:	e0bffb17 	ldw	r2,-20(fp)
 1004348:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100434c:	e0bff917 	ldw	r2,-28(fp)
 1004350:	10800017 	ldw	r2,0(r2)
 1004354:	10800104 	addi	r2,r2,4
 1004358:	10800037 	ldwio	r2,0(r2)
 100435c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1004360:	e0bffa17 	ldw	r2,-24(fp)
 1004364:	1081000c 	andi	r2,r2,1024
 1004368:	10000b26 	beq	r2,zero,1004398 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100436c:	e0bff917 	ldw	r2,-28(fp)
 1004370:	10800017 	ldw	r2,0(r2)
 1004374:	10800104 	addi	r2,r2,4
 1004378:	1007883a 	mov	r3,r2
 100437c:	e0bff917 	ldw	r2,-28(fp)
 1004380:	10800817 	ldw	r2,32(r2)
 1004384:	10810014 	ori	r2,r2,1024
 1004388:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 100438c:	e0bff917 	ldw	r2,-28(fp)
 1004390:	10000915 	stw	zero,36(r2)
 1004394:	00000a06 	br	10043c0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1004398:	e0bff917 	ldw	r2,-28(fp)
 100439c:	10c00917 	ldw	r3,36(r2)
 10043a0:	00a00034 	movhi	r2,32768
 10043a4:	10bfff04 	addi	r2,r2,-4
 10043a8:	10c00536 	bltu	r2,r3,10043c0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 10043ac:	e0bff917 	ldw	r2,-28(fp)
 10043b0:	10800917 	ldw	r2,36(r2)
 10043b4:	10c00044 	addi	r3,r2,1
 10043b8:	e0bff917 	ldw	r2,-28(fp)
 10043bc:	10c00915 	stw	r3,36(r2)
 10043c0:	d0a6bd17 	ldw	r2,-25868(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 10043c4:	e037883a 	mov	sp,fp
 10043c8:	df000017 	ldw	fp,0(sp)
 10043cc:	dec00104 	addi	sp,sp,4
 10043d0:	f800283a 	ret

010043d4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 10043d4:	defffd04 	addi	sp,sp,-12
 10043d8:	df000215 	stw	fp,8(sp)
 10043dc:	df000204 	addi	fp,sp,8
 10043e0:	e13ffe15 	stw	r4,-8(fp)
 10043e4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10043e8:	00000506 	br	1004400 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 10043ec:	e0bfff17 	ldw	r2,-4(fp)
 10043f0:	1090000c 	andi	r2,r2,16384
 10043f4:	10000226 	beq	r2,zero,1004400 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 10043f8:	00bffd44 	movi	r2,-11
 10043fc:	00000b06 	br	100442c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1004400:	e0bffe17 	ldw	r2,-8(fp)
 1004404:	10c00d17 	ldw	r3,52(r2)
 1004408:	e0bffe17 	ldw	r2,-8(fp)
 100440c:	10800c17 	ldw	r2,48(r2)
 1004410:	18800526 	beq	r3,r2,1004428 <altera_avalon_jtag_uart_close+0x54>
 1004414:	e0bffe17 	ldw	r2,-8(fp)
 1004418:	10c00917 	ldw	r3,36(r2)
 100441c:	e0bffe17 	ldw	r2,-8(fp)
 1004420:	10800117 	ldw	r2,4(r2)
 1004424:	18bff136 	bltu	r3,r2,10043ec <__alt_mem_TCDM+0xfefc33ec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1004428:	0005883a 	mov	r2,zero
}
 100442c:	e037883a 	mov	sp,fp
 1004430:	df000017 	ldw	fp,0(sp)
 1004434:	dec00104 	addi	sp,sp,4
 1004438:	f800283a 	ret

0100443c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100443c:	defffa04 	addi	sp,sp,-24
 1004440:	df000515 	stw	fp,20(sp)
 1004444:	df000504 	addi	fp,sp,20
 1004448:	e13ffd15 	stw	r4,-12(fp)
 100444c:	e17ffe15 	stw	r5,-8(fp)
 1004450:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 1004454:	00bff9c4 	movi	r2,-25
 1004458:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 100445c:	e0bffe17 	ldw	r2,-8(fp)
 1004460:	10da8060 	cmpeqi	r3,r2,27137
 1004464:	1800031e 	bne	r3,zero,1004474 <altera_avalon_jtag_uart_ioctl+0x38>
 1004468:	109a80a0 	cmpeqi	r2,r2,27138
 100446c:	1000181e 	bne	r2,zero,10044d0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 1004470:	00002906 	br	1004518 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1004474:	e0bffd17 	ldw	r2,-12(fp)
 1004478:	10c00117 	ldw	r3,4(r2)
 100447c:	00a00034 	movhi	r2,32768
 1004480:	10bfffc4 	addi	r2,r2,-1
 1004484:	18802126 	beq	r3,r2,100450c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 1004488:	e0bfff17 	ldw	r2,-4(fp)
 100448c:	10800017 	ldw	r2,0(r2)
 1004490:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1004494:	e0bffc17 	ldw	r2,-16(fp)
 1004498:	10800090 	cmplti	r2,r2,2
 100449c:	1000061e 	bne	r2,zero,10044b8 <altera_avalon_jtag_uart_ioctl+0x7c>
 10044a0:	e0fffc17 	ldw	r3,-16(fp)
 10044a4:	00a00034 	movhi	r2,32768
 10044a8:	10bfffc4 	addi	r2,r2,-1
 10044ac:	18800226 	beq	r3,r2,10044b8 <altera_avalon_jtag_uart_ioctl+0x7c>
 10044b0:	e0bffc17 	ldw	r2,-16(fp)
 10044b4:	00000206 	br	10044c0 <altera_avalon_jtag_uart_ioctl+0x84>
 10044b8:	00a00034 	movhi	r2,32768
 10044bc:	10bfff84 	addi	r2,r2,-2
 10044c0:	e0fffd17 	ldw	r3,-12(fp)
 10044c4:	18800115 	stw	r2,4(r3)
      rc = 0;
 10044c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 10044cc:	00000f06 	br	100450c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 10044d0:	e0bffd17 	ldw	r2,-12(fp)
 10044d4:	10c00117 	ldw	r3,4(r2)
 10044d8:	00a00034 	movhi	r2,32768
 10044dc:	10bfffc4 	addi	r2,r2,-1
 10044e0:	18800c26 	beq	r3,r2,1004514 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 10044e4:	e0bffd17 	ldw	r2,-12(fp)
 10044e8:	10c00917 	ldw	r3,36(r2)
 10044ec:	e0bffd17 	ldw	r2,-12(fp)
 10044f0:	10800117 	ldw	r2,4(r2)
 10044f4:	1885803a 	cmpltu	r2,r3,r2
 10044f8:	10c03fcc 	andi	r3,r2,255
 10044fc:	e0bfff17 	ldw	r2,-4(fp)
 1004500:	10c00015 	stw	r3,0(r2)
      rc = 0;
 1004504:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1004508:	00000206 	br	1004514 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 100450c:	0001883a 	nop
 1004510:	00000106 	br	1004518 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 1004514:	0001883a 	nop

  default:
    break;
  }

  return rc;
 1004518:	e0bffb17 	ldw	r2,-20(fp)
}
 100451c:	e037883a 	mov	sp,fp
 1004520:	df000017 	ldw	fp,0(sp)
 1004524:	dec00104 	addi	sp,sp,4
 1004528:	f800283a 	ret

0100452c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100452c:	defff304 	addi	sp,sp,-52
 1004530:	dfc00c15 	stw	ra,48(sp)
 1004534:	df000b15 	stw	fp,44(sp)
 1004538:	df000b04 	addi	fp,sp,44
 100453c:	e13ffc15 	stw	r4,-16(fp)
 1004540:	e17ffd15 	stw	r5,-12(fp)
 1004544:	e1bffe15 	stw	r6,-8(fp)
 1004548:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 100454c:	e0bffd17 	ldw	r2,-12(fp)
 1004550:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1004554:	00004706 	br	1004674 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1004558:	e0bffc17 	ldw	r2,-16(fp)
 100455c:	10800a17 	ldw	r2,40(r2)
 1004560:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1004564:	e0bffc17 	ldw	r2,-16(fp)
 1004568:	10800b17 	ldw	r2,44(r2)
 100456c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 1004570:	e0fff717 	ldw	r3,-36(fp)
 1004574:	e0bff817 	ldw	r2,-32(fp)
 1004578:	18800536 	bltu	r3,r2,1004590 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100457c:	e0fff717 	ldw	r3,-36(fp)
 1004580:	e0bff817 	ldw	r2,-32(fp)
 1004584:	1885c83a 	sub	r2,r3,r2
 1004588:	e0bff615 	stw	r2,-40(fp)
 100458c:	00000406 	br	10045a0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1004590:	00c20004 	movi	r3,2048
 1004594:	e0bff817 	ldw	r2,-32(fp)
 1004598:	1885c83a 	sub	r2,r3,r2
 100459c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 10045a0:	e0bff617 	ldw	r2,-40(fp)
 10045a4:	10001e26 	beq	r2,zero,1004620 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 10045a8:	e0fffe17 	ldw	r3,-8(fp)
 10045ac:	e0bff617 	ldw	r2,-40(fp)
 10045b0:	1880022e 	bgeu	r3,r2,10045bc <altera_avalon_jtag_uart_read+0x90>
        n = space;
 10045b4:	e0bffe17 	ldw	r2,-8(fp)
 10045b8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 10045bc:	e0bffc17 	ldw	r2,-16(fp)
 10045c0:	10c00e04 	addi	r3,r2,56
 10045c4:	e0bff817 	ldw	r2,-32(fp)
 10045c8:	1885883a 	add	r2,r3,r2
 10045cc:	e1bff617 	ldw	r6,-40(fp)
 10045d0:	100b883a 	mov	r5,r2
 10045d4:	e13ff517 	ldw	r4,-44(fp)
 10045d8:	1001b280 	call	1001b28 <memcpy>
      ptr   += n;
 10045dc:	e0fff517 	ldw	r3,-44(fp)
 10045e0:	e0bff617 	ldw	r2,-40(fp)
 10045e4:	1885883a 	add	r2,r3,r2
 10045e8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 10045ec:	e0fffe17 	ldw	r3,-8(fp)
 10045f0:	e0bff617 	ldw	r2,-40(fp)
 10045f4:	1885c83a 	sub	r2,r3,r2
 10045f8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10045fc:	e0fff817 	ldw	r3,-32(fp)
 1004600:	e0bff617 	ldw	r2,-40(fp)
 1004604:	1885883a 	add	r2,r3,r2
 1004608:	10c1ffcc 	andi	r3,r2,2047
 100460c:	e0bffc17 	ldw	r2,-16(fp)
 1004610:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1004614:	e0bffe17 	ldw	r2,-8(fp)
 1004618:	00bfcf16 	blt	zero,r2,1004558 <__alt_mem_TCDM+0xfefc3558>
 100461c:	00000106 	br	1004624 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 1004620:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 1004624:	e0fff517 	ldw	r3,-44(fp)
 1004628:	e0bffd17 	ldw	r2,-12(fp)
 100462c:	1880141e 	bne	r3,r2,1004680 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1004630:	e0bfff17 	ldw	r2,-4(fp)
 1004634:	1090000c 	andi	r2,r2,16384
 1004638:	1000131e 	bne	r2,zero,1004688 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100463c:	0001883a 	nop
 1004640:	e0bffc17 	ldw	r2,-16(fp)
 1004644:	10c00a17 	ldw	r3,40(r2)
 1004648:	e0bff717 	ldw	r2,-36(fp)
 100464c:	1880051e 	bne	r3,r2,1004664 <altera_avalon_jtag_uart_read+0x138>
 1004650:	e0bffc17 	ldw	r2,-16(fp)
 1004654:	10c00917 	ldw	r3,36(r2)
 1004658:	e0bffc17 	ldw	r2,-16(fp)
 100465c:	10800117 	ldw	r2,4(r2)
 1004660:	18bff736 	bltu	r3,r2,1004640 <__alt_mem_TCDM+0xfefc3640>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1004664:	e0bffc17 	ldw	r2,-16(fp)
 1004668:	10c00a17 	ldw	r3,40(r2)
 100466c:	e0bff717 	ldw	r2,-36(fp)
 1004670:	18800726 	beq	r3,r2,1004690 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1004674:	e0bffe17 	ldw	r2,-8(fp)
 1004678:	00bfb716 	blt	zero,r2,1004558 <__alt_mem_TCDM+0xfefc3558>
 100467c:	00000506 	br	1004694 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 1004680:	0001883a 	nop
 1004684:	00000306 	br	1004694 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 1004688:	0001883a 	nop
 100468c:	00000106 	br	1004694 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 1004690:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1004694:	e0fff517 	ldw	r3,-44(fp)
 1004698:	e0bffd17 	ldw	r2,-12(fp)
 100469c:	18801826 	beq	r3,r2,1004700 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10046a0:	0005303a 	rdctl	r2,status
 10046a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10046a8:	e0fffb17 	ldw	r3,-20(fp)
 10046ac:	00bfff84 	movi	r2,-2
 10046b0:	1884703a 	and	r2,r3,r2
 10046b4:	1001703a 	wrctl	status,r2
  
  return context;
 10046b8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 10046bc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10046c0:	e0bffc17 	ldw	r2,-16(fp)
 10046c4:	10800817 	ldw	r2,32(r2)
 10046c8:	10c00054 	ori	r3,r2,1
 10046cc:	e0bffc17 	ldw	r2,-16(fp)
 10046d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10046d4:	e0bffc17 	ldw	r2,-16(fp)
 10046d8:	10800017 	ldw	r2,0(r2)
 10046dc:	10800104 	addi	r2,r2,4
 10046e0:	1007883a 	mov	r3,r2
 10046e4:	e0bffc17 	ldw	r2,-16(fp)
 10046e8:	10800817 	ldw	r2,32(r2)
 10046ec:	18800035 	stwio	r2,0(r3)
 10046f0:	e0bffa17 	ldw	r2,-24(fp)
 10046f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10046f8:	e0bff917 	ldw	r2,-28(fp)
 10046fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1004700:	e0fff517 	ldw	r3,-44(fp)
 1004704:	e0bffd17 	ldw	r2,-12(fp)
 1004708:	18800426 	beq	r3,r2,100471c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 100470c:	e0fff517 	ldw	r3,-44(fp)
 1004710:	e0bffd17 	ldw	r2,-12(fp)
 1004714:	1885c83a 	sub	r2,r3,r2
 1004718:	00000606 	br	1004734 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 100471c:	e0bfff17 	ldw	r2,-4(fp)
 1004720:	1090000c 	andi	r2,r2,16384
 1004724:	10000226 	beq	r2,zero,1004730 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1004728:	00bffd44 	movi	r2,-11
 100472c:	00000106 	br	1004734 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 1004730:	00bffec4 	movi	r2,-5
}
 1004734:	e037883a 	mov	sp,fp
 1004738:	dfc00117 	ldw	ra,4(sp)
 100473c:	df000017 	ldw	fp,0(sp)
 1004740:	dec00204 	addi	sp,sp,8
 1004744:	f800283a 	ret

01004748 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1004748:	defff304 	addi	sp,sp,-52
 100474c:	dfc00c15 	stw	ra,48(sp)
 1004750:	df000b15 	stw	fp,44(sp)
 1004754:	df000b04 	addi	fp,sp,44
 1004758:	e13ffc15 	stw	r4,-16(fp)
 100475c:	e17ffd15 	stw	r5,-12(fp)
 1004760:	e1bffe15 	stw	r6,-8(fp)
 1004764:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1004768:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100476c:	e0bffd17 	ldw	r2,-12(fp)
 1004770:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1004774:	00003706 	br	1004854 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1004778:	e0bffc17 	ldw	r2,-16(fp)
 100477c:	10800c17 	ldw	r2,48(r2)
 1004780:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 1004784:	e0bffc17 	ldw	r2,-16(fp)
 1004788:	10800d17 	ldw	r2,52(r2)
 100478c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 1004790:	e0fff917 	ldw	r3,-28(fp)
 1004794:	e0bff517 	ldw	r2,-44(fp)
 1004798:	1880062e 	bgeu	r3,r2,10047b4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100479c:	e0fff517 	ldw	r3,-44(fp)
 10047a0:	e0bff917 	ldw	r2,-28(fp)
 10047a4:	1885c83a 	sub	r2,r3,r2
 10047a8:	10bfffc4 	addi	r2,r2,-1
 10047ac:	e0bff615 	stw	r2,-40(fp)
 10047b0:	00000b06 	br	10047e0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 10047b4:	e0bff517 	ldw	r2,-44(fp)
 10047b8:	10000526 	beq	r2,zero,10047d0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 10047bc:	00c20004 	movi	r3,2048
 10047c0:	e0bff917 	ldw	r2,-28(fp)
 10047c4:	1885c83a 	sub	r2,r3,r2
 10047c8:	e0bff615 	stw	r2,-40(fp)
 10047cc:	00000406 	br	10047e0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 10047d0:	00c1ffc4 	movi	r3,2047
 10047d4:	e0bff917 	ldw	r2,-28(fp)
 10047d8:	1885c83a 	sub	r2,r3,r2
 10047dc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 10047e0:	e0bff617 	ldw	r2,-40(fp)
 10047e4:	10001e26 	beq	r2,zero,1004860 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 10047e8:	e0fffe17 	ldw	r3,-8(fp)
 10047ec:	e0bff617 	ldw	r2,-40(fp)
 10047f0:	1880022e 	bgeu	r3,r2,10047fc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 10047f4:	e0bffe17 	ldw	r2,-8(fp)
 10047f8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 10047fc:	e0bffc17 	ldw	r2,-16(fp)
 1004800:	10c20e04 	addi	r3,r2,2104
 1004804:	e0bff917 	ldw	r2,-28(fp)
 1004808:	1885883a 	add	r2,r3,r2
 100480c:	e1bff617 	ldw	r6,-40(fp)
 1004810:	e17ffd17 	ldw	r5,-12(fp)
 1004814:	1009883a 	mov	r4,r2
 1004818:	1001b280 	call	1001b28 <memcpy>
      ptr   += n;
 100481c:	e0fffd17 	ldw	r3,-12(fp)
 1004820:	e0bff617 	ldw	r2,-40(fp)
 1004824:	1885883a 	add	r2,r3,r2
 1004828:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 100482c:	e0fffe17 	ldw	r3,-8(fp)
 1004830:	e0bff617 	ldw	r2,-40(fp)
 1004834:	1885c83a 	sub	r2,r3,r2
 1004838:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100483c:	e0fff917 	ldw	r3,-28(fp)
 1004840:	e0bff617 	ldw	r2,-40(fp)
 1004844:	1885883a 	add	r2,r3,r2
 1004848:	10c1ffcc 	andi	r3,r2,2047
 100484c:	e0bffc17 	ldw	r2,-16(fp)
 1004850:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1004854:	e0bffe17 	ldw	r2,-8(fp)
 1004858:	00bfc716 	blt	zero,r2,1004778 <__alt_mem_TCDM+0xfefc3778>
 100485c:	00000106 	br	1004864 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 1004860:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004864:	0005303a 	rdctl	r2,status
 1004868:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100486c:	e0fffb17 	ldw	r3,-20(fp)
 1004870:	00bfff84 	movi	r2,-2
 1004874:	1884703a 	and	r2,r3,r2
 1004878:	1001703a 	wrctl	status,r2
  
  return context;
 100487c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1004880:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1004884:	e0bffc17 	ldw	r2,-16(fp)
 1004888:	10800817 	ldw	r2,32(r2)
 100488c:	10c00094 	ori	r3,r2,2
 1004890:	e0bffc17 	ldw	r2,-16(fp)
 1004894:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1004898:	e0bffc17 	ldw	r2,-16(fp)
 100489c:	10800017 	ldw	r2,0(r2)
 10048a0:	10800104 	addi	r2,r2,4
 10048a4:	1007883a 	mov	r3,r2
 10048a8:	e0bffc17 	ldw	r2,-16(fp)
 10048ac:	10800817 	ldw	r2,32(r2)
 10048b0:	18800035 	stwio	r2,0(r3)
 10048b4:	e0bffa17 	ldw	r2,-24(fp)
 10048b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10048bc:	e0bff817 	ldw	r2,-32(fp)
 10048c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 10048c4:	e0bffe17 	ldw	r2,-8(fp)
 10048c8:	0080100e 	bge	zero,r2,100490c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 10048cc:	e0bfff17 	ldw	r2,-4(fp)
 10048d0:	1090000c 	andi	r2,r2,16384
 10048d4:	1000101e 	bne	r2,zero,1004918 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 10048d8:	0001883a 	nop
 10048dc:	e0bffc17 	ldw	r2,-16(fp)
 10048e0:	10c00d17 	ldw	r3,52(r2)
 10048e4:	e0bff517 	ldw	r2,-44(fp)
 10048e8:	1880051e 	bne	r3,r2,1004900 <altera_avalon_jtag_uart_write+0x1b8>
 10048ec:	e0bffc17 	ldw	r2,-16(fp)
 10048f0:	10c00917 	ldw	r3,36(r2)
 10048f4:	e0bffc17 	ldw	r2,-16(fp)
 10048f8:	10800117 	ldw	r2,4(r2)
 10048fc:	18bff736 	bltu	r3,r2,10048dc <__alt_mem_TCDM+0xfefc38dc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1004900:	e0bffc17 	ldw	r2,-16(fp)
 1004904:	10800917 	ldw	r2,36(r2)
 1004908:	1000051e 	bne	r2,zero,1004920 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 100490c:	e0bffe17 	ldw	r2,-8(fp)
 1004910:	00bfd016 	blt	zero,r2,1004854 <__alt_mem_TCDM+0xfefc3854>
 1004914:	00000306 	br	1004924 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 1004918:	0001883a 	nop
 100491c:	00000106 	br	1004924 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 1004920:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1004924:	e0fffd17 	ldw	r3,-12(fp)
 1004928:	e0bff717 	ldw	r2,-36(fp)
 100492c:	18800426 	beq	r3,r2,1004940 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 1004930:	e0fffd17 	ldw	r3,-12(fp)
 1004934:	e0bff717 	ldw	r2,-36(fp)
 1004938:	1885c83a 	sub	r2,r3,r2
 100493c:	00000606 	br	1004958 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 1004940:	e0bfff17 	ldw	r2,-4(fp)
 1004944:	1090000c 	andi	r2,r2,16384
 1004948:	10000226 	beq	r2,zero,1004954 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 100494c:	00bffd44 	movi	r2,-11
 1004950:	00000106 	br	1004958 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1004954:	00bffec4 	movi	r2,-5
}
 1004958:	e037883a 	mov	sp,fp
 100495c:	dfc00117 	ldw	ra,4(sp)
 1004960:	df000017 	ldw	fp,0(sp)
 1004964:	dec00204 	addi	sp,sp,8
 1004968:	f800283a 	ret

0100496c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 100496c:	defffa04 	addi	sp,sp,-24
 1004970:	dfc00515 	stw	ra,20(sp)
 1004974:	df000415 	stw	fp,16(sp)
 1004978:	df000404 	addi	fp,sp,16
 100497c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1004980:	0007883a 	mov	r3,zero
 1004984:	e0bfff17 	ldw	r2,-4(fp)
 1004988:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 100498c:	e0bfff17 	ldw	r2,-4(fp)
 1004990:	10800104 	addi	r2,r2,4
 1004994:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004998:	0005303a 	rdctl	r2,status
 100499c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10049a0:	e0fffd17 	ldw	r3,-12(fp)
 10049a4:	00bfff84 	movi	r2,-2
 10049a8:	1884703a 	and	r2,r3,r2
 10049ac:	1001703a 	wrctl	status,r2
  
  return context;
 10049b0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 10049b4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 10049b8:	10055d00 	call	10055d0 <alt_tick>
 10049bc:	e0bffc17 	ldw	r2,-16(fp)
 10049c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10049c4:	e0bffe17 	ldw	r2,-8(fp)
 10049c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 10049cc:	0001883a 	nop
 10049d0:	e037883a 	mov	sp,fp
 10049d4:	dfc00117 	ldw	ra,4(sp)
 10049d8:	df000017 	ldw	fp,0(sp)
 10049dc:	dec00204 	addi	sp,sp,8
 10049e0:	f800283a 	ret

010049e4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 10049e4:	defff804 	addi	sp,sp,-32
 10049e8:	dfc00715 	stw	ra,28(sp)
 10049ec:	df000615 	stw	fp,24(sp)
 10049f0:	df000604 	addi	fp,sp,24
 10049f4:	e13ffc15 	stw	r4,-16(fp)
 10049f8:	e17ffd15 	stw	r5,-12(fp)
 10049fc:	e1bffe15 	stw	r6,-8(fp)
 1004a00:	e1ffff15 	stw	r7,-4(fp)
 1004a04:	e0bfff17 	ldw	r2,-4(fp)
 1004a08:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1004a0c:	d0a6bd17 	ldw	r2,-25868(gp)
 1004a10:	1000021e 	bne	r2,zero,1004a1c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 1004a14:	e0bffb17 	ldw	r2,-20(fp)
 1004a18:	d0a6bd15 	stw	r2,-25868(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1004a1c:	e0bffc17 	ldw	r2,-16(fp)
 1004a20:	10800104 	addi	r2,r2,4
 1004a24:	00c001c4 	movi	r3,7
 1004a28:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 1004a2c:	d8000015 	stw	zero,0(sp)
 1004a30:	e1fffc17 	ldw	r7,-16(fp)
 1004a34:	01804034 	movhi	r6,256
 1004a38:	31925b04 	addi	r6,r6,18796
 1004a3c:	e17ffe17 	ldw	r5,-8(fp)
 1004a40:	e13ffd17 	ldw	r4,-12(fp)
 1004a44:	1004f000 	call	1004f00 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 1004a48:	0001883a 	nop
 1004a4c:	e037883a 	mov	sp,fp
 1004a50:	dfc00117 	ldw	ra,4(sp)
 1004a54:	df000017 	ldw	fp,0(sp)
 1004a58:	dec00204 	addi	sp,sp,8
 1004a5c:	f800283a 	ret

01004a60 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1004a60:	defff504 	addi	sp,sp,-44
 1004a64:	df000a15 	stw	fp,40(sp)
 1004a68:	df000a04 	addi	fp,sp,40
 1004a6c:	e13ffc15 	stw	r4,-16(fp)
 1004a70:	e17ffd15 	stw	r5,-12(fp)
 1004a74:	e1bffe15 	stw	r6,-8(fp)
 1004a78:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1004a7c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1004a80:	d0a6bd17 	ldw	r2,-25868(gp)
  
  if (alt_ticks_per_second ())
 1004a84:	10003c26 	beq	r2,zero,1004b78 <alt_alarm_start+0x118>
  {
    if (alarm)
 1004a88:	e0bffc17 	ldw	r2,-16(fp)
 1004a8c:	10003826 	beq	r2,zero,1004b70 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 1004a90:	e0bffc17 	ldw	r2,-16(fp)
 1004a94:	e0fffe17 	ldw	r3,-8(fp)
 1004a98:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 1004a9c:	e0bffc17 	ldw	r2,-16(fp)
 1004aa0:	e0ffff17 	ldw	r3,-4(fp)
 1004aa4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004aa8:	0005303a 	rdctl	r2,status
 1004aac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004ab0:	e0fff917 	ldw	r3,-28(fp)
 1004ab4:	00bfff84 	movi	r2,-2
 1004ab8:	1884703a 	and	r2,r3,r2
 1004abc:	1001703a 	wrctl	status,r2
  
  return context;
 1004ac0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 1004ac4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1004ac8:	d0a6be17 	ldw	r2,-25864(gp)
      
      current_nticks = alt_nticks();
 1004acc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1004ad0:	e0fffd17 	ldw	r3,-12(fp)
 1004ad4:	e0bff617 	ldw	r2,-40(fp)
 1004ad8:	1885883a 	add	r2,r3,r2
 1004adc:	10c00044 	addi	r3,r2,1
 1004ae0:	e0bffc17 	ldw	r2,-16(fp)
 1004ae4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1004ae8:	e0bffc17 	ldw	r2,-16(fp)
 1004aec:	10c00217 	ldw	r3,8(r2)
 1004af0:	e0bff617 	ldw	r2,-40(fp)
 1004af4:	1880042e 	bgeu	r3,r2,1004b08 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 1004af8:	e0bffc17 	ldw	r2,-16(fp)
 1004afc:	00c00044 	movi	r3,1
 1004b00:	10c00405 	stb	r3,16(r2)
 1004b04:	00000206 	br	1004b10 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 1004b08:	e0bffc17 	ldw	r2,-16(fp)
 1004b0c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1004b10:	e0bffc17 	ldw	r2,-16(fp)
 1004b14:	d0e01204 	addi	r3,gp,-32696
 1004b18:	e0fffa15 	stw	r3,-24(fp)
 1004b1c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1004b20:	e0bffb17 	ldw	r2,-20(fp)
 1004b24:	e0fffa17 	ldw	r3,-24(fp)
 1004b28:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1004b2c:	e0bffa17 	ldw	r2,-24(fp)
 1004b30:	10c00017 	ldw	r3,0(r2)
 1004b34:	e0bffb17 	ldw	r2,-20(fp)
 1004b38:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1004b3c:	e0bffa17 	ldw	r2,-24(fp)
 1004b40:	10800017 	ldw	r2,0(r2)
 1004b44:	e0fffb17 	ldw	r3,-20(fp)
 1004b48:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1004b4c:	e0bffa17 	ldw	r2,-24(fp)
 1004b50:	e0fffb17 	ldw	r3,-20(fp)
 1004b54:	10c00015 	stw	r3,0(r2)
 1004b58:	e0bff817 	ldw	r2,-32(fp)
 1004b5c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004b60:	e0bff717 	ldw	r2,-36(fp)
 1004b64:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1004b68:	0005883a 	mov	r2,zero
 1004b6c:	00000306 	br	1004b7c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 1004b70:	00bffa84 	movi	r2,-22
 1004b74:	00000106 	br	1004b7c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 1004b78:	00bfde84 	movi	r2,-134
  }
}
 1004b7c:	e037883a 	mov	sp,fp
 1004b80:	df000017 	ldw	fp,0(sp)
 1004b84:	dec00104 	addi	sp,sp,4
 1004b88:	f800283a 	ret

01004b8c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 1004b8c:	defffa04 	addi	sp,sp,-24
 1004b90:	dfc00515 	stw	ra,20(sp)
 1004b94:	df000415 	stw	fp,16(sp)
 1004b98:	df000404 	addi	fp,sp,16
 1004b9c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 1004ba0:	008000c4 	movi	r2,3
 1004ba4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 1004ba8:	e0fffd17 	ldw	r3,-12(fp)
 1004bac:	008003f4 	movhi	r2,15
 1004bb0:	10909004 	addi	r2,r2,16960
 1004bb4:	1885383a 	mul	r2,r3,r2
 1004bb8:	100b883a 	mov	r5,r2
 1004bbc:	0100bef4 	movhi	r4,763
 1004bc0:	213c2004 	addi	r4,r4,-3968
 1004bc4:	10033f40 	call	10033f4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 1004bc8:	100b883a 	mov	r5,r2
 1004bcc:	01200034 	movhi	r4,32768
 1004bd0:	213fffc4 	addi	r4,r4,-1
 1004bd4:	10033f40 	call	10033f4 <__udivsi3>
 1004bd8:	100b883a 	mov	r5,r2
 1004bdc:	e13fff17 	ldw	r4,-4(fp)
 1004be0:	10033f40 	call	10033f4 <__udivsi3>
 1004be4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1004be8:	e0bffe17 	ldw	r2,-8(fp)
 1004bec:	10002a26 	beq	r2,zero,1004c98 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 1004bf0:	e03ffc15 	stw	zero,-16(fp)
 1004bf4:	00001706 	br	1004c54 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1004bf8:	00a00034 	movhi	r2,32768
 1004bfc:	10bfffc4 	addi	r2,r2,-1
 1004c00:	10bfffc4 	addi	r2,r2,-1
 1004c04:	103ffe1e 	bne	r2,zero,1004c00 <__alt_mem_TCDM+0xfefc3c00>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 1004c08:	e0fffd17 	ldw	r3,-12(fp)
 1004c0c:	008003f4 	movhi	r2,15
 1004c10:	10909004 	addi	r2,r2,16960
 1004c14:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 1004c18:	100b883a 	mov	r5,r2
 1004c1c:	0100bef4 	movhi	r4,763
 1004c20:	213c2004 	addi	r4,r4,-3968
 1004c24:	10033f40 	call	10033f4 <__udivsi3>
 1004c28:	100b883a 	mov	r5,r2
 1004c2c:	01200034 	movhi	r4,32768
 1004c30:	213fffc4 	addi	r4,r4,-1
 1004c34:	10033f40 	call	10033f4 <__udivsi3>
 1004c38:	1007883a 	mov	r3,r2
 1004c3c:	e0bfff17 	ldw	r2,-4(fp)
 1004c40:	10c5c83a 	sub	r2,r2,r3
 1004c44:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 1004c48:	e0bffc17 	ldw	r2,-16(fp)
 1004c4c:	10800044 	addi	r2,r2,1
 1004c50:	e0bffc15 	stw	r2,-16(fp)
 1004c54:	e0fffc17 	ldw	r3,-16(fp)
 1004c58:	e0bffe17 	ldw	r2,-8(fp)
 1004c5c:	18bfe616 	blt	r3,r2,1004bf8 <__alt_mem_TCDM+0xfefc3bf8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1004c60:	e0fffd17 	ldw	r3,-12(fp)
 1004c64:	008003f4 	movhi	r2,15
 1004c68:	10909004 	addi	r2,r2,16960
 1004c6c:	1885383a 	mul	r2,r3,r2
 1004c70:	100b883a 	mov	r5,r2
 1004c74:	0100bef4 	movhi	r4,763
 1004c78:	213c2004 	addi	r4,r4,-3968
 1004c7c:	10033f40 	call	10033f4 <__udivsi3>
 1004c80:	1007883a 	mov	r3,r2
 1004c84:	e0bfff17 	ldw	r2,-4(fp)
 1004c88:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1004c8c:	10bfffc4 	addi	r2,r2,-1
 1004c90:	103ffe1e 	bne	r2,zero,1004c8c <__alt_mem_TCDM+0xfefc3c8c>
 1004c94:	00000d06 	br	1004ccc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1004c98:	e0fffd17 	ldw	r3,-12(fp)
 1004c9c:	008003f4 	movhi	r2,15
 1004ca0:	10909004 	addi	r2,r2,16960
 1004ca4:	1885383a 	mul	r2,r3,r2
 1004ca8:	100b883a 	mov	r5,r2
 1004cac:	0100bef4 	movhi	r4,763
 1004cb0:	213c2004 	addi	r4,r4,-3968
 1004cb4:	10033f40 	call	10033f4 <__udivsi3>
 1004cb8:	1007883a 	mov	r3,r2
 1004cbc:	e0bfff17 	ldw	r2,-4(fp)
 1004cc0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1004cc4:	10bfffc4 	addi	r2,r2,-1
 1004cc8:	00bffe16 	blt	zero,r2,1004cc4 <__alt_mem_TCDM+0xfefc3cc4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 1004ccc:	0005883a 	mov	r2,zero
}
 1004cd0:	e037883a 	mov	sp,fp
 1004cd4:	dfc00117 	ldw	ra,4(sp)
 1004cd8:	df000017 	ldw	fp,0(sp)
 1004cdc:	dec00204 	addi	sp,sp,8
 1004ce0:	f800283a 	ret

01004ce4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1004ce4:	defffe04 	addi	sp,sp,-8
 1004ce8:	df000115 	stw	fp,4(sp)
 1004cec:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1004cf0:	e03fff15 	stw	zero,-4(fp)
 1004cf4:	00000506 	br	1004d0c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1004cf8:	e0bfff17 	ldw	r2,-4(fp)
 1004cfc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1004d00:	e0bfff17 	ldw	r2,-4(fp)
 1004d04:	10800804 	addi	r2,r2,32
 1004d08:	e0bfff15 	stw	r2,-4(fp)
 1004d0c:	e0bfff17 	ldw	r2,-4(fp)
 1004d10:	10820030 	cmpltui	r2,r2,2048
 1004d14:	103ff81e 	bne	r2,zero,1004cf8 <__alt_mem_TCDM+0xfefc3cf8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1004d18:	0001883a 	nop
 1004d1c:	e037883a 	mov	sp,fp
 1004d20:	df000017 	ldw	fp,0(sp)
 1004d24:	dec00104 	addi	sp,sp,4
 1004d28:	f800283a 	ret

01004d2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1004d2c:	defffe04 	addi	sp,sp,-8
 1004d30:	dfc00115 	stw	ra,4(sp)
 1004d34:	df000015 	stw	fp,0(sp)
 1004d38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1004d3c:	d0a00f17 	ldw	r2,-32708(gp)
 1004d40:	10000326 	beq	r2,zero,1004d50 <alt_get_errno+0x24>
 1004d44:	d0a00f17 	ldw	r2,-32708(gp)
 1004d48:	103ee83a 	callr	r2
 1004d4c:	00000106 	br	1004d54 <alt_get_errno+0x28>
 1004d50:	d0a6b804 	addi	r2,gp,-25888
}
 1004d54:	e037883a 	mov	sp,fp
 1004d58:	dfc00117 	ldw	ra,4(sp)
 1004d5c:	df000017 	ldw	fp,0(sp)
 1004d60:	dec00204 	addi	sp,sp,8
 1004d64:	f800283a 	ret

01004d68 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1004d68:	defffa04 	addi	sp,sp,-24
 1004d6c:	dfc00515 	stw	ra,20(sp)
 1004d70:	df000415 	stw	fp,16(sp)
 1004d74:	df000404 	addi	fp,sp,16
 1004d78:	e13ffe15 	stw	r4,-8(fp)
 1004d7c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1004d80:	e0bffe17 	ldw	r2,-8(fp)
 1004d84:	10000326 	beq	r2,zero,1004d94 <alt_dev_llist_insert+0x2c>
 1004d88:	e0bffe17 	ldw	r2,-8(fp)
 1004d8c:	10800217 	ldw	r2,8(r2)
 1004d90:	1000061e 	bne	r2,zero,1004dac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 1004d94:	1004d2c0 	call	1004d2c <alt_get_errno>
 1004d98:	1007883a 	mov	r3,r2
 1004d9c:	00800584 	movi	r2,22
 1004da0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1004da4:	00bffa84 	movi	r2,-22
 1004da8:	00001306 	br	1004df8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1004dac:	e0bffe17 	ldw	r2,-8(fp)
 1004db0:	e0ffff17 	ldw	r3,-4(fp)
 1004db4:	e0fffc15 	stw	r3,-16(fp)
 1004db8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1004dbc:	e0bffd17 	ldw	r2,-12(fp)
 1004dc0:	e0fffc17 	ldw	r3,-16(fp)
 1004dc4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1004dc8:	e0bffc17 	ldw	r2,-16(fp)
 1004dcc:	10c00017 	ldw	r3,0(r2)
 1004dd0:	e0bffd17 	ldw	r2,-12(fp)
 1004dd4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1004dd8:	e0bffc17 	ldw	r2,-16(fp)
 1004ddc:	10800017 	ldw	r2,0(r2)
 1004de0:	e0fffd17 	ldw	r3,-12(fp)
 1004de4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1004de8:	e0bffc17 	ldw	r2,-16(fp)
 1004dec:	e0fffd17 	ldw	r3,-12(fp)
 1004df0:	10c00015 	stw	r3,0(r2)

  return 0;  
 1004df4:	0005883a 	mov	r2,zero
}
 1004df8:	e037883a 	mov	sp,fp
 1004dfc:	dfc00117 	ldw	ra,4(sp)
 1004e00:	df000017 	ldw	fp,0(sp)
 1004e04:	dec00204 	addi	sp,sp,8
 1004e08:	f800283a 	ret

01004e0c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1004e0c:	defffd04 	addi	sp,sp,-12
 1004e10:	dfc00215 	stw	ra,8(sp)
 1004e14:	df000115 	stw	fp,4(sp)
 1004e18:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1004e1c:	00804034 	movhi	r2,256
 1004e20:	10977d04 	addi	r2,r2,24052
 1004e24:	e0bfff15 	stw	r2,-4(fp)
 1004e28:	00000606 	br	1004e44 <_do_ctors+0x38>
        (*ctor) (); 
 1004e2c:	e0bfff17 	ldw	r2,-4(fp)
 1004e30:	10800017 	ldw	r2,0(r2)
 1004e34:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1004e38:	e0bfff17 	ldw	r2,-4(fp)
 1004e3c:	10bfff04 	addi	r2,r2,-4
 1004e40:	e0bfff15 	stw	r2,-4(fp)
 1004e44:	e0ffff17 	ldw	r3,-4(fp)
 1004e48:	00804034 	movhi	r2,256
 1004e4c:	10977e04 	addi	r2,r2,24056
 1004e50:	18bff62e 	bgeu	r3,r2,1004e2c <__alt_mem_TCDM+0xfefc3e2c>
        (*ctor) (); 
}
 1004e54:	0001883a 	nop
 1004e58:	e037883a 	mov	sp,fp
 1004e5c:	dfc00117 	ldw	ra,4(sp)
 1004e60:	df000017 	ldw	fp,0(sp)
 1004e64:	dec00204 	addi	sp,sp,8
 1004e68:	f800283a 	ret

01004e6c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1004e6c:	defffd04 	addi	sp,sp,-12
 1004e70:	dfc00215 	stw	ra,8(sp)
 1004e74:	df000115 	stw	fp,4(sp)
 1004e78:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1004e7c:	00804034 	movhi	r2,256
 1004e80:	10977d04 	addi	r2,r2,24052
 1004e84:	e0bfff15 	stw	r2,-4(fp)
 1004e88:	00000606 	br	1004ea4 <_do_dtors+0x38>
        (*dtor) (); 
 1004e8c:	e0bfff17 	ldw	r2,-4(fp)
 1004e90:	10800017 	ldw	r2,0(r2)
 1004e94:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1004e98:	e0bfff17 	ldw	r2,-4(fp)
 1004e9c:	10bfff04 	addi	r2,r2,-4
 1004ea0:	e0bfff15 	stw	r2,-4(fp)
 1004ea4:	e0ffff17 	ldw	r3,-4(fp)
 1004ea8:	00804034 	movhi	r2,256
 1004eac:	10977e04 	addi	r2,r2,24056
 1004eb0:	18bff62e 	bgeu	r3,r2,1004e8c <__alt_mem_TCDM+0xfefc3e8c>
        (*dtor) (); 
}
 1004eb4:	0001883a 	nop
 1004eb8:	e037883a 	mov	sp,fp
 1004ebc:	dfc00117 	ldw	ra,4(sp)
 1004ec0:	df000017 	ldw	fp,0(sp)
 1004ec4:	dec00204 	addi	sp,sp,8
 1004ec8:	f800283a 	ret

01004ecc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1004ecc:	defffe04 	addi	sp,sp,-8
 1004ed0:	dfc00115 	stw	ra,4(sp)
 1004ed4:	df000015 	stw	fp,0(sp)
 1004ed8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1004edc:	01440004 	movi	r5,4096
 1004ee0:	0009883a 	mov	r4,zero
 1004ee4:	10059380 	call	1005938 <alt_icache_flush>
#endif
}
 1004ee8:	0001883a 	nop
 1004eec:	e037883a 	mov	sp,fp
 1004ef0:	dfc00117 	ldw	ra,4(sp)
 1004ef4:	df000017 	ldw	fp,0(sp)
 1004ef8:	dec00204 	addi	sp,sp,8
 1004efc:	f800283a 	ret

01004f00 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1004f00:	defff904 	addi	sp,sp,-28
 1004f04:	dfc00615 	stw	ra,24(sp)
 1004f08:	df000515 	stw	fp,20(sp)
 1004f0c:	df000504 	addi	fp,sp,20
 1004f10:	e13ffc15 	stw	r4,-16(fp)
 1004f14:	e17ffd15 	stw	r5,-12(fp)
 1004f18:	e1bffe15 	stw	r6,-8(fp)
 1004f1c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1004f20:	e0800217 	ldw	r2,8(fp)
 1004f24:	d8800015 	stw	r2,0(sp)
 1004f28:	e1ffff17 	ldw	r7,-4(fp)
 1004f2c:	e1bffe17 	ldw	r6,-8(fp)
 1004f30:	e17ffd17 	ldw	r5,-12(fp)
 1004f34:	e13ffc17 	ldw	r4,-16(fp)
 1004f38:	10050b00 	call	10050b0 <alt_iic_isr_register>
}  
 1004f3c:	e037883a 	mov	sp,fp
 1004f40:	dfc00117 	ldw	ra,4(sp)
 1004f44:	df000017 	ldw	fp,0(sp)
 1004f48:	dec00204 	addi	sp,sp,8
 1004f4c:	f800283a 	ret

01004f50 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1004f50:	defff904 	addi	sp,sp,-28
 1004f54:	df000615 	stw	fp,24(sp)
 1004f58:	df000604 	addi	fp,sp,24
 1004f5c:	e13ffe15 	stw	r4,-8(fp)
 1004f60:	e17fff15 	stw	r5,-4(fp)
 1004f64:	e0bfff17 	ldw	r2,-4(fp)
 1004f68:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004f6c:	0005303a 	rdctl	r2,status
 1004f70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004f74:	e0fffb17 	ldw	r3,-20(fp)
 1004f78:	00bfff84 	movi	r2,-2
 1004f7c:	1884703a 	and	r2,r3,r2
 1004f80:	1001703a 	wrctl	status,r2
  
  return context;
 1004f84:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1004f88:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 1004f8c:	00c00044 	movi	r3,1
 1004f90:	e0bffa17 	ldw	r2,-24(fp)
 1004f94:	1884983a 	sll	r2,r3,r2
 1004f98:	1007883a 	mov	r3,r2
 1004f9c:	d0a6bc17 	ldw	r2,-25872(gp)
 1004fa0:	1884b03a 	or	r2,r3,r2
 1004fa4:	d0a6bc15 	stw	r2,-25872(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1004fa8:	d0a6bc17 	ldw	r2,-25872(gp)
 1004fac:	100170fa 	wrctl	ienable,r2
 1004fb0:	e0bffc17 	ldw	r2,-16(fp)
 1004fb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004fb8:	e0bffd17 	ldw	r2,-12(fp)
 1004fbc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1004fc0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 1004fc4:	0001883a 	nop
}
 1004fc8:	e037883a 	mov	sp,fp
 1004fcc:	df000017 	ldw	fp,0(sp)
 1004fd0:	dec00104 	addi	sp,sp,4
 1004fd4:	f800283a 	ret

01004fd8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1004fd8:	defff904 	addi	sp,sp,-28
 1004fdc:	df000615 	stw	fp,24(sp)
 1004fe0:	df000604 	addi	fp,sp,24
 1004fe4:	e13ffe15 	stw	r4,-8(fp)
 1004fe8:	e17fff15 	stw	r5,-4(fp)
 1004fec:	e0bfff17 	ldw	r2,-4(fp)
 1004ff0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004ff4:	0005303a 	rdctl	r2,status
 1004ff8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004ffc:	e0fffb17 	ldw	r3,-20(fp)
 1005000:	00bfff84 	movi	r2,-2
 1005004:	1884703a 	and	r2,r3,r2
 1005008:	1001703a 	wrctl	status,r2
  
  return context;
 100500c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1005010:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 1005014:	00c00044 	movi	r3,1
 1005018:	e0bffa17 	ldw	r2,-24(fp)
 100501c:	1884983a 	sll	r2,r3,r2
 1005020:	0084303a 	nor	r2,zero,r2
 1005024:	1007883a 	mov	r3,r2
 1005028:	d0a6bc17 	ldw	r2,-25872(gp)
 100502c:	1884703a 	and	r2,r3,r2
 1005030:	d0a6bc15 	stw	r2,-25872(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1005034:	d0a6bc17 	ldw	r2,-25872(gp)
 1005038:	100170fa 	wrctl	ienable,r2
 100503c:	e0bffc17 	ldw	r2,-16(fp)
 1005040:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005044:	e0bffd17 	ldw	r2,-12(fp)
 1005048:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100504c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 1005050:	0001883a 	nop
}
 1005054:	e037883a 	mov	sp,fp
 1005058:	df000017 	ldw	fp,0(sp)
 100505c:	dec00104 	addi	sp,sp,4
 1005060:	f800283a 	ret

01005064 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1005064:	defffc04 	addi	sp,sp,-16
 1005068:	df000315 	stw	fp,12(sp)
 100506c:	df000304 	addi	fp,sp,12
 1005070:	e13ffe15 	stw	r4,-8(fp)
 1005074:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1005078:	000530fa 	rdctl	r2,ienable
 100507c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1005080:	00c00044 	movi	r3,1
 1005084:	e0bfff17 	ldw	r2,-4(fp)
 1005088:	1884983a 	sll	r2,r3,r2
 100508c:	1007883a 	mov	r3,r2
 1005090:	e0bffd17 	ldw	r2,-12(fp)
 1005094:	1884703a 	and	r2,r3,r2
 1005098:	1004c03a 	cmpne	r2,r2,zero
 100509c:	10803fcc 	andi	r2,r2,255
}
 10050a0:	e037883a 	mov	sp,fp
 10050a4:	df000017 	ldw	fp,0(sp)
 10050a8:	dec00104 	addi	sp,sp,4
 10050ac:	f800283a 	ret

010050b0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 10050b0:	defff504 	addi	sp,sp,-44
 10050b4:	dfc00a15 	stw	ra,40(sp)
 10050b8:	df000915 	stw	fp,36(sp)
 10050bc:	df000904 	addi	fp,sp,36
 10050c0:	e13ffc15 	stw	r4,-16(fp)
 10050c4:	e17ffd15 	stw	r5,-12(fp)
 10050c8:	e1bffe15 	stw	r6,-8(fp)
 10050cc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 10050d0:	00bffa84 	movi	r2,-22
 10050d4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 10050d8:	e0bffd17 	ldw	r2,-12(fp)
 10050dc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 10050e0:	e0bff817 	ldw	r2,-32(fp)
 10050e4:	10800808 	cmpgei	r2,r2,32
 10050e8:	1000271e 	bne	r2,zero,1005188 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10050ec:	0005303a 	rdctl	r2,status
 10050f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10050f4:	e0fffb17 	ldw	r3,-20(fp)
 10050f8:	00bfff84 	movi	r2,-2
 10050fc:	1884703a 	and	r2,r3,r2
 1005100:	1001703a 	wrctl	status,r2
  
  return context;
 1005104:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1005108:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 100510c:	00804074 	movhi	r2,257
 1005110:	10a4e704 	addi	r2,r2,-27748
 1005114:	e0fff817 	ldw	r3,-32(fp)
 1005118:	180690fa 	slli	r3,r3,3
 100511c:	10c5883a 	add	r2,r2,r3
 1005120:	e0fffe17 	ldw	r3,-8(fp)
 1005124:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 1005128:	00804074 	movhi	r2,257
 100512c:	10a4e704 	addi	r2,r2,-27748
 1005130:	e0fff817 	ldw	r3,-32(fp)
 1005134:	180690fa 	slli	r3,r3,3
 1005138:	10c5883a 	add	r2,r2,r3
 100513c:	10800104 	addi	r2,r2,4
 1005140:	e0ffff17 	ldw	r3,-4(fp)
 1005144:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1005148:	e0bffe17 	ldw	r2,-8(fp)
 100514c:	10000526 	beq	r2,zero,1005164 <alt_iic_isr_register+0xb4>
 1005150:	e0bff817 	ldw	r2,-32(fp)
 1005154:	100b883a 	mov	r5,r2
 1005158:	e13ffc17 	ldw	r4,-16(fp)
 100515c:	1004f500 	call	1004f50 <alt_ic_irq_enable>
 1005160:	00000406 	br	1005174 <alt_iic_isr_register+0xc4>
 1005164:	e0bff817 	ldw	r2,-32(fp)
 1005168:	100b883a 	mov	r5,r2
 100516c:	e13ffc17 	ldw	r4,-16(fp)
 1005170:	1004fd80 	call	1004fd8 <alt_ic_irq_disable>
 1005174:	e0bff715 	stw	r2,-36(fp)
 1005178:	e0bffa17 	ldw	r2,-24(fp)
 100517c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005180:	e0bff917 	ldw	r2,-28(fp)
 1005184:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1005188:	e0bff717 	ldw	r2,-36(fp)
}
 100518c:	e037883a 	mov	sp,fp
 1005190:	dfc00117 	ldw	ra,4(sp)
 1005194:	df000017 	ldw	fp,0(sp)
 1005198:	dec00204 	addi	sp,sp,8
 100519c:	f800283a 	ret

010051a0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 10051a0:	defff904 	addi	sp,sp,-28
 10051a4:	dfc00615 	stw	ra,24(sp)
 10051a8:	df000515 	stw	fp,20(sp)
 10051ac:	df000504 	addi	fp,sp,20
 10051b0:	e13ffc15 	stw	r4,-16(fp)
 10051b4:	e17ffd15 	stw	r5,-12(fp)
 10051b8:	e1bffe15 	stw	r6,-8(fp)
 10051bc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 10051c0:	e1bfff17 	ldw	r6,-4(fp)
 10051c4:	e17ffe17 	ldw	r5,-8(fp)
 10051c8:	e13ffd17 	ldw	r4,-12(fp)
 10051cc:	10053e00 	call	10053e0 <open>
 10051d0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 10051d4:	e0bffb17 	ldw	r2,-20(fp)
 10051d8:	10001c16 	blt	r2,zero,100524c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 10051dc:	00804034 	movhi	r2,256
 10051e0:	1099a504 	addi	r2,r2,26260
 10051e4:	e0fffb17 	ldw	r3,-20(fp)
 10051e8:	18c00324 	muli	r3,r3,12
 10051ec:	10c5883a 	add	r2,r2,r3
 10051f0:	10c00017 	ldw	r3,0(r2)
 10051f4:	e0bffc17 	ldw	r2,-16(fp)
 10051f8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 10051fc:	00804034 	movhi	r2,256
 1005200:	1099a504 	addi	r2,r2,26260
 1005204:	e0fffb17 	ldw	r3,-20(fp)
 1005208:	18c00324 	muli	r3,r3,12
 100520c:	10c5883a 	add	r2,r2,r3
 1005210:	10800104 	addi	r2,r2,4
 1005214:	10c00017 	ldw	r3,0(r2)
 1005218:	e0bffc17 	ldw	r2,-16(fp)
 100521c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1005220:	00804034 	movhi	r2,256
 1005224:	1099a504 	addi	r2,r2,26260
 1005228:	e0fffb17 	ldw	r3,-20(fp)
 100522c:	18c00324 	muli	r3,r3,12
 1005230:	10c5883a 	add	r2,r2,r3
 1005234:	10800204 	addi	r2,r2,8
 1005238:	10c00017 	ldw	r3,0(r2)
 100523c:	e0bffc17 	ldw	r2,-16(fp)
 1005240:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1005244:	e13ffb17 	ldw	r4,-20(fp)
 1005248:	1003bac0 	call	1003bac <alt_release_fd>
  }
} 
 100524c:	0001883a 	nop
 1005250:	e037883a 	mov	sp,fp
 1005254:	dfc00117 	ldw	ra,4(sp)
 1005258:	df000017 	ldw	fp,0(sp)
 100525c:	dec00204 	addi	sp,sp,8
 1005260:	f800283a 	ret

01005264 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1005264:	defffb04 	addi	sp,sp,-20
 1005268:	dfc00415 	stw	ra,16(sp)
 100526c:	df000315 	stw	fp,12(sp)
 1005270:	df000304 	addi	fp,sp,12
 1005274:	e13ffd15 	stw	r4,-12(fp)
 1005278:	e17ffe15 	stw	r5,-8(fp)
 100527c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1005280:	01c07fc4 	movi	r7,511
 1005284:	01800044 	movi	r6,1
 1005288:	e17ffd17 	ldw	r5,-12(fp)
 100528c:	01004034 	movhi	r4,256
 1005290:	2119a804 	addi	r4,r4,26272
 1005294:	10051a00 	call	10051a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1005298:	01c07fc4 	movi	r7,511
 100529c:	000d883a 	mov	r6,zero
 10052a0:	e17ffe17 	ldw	r5,-8(fp)
 10052a4:	01004034 	movhi	r4,256
 10052a8:	2119a504 	addi	r4,r4,26260
 10052ac:	10051a00 	call	10051a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 10052b0:	01c07fc4 	movi	r7,511
 10052b4:	01800044 	movi	r6,1
 10052b8:	e17fff17 	ldw	r5,-4(fp)
 10052bc:	01004034 	movhi	r4,256
 10052c0:	2119ab04 	addi	r4,r4,26284
 10052c4:	10051a00 	call	10051a0 <alt_open_fd>
}  
 10052c8:	0001883a 	nop
 10052cc:	e037883a 	mov	sp,fp
 10052d0:	dfc00117 	ldw	ra,4(sp)
 10052d4:	df000017 	ldw	fp,0(sp)
 10052d8:	dec00204 	addi	sp,sp,8
 10052dc:	f800283a 	ret

010052e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10052e0:	defffe04 	addi	sp,sp,-8
 10052e4:	dfc00115 	stw	ra,4(sp)
 10052e8:	df000015 	stw	fp,0(sp)
 10052ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10052f0:	d0a00f17 	ldw	r2,-32708(gp)
 10052f4:	10000326 	beq	r2,zero,1005304 <alt_get_errno+0x24>
 10052f8:	d0a00f17 	ldw	r2,-32708(gp)
 10052fc:	103ee83a 	callr	r2
 1005300:	00000106 	br	1005308 <alt_get_errno+0x28>
 1005304:	d0a6b804 	addi	r2,gp,-25888
}
 1005308:	e037883a 	mov	sp,fp
 100530c:	dfc00117 	ldw	ra,4(sp)
 1005310:	df000017 	ldw	fp,0(sp)
 1005314:	dec00204 	addi	sp,sp,8
 1005318:	f800283a 	ret

0100531c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100531c:	defffd04 	addi	sp,sp,-12
 1005320:	df000215 	stw	fp,8(sp)
 1005324:	df000204 	addi	fp,sp,8
 1005328:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100532c:	e0bfff17 	ldw	r2,-4(fp)
 1005330:	10800217 	ldw	r2,8(r2)
 1005334:	10d00034 	orhi	r3,r2,16384
 1005338:	e0bfff17 	ldw	r2,-4(fp)
 100533c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1005340:	e03ffe15 	stw	zero,-8(fp)
 1005344:	00001d06 	br	10053bc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1005348:	00804034 	movhi	r2,256
 100534c:	1099a504 	addi	r2,r2,26260
 1005350:	e0fffe17 	ldw	r3,-8(fp)
 1005354:	18c00324 	muli	r3,r3,12
 1005358:	10c5883a 	add	r2,r2,r3
 100535c:	10c00017 	ldw	r3,0(r2)
 1005360:	e0bfff17 	ldw	r2,-4(fp)
 1005364:	10800017 	ldw	r2,0(r2)
 1005368:	1880111e 	bne	r3,r2,10053b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 100536c:	00804034 	movhi	r2,256
 1005370:	1099a504 	addi	r2,r2,26260
 1005374:	e0fffe17 	ldw	r3,-8(fp)
 1005378:	18c00324 	muli	r3,r3,12
 100537c:	10c5883a 	add	r2,r2,r3
 1005380:	10800204 	addi	r2,r2,8
 1005384:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1005388:	1000090e 	bge	r2,zero,10053b0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 100538c:	e0bffe17 	ldw	r2,-8(fp)
 1005390:	10c00324 	muli	r3,r2,12
 1005394:	00804034 	movhi	r2,256
 1005398:	1099a504 	addi	r2,r2,26260
 100539c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 10053a0:	e0bfff17 	ldw	r2,-4(fp)
 10053a4:	18800226 	beq	r3,r2,10053b0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 10053a8:	00bffcc4 	movi	r2,-13
 10053ac:	00000806 	br	10053d0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10053b0:	e0bffe17 	ldw	r2,-8(fp)
 10053b4:	10800044 	addi	r2,r2,1
 10053b8:	e0bffe15 	stw	r2,-8(fp)
 10053bc:	d0a00e17 	ldw	r2,-32712(gp)
 10053c0:	1007883a 	mov	r3,r2
 10053c4:	e0bffe17 	ldw	r2,-8(fp)
 10053c8:	18bfdf2e 	bgeu	r3,r2,1005348 <__alt_mem_TCDM+0xfefc4348>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 10053cc:	0005883a 	mov	r2,zero
}
 10053d0:	e037883a 	mov	sp,fp
 10053d4:	df000017 	ldw	fp,0(sp)
 10053d8:	dec00104 	addi	sp,sp,4
 10053dc:	f800283a 	ret

010053e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 10053e0:	defff604 	addi	sp,sp,-40
 10053e4:	dfc00915 	stw	ra,36(sp)
 10053e8:	df000815 	stw	fp,32(sp)
 10053ec:	df000804 	addi	fp,sp,32
 10053f0:	e13ffd15 	stw	r4,-12(fp)
 10053f4:	e17ffe15 	stw	r5,-8(fp)
 10053f8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 10053fc:	00bfffc4 	movi	r2,-1
 1005400:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 1005404:	00bffb44 	movi	r2,-19
 1005408:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 100540c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1005410:	d1600c04 	addi	r5,gp,-32720
 1005414:	e13ffd17 	ldw	r4,-12(fp)
 1005418:	10056fc0 	call	10056fc <alt_find_dev>
 100541c:	e0bff815 	stw	r2,-32(fp)
 1005420:	e0bff817 	ldw	r2,-32(fp)
 1005424:	1000051e 	bne	r2,zero,100543c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1005428:	e13ffd17 	ldw	r4,-12(fp)
 100542c:	100578c0 	call	100578c <alt_find_file>
 1005430:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 1005434:	00800044 	movi	r2,1
 1005438:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100543c:	e0bff817 	ldw	r2,-32(fp)
 1005440:	10002926 	beq	r2,zero,10054e8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1005444:	e13ff817 	ldw	r4,-32(fp)
 1005448:	10058940 	call	1005894 <alt_get_fd>
 100544c:	e0bff915 	stw	r2,-28(fp)
 1005450:	e0bff917 	ldw	r2,-28(fp)
 1005454:	1000030e 	bge	r2,zero,1005464 <open+0x84>
    {
      status = index;
 1005458:	e0bff917 	ldw	r2,-28(fp)
 100545c:	e0bffa15 	stw	r2,-24(fp)
 1005460:	00002306 	br	10054f0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 1005464:	e0bff917 	ldw	r2,-28(fp)
 1005468:	10c00324 	muli	r3,r2,12
 100546c:	00804034 	movhi	r2,256
 1005470:	1099a504 	addi	r2,r2,26260
 1005474:	1885883a 	add	r2,r3,r2
 1005478:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100547c:	e0fffe17 	ldw	r3,-8(fp)
 1005480:	00900034 	movhi	r2,16384
 1005484:	10bfffc4 	addi	r2,r2,-1
 1005488:	1886703a 	and	r3,r3,r2
 100548c:	e0bffc17 	ldw	r2,-16(fp)
 1005490:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1005494:	e0bffb17 	ldw	r2,-20(fp)
 1005498:	1000051e 	bne	r2,zero,10054b0 <open+0xd0>
 100549c:	e13ffc17 	ldw	r4,-16(fp)
 10054a0:	100531c0 	call	100531c <alt_file_locked>
 10054a4:	e0bffa15 	stw	r2,-24(fp)
 10054a8:	e0bffa17 	ldw	r2,-24(fp)
 10054ac:	10001016 	blt	r2,zero,10054f0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 10054b0:	e0bff817 	ldw	r2,-32(fp)
 10054b4:	10800317 	ldw	r2,12(r2)
 10054b8:	10000826 	beq	r2,zero,10054dc <open+0xfc>
 10054bc:	e0bff817 	ldw	r2,-32(fp)
 10054c0:	10800317 	ldw	r2,12(r2)
 10054c4:	e1ffff17 	ldw	r7,-4(fp)
 10054c8:	e1bffe17 	ldw	r6,-8(fp)
 10054cc:	e17ffd17 	ldw	r5,-12(fp)
 10054d0:	e13ffc17 	ldw	r4,-16(fp)
 10054d4:	103ee83a 	callr	r2
 10054d8:	00000106 	br	10054e0 <open+0x100>
 10054dc:	0005883a 	mov	r2,zero
 10054e0:	e0bffa15 	stw	r2,-24(fp)
 10054e4:	00000206 	br	10054f0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 10054e8:	00bffb44 	movi	r2,-19
 10054ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 10054f0:	e0bffa17 	ldw	r2,-24(fp)
 10054f4:	1000090e 	bge	r2,zero,100551c <open+0x13c>
  {
    alt_release_fd (index);  
 10054f8:	e13ff917 	ldw	r4,-28(fp)
 10054fc:	1003bac0 	call	1003bac <alt_release_fd>
    ALT_ERRNO = -status;
 1005500:	10052e00 	call	10052e0 <alt_get_errno>
 1005504:	1007883a 	mov	r3,r2
 1005508:	e0bffa17 	ldw	r2,-24(fp)
 100550c:	0085c83a 	sub	r2,zero,r2
 1005510:	18800015 	stw	r2,0(r3)
    return -1;
 1005514:	00bfffc4 	movi	r2,-1
 1005518:	00000106 	br	1005520 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 100551c:	e0bff917 	ldw	r2,-28(fp)
}
 1005520:	e037883a 	mov	sp,fp
 1005524:	dfc00117 	ldw	ra,4(sp)
 1005528:	df000017 	ldw	fp,0(sp)
 100552c:	dec00204 	addi	sp,sp,8
 1005530:	f800283a 	ret

01005534 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1005534:	defffa04 	addi	sp,sp,-24
 1005538:	df000515 	stw	fp,20(sp)
 100553c:	df000504 	addi	fp,sp,20
 1005540:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1005544:	0005303a 	rdctl	r2,status
 1005548:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100554c:	e0fffc17 	ldw	r3,-16(fp)
 1005550:	00bfff84 	movi	r2,-2
 1005554:	1884703a 	and	r2,r3,r2
 1005558:	1001703a 	wrctl	status,r2
  
  return context;
 100555c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1005560:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 1005564:	e0bfff17 	ldw	r2,-4(fp)
 1005568:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100556c:	e0bffd17 	ldw	r2,-12(fp)
 1005570:	10800017 	ldw	r2,0(r2)
 1005574:	e0fffd17 	ldw	r3,-12(fp)
 1005578:	18c00117 	ldw	r3,4(r3)
 100557c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 1005580:	e0bffd17 	ldw	r2,-12(fp)
 1005584:	10800117 	ldw	r2,4(r2)
 1005588:	e0fffd17 	ldw	r3,-12(fp)
 100558c:	18c00017 	ldw	r3,0(r3)
 1005590:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1005594:	e0bffd17 	ldw	r2,-12(fp)
 1005598:	e0fffd17 	ldw	r3,-12(fp)
 100559c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 10055a0:	e0bffd17 	ldw	r2,-12(fp)
 10055a4:	e0fffd17 	ldw	r3,-12(fp)
 10055a8:	10c00015 	stw	r3,0(r2)
 10055ac:	e0bffb17 	ldw	r2,-20(fp)
 10055b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10055b4:	e0bffe17 	ldw	r2,-8(fp)
 10055b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 10055bc:	0001883a 	nop
 10055c0:	e037883a 	mov	sp,fp
 10055c4:	df000017 	ldw	fp,0(sp)
 10055c8:	dec00104 	addi	sp,sp,4
 10055cc:	f800283a 	ret

010055d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 10055d0:	defffb04 	addi	sp,sp,-20
 10055d4:	dfc00415 	stw	ra,16(sp)
 10055d8:	df000315 	stw	fp,12(sp)
 10055dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 10055e0:	d0a01217 	ldw	r2,-32696(gp)
 10055e4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 10055e8:	d0a6be17 	ldw	r2,-25864(gp)
 10055ec:	10800044 	addi	r2,r2,1
 10055f0:	d0a6be15 	stw	r2,-25864(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10055f4:	00002e06 	br	10056b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 10055f8:	e0bffd17 	ldw	r2,-12(fp)
 10055fc:	10800017 	ldw	r2,0(r2)
 1005600:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1005604:	e0bffd17 	ldw	r2,-12(fp)
 1005608:	10800403 	ldbu	r2,16(r2)
 100560c:	10803fcc 	andi	r2,r2,255
 1005610:	10000426 	beq	r2,zero,1005624 <alt_tick+0x54>
 1005614:	d0a6be17 	ldw	r2,-25864(gp)
 1005618:	1000021e 	bne	r2,zero,1005624 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 100561c:	e0bffd17 	ldw	r2,-12(fp)
 1005620:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1005624:	e0bffd17 	ldw	r2,-12(fp)
 1005628:	10800217 	ldw	r2,8(r2)
 100562c:	d0e6be17 	ldw	r3,-25864(gp)
 1005630:	18801d36 	bltu	r3,r2,10056a8 <alt_tick+0xd8>
 1005634:	e0bffd17 	ldw	r2,-12(fp)
 1005638:	10800403 	ldbu	r2,16(r2)
 100563c:	10803fcc 	andi	r2,r2,255
 1005640:	1000191e 	bne	r2,zero,10056a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 1005644:	e0bffd17 	ldw	r2,-12(fp)
 1005648:	10800317 	ldw	r2,12(r2)
 100564c:	e0fffd17 	ldw	r3,-12(fp)
 1005650:	18c00517 	ldw	r3,20(r3)
 1005654:	1809883a 	mov	r4,r3
 1005658:	103ee83a 	callr	r2
 100565c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1005660:	e0bfff17 	ldw	r2,-4(fp)
 1005664:	1000031e 	bne	r2,zero,1005674 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 1005668:	e13ffd17 	ldw	r4,-12(fp)
 100566c:	10055340 	call	1005534 <alt_alarm_stop>
 1005670:	00000d06 	br	10056a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 1005674:	e0bffd17 	ldw	r2,-12(fp)
 1005678:	10c00217 	ldw	r3,8(r2)
 100567c:	e0bfff17 	ldw	r2,-4(fp)
 1005680:	1887883a 	add	r3,r3,r2
 1005684:	e0bffd17 	ldw	r2,-12(fp)
 1005688:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100568c:	e0bffd17 	ldw	r2,-12(fp)
 1005690:	10c00217 	ldw	r3,8(r2)
 1005694:	d0a6be17 	ldw	r2,-25864(gp)
 1005698:	1880032e 	bgeu	r3,r2,10056a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 100569c:	e0bffd17 	ldw	r2,-12(fp)
 10056a0:	00c00044 	movi	r3,1
 10056a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 10056a8:	e0bffe17 	ldw	r2,-8(fp)
 10056ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10056b0:	e0fffd17 	ldw	r3,-12(fp)
 10056b4:	d0a01204 	addi	r2,gp,-32696
 10056b8:	18bfcf1e 	bne	r3,r2,10055f8 <__alt_mem_TCDM+0xfefc45f8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 10056bc:	0001883a 	nop
}
 10056c0:	0001883a 	nop
 10056c4:	e037883a 	mov	sp,fp
 10056c8:	dfc00117 	ldw	ra,4(sp)
 10056cc:	df000017 	ldw	fp,0(sp)
 10056d0:	dec00204 	addi	sp,sp,8
 10056d4:	f800283a 	ret

010056d8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 10056d8:	deffff04 	addi	sp,sp,-4
 10056dc:	df000015 	stw	fp,0(sp)
 10056e0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 10056e4:	000170fa 	wrctl	ienable,zero
}
 10056e8:	0001883a 	nop
 10056ec:	e037883a 	mov	sp,fp
 10056f0:	df000017 	ldw	fp,0(sp)
 10056f4:	dec00104 	addi	sp,sp,4
 10056f8:	f800283a 	ret

010056fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 10056fc:	defffa04 	addi	sp,sp,-24
 1005700:	dfc00515 	stw	ra,20(sp)
 1005704:	df000415 	stw	fp,16(sp)
 1005708:	df000404 	addi	fp,sp,16
 100570c:	e13ffe15 	stw	r4,-8(fp)
 1005710:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1005714:	e0bfff17 	ldw	r2,-4(fp)
 1005718:	10800017 	ldw	r2,0(r2)
 100571c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1005720:	e13ffe17 	ldw	r4,-8(fp)
 1005724:	10007bc0 	call	10007bc <strlen>
 1005728:	10800044 	addi	r2,r2,1
 100572c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1005730:	00000d06 	br	1005768 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1005734:	e0bffc17 	ldw	r2,-16(fp)
 1005738:	10800217 	ldw	r2,8(r2)
 100573c:	e0fffd17 	ldw	r3,-12(fp)
 1005740:	180d883a 	mov	r6,r3
 1005744:	e17ffe17 	ldw	r5,-8(fp)
 1005748:	1009883a 	mov	r4,r2
 100574c:	1005ab00 	call	1005ab0 <memcmp>
 1005750:	1000021e 	bne	r2,zero,100575c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1005754:	e0bffc17 	ldw	r2,-16(fp)
 1005758:	00000706 	br	1005778 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 100575c:	e0bffc17 	ldw	r2,-16(fp)
 1005760:	10800017 	ldw	r2,0(r2)
 1005764:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1005768:	e0fffc17 	ldw	r3,-16(fp)
 100576c:	e0bfff17 	ldw	r2,-4(fp)
 1005770:	18bff01e 	bne	r3,r2,1005734 <__alt_mem_TCDM+0xfefc4734>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1005774:	0005883a 	mov	r2,zero
}
 1005778:	e037883a 	mov	sp,fp
 100577c:	dfc00117 	ldw	ra,4(sp)
 1005780:	df000017 	ldw	fp,0(sp)
 1005784:	dec00204 	addi	sp,sp,8
 1005788:	f800283a 	ret

0100578c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100578c:	defffb04 	addi	sp,sp,-20
 1005790:	dfc00415 	stw	ra,16(sp)
 1005794:	df000315 	stw	fp,12(sp)
 1005798:	df000304 	addi	fp,sp,12
 100579c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 10057a0:	d0a00a17 	ldw	r2,-32728(gp)
 10057a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10057a8:	00003106 	br	1005870 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 10057ac:	e0bffd17 	ldw	r2,-12(fp)
 10057b0:	10800217 	ldw	r2,8(r2)
 10057b4:	1009883a 	mov	r4,r2
 10057b8:	10007bc0 	call	10007bc <strlen>
 10057bc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 10057c0:	e0bffd17 	ldw	r2,-12(fp)
 10057c4:	10c00217 	ldw	r3,8(r2)
 10057c8:	e0bffe17 	ldw	r2,-8(fp)
 10057cc:	10bfffc4 	addi	r2,r2,-1
 10057d0:	1885883a 	add	r2,r3,r2
 10057d4:	10800003 	ldbu	r2,0(r2)
 10057d8:	10803fcc 	andi	r2,r2,255
 10057dc:	1080201c 	xori	r2,r2,128
 10057e0:	10bfe004 	addi	r2,r2,-128
 10057e4:	10800bd8 	cmpnei	r2,r2,47
 10057e8:	1000031e 	bne	r2,zero,10057f8 <alt_find_file+0x6c>
    {
      len -= 1;
 10057ec:	e0bffe17 	ldw	r2,-8(fp)
 10057f0:	10bfffc4 	addi	r2,r2,-1
 10057f4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10057f8:	e0bffe17 	ldw	r2,-8(fp)
 10057fc:	e0ffff17 	ldw	r3,-4(fp)
 1005800:	1885883a 	add	r2,r3,r2
 1005804:	10800003 	ldbu	r2,0(r2)
 1005808:	10803fcc 	andi	r2,r2,255
 100580c:	1080201c 	xori	r2,r2,128
 1005810:	10bfe004 	addi	r2,r2,-128
 1005814:	10800be0 	cmpeqi	r2,r2,47
 1005818:	1000081e 	bne	r2,zero,100583c <alt_find_file+0xb0>
 100581c:	e0bffe17 	ldw	r2,-8(fp)
 1005820:	e0ffff17 	ldw	r3,-4(fp)
 1005824:	1885883a 	add	r2,r3,r2
 1005828:	10800003 	ldbu	r2,0(r2)
 100582c:	10803fcc 	andi	r2,r2,255
 1005830:	1080201c 	xori	r2,r2,128
 1005834:	10bfe004 	addi	r2,r2,-128
 1005838:	10000a1e 	bne	r2,zero,1005864 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 100583c:	e0bffd17 	ldw	r2,-12(fp)
 1005840:	10800217 	ldw	r2,8(r2)
 1005844:	e0fffe17 	ldw	r3,-8(fp)
 1005848:	180d883a 	mov	r6,r3
 100584c:	e17fff17 	ldw	r5,-4(fp)
 1005850:	1009883a 	mov	r4,r2
 1005854:	1005ab00 	call	1005ab0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1005858:	1000021e 	bne	r2,zero,1005864 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 100585c:	e0bffd17 	ldw	r2,-12(fp)
 1005860:	00000706 	br	1005880 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 1005864:	e0bffd17 	ldw	r2,-12(fp)
 1005868:	10800017 	ldw	r2,0(r2)
 100586c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1005870:	e0fffd17 	ldw	r3,-12(fp)
 1005874:	d0a00a04 	addi	r2,gp,-32728
 1005878:	18bfcc1e 	bne	r3,r2,10057ac <__alt_mem_TCDM+0xfefc47ac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 100587c:	0005883a 	mov	r2,zero
}
 1005880:	e037883a 	mov	sp,fp
 1005884:	dfc00117 	ldw	ra,4(sp)
 1005888:	df000017 	ldw	fp,0(sp)
 100588c:	dec00204 	addi	sp,sp,8
 1005890:	f800283a 	ret

01005894 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1005894:	defffc04 	addi	sp,sp,-16
 1005898:	df000315 	stw	fp,12(sp)
 100589c:	df000304 	addi	fp,sp,12
 10058a0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 10058a4:	00bffa04 	movi	r2,-24
 10058a8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10058ac:	e03ffd15 	stw	zero,-12(fp)
 10058b0:	00001906 	br	1005918 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 10058b4:	00804034 	movhi	r2,256
 10058b8:	1099a504 	addi	r2,r2,26260
 10058bc:	e0fffd17 	ldw	r3,-12(fp)
 10058c0:	18c00324 	muli	r3,r3,12
 10058c4:	10c5883a 	add	r2,r2,r3
 10058c8:	10800017 	ldw	r2,0(r2)
 10058cc:	10000f1e 	bne	r2,zero,100590c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 10058d0:	00804034 	movhi	r2,256
 10058d4:	1099a504 	addi	r2,r2,26260
 10058d8:	e0fffd17 	ldw	r3,-12(fp)
 10058dc:	18c00324 	muli	r3,r3,12
 10058e0:	10c5883a 	add	r2,r2,r3
 10058e4:	e0ffff17 	ldw	r3,-4(fp)
 10058e8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 10058ec:	d0e00e17 	ldw	r3,-32712(gp)
 10058f0:	e0bffd17 	ldw	r2,-12(fp)
 10058f4:	1880020e 	bge	r3,r2,1005900 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 10058f8:	e0bffd17 	ldw	r2,-12(fp)
 10058fc:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
 1005900:	e0bffd17 	ldw	r2,-12(fp)
 1005904:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 1005908:	00000606 	br	1005924 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100590c:	e0bffd17 	ldw	r2,-12(fp)
 1005910:	10800044 	addi	r2,r2,1
 1005914:	e0bffd15 	stw	r2,-12(fp)
 1005918:	e0bffd17 	ldw	r2,-12(fp)
 100591c:	10800810 	cmplti	r2,r2,32
 1005920:	103fe41e 	bne	r2,zero,10058b4 <__alt_mem_TCDM+0xfefc48b4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1005924:	e0bffe17 	ldw	r2,-8(fp)
}
 1005928:	e037883a 	mov	sp,fp
 100592c:	df000017 	ldw	fp,0(sp)
 1005930:	dec00104 	addi	sp,sp,4
 1005934:	f800283a 	ret

01005938 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1005938:	defffb04 	addi	sp,sp,-20
 100593c:	df000415 	stw	fp,16(sp)
 1005940:	df000404 	addi	fp,sp,16
 1005944:	e13ffe15 	stw	r4,-8(fp)
 1005948:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 100594c:	e0bfff17 	ldw	r2,-4(fp)
 1005950:	10840070 	cmpltui	r2,r2,4097
 1005954:	1000021e 	bne	r2,zero,1005960 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1005958:	00840004 	movi	r2,4096
 100595c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1005960:	e0fffe17 	ldw	r3,-8(fp)
 1005964:	e0bfff17 	ldw	r2,-4(fp)
 1005968:	1885883a 	add	r2,r3,r2
 100596c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1005970:	e0bffe17 	ldw	r2,-8(fp)
 1005974:	e0bffc15 	stw	r2,-16(fp)
 1005978:	00000506 	br	1005990 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 100597c:	e0bffc17 	ldw	r2,-16(fp)
 1005980:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1005984:	e0bffc17 	ldw	r2,-16(fp)
 1005988:	10800804 	addi	r2,r2,32
 100598c:	e0bffc15 	stw	r2,-16(fp)
 1005990:	e0fffc17 	ldw	r3,-16(fp)
 1005994:	e0bffd17 	ldw	r2,-12(fp)
 1005998:	18bff836 	bltu	r3,r2,100597c <__alt_mem_TCDM+0xfefc497c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 100599c:	e0bffe17 	ldw	r2,-8(fp)
 10059a0:	108007cc 	andi	r2,r2,31
 10059a4:	10000226 	beq	r2,zero,10059b0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 10059a8:	e0bffc17 	ldw	r2,-16(fp)
 10059ac:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 10059b0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 10059b4:	0001883a 	nop
 10059b8:	e037883a 	mov	sp,fp
 10059bc:	df000017 	ldw	fp,0(sp)
 10059c0:	dec00104 	addi	sp,sp,4
 10059c4:	f800283a 	ret

010059c8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 10059c8:	defffe04 	addi	sp,sp,-8
 10059cc:	df000115 	stw	fp,4(sp)
 10059d0:	df000104 	addi	fp,sp,4
 10059d4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 10059d8:	e0bfff17 	ldw	r2,-4(fp)
 10059dc:	10bffe84 	addi	r2,r2,-6
 10059e0:	10c00428 	cmpgeui	r3,r2,16
 10059e4:	18001a1e 	bne	r3,zero,1005a50 <alt_exception_cause_generated_bad_addr+0x88>
 10059e8:	100690ba 	slli	r3,r2,2
 10059ec:	00804034 	movhi	r2,256
 10059f0:	10968004 	addi	r2,r2,23040
 10059f4:	1885883a 	add	r2,r3,r2
 10059f8:	10800017 	ldw	r2,0(r2)
 10059fc:	1000683a 	jmp	r2
 1005a00:	01005a40 	call	1005a4 <__alt_mem_SDRAM_ctrl-0xeffa5c>
 1005a04:	01005a40 	call	1005a4 <__alt_mem_SDRAM_ctrl-0xeffa5c>
 1005a08:	01005a50 	cmplti	r4,zero,361
 1005a0c:	01005a50 	cmplti	r4,zero,361
 1005a10:	01005a50 	cmplti	r4,zero,361
 1005a14:	01005a40 	call	1005a4 <__alt_mem_SDRAM_ctrl-0xeffa5c>
 1005a18:	01005a48 	cmpgei	r4,zero,361
 1005a1c:	01005a50 	cmplti	r4,zero,361
 1005a20:	01005a40 	call	1005a4 <__alt_mem_SDRAM_ctrl-0xeffa5c>
 1005a24:	01005a40 	call	1005a4 <__alt_mem_SDRAM_ctrl-0xeffa5c>
 1005a28:	01005a50 	cmplti	r4,zero,361
 1005a2c:	01005a40 	call	1005a4 <__alt_mem_SDRAM_ctrl-0xeffa5c>
 1005a30:	01005a48 	cmpgei	r4,zero,361
 1005a34:	01005a50 	cmplti	r4,zero,361
 1005a38:	01005a50 	cmplti	r4,zero,361
 1005a3c:	01005a40 	call	1005a4 <__alt_mem_SDRAM_ctrl-0xeffa5c>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 1005a40:	00800044 	movi	r2,1
 1005a44:	00000306 	br	1005a54 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 1005a48:	0005883a 	mov	r2,zero
 1005a4c:	00000106 	br	1005a54 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 1005a50:	0005883a 	mov	r2,zero
  }
}
 1005a54:	e037883a 	mov	sp,fp
 1005a58:	df000017 	ldw	fp,0(sp)
 1005a5c:	dec00104 	addi	sp,sp,4
 1005a60:	f800283a 	ret

01005a64 <atexit>:
 1005a64:	200b883a 	mov	r5,r4
 1005a68:	000f883a 	mov	r7,zero
 1005a6c:	000d883a 	mov	r6,zero
 1005a70:	0009883a 	mov	r4,zero
 1005a74:	1005b2c1 	jmpi	1005b2c <__register_exitproc>

01005a78 <exit>:
 1005a78:	defffe04 	addi	sp,sp,-8
 1005a7c:	000b883a 	mov	r5,zero
 1005a80:	dc000015 	stw	r16,0(sp)
 1005a84:	dfc00115 	stw	ra,4(sp)
 1005a88:	2021883a 	mov	r16,r4
 1005a8c:	1005c440 	call	1005c44 <__call_exitprocs>
 1005a90:	00804034 	movhi	r2,256
 1005a94:	109e2304 	addi	r2,r2,30860
 1005a98:	11000017 	ldw	r4,0(r2)
 1005a9c:	20800f17 	ldw	r2,60(r4)
 1005aa0:	10000126 	beq	r2,zero,1005aa8 <exit+0x30>
 1005aa4:	103ee83a 	callr	r2
 1005aa8:	8009883a 	mov	r4,r16
 1005aac:	1005dc40 	call	1005dc4 <_exit>

01005ab0 <memcmp>:
 1005ab0:	01c000c4 	movi	r7,3
 1005ab4:	3980192e 	bgeu	r7,r6,1005b1c <memcmp+0x6c>
 1005ab8:	2144b03a 	or	r2,r4,r5
 1005abc:	11c4703a 	and	r2,r2,r7
 1005ac0:	10000f26 	beq	r2,zero,1005b00 <memcmp+0x50>
 1005ac4:	20800003 	ldbu	r2,0(r4)
 1005ac8:	28c00003 	ldbu	r3,0(r5)
 1005acc:	10c0151e 	bne	r2,r3,1005b24 <memcmp+0x74>
 1005ad0:	31bfff84 	addi	r6,r6,-2
 1005ad4:	01ffffc4 	movi	r7,-1
 1005ad8:	00000406 	br	1005aec <memcmp+0x3c>
 1005adc:	20800003 	ldbu	r2,0(r4)
 1005ae0:	28c00003 	ldbu	r3,0(r5)
 1005ae4:	31bfffc4 	addi	r6,r6,-1
 1005ae8:	10c00e1e 	bne	r2,r3,1005b24 <memcmp+0x74>
 1005aec:	21000044 	addi	r4,r4,1
 1005af0:	29400044 	addi	r5,r5,1
 1005af4:	31fff91e 	bne	r6,r7,1005adc <__alt_mem_TCDM+0xfefc4adc>
 1005af8:	0005883a 	mov	r2,zero
 1005afc:	f800283a 	ret
 1005b00:	20c00017 	ldw	r3,0(r4)
 1005b04:	28800017 	ldw	r2,0(r5)
 1005b08:	18bfee1e 	bne	r3,r2,1005ac4 <__alt_mem_TCDM+0xfefc4ac4>
 1005b0c:	31bfff04 	addi	r6,r6,-4
 1005b10:	21000104 	addi	r4,r4,4
 1005b14:	29400104 	addi	r5,r5,4
 1005b18:	39bff936 	bltu	r7,r6,1005b00 <__alt_mem_TCDM+0xfefc4b00>
 1005b1c:	303fe91e 	bne	r6,zero,1005ac4 <__alt_mem_TCDM+0xfefc4ac4>
 1005b20:	003ff506 	br	1005af8 <__alt_mem_TCDM+0xfefc4af8>
 1005b24:	10c5c83a 	sub	r2,r2,r3
 1005b28:	f800283a 	ret

01005b2c <__register_exitproc>:
 1005b2c:	defffa04 	addi	sp,sp,-24
 1005b30:	dc000315 	stw	r16,12(sp)
 1005b34:	04004034 	movhi	r16,256
 1005b38:	841e2304 	addi	r16,r16,30860
 1005b3c:	80c00017 	ldw	r3,0(r16)
 1005b40:	dc400415 	stw	r17,16(sp)
 1005b44:	dfc00515 	stw	ra,20(sp)
 1005b48:	18805217 	ldw	r2,328(r3)
 1005b4c:	2023883a 	mov	r17,r4
 1005b50:	10003726 	beq	r2,zero,1005c30 <__register_exitproc+0x104>
 1005b54:	10c00117 	ldw	r3,4(r2)
 1005b58:	010007c4 	movi	r4,31
 1005b5c:	20c00e16 	blt	r4,r3,1005b98 <__register_exitproc+0x6c>
 1005b60:	1a000044 	addi	r8,r3,1
 1005b64:	8800221e 	bne	r17,zero,1005bf0 <__register_exitproc+0xc4>
 1005b68:	18c00084 	addi	r3,r3,2
 1005b6c:	18c7883a 	add	r3,r3,r3
 1005b70:	18c7883a 	add	r3,r3,r3
 1005b74:	12000115 	stw	r8,4(r2)
 1005b78:	10c7883a 	add	r3,r2,r3
 1005b7c:	19400015 	stw	r5,0(r3)
 1005b80:	0005883a 	mov	r2,zero
 1005b84:	dfc00517 	ldw	ra,20(sp)
 1005b88:	dc400417 	ldw	r17,16(sp)
 1005b8c:	dc000317 	ldw	r16,12(sp)
 1005b90:	dec00604 	addi	sp,sp,24
 1005b94:	f800283a 	ret
 1005b98:	00800034 	movhi	r2,0
 1005b9c:	10800004 	addi	r2,r2,0
 1005ba0:	10002626 	beq	r2,zero,1005c3c <__register_exitproc+0x110>
 1005ba4:	01006404 	movi	r4,400
 1005ba8:	d9400015 	stw	r5,0(sp)
 1005bac:	d9800115 	stw	r6,4(sp)
 1005bb0:	d9c00215 	stw	r7,8(sp)
 1005bb4:	00000000 	call	0 <__alt_mem_SDRAM_ctrl-0x1000000>
 1005bb8:	d9400017 	ldw	r5,0(sp)
 1005bbc:	d9800117 	ldw	r6,4(sp)
 1005bc0:	d9c00217 	ldw	r7,8(sp)
 1005bc4:	10001d26 	beq	r2,zero,1005c3c <__register_exitproc+0x110>
 1005bc8:	81000017 	ldw	r4,0(r16)
 1005bcc:	10000115 	stw	zero,4(r2)
 1005bd0:	02000044 	movi	r8,1
 1005bd4:	22405217 	ldw	r9,328(r4)
 1005bd8:	0007883a 	mov	r3,zero
 1005bdc:	12400015 	stw	r9,0(r2)
 1005be0:	20805215 	stw	r2,328(r4)
 1005be4:	10006215 	stw	zero,392(r2)
 1005be8:	10006315 	stw	zero,396(r2)
 1005bec:	883fde26 	beq	r17,zero,1005b68 <__alt_mem_TCDM+0xfefc4b68>
 1005bf0:	18c9883a 	add	r4,r3,r3
 1005bf4:	2109883a 	add	r4,r4,r4
 1005bf8:	1109883a 	add	r4,r2,r4
 1005bfc:	21802215 	stw	r6,136(r4)
 1005c00:	01800044 	movi	r6,1
 1005c04:	12406217 	ldw	r9,392(r2)
 1005c08:	30cc983a 	sll	r6,r6,r3
 1005c0c:	4992b03a 	or	r9,r9,r6
 1005c10:	12406215 	stw	r9,392(r2)
 1005c14:	21c04215 	stw	r7,264(r4)
 1005c18:	01000084 	movi	r4,2
 1005c1c:	893fd21e 	bne	r17,r4,1005b68 <__alt_mem_TCDM+0xfefc4b68>
 1005c20:	11006317 	ldw	r4,396(r2)
 1005c24:	218cb03a 	or	r6,r4,r6
 1005c28:	11806315 	stw	r6,396(r2)
 1005c2c:	003fce06 	br	1005b68 <__alt_mem_TCDM+0xfefc4b68>
 1005c30:	18805304 	addi	r2,r3,332
 1005c34:	18805215 	stw	r2,328(r3)
 1005c38:	003fc606 	br	1005b54 <__alt_mem_TCDM+0xfefc4b54>
 1005c3c:	00bfffc4 	movi	r2,-1
 1005c40:	003fd006 	br	1005b84 <__alt_mem_TCDM+0xfefc4b84>

01005c44 <__call_exitprocs>:
 1005c44:	defff504 	addi	sp,sp,-44
 1005c48:	df000915 	stw	fp,36(sp)
 1005c4c:	dd400615 	stw	r21,24(sp)
 1005c50:	dc800315 	stw	r18,12(sp)
 1005c54:	dfc00a15 	stw	ra,40(sp)
 1005c58:	ddc00815 	stw	r23,32(sp)
 1005c5c:	dd800715 	stw	r22,28(sp)
 1005c60:	dd000515 	stw	r20,20(sp)
 1005c64:	dcc00415 	stw	r19,16(sp)
 1005c68:	dc400215 	stw	r17,8(sp)
 1005c6c:	dc000115 	stw	r16,4(sp)
 1005c70:	d9000015 	stw	r4,0(sp)
 1005c74:	2839883a 	mov	fp,r5
 1005c78:	04800044 	movi	r18,1
 1005c7c:	057fffc4 	movi	r21,-1
 1005c80:	00804034 	movhi	r2,256
 1005c84:	109e2304 	addi	r2,r2,30860
 1005c88:	12000017 	ldw	r8,0(r2)
 1005c8c:	45005217 	ldw	r20,328(r8)
 1005c90:	44c05204 	addi	r19,r8,328
 1005c94:	a0001c26 	beq	r20,zero,1005d08 <__call_exitprocs+0xc4>
 1005c98:	a0800117 	ldw	r2,4(r20)
 1005c9c:	15ffffc4 	addi	r23,r2,-1
 1005ca0:	b8000d16 	blt	r23,zero,1005cd8 <__call_exitprocs+0x94>
 1005ca4:	14000044 	addi	r16,r2,1
 1005ca8:	8421883a 	add	r16,r16,r16
 1005cac:	8421883a 	add	r16,r16,r16
 1005cb0:	84402004 	addi	r17,r16,128
 1005cb4:	a463883a 	add	r17,r20,r17
 1005cb8:	a421883a 	add	r16,r20,r16
 1005cbc:	e0001e26 	beq	fp,zero,1005d38 <__call_exitprocs+0xf4>
 1005cc0:	80804017 	ldw	r2,256(r16)
 1005cc4:	e0801c26 	beq	fp,r2,1005d38 <__call_exitprocs+0xf4>
 1005cc8:	bdffffc4 	addi	r23,r23,-1
 1005ccc:	843fff04 	addi	r16,r16,-4
 1005cd0:	8c7fff04 	addi	r17,r17,-4
 1005cd4:	bd7ff91e 	bne	r23,r21,1005cbc <__alt_mem_TCDM+0xfefc4cbc>
 1005cd8:	00800034 	movhi	r2,0
 1005cdc:	10800004 	addi	r2,r2,0
 1005ce0:	10000926 	beq	r2,zero,1005d08 <__call_exitprocs+0xc4>
 1005ce4:	a0800117 	ldw	r2,4(r20)
 1005ce8:	1000301e 	bne	r2,zero,1005dac <__call_exitprocs+0x168>
 1005cec:	a0800017 	ldw	r2,0(r20)
 1005cf0:	10003226 	beq	r2,zero,1005dbc <__call_exitprocs+0x178>
 1005cf4:	a009883a 	mov	r4,r20
 1005cf8:	98800015 	stw	r2,0(r19)
 1005cfc:	00000000 	call	0 <__alt_mem_SDRAM_ctrl-0x1000000>
 1005d00:	9d000017 	ldw	r20,0(r19)
 1005d04:	a03fe41e 	bne	r20,zero,1005c98 <__alt_mem_TCDM+0xfefc4c98>
 1005d08:	dfc00a17 	ldw	ra,40(sp)
 1005d0c:	df000917 	ldw	fp,36(sp)
 1005d10:	ddc00817 	ldw	r23,32(sp)
 1005d14:	dd800717 	ldw	r22,28(sp)
 1005d18:	dd400617 	ldw	r21,24(sp)
 1005d1c:	dd000517 	ldw	r20,20(sp)
 1005d20:	dcc00417 	ldw	r19,16(sp)
 1005d24:	dc800317 	ldw	r18,12(sp)
 1005d28:	dc400217 	ldw	r17,8(sp)
 1005d2c:	dc000117 	ldw	r16,4(sp)
 1005d30:	dec00b04 	addi	sp,sp,44
 1005d34:	f800283a 	ret
 1005d38:	a0800117 	ldw	r2,4(r20)
 1005d3c:	80c00017 	ldw	r3,0(r16)
 1005d40:	10bfffc4 	addi	r2,r2,-1
 1005d44:	15c01426 	beq	r2,r23,1005d98 <__call_exitprocs+0x154>
 1005d48:	80000015 	stw	zero,0(r16)
 1005d4c:	183fde26 	beq	r3,zero,1005cc8 <__alt_mem_TCDM+0xfefc4cc8>
 1005d50:	95c8983a 	sll	r4,r18,r23
 1005d54:	a0806217 	ldw	r2,392(r20)
 1005d58:	a5800117 	ldw	r22,4(r20)
 1005d5c:	2084703a 	and	r2,r4,r2
 1005d60:	10000b26 	beq	r2,zero,1005d90 <__call_exitprocs+0x14c>
 1005d64:	a0806317 	ldw	r2,396(r20)
 1005d68:	2088703a 	and	r4,r4,r2
 1005d6c:	20000c1e 	bne	r4,zero,1005da0 <__call_exitprocs+0x15c>
 1005d70:	89400017 	ldw	r5,0(r17)
 1005d74:	d9000017 	ldw	r4,0(sp)
 1005d78:	183ee83a 	callr	r3
 1005d7c:	a0800117 	ldw	r2,4(r20)
 1005d80:	15bfbf1e 	bne	r2,r22,1005c80 <__alt_mem_TCDM+0xfefc4c80>
 1005d84:	98800017 	ldw	r2,0(r19)
 1005d88:	153fcf26 	beq	r2,r20,1005cc8 <__alt_mem_TCDM+0xfefc4cc8>
 1005d8c:	003fbc06 	br	1005c80 <__alt_mem_TCDM+0xfefc4c80>
 1005d90:	183ee83a 	callr	r3
 1005d94:	003ff906 	br	1005d7c <__alt_mem_TCDM+0xfefc4d7c>
 1005d98:	a5c00115 	stw	r23,4(r20)
 1005d9c:	003feb06 	br	1005d4c <__alt_mem_TCDM+0xfefc4d4c>
 1005da0:	89000017 	ldw	r4,0(r17)
 1005da4:	183ee83a 	callr	r3
 1005da8:	003ff406 	br	1005d7c <__alt_mem_TCDM+0xfefc4d7c>
 1005dac:	a0800017 	ldw	r2,0(r20)
 1005db0:	a027883a 	mov	r19,r20
 1005db4:	1029883a 	mov	r20,r2
 1005db8:	003fb606 	br	1005c94 <__alt_mem_TCDM+0xfefc4c94>
 1005dbc:	0005883a 	mov	r2,zero
 1005dc0:	003ffb06 	br	1005db0 <__alt_mem_TCDM+0xfefc4db0>

01005dc4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1005dc4:	defffd04 	addi	sp,sp,-12
 1005dc8:	df000215 	stw	fp,8(sp)
 1005dcc:	df000204 	addi	fp,sp,8
 1005dd0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 1005dd4:	0001883a 	nop
 1005dd8:	e0bfff17 	ldw	r2,-4(fp)
 1005ddc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 1005de0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1005de4:	10000226 	beq	r2,zero,1005df0 <_exit+0x2c>
    ALT_SIM_FAIL();
 1005de8:	002af070 	cmpltui	zero,zero,43969
 1005dec:	00000106 	br	1005df4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 1005df0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1005df4:	003fff06 	br	1005df4 <__alt_mem_TCDM+0xfefc4df4>
