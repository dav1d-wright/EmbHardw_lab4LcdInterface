
lab4LcdInterface.elf:     file format elf32-littlenios2
lab4LcdInterface.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01000244

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x01000020 align 2**12
         filesz 0x00000224 memsz 0x00000224 flags r-x
    LOAD off    0x00001244 vaddr 0x01000244 paddr 0x01000244 align 2**12
         filesz 0x00076474 memsz 0x00076474 flags r-x
    LOAD off    0x000776b8 vaddr 0x010766b8 paddr 0x0107813c align 2**12
         filesz 0x00001a84 memsz 0x00001a84 flags rw-
    LOAD off    0x00079bc0 vaddr 0x01079bc0 paddr 0x01079bc0 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  02000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005c2c  01000244  01000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00070848  01005e70  01005e70  00006e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a84  010766b8  0107813c  000776b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  01079bc0  01079bc0  00079bc0  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM_ctrl   00000000  01079d14  01079d14  0007913c  2**0
                  CONTENTS
  7 .TCIM         00000000  02000244  02000244  0007913c  2**0
                  CONTENTS
  8 .TCDM         00000000  02001000  02001000  0007913c  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  0007913c  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000a70  00000000  00000000  00079160  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000168ce  00000000  00000000  00079bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000061c1  00000000  00000000  0009049e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006b82  00000000  00000000  0009665f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001670  00000000  00000000  0009d1e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002915  00000000  00000000  0009e854  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00004a4c  00000000  00000000  000a1169  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000060  00000000  00000000  000a5bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000680  00000000  00000000  000a5c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  000a8b2e  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  000a8b31  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000a8b34  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000a8b35  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000a8b36  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  000a8b3a  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  000a8b3e  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  000a8b42  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  000a8b4b  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  000a8b54  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000a  00000000  00000000  000a8b5d  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000005d  00000000  00000000  000a8b67  2**0
                  CONTENTS, READONLY
 31 .jdi          00003f9f  00000000  00000000  000a8bc4  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     00068aec  00000000  00000000  000acb63  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
01000244 l    d  .text	00000000 .text
01005e70 l    d  .rodata	00000000 .rodata
010766b8 l    d  .rwdata	00000000 .rwdata
01079bc0 l    d  .bss	00000000 .bss
01079d14 l    d  .SDRAM_ctrl	00000000 .SDRAM_ctrl
02000244 l    d  .TCIM	00000000 .TCIM
02001000 l    d  .TCDM	00000000 .TCDM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab4LcdInterface_bsp//obj/HAL/src/crt0.o
0100028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
010008cc l     F .text	00000008 __fp_unlock
010008e0 l     F .text	0000019c __sinit.part.1
01000a7c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
010766b8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
01003528 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01003634 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01003660 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100374c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100382c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01003918 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01003aec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0107812c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
01003d68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01003e9c l     F .text	00000034 alt_dev_reg
0107708c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
010041a0 l     F .text	0000020c altera_avalon_jtag_uart_irq
010043ac l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
010049e4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01004da4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01005218 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01005358 l     F .text	0000003c alt_get_errno
01005394 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
01079be8 g     O .bss	00000004 alt_instruction_exception_handler
01003320 g     F .text	00000054 _isatty_r
01003a28 g     F .text	0000007c alt_main
01000760 g     F .text	000000c0 _puts_r
01079c14 g     O .bss	00000100 alt_irq
01003048 g     F .text	00000060 _lseek_r
0107813c g       *ABS*	00000000 __flash_rwdata_start
01079d14 g       *ABS*	00000000 __alt_heap_start
010025fc g     F .text	0000005c __sseek
01000c1c g     F .text	00000010 __sinit
01000a84 g     F .text	00000068 __sfmoreglue
01003ac8 g     F .text	00000024 __malloc_unlock
010006f8 g     F .text	00000034 LCD_Write_Command
01001ce8 g     F .text	0000015c memmove
0100072c g     F .text	00000034 LCD_Write_Data
01000c04 g     F .text	00000018 _cleanup
01005750 g     F .text	00000024 altera_nios2_gen2_irq_init
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
010032c4 g     F .text	0000005c _fstat_r
01079bcc g     O .bss	00000004 errno
01002578 g     F .text	00000008 __seofread
01079bd4 g     O .bss	00000004 alt_argv
010800ec g       *ABS*	00000000 _gp
01003d38 g     F .text	00000030 usleep
01050e70 g     O .rodata	00025800 picture_array_tuxAnimation_3
01076f0c g     O .rwdata	00000180 alt_fd_list
01005e70 g     O .rodata	00025800 picture_array_tuxAnimation_1
01005774 g     F .text	00000090 alt_find_dev
01001ba0 g     F .text	00000148 memcpy
010008d4 g     F .text	0000000c _cleanup_r
010052dc g     F .text	0000007c alt_io_redirect
01005e70 g       *ABS*	00000000 __DTOR_END__
01000820 g     F .text	00000014 puts
01005a40 g     F .text	0000009c alt_exception_cause_generated_bad_addr
010045a4 g     F .text	0000021c altera_avalon_jtag_uart_read
0100346c g     F .text	00000064 .hidden __udivsi3
01003788 g     F .text	000000a4 isatty
01000000 g       *ABS*	00000000 __alt_mem_SDRAM_ctrl
010780fc g     O .rwdata	00000004 picture_width_tuxAnimation_3
010059b0 g     F .text	00000090 alt_icache_flush
01079bc8 g     O .bss	00000004 __malloc_top_pad
01000c6c g     F .text	000004bc __sfvwrite_r
010004dc g     F .text	0000021c init_LCD
010024d0 g     F .text	00000054 _sbrk_r
010780f4 g     O .rwdata	00000004 picture_width_tuxAnimation_2
01003264 g     F .text	00000060 _read_r
01078124 g     O .rwdata	00000004 alt_max_fd
01002868 g     F .text	000000f0 _fclose_r
01002be4 g     F .text	00000030 fflush
01079bc4 g     O .bss	00000004 __malloc_max_sbrked_mem
01003954 g     F .text	000000d4 lseek
01078104 g     O .rwdata	00000004 _global_impure_ptr
01001f6c g     F .text	00000564 _realloc_r
01079d14 g       *ABS*	00000000 __bss_end
01005128 g     F .text	000000f0 alt_iic_isr_register
01005648 g     F .text	00000108 alt_tick
01000c3c g     F .text	00000018 __fp_lock_all
010050dc g     F .text	0000004c alt_ic_irq_enabled
010055ac g     F .text	0000009c alt_alarm_stop
01079bdc g     O .bss	00000004 alt_irq_active
020000fc g     F .exceptions	000000d4 alt_irq_handler
01076ee4 g     O .rwdata	00000028 alt_dev_null
01004d5c g     F .text	00000048 alt_dcache_flush_all
0107813c g       *ABS*	00000000 __ram_rwdata_end
0107811c g     O .rwdata	00000008 alt_dev_list
010780f0 g     O .rwdata	00000004 picture_height_tuxAnimation_1
01003da4 g     F .text	000000f8 write
010766b8 g       *ABS*	00000000 __ram_rodata_end
0100369c g     F .text	000000b0 fstat
010034d0 g     F .text	00000058 .hidden __umodsi3
01079d14 g       *ABS*	00000000 end
010040e0 g     F .text	000000c0 altera_avalon_jtag_uart_init
020001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
01005e70 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
01004a5c g     F .text	0000007c alt_avalon_timer_sc_init
010047c0 g     F .text	00000224 altera_avalon_jtag_uart_write
01000c2c g     F .text	00000004 __sfp_lock_acquire
01001abc g     F .text	000000e4 memchr
01002d38 g     F .text	00000310 _free_r
01005cbc g     F .text	00000180 __call_exitprocs
0107810c g     O .rwdata	00000004 __malloc_sbrk_base
01000244 g     F .text	0000004c _start
01079be0 g     O .bss	00000004 _alt_tick_rate
01079be4 g     O .bss	00000004 _alt_nticks
01003b28 g     F .text	000000fc read
01003f08 g     F .text	00000074 alt_sys_init
01005ba4 g     F .text	00000118 __register_exitproc
0100444c g     F .text	00000068 altera_avalon_jtag_uart_close
010766b8 g       *ABS*	00000000 __ram_rwdata_start
01005e70 g       *ABS*	00000000 __ram_rodata_start
01079bec g     O .bss	00000028 __malloc_current_mallinfo
01003f7c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0100590c g     F .text	000000a4 alt_get_fd
01004c04 g     F .text	00000158 alt_busy_sleep
01002814 g     F .text	00000054 _close_r
01005b28 g     F .text	0000007c memcmp
0100403c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
01079d14 g       *ABS*	00000000 __alt_stack_base
0100408c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
010026c0 g     F .text	00000154 __swsetup_r
01000aec g     F .text	00000118 __sfp
01076adc g     O .rwdata	00000408 __malloc_av_
01000c38 g     F .text	00000004 __sinit_lock_release
01002524 g     F .text	00000054 __sread
01005804 g     F .text	00000108 alt_find_file
01004de0 g     F .text	000000a4 alt_dev_llist_insert
01003aa4 g     F .text	00000024 __malloc_lock
01003c88 g     F .text	000000b0 sbrk
01002b88 g     F .text	0000005c _fflush_r
01079bc0 g       *ABS*	00000000 __bss_start
01001e44 g     F .text	00000128 memset
01000290 g     F .text	0000024c main
01079bd8 g     O .bss	00000004 alt_envp
01079bc0 g     O .bss	00000004 __malloc_max_total_mem
01003fdc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01002658 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
01002958 g     F .text	00000014 fclose
01078100 g     O .rwdata	00000004 picture_height_tuxAnimation_3
010012b0 g     F .text	0000080c _malloc_r
01078128 g     O .rwdata	00000004 alt_errno
01001128 g     F .text	000000c4 _fwalk
01003374 g     F .text	00000084 .hidden __divsi3
01002c14 g     F .text	00000124 _malloc_trim_r
01005e70 g       *ABS*	00000000 __CTOR_END__
01005e70 g       *ABS*	00000000 __flash_rodata_start
01005e70 g       *ABS*	00000000 __DTOR_LIST__
01003ed0 g     F .text	00000038 alt_irq_init
01003c24 g     F .text	00000064 alt_release_fd
01005adc g     F .text	00000014 atexit
01002660 g     F .text	00000060 _write_r
01078108 g     O .rwdata	00000004 _impure_ptr
01079bd0 g     O .bss	00000004 alt_argc
0100296c g     F .text	0000021c __sflush_r
01004ee4 g     F .text	00000060 _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
01000c54 g     F .text	00000018 __fp_unlock_all
01078114 g     O .rwdata	00000008 alt_fs_list
02000020 g       *ABS*	00000000 __ram_exceptions_start
01004f78 g     F .text	00000050 alt_ic_isr_register
0107813c g       *ABS*	00000000 _edata
02001000 g       *ABS*	00000000 __alt_mem_TCDM
01079d14 g       *ABS*	00000000 _end
0102b670 g     O .rodata	00025800 picture_array_tuxAnimation_2
02000244 g       *ABS*	00000000 __ram_exceptions_end
010044b4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
01005050 g     F .text	0000008c alt_ic_irq_disable
01002580 g     F .text	0000007c __swrite
01078110 g     O .rwdata	00000004 __malloc_trim_threshold
01005af0 g     F .text	00000038 exit
010011ec g     F .text	000000c4 _fwalk_reent
010780f8 g     O .rwdata	00000004 picture_height_tuxAnimation_2
010033f8 g     F .text	00000074 .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
01000c30 g     F .text	00000004 __sfp_lock_release
010780ec g     O .rwdata	00000004 picture_width_tuxAnimation_1
01005e3c g     F .text	00000034 _exit
02000000 g       *ABS*	00000000 __alt_mem_TCIM
01004ad8 g     F .text	0000012c alt_alarm_start
010030a8 g     F .text	000001bc __smakebuf_r
01000834 g     F .text	00000098 strlen
01005458 g     F .text	00000154 open
01004f44 g     F .text	00000034 alt_icache_flush_all
01078130 g     O .rwdata	00000004 alt_priority_mask
01004fc8 g     F .text	00000088 alt_ic_irq_enable
01078134 g     O .rwdata	00000008 alt_alarm_list
01004e84 g     F .text	00000060 _do_ctors
01003564 g     F .text	000000d0 close
01003894 g     F .text	00000084 alt_load
01000c34 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__alt_mem_TCDM+0xfefff004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08409114 	ori	at,at,580
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__reset-0x1000000>

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d00 	call	20001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	00804234 	movhi	r2,264
 2000140:	10a70504 	addi	r2,r2,-25580
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	00804234 	movhi	r2,264
 2000158:	10a70504 	addi	r2,r2,-25580
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <__alt_mem_TCDM+0xfffff12c>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <__alt_mem_TCDM+0xfffff120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	0001883a 	nop
}
 20001b8:	0001883a 	nop
 20001bc:	e037883a 	mov	sp,fp
 20001c0:	dfc00117 	ldw	ra,4(sp)
 20001c4:	df000017 	ldw	fp,0(sp)
 20001c8:	dec00204 	addi	sp,sp,8
 20001cc:	f800283a 	ret

020001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d0:	defffb04 	addi	sp,sp,-20
 20001d4:	dfc00415 	stw	ra,16(sp)
 20001d8:	df000315 	stw	fp,12(sp)
 20001dc:	df000304 	addi	fp,sp,12
 20001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 20001e4:	000531fa 	rdctl	r2,exception
 20001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 20001ec:	e0bffd17 	ldw	r2,-12(fp)
 20001f0:	10801f0c 	andi	r2,r2,124
 20001f4:	1004d0ba 	srli	r2,r2,2
 20001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 20001fc:	0005333a 	rdctl	r2,badaddr
 2000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 2000204:	d0a6bf17 	ldw	r2,-25860(gp)
 2000208:	10000726 	beq	r2,zero,2000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 200020c:	d0a6bf17 	ldw	r2,-25860(gp)
 2000210:	e0fffd17 	ldw	r3,-12(fp)
 2000214:	e1bffe17 	ldw	r6,-8(fp)
 2000218:	e17fff17 	ldw	r5,-4(fp)
 200021c:	1809883a 	mov	r4,r3
 2000220:	103ee83a 	callr	r2
 2000224:	00000206 	br	2000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 200022c:	0005883a 	mov	r2,zero
}
 2000230:	e037883a 	mov	sp,fp
 2000234:	dfc00117 	ldw	ra,4(sp)
 2000238:	df000017 	ldw	fp,0(sp)
 200023c:	dec00204 	addi	sp,sp,8
 2000240:	f800283a 	ret

Disassembly of section .text:

01000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 1000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 1000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 100024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 1000250:	00bffd16 	blt	zero,r2,1000248 <__alt_mem_TCDM+0xfefff248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1000254:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 1000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 100025c:	06804234 	movhi	gp,264
    ori gp, gp, %lo(_gp)
 1000260:	d6803b14 	ori	gp,gp,236
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1000264:	008041f4 	movhi	r2,263
    ori r2, r2, %lo(__bss_start)
 1000268:	10a6f014 	ori	r2,r2,39872

    movhi r3, %hi(__bss_end)
 100026c:	00c041f4 	movhi	r3,263
    ori r3, r3, %lo(__bss_end)
 1000270:	18e74514 	ori	r3,r3,40212

    beq r2, r3, 1f
 1000274:	10c00326 	beq	r2,r3,1000284 <_start+0x40>

0:
    stw zero, (r2)
 1000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 100027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1000280:	10fffd36 	bltu	r2,r3,1000278 <__alt_mem_TCDM+0xfefff278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1000284:	10038940 	call	1003894 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1000288:	1003a280 	call	1003a28 <alt_main>

0100028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 100028c:	003fff06 	br	100028c <__alt_mem_TCDM+0xfefff28c>

01000290 <main>:
void LCD_Write_Command(int command);
void LCD_Write_Data(int data);
void init_LCD();

int main()
{
 1000290:	defff804 	addi	sp,sp,-32
 1000294:	dfc00715 	stw	ra,28(sp)
 1000298:	df000615 	stw	fp,24(sp)
 100029c:	df000604 	addi	fp,sp,24
  printf("Hello from Nios II!\n");
 10002a0:	010041f4 	movhi	r4,263
 10002a4:	21199c04 	addi	r4,r4,26224
 10002a8:	10008200 	call	1000820 <puts>

  init_LCD();
 10002ac:	10004dc0 	call	10004dc <init_LCD>

  usleep(500E3);
 10002b0:	01000234 	movhi	r4,8
 10002b4:	21284804 	addi	r4,r4,-24288
 10002b8:	1003d380 	call	1003d38 <usleep>

  while (true)
  {
	  for(int i = 0; i < picture_height_tuxAnimation_1; i++)
 10002bc:	e03ffa15 	stw	zero,-24(fp)
 10002c0:	00002806 	br	1000364 <main+0xd4>
	  {
		  for(int j = 0; j < picture_width_tuxAnimation_1; j++)
 10002c4:	e03ffb15 	stw	zero,-20(fp)
 10002c8:	00002006 	br	100034c <main+0xbc>
		  {
			  if((i == 0) && (j == 0))
 10002cc:	e0bffa17 	ldw	r2,-24(fp)
 10002d0:	10000f1e 	bne	r2,zero,1000310 <main+0x80>
 10002d4:	e0bffb17 	ldw	r2,-20(fp)
 10002d8:	10000d1e 	bne	r2,zero,1000310 <main+0x80>
			  {
				  LCD_Write_Data(picture_array_tuxAnimation_1[i][j]);
 10002dc:	00804034 	movhi	r2,256
 10002e0:	10979c04 	addi	r2,r2,24176
 10002e4:	e0fffa17 	ldw	r3,-24(fp)
 10002e8:	19003c24 	muli	r4,r3,240
 10002ec:	e0fffb17 	ldw	r3,-20(fp)
 10002f0:	20c7883a 	add	r3,r4,r3
 10002f4:	18c7883a 	add	r3,r3,r3
 10002f8:	10c5883a 	add	r2,r2,r3
 10002fc:	1080000b 	ldhu	r2,0(r2)
 1000300:	10bfffcc 	andi	r2,r2,65535
 1000304:	1009883a 	mov	r4,r2
 1000308:	100072c0 	call	100072c <LCD_Write_Data>
 100030c:	00000c06 	br	1000340 <main+0xb0>
			  }
			  else
			  {
				  LCD_Write_Command(picture_array_tuxAnimation_1[i][j]);
 1000310:	00804034 	movhi	r2,256
 1000314:	10979c04 	addi	r2,r2,24176
 1000318:	e0fffa17 	ldw	r3,-24(fp)
 100031c:	19003c24 	muli	r4,r3,240
 1000320:	e0fffb17 	ldw	r3,-20(fp)
 1000324:	20c7883a 	add	r3,r4,r3
 1000328:	18c7883a 	add	r3,r3,r3
 100032c:	10c5883a 	add	r2,r2,r3
 1000330:	1080000b 	ldhu	r2,0(r2)
 1000334:	10bfffcc 	andi	r2,r2,65535
 1000338:	1009883a 	mov	r4,r2
 100033c:	10006f80 	call	10006f8 <LCD_Write_Command>

  while (true)
  {
	  for(int i = 0; i < picture_height_tuxAnimation_1; i++)
	  {
		  for(int j = 0; j < picture_width_tuxAnimation_1; j++)
 1000340:	e0bffb17 	ldw	r2,-20(fp)
 1000344:	10800044 	addi	r2,r2,1
 1000348:	e0bffb15 	stw	r2,-20(fp)
 100034c:	e0fffb17 	ldw	r3,-20(fp)
 1000350:	00803c04 	movi	r2,240
 1000354:	18bfdd36 	bltu	r3,r2,10002cc <__alt_mem_TCDM+0xfefff2cc>

  usleep(500E3);

  while (true)
  {
	  for(int i = 0; i < picture_height_tuxAnimation_1; i++)
 1000358:	e0bffa17 	ldw	r2,-24(fp)
 100035c:	10800044 	addi	r2,r2,1
 1000360:	e0bffa15 	stw	r2,-24(fp)
 1000364:	e0fffa17 	ldw	r3,-24(fp)
 1000368:	00805004 	movi	r2,320
 100036c:	18bfd536 	bltu	r3,r2,10002c4 <__alt_mem_TCDM+0xfefff2c4>
				  LCD_Write_Command(picture_array_tuxAnimation_1[i][j]);
			  }
		  }
	  }

	  for(int i = 0; i < picture_height_tuxAnimation_2; i++)
 1000370:	e03ffc15 	stw	zero,-16(fp)
 1000374:	00002806 	br	1000418 <main+0x188>
	  {
		  for(int j = 0; j < picture_width_tuxAnimation_2; j++)
 1000378:	e03ffd15 	stw	zero,-12(fp)
 100037c:	00002006 	br	1000400 <main+0x170>
		  {
			  if((i == 0) && (j == 0))
 1000380:	e0bffc17 	ldw	r2,-16(fp)
 1000384:	10000f1e 	bne	r2,zero,10003c4 <main+0x134>
 1000388:	e0bffd17 	ldw	r2,-12(fp)
 100038c:	10000d1e 	bne	r2,zero,10003c4 <main+0x134>
			  {
				  LCD_Write_Data(picture_array_tuxAnimation_2[i][j]);
 1000390:	008040f4 	movhi	r2,259
 1000394:	10ad9c04 	addi	r2,r2,-18832
 1000398:	e0fffc17 	ldw	r3,-16(fp)
 100039c:	19003c24 	muli	r4,r3,240
 10003a0:	e0fffd17 	ldw	r3,-12(fp)
 10003a4:	20c7883a 	add	r3,r4,r3
 10003a8:	18c7883a 	add	r3,r3,r3
 10003ac:	10c5883a 	add	r2,r2,r3
 10003b0:	1080000b 	ldhu	r2,0(r2)
 10003b4:	10bfffcc 	andi	r2,r2,65535
 10003b8:	1009883a 	mov	r4,r2
 10003bc:	100072c0 	call	100072c <LCD_Write_Data>
 10003c0:	00000c06 	br	10003f4 <main+0x164>
			  }
			  else
			  {
				  LCD_Write_Command(picture_array_tuxAnimation_2[i][j]);
 10003c4:	008040f4 	movhi	r2,259
 10003c8:	10ad9c04 	addi	r2,r2,-18832
 10003cc:	e0fffc17 	ldw	r3,-16(fp)
 10003d0:	19003c24 	muli	r4,r3,240
 10003d4:	e0fffd17 	ldw	r3,-12(fp)
 10003d8:	20c7883a 	add	r3,r4,r3
 10003dc:	18c7883a 	add	r3,r3,r3
 10003e0:	10c5883a 	add	r2,r2,r3
 10003e4:	1080000b 	ldhu	r2,0(r2)
 10003e8:	10bfffcc 	andi	r2,r2,65535
 10003ec:	1009883a 	mov	r4,r2
 10003f0:	10006f80 	call	10006f8 <LCD_Write_Command>
		  }
	  }

	  for(int i = 0; i < picture_height_tuxAnimation_2; i++)
	  {
		  for(int j = 0; j < picture_width_tuxAnimation_2; j++)
 10003f4:	e0bffd17 	ldw	r2,-12(fp)
 10003f8:	10800044 	addi	r2,r2,1
 10003fc:	e0bffd15 	stw	r2,-12(fp)
 1000400:	e0fffd17 	ldw	r3,-12(fp)
 1000404:	00803c04 	movi	r2,240
 1000408:	18bfdd36 	bltu	r3,r2,1000380 <__alt_mem_TCDM+0xfefff380>
				  LCD_Write_Command(picture_array_tuxAnimation_1[i][j]);
			  }
		  }
	  }

	  for(int i = 0; i < picture_height_tuxAnimation_2; i++)
 100040c:	e0bffc17 	ldw	r2,-16(fp)
 1000410:	10800044 	addi	r2,r2,1
 1000414:	e0bffc15 	stw	r2,-16(fp)
 1000418:	e0fffc17 	ldw	r3,-16(fp)
 100041c:	00805004 	movi	r2,320
 1000420:	18bfd536 	bltu	r3,r2,1000378 <__alt_mem_TCDM+0xfefff378>
			  {
				  LCD_Write_Command(picture_array_tuxAnimation_2[i][j]);
			  }		  }
	  }

	  for(int i = 0; i < picture_height_tuxAnimation_3; i++)
 1000424:	e03ffe15 	stw	zero,-8(fp)
 1000428:	00002806 	br	10004cc <main+0x23c>
	  {
		  for(int j = 0; j < picture_width_tuxAnimation_3; j++)
 100042c:	e03fff15 	stw	zero,-4(fp)
 1000430:	00002006 	br	10004b4 <main+0x224>
		  {
			  if((i == 0) && (j == 0))
 1000434:	e0bffe17 	ldw	r2,-8(fp)
 1000438:	10000f1e 	bne	r2,zero,1000478 <main+0x1e8>
 100043c:	e0bfff17 	ldw	r2,-4(fp)
 1000440:	10000d1e 	bne	r2,zero,1000478 <main+0x1e8>
			  {
				  LCD_Write_Data(picture_array_tuxAnimation_3[i][j]);
 1000444:	00804174 	movhi	r2,261
 1000448:	10839c04 	addi	r2,r2,3696
 100044c:	e0fffe17 	ldw	r3,-8(fp)
 1000450:	19003c24 	muli	r4,r3,240
 1000454:	e0ffff17 	ldw	r3,-4(fp)
 1000458:	20c7883a 	add	r3,r4,r3
 100045c:	18c7883a 	add	r3,r3,r3
 1000460:	10c5883a 	add	r2,r2,r3
 1000464:	1080000b 	ldhu	r2,0(r2)
 1000468:	10bfffcc 	andi	r2,r2,65535
 100046c:	1009883a 	mov	r4,r2
 1000470:	100072c0 	call	100072c <LCD_Write_Data>
 1000474:	00000c06 	br	10004a8 <main+0x218>
			  }
			  else
			  {
				  LCD_Write_Command(picture_array_tuxAnimation_3[i][j]);
 1000478:	00804174 	movhi	r2,261
 100047c:	10839c04 	addi	r2,r2,3696
 1000480:	e0fffe17 	ldw	r3,-8(fp)
 1000484:	19003c24 	muli	r4,r3,240
 1000488:	e0ffff17 	ldw	r3,-4(fp)
 100048c:	20c7883a 	add	r3,r4,r3
 1000490:	18c7883a 	add	r3,r3,r3
 1000494:	10c5883a 	add	r2,r2,r3
 1000498:	1080000b 	ldhu	r2,0(r2)
 100049c:	10bfffcc 	andi	r2,r2,65535
 10004a0:	1009883a 	mov	r4,r2
 10004a4:	10006f80 	call	10006f8 <LCD_Write_Command>
			  }		  }
	  }

	  for(int i = 0; i < picture_height_tuxAnimation_3; i++)
	  {
		  for(int j = 0; j < picture_width_tuxAnimation_3; j++)
 10004a8:	e0bfff17 	ldw	r2,-4(fp)
 10004ac:	10800044 	addi	r2,r2,1
 10004b0:	e0bfff15 	stw	r2,-4(fp)
 10004b4:	e0ffff17 	ldw	r3,-4(fp)
 10004b8:	00803c04 	movi	r2,240
 10004bc:	18bfdd36 	bltu	r3,r2,1000434 <__alt_mem_TCDM+0xfefff434>
			  {
				  LCD_Write_Command(picture_array_tuxAnimation_2[i][j]);
			  }		  }
	  }

	  for(int i = 0; i < picture_height_tuxAnimation_3; i++)
 10004c0:	e0bffe17 	ldw	r2,-8(fp)
 10004c4:	10800044 	addi	r2,r2,1
 10004c8:	e0bffe15 	stw	r2,-8(fp)
 10004cc:	e0fffe17 	ldw	r3,-8(fp)
 10004d0:	00805004 	movi	r2,320
 10004d4:	18bfd536 	bltu	r3,r2,100042c <__alt_mem_TCDM+0xfefff42c>
			  else
			  {
				  LCD_Write_Command(picture_array_tuxAnimation_3[i][j]);
			  }		  }
	  }
  }
 10004d8:	003f7806 	br	10002bc <__alt_mem_TCDM+0xfefff2bc>

010004dc <init_LCD>:


  return 0;
}

void init_LCD() {
 10004dc:	defffe04 	addi	sp,sp,-8
 10004e0:	dfc00115 	stw	ra,4(sp)
 10004e4:	df000015 	stw	fp,0(sp)
 10004e8:	d839883a 	mov	fp,sp
	usleep(500E3);
 10004ec:	01000234 	movhi	r4,8
 10004f0:	21284804 	addi	r4,r4,-24288
 10004f4:	1003d380 	call	1003d38 <usleep>

	LCD_Write_Command(0x0028);     //display OFF
 10004f8:	01000a04 	movi	r4,40
 10004fc:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Command(0x0011);     //exit SLEEP mode
 1000500:	01000444 	movi	r4,17
 1000504:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
 1000508:	0009883a 	mov	r4,zero
 100050c:	100072c0 	call	100072c <LCD_Write_Data>

	LCD_Write_Command(0x00CB);     //Power Control A
 1000510:	010032c4 	movi	r4,203
 1000514:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Data(0x0039);     //always 0x39
 1000518:	01000e44 	movi	r4,57
 100051c:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x002C);     //always 0x2C
 1000520:	01000b04 	movi	r4,44
 1000524:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x0000);     //always 0x00
 1000528:	0009883a 	mov	r4,zero
 100052c:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x0034);     //Vcore = 1.6V
 1000530:	01000d04 	movi	r4,52
 1000534:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x0002);     //DDVDH = 5.6V
 1000538:	01000084 	movi	r4,2
 100053c:	100072c0 	call	100072c <LCD_Write_Data>

	LCD_Write_Command(0x00CF);     //Power Control B
 1000540:	010033c4 	movi	r4,207
 1000544:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Data(0x0000);     //always 0x00
 1000548:	0009883a 	mov	r4,zero
 100054c:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x0081);     //PCEQ off
 1000550:	01002044 	movi	r4,129
 1000554:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x0030);     //ESD protection
 1000558:	01000c04 	movi	r4,48
 100055c:	100072c0 	call	100072c <LCD_Write_Data>

	LCD_Write_Command(0x00E8);     //Driver timing control A
 1000560:	01003a04 	movi	r4,232
 1000564:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Data(0x0085);     //non - overlap
 1000568:	01002144 	movi	r4,133
 100056c:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x0001);     //EQ timing
 1000570:	01000044 	movi	r4,1
 1000574:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x0079);     //Pre-chargetiming
 1000578:	01001e44 	movi	r4,121
 100057c:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Command(0x00EA);     //Driver timing control B
 1000580:	01003a84 	movi	r4,234
 1000584:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Data(0x0000);        //Gate driver timing
 1000588:	0009883a 	mov	r4,zero
 100058c:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x0000);        //always 0x00
 1000590:	0009883a 	mov	r4,zero
 1000594:	100072c0 	call	100072c <LCD_Write_Data>

	LCD_Write_Data(0x0064);        //soft start
 1000598:	01001904 	movi	r4,100
 100059c:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x0003);        //power on sequence
 10005a0:	010000c4 	movi	r4,3
 10005a4:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x0012);        //power on sequence
 10005a8:	01000484 	movi	r4,18
 10005ac:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x0081);        //DDVDH enhance on
 10005b0:	01002044 	movi	r4,129
 10005b4:	100072c0 	call	100072c <LCD_Write_Data>

	LCD_Write_Command(0x00F7);     //Pump ratio control
 10005b8:	01003dc4 	movi	r4,247
 10005bc:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Data(0x0020);     //DDVDH=2xVCI
 10005c0:	01000804 	movi	r4,32
 10005c4:	100072c0 	call	100072c <LCD_Write_Data>

	LCD_Write_Command(0x00C0);    //power control 1
 10005c8:	01003004 	movi	r4,192
 10005cc:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Data(0x0026);
 10005d0:	01000984 	movi	r4,38
 10005d4:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x0004);     //second parameter for ILI9340 (ignored by ILI9341)
 10005d8:	01000104 	movi	r4,4
 10005dc:	100072c0 	call	100072c <LCD_Write_Data>

	LCD_Write_Command(0x00C1);     //power control 2
 10005e0:	01003044 	movi	r4,193
 10005e4:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Data(0x0011);
 10005e8:	01000444 	movi	r4,17
 10005ec:	100072c0 	call	100072c <LCD_Write_Data>

	LCD_Write_Command(0x00C5);     //VCOM control 1
 10005f0:	01003144 	movi	r4,197
 10005f4:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Data(0x0035);
 10005f8:	01000d44 	movi	r4,53
 10005fc:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x003E);
 1000600:	01000f84 	movi	r4,62
 1000604:	100072c0 	call	100072c <LCD_Write_Data>

	LCD_Write_Command(0x00C7);     //VCOM control 2
 1000608:	010031c4 	movi	r4,199
 100060c:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Data(0x00BE);
 1000610:	01002f84 	movi	r4,190
 1000614:	100072c0 	call	100072c <LCD_Write_Data>

	LCD_Write_Command(0x00B1);     //frame rate control
 1000618:	01002c44 	movi	r4,177
 100061c:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
 1000620:	0009883a 	mov	r4,zero
 1000624:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x0010);
 1000628:	01000404 	movi	r4,16
 100062c:	100072c0 	call	100072c <LCD_Write_Data>

	LCD_Write_Command(0x003A);    //pixel format = 16 bit per pixel
 1000630:	01000e84 	movi	r4,58
 1000634:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Data(0x0055);
 1000638:	01001544 	movi	r4,85
 100063c:	100072c0 	call	100072c <LCD_Write_Data>

	LCD_Write_Command(0x00B6);     //display function control
 1000640:	01002d84 	movi	r4,182
 1000644:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Data(0x000A);
 1000648:	01000284 	movi	r4,10
 100064c:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x00A2);
 1000650:	01002884 	movi	r4,162
 1000654:	100072c0 	call	100072c <LCD_Write_Data>

	LCD_Write_Command(0x00F2);     //3G Gamma control
 1000658:	01003c84 	movi	r4,242
 100065c:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Data(0x0002);         //off
 1000660:	01000084 	movi	r4,2
 1000664:	100072c0 	call	100072c <LCD_Write_Data>

	LCD_Write_Command(0x0026);     //Gamma curve 3
 1000668:	01000984 	movi	r4,38
 100066c:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Data(0x0001);
 1000670:	01000044 	movi	r4,1
 1000674:	100072c0 	call	100072c <LCD_Write_Data>

	LCD_Write_Command(0x0036);     //memory access control = BGR
 1000678:	01000d84 	movi	r4,54
 100067c:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
 1000680:	0009883a 	mov	r4,zero
 1000684:	100072c0 	call	100072c <LCD_Write_Data>

	LCD_Write_Command(0x002A);     //column address set
 1000688:	01000a84 	movi	r4,42
 100068c:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
 1000690:	0009883a 	mov	r4,zero
 1000694:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x0000);        //start 0x0000
 1000698:	0009883a 	mov	r4,zero
 100069c:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x0000);
 10006a0:	0009883a 	mov	r4,zero
 10006a4:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x00EF);        //end 0x00EF
 10006a8:	01003bc4 	movi	r4,239
 10006ac:	100072c0 	call	100072c <LCD_Write_Data>

	LCD_Write_Command(0x002B);    //page address set
 10006b0:	01000ac4 	movi	r4,43
 10006b4:	10006f80 	call	10006f8 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
 10006b8:	0009883a 	mov	r4,zero
 10006bc:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x0000);        //start 0x0000
 10006c0:	0009883a 	mov	r4,zero
 10006c4:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x0001);
 10006c8:	01000044 	movi	r4,1
 10006cc:	100072c0 	call	100072c <LCD_Write_Data>
	LCD_Write_Data(0x003F);        //end 0x013F
 10006d0:	01000fc4 	movi	r4,63
 10006d4:	100072c0 	call	100072c <LCD_Write_Data>

	LCD_Write_Command(0x0029);
 10006d8:	01000a44 	movi	r4,41
 10006dc:	10006f80 	call	10006f8 <LCD_Write_Command>

}
 10006e0:	0001883a 	nop
 10006e4:	e037883a 	mov	sp,fp
 10006e8:	dfc00117 	ldw	ra,4(sp)
 10006ec:	df000017 	ldw	fp,0(sp)
 10006f0:	dec00204 	addi	sp,sp,8
 10006f4:	f800283a 	ret

010006f8 <LCD_Write_Command>:

void LCD_Write_Command(int command) {
 10006f8:	defffe04 	addi	sp,sp,-8
 10006fc:	df000115 	stw	fp,4(sp)
 1000700:	df000104 	addi	fp,sp,4
 1000704:	e13fff15 	stw	r4,-4(fp)
  IOWR_16DIRECT(LCD_BASE,0x00,command);
 1000708:	00808034 	movhi	r2,512
 100070c:	108c2e04 	addi	r2,r2,12472
 1000710:	e0ffff0b 	ldhu	r3,-4(fp)
 1000714:	10c0002d 	sthio	r3,0(r2)
}
 1000718:	0001883a 	nop
 100071c:	e037883a 	mov	sp,fp
 1000720:	df000017 	ldw	fp,0(sp)
 1000724:	dec00104 	addi	sp,sp,4
 1000728:	f800283a 	ret

0100072c <LCD_Write_Data>:

void LCD_Write_Data(int data) {
 100072c:	defffe04 	addi	sp,sp,-8
 1000730:	df000115 	stw	fp,4(sp)
 1000734:	df000104 	addi	fp,sp,4
 1000738:	e13fff15 	stw	r4,-4(fp)
  IOWR_16DIRECT(LCD_BASE,0x01,data);
 100073c:	00808034 	movhi	r2,512
 1000740:	108c2e44 	addi	r2,r2,12473
 1000744:	e0ffff0b 	ldhu	r3,-4(fp)
 1000748:	10c0002d 	sthio	r3,0(r2)
}
 100074c:	0001883a 	nop
 1000750:	e037883a 	mov	sp,fp
 1000754:	df000017 	ldw	fp,0(sp)
 1000758:	dec00104 	addi	sp,sp,4
 100075c:	f800283a 	ret

01000760 <_puts_r>:
 1000760:	defff604 	addi	sp,sp,-40
 1000764:	dc000715 	stw	r16,28(sp)
 1000768:	2021883a 	mov	r16,r4
 100076c:	2809883a 	mov	r4,r5
 1000770:	dc400815 	stw	r17,32(sp)
 1000774:	dfc00915 	stw	ra,36(sp)
 1000778:	2823883a 	mov	r17,r5
 100077c:	10008340 	call	1000834 <strlen>
 1000780:	10c00044 	addi	r3,r2,1
 1000784:	d8800115 	stw	r2,4(sp)
 1000788:	008041f4 	movhi	r2,263
 100078c:	1099a104 	addi	r2,r2,26244
 1000790:	d8800215 	stw	r2,8(sp)
 1000794:	00800044 	movi	r2,1
 1000798:	d8800315 	stw	r2,12(sp)
 100079c:	00800084 	movi	r2,2
 10007a0:	dc400015 	stw	r17,0(sp)
 10007a4:	d8c00615 	stw	r3,24(sp)
 10007a8:	dec00415 	stw	sp,16(sp)
 10007ac:	d8800515 	stw	r2,20(sp)
 10007b0:	80000226 	beq	r16,zero,10007bc <_puts_r+0x5c>
 10007b4:	80800e17 	ldw	r2,56(r16)
 10007b8:	10001426 	beq	r2,zero,100080c <_puts_r+0xac>
 10007bc:	81400217 	ldw	r5,8(r16)
 10007c0:	2880030b 	ldhu	r2,12(r5)
 10007c4:	10c8000c 	andi	r3,r2,8192
 10007c8:	1800061e 	bne	r3,zero,10007e4 <_puts_r+0x84>
 10007cc:	29001917 	ldw	r4,100(r5)
 10007d0:	00f7ffc4 	movi	r3,-8193
 10007d4:	10880014 	ori	r2,r2,8192
 10007d8:	20c6703a 	and	r3,r4,r3
 10007dc:	2880030d 	sth	r2,12(r5)
 10007e0:	28c01915 	stw	r3,100(r5)
 10007e4:	d9800404 	addi	r6,sp,16
 10007e8:	8009883a 	mov	r4,r16
 10007ec:	1000c6c0 	call	1000c6c <__sfvwrite_r>
 10007f0:	1000091e 	bne	r2,zero,1000818 <_puts_r+0xb8>
 10007f4:	00800284 	movi	r2,10
 10007f8:	dfc00917 	ldw	ra,36(sp)
 10007fc:	dc400817 	ldw	r17,32(sp)
 1000800:	dc000717 	ldw	r16,28(sp)
 1000804:	dec00a04 	addi	sp,sp,40
 1000808:	f800283a 	ret
 100080c:	8009883a 	mov	r4,r16
 1000810:	1000c1c0 	call	1000c1c <__sinit>
 1000814:	003fe906 	br	10007bc <__alt_mem_TCDM+0xfefff7bc>
 1000818:	00bfffc4 	movi	r2,-1
 100081c:	003ff606 	br	10007f8 <__alt_mem_TCDM+0xfefff7f8>

01000820 <puts>:
 1000820:	00804234 	movhi	r2,264
 1000824:	10a04204 	addi	r2,r2,-32504
 1000828:	200b883a 	mov	r5,r4
 100082c:	11000017 	ldw	r4,0(r2)
 1000830:	10007601 	jmpi	1000760 <_puts_r>

01000834 <strlen>:
 1000834:	208000cc 	andi	r2,r4,3
 1000838:	10002026 	beq	r2,zero,10008bc <strlen+0x88>
 100083c:	20800007 	ldb	r2,0(r4)
 1000840:	10002026 	beq	r2,zero,10008c4 <strlen+0x90>
 1000844:	2005883a 	mov	r2,r4
 1000848:	00000206 	br	1000854 <strlen+0x20>
 100084c:	10c00007 	ldb	r3,0(r2)
 1000850:	18001826 	beq	r3,zero,10008b4 <strlen+0x80>
 1000854:	10800044 	addi	r2,r2,1
 1000858:	10c000cc 	andi	r3,r2,3
 100085c:	183ffb1e 	bne	r3,zero,100084c <__alt_mem_TCDM+0xfefff84c>
 1000860:	10c00017 	ldw	r3,0(r2)
 1000864:	01ffbff4 	movhi	r7,65279
 1000868:	39ffbfc4 	addi	r7,r7,-257
 100086c:	00ca303a 	nor	r5,zero,r3
 1000870:	01a02074 	movhi	r6,32897
 1000874:	19c7883a 	add	r3,r3,r7
 1000878:	31a02004 	addi	r6,r6,-32640
 100087c:	1946703a 	and	r3,r3,r5
 1000880:	1986703a 	and	r3,r3,r6
 1000884:	1800091e 	bne	r3,zero,10008ac <strlen+0x78>
 1000888:	10800104 	addi	r2,r2,4
 100088c:	10c00017 	ldw	r3,0(r2)
 1000890:	19cb883a 	add	r5,r3,r7
 1000894:	00c6303a 	nor	r3,zero,r3
 1000898:	28c6703a 	and	r3,r5,r3
 100089c:	1986703a 	and	r3,r3,r6
 10008a0:	183ff926 	beq	r3,zero,1000888 <__alt_mem_TCDM+0xfefff888>
 10008a4:	00000106 	br	10008ac <strlen+0x78>
 10008a8:	10800044 	addi	r2,r2,1
 10008ac:	10c00007 	ldb	r3,0(r2)
 10008b0:	183ffd1e 	bne	r3,zero,10008a8 <__alt_mem_TCDM+0xfefff8a8>
 10008b4:	1105c83a 	sub	r2,r2,r4
 10008b8:	f800283a 	ret
 10008bc:	2005883a 	mov	r2,r4
 10008c0:	003fe706 	br	1000860 <__alt_mem_TCDM+0xfefff860>
 10008c4:	0005883a 	mov	r2,zero
 10008c8:	f800283a 	ret

010008cc <__fp_unlock>:
 10008cc:	0005883a 	mov	r2,zero
 10008d0:	f800283a 	ret

010008d4 <_cleanup_r>:
 10008d4:	01404034 	movhi	r5,256
 10008d8:	294a1a04 	addi	r5,r5,10344
 10008dc:	10011ec1 	jmpi	10011ec <_fwalk_reent>

010008e0 <__sinit.part.1>:
 10008e0:	defff704 	addi	sp,sp,-36
 10008e4:	00c04034 	movhi	r3,256
 10008e8:	dfc00815 	stw	ra,32(sp)
 10008ec:	ddc00715 	stw	r23,28(sp)
 10008f0:	dd800615 	stw	r22,24(sp)
 10008f4:	dd400515 	stw	r21,20(sp)
 10008f8:	dd000415 	stw	r20,16(sp)
 10008fc:	dcc00315 	stw	r19,12(sp)
 1000900:	dc800215 	stw	r18,8(sp)
 1000904:	dc400115 	stw	r17,4(sp)
 1000908:	dc000015 	stw	r16,0(sp)
 100090c:	18c23504 	addi	r3,r3,2260
 1000910:	24000117 	ldw	r16,4(r4)
 1000914:	20c00f15 	stw	r3,60(r4)
 1000918:	2080bb04 	addi	r2,r4,748
 100091c:	00c000c4 	movi	r3,3
 1000920:	20c0b915 	stw	r3,740(r4)
 1000924:	2080ba15 	stw	r2,744(r4)
 1000928:	2000b815 	stw	zero,736(r4)
 100092c:	05c00204 	movi	r23,8
 1000930:	00800104 	movi	r2,4
 1000934:	2025883a 	mov	r18,r4
 1000938:	b80d883a 	mov	r6,r23
 100093c:	81001704 	addi	r4,r16,92
 1000940:	000b883a 	mov	r5,zero
 1000944:	80000015 	stw	zero,0(r16)
 1000948:	80000115 	stw	zero,4(r16)
 100094c:	80000215 	stw	zero,8(r16)
 1000950:	8080030d 	sth	r2,12(r16)
 1000954:	80001915 	stw	zero,100(r16)
 1000958:	8000038d 	sth	zero,14(r16)
 100095c:	80000415 	stw	zero,16(r16)
 1000960:	80000515 	stw	zero,20(r16)
 1000964:	80000615 	stw	zero,24(r16)
 1000968:	1001e440 	call	1001e44 <memset>
 100096c:	05804034 	movhi	r22,256
 1000970:	94400217 	ldw	r17,8(r18)
 1000974:	05404034 	movhi	r21,256
 1000978:	05004034 	movhi	r20,256
 100097c:	04c04034 	movhi	r19,256
 1000980:	b5894904 	addi	r22,r22,9508
 1000984:	ad496004 	addi	r21,r21,9600
 1000988:	a5097f04 	addi	r20,r20,9724
 100098c:	9cc99604 	addi	r19,r19,9816
 1000990:	85800815 	stw	r22,32(r16)
 1000994:	85400915 	stw	r21,36(r16)
 1000998:	85000a15 	stw	r20,40(r16)
 100099c:	84c00b15 	stw	r19,44(r16)
 10009a0:	84000715 	stw	r16,28(r16)
 10009a4:	00800284 	movi	r2,10
 10009a8:	8880030d 	sth	r2,12(r17)
 10009ac:	00800044 	movi	r2,1
 10009b0:	b80d883a 	mov	r6,r23
 10009b4:	89001704 	addi	r4,r17,92
 10009b8:	000b883a 	mov	r5,zero
 10009bc:	88000015 	stw	zero,0(r17)
 10009c0:	88000115 	stw	zero,4(r17)
 10009c4:	88000215 	stw	zero,8(r17)
 10009c8:	88001915 	stw	zero,100(r17)
 10009cc:	8880038d 	sth	r2,14(r17)
 10009d0:	88000415 	stw	zero,16(r17)
 10009d4:	88000515 	stw	zero,20(r17)
 10009d8:	88000615 	stw	zero,24(r17)
 10009dc:	1001e440 	call	1001e44 <memset>
 10009e0:	94000317 	ldw	r16,12(r18)
 10009e4:	00800484 	movi	r2,18
 10009e8:	8c400715 	stw	r17,28(r17)
 10009ec:	8d800815 	stw	r22,32(r17)
 10009f0:	8d400915 	stw	r21,36(r17)
 10009f4:	8d000a15 	stw	r20,40(r17)
 10009f8:	8cc00b15 	stw	r19,44(r17)
 10009fc:	8080030d 	sth	r2,12(r16)
 1000a00:	00800084 	movi	r2,2
 1000a04:	80000015 	stw	zero,0(r16)
 1000a08:	80000115 	stw	zero,4(r16)
 1000a0c:	80000215 	stw	zero,8(r16)
 1000a10:	80001915 	stw	zero,100(r16)
 1000a14:	8080038d 	sth	r2,14(r16)
 1000a18:	80000415 	stw	zero,16(r16)
 1000a1c:	80000515 	stw	zero,20(r16)
 1000a20:	80000615 	stw	zero,24(r16)
 1000a24:	b80d883a 	mov	r6,r23
 1000a28:	000b883a 	mov	r5,zero
 1000a2c:	81001704 	addi	r4,r16,92
 1000a30:	1001e440 	call	1001e44 <memset>
 1000a34:	00800044 	movi	r2,1
 1000a38:	84000715 	stw	r16,28(r16)
 1000a3c:	85800815 	stw	r22,32(r16)
 1000a40:	85400915 	stw	r21,36(r16)
 1000a44:	85000a15 	stw	r20,40(r16)
 1000a48:	84c00b15 	stw	r19,44(r16)
 1000a4c:	90800e15 	stw	r2,56(r18)
 1000a50:	dfc00817 	ldw	ra,32(sp)
 1000a54:	ddc00717 	ldw	r23,28(sp)
 1000a58:	dd800617 	ldw	r22,24(sp)
 1000a5c:	dd400517 	ldw	r21,20(sp)
 1000a60:	dd000417 	ldw	r20,16(sp)
 1000a64:	dcc00317 	ldw	r19,12(sp)
 1000a68:	dc800217 	ldw	r18,8(sp)
 1000a6c:	dc400117 	ldw	r17,4(sp)
 1000a70:	dc000017 	ldw	r16,0(sp)
 1000a74:	dec00904 	addi	sp,sp,36
 1000a78:	f800283a 	ret

01000a7c <__fp_lock>:
 1000a7c:	0005883a 	mov	r2,zero
 1000a80:	f800283a 	ret

01000a84 <__sfmoreglue>:
 1000a84:	defffc04 	addi	sp,sp,-16
 1000a88:	dc400115 	stw	r17,4(sp)
 1000a8c:	2c7fffc4 	addi	r17,r5,-1
 1000a90:	8c401a24 	muli	r17,r17,104
 1000a94:	dc800215 	stw	r18,8(sp)
 1000a98:	2825883a 	mov	r18,r5
 1000a9c:	89401d04 	addi	r5,r17,116
 1000aa0:	dc000015 	stw	r16,0(sp)
 1000aa4:	dfc00315 	stw	ra,12(sp)
 1000aa8:	10012b00 	call	10012b0 <_malloc_r>
 1000aac:	1021883a 	mov	r16,r2
 1000ab0:	10000726 	beq	r2,zero,1000ad0 <__sfmoreglue+0x4c>
 1000ab4:	11000304 	addi	r4,r2,12
 1000ab8:	10000015 	stw	zero,0(r2)
 1000abc:	14800115 	stw	r18,4(r2)
 1000ac0:	11000215 	stw	r4,8(r2)
 1000ac4:	89801a04 	addi	r6,r17,104
 1000ac8:	000b883a 	mov	r5,zero
 1000acc:	1001e440 	call	1001e44 <memset>
 1000ad0:	8005883a 	mov	r2,r16
 1000ad4:	dfc00317 	ldw	ra,12(sp)
 1000ad8:	dc800217 	ldw	r18,8(sp)
 1000adc:	dc400117 	ldw	r17,4(sp)
 1000ae0:	dc000017 	ldw	r16,0(sp)
 1000ae4:	dec00404 	addi	sp,sp,16
 1000ae8:	f800283a 	ret

01000aec <__sfp>:
 1000aec:	defffb04 	addi	sp,sp,-20
 1000af0:	dc000015 	stw	r16,0(sp)
 1000af4:	04004234 	movhi	r16,264
 1000af8:	84204104 	addi	r16,r16,-32508
 1000afc:	dcc00315 	stw	r19,12(sp)
 1000b00:	2027883a 	mov	r19,r4
 1000b04:	81000017 	ldw	r4,0(r16)
 1000b08:	dfc00415 	stw	ra,16(sp)
 1000b0c:	dc800215 	stw	r18,8(sp)
 1000b10:	20800e17 	ldw	r2,56(r4)
 1000b14:	dc400115 	stw	r17,4(sp)
 1000b18:	1000021e 	bne	r2,zero,1000b24 <__sfp+0x38>
 1000b1c:	10008e00 	call	10008e0 <__sinit.part.1>
 1000b20:	81000017 	ldw	r4,0(r16)
 1000b24:	2480b804 	addi	r18,r4,736
 1000b28:	047fffc4 	movi	r17,-1
 1000b2c:	91000117 	ldw	r4,4(r18)
 1000b30:	94000217 	ldw	r16,8(r18)
 1000b34:	213fffc4 	addi	r4,r4,-1
 1000b38:	20000a16 	blt	r4,zero,1000b64 <__sfp+0x78>
 1000b3c:	8080030f 	ldh	r2,12(r16)
 1000b40:	10000c26 	beq	r2,zero,1000b74 <__sfp+0x88>
 1000b44:	80c01d04 	addi	r3,r16,116
 1000b48:	00000206 	br	1000b54 <__sfp+0x68>
 1000b4c:	18bfe60f 	ldh	r2,-104(r3)
 1000b50:	10000826 	beq	r2,zero,1000b74 <__sfp+0x88>
 1000b54:	213fffc4 	addi	r4,r4,-1
 1000b58:	1c3ffd04 	addi	r16,r3,-12
 1000b5c:	18c01a04 	addi	r3,r3,104
 1000b60:	247ffa1e 	bne	r4,r17,1000b4c <__alt_mem_TCDM+0xfefffb4c>
 1000b64:	90800017 	ldw	r2,0(r18)
 1000b68:	10001d26 	beq	r2,zero,1000be0 <__sfp+0xf4>
 1000b6c:	1025883a 	mov	r18,r2
 1000b70:	003fee06 	br	1000b2c <__alt_mem_TCDM+0xfefffb2c>
 1000b74:	00bfffc4 	movi	r2,-1
 1000b78:	8080038d 	sth	r2,14(r16)
 1000b7c:	00800044 	movi	r2,1
 1000b80:	8080030d 	sth	r2,12(r16)
 1000b84:	80001915 	stw	zero,100(r16)
 1000b88:	80000015 	stw	zero,0(r16)
 1000b8c:	80000215 	stw	zero,8(r16)
 1000b90:	80000115 	stw	zero,4(r16)
 1000b94:	80000415 	stw	zero,16(r16)
 1000b98:	80000515 	stw	zero,20(r16)
 1000b9c:	80000615 	stw	zero,24(r16)
 1000ba0:	01800204 	movi	r6,8
 1000ba4:	000b883a 	mov	r5,zero
 1000ba8:	81001704 	addi	r4,r16,92
 1000bac:	1001e440 	call	1001e44 <memset>
 1000bb0:	8005883a 	mov	r2,r16
 1000bb4:	80000c15 	stw	zero,48(r16)
 1000bb8:	80000d15 	stw	zero,52(r16)
 1000bbc:	80001115 	stw	zero,68(r16)
 1000bc0:	80001215 	stw	zero,72(r16)
 1000bc4:	dfc00417 	ldw	ra,16(sp)
 1000bc8:	dcc00317 	ldw	r19,12(sp)
 1000bcc:	dc800217 	ldw	r18,8(sp)
 1000bd0:	dc400117 	ldw	r17,4(sp)
 1000bd4:	dc000017 	ldw	r16,0(sp)
 1000bd8:	dec00504 	addi	sp,sp,20
 1000bdc:	f800283a 	ret
 1000be0:	01400104 	movi	r5,4
 1000be4:	9809883a 	mov	r4,r19
 1000be8:	1000a840 	call	1000a84 <__sfmoreglue>
 1000bec:	90800015 	stw	r2,0(r18)
 1000bf0:	103fde1e 	bne	r2,zero,1000b6c <__alt_mem_TCDM+0xfefffb6c>
 1000bf4:	00800304 	movi	r2,12
 1000bf8:	98800015 	stw	r2,0(r19)
 1000bfc:	0005883a 	mov	r2,zero
 1000c00:	003ff006 	br	1000bc4 <__alt_mem_TCDM+0xfefffbc4>

01000c04 <_cleanup>:
 1000c04:	00804234 	movhi	r2,264
 1000c08:	10a04104 	addi	r2,r2,-32508
 1000c0c:	11000017 	ldw	r4,0(r2)
 1000c10:	01404034 	movhi	r5,256
 1000c14:	294a1a04 	addi	r5,r5,10344
 1000c18:	10011ec1 	jmpi	10011ec <_fwalk_reent>

01000c1c <__sinit>:
 1000c1c:	20800e17 	ldw	r2,56(r4)
 1000c20:	10000126 	beq	r2,zero,1000c28 <__sinit+0xc>
 1000c24:	f800283a 	ret
 1000c28:	10008e01 	jmpi	10008e0 <__sinit.part.1>

01000c2c <__sfp_lock_acquire>:
 1000c2c:	f800283a 	ret

01000c30 <__sfp_lock_release>:
 1000c30:	f800283a 	ret

01000c34 <__sinit_lock_acquire>:
 1000c34:	f800283a 	ret

01000c38 <__sinit_lock_release>:
 1000c38:	f800283a 	ret

01000c3c <__fp_lock_all>:
 1000c3c:	00804234 	movhi	r2,264
 1000c40:	10a04204 	addi	r2,r2,-32504
 1000c44:	11000017 	ldw	r4,0(r2)
 1000c48:	01404034 	movhi	r5,256
 1000c4c:	29429f04 	addi	r5,r5,2684
 1000c50:	10011281 	jmpi	1001128 <_fwalk>

01000c54 <__fp_unlock_all>:
 1000c54:	00804234 	movhi	r2,264
 1000c58:	10a04204 	addi	r2,r2,-32504
 1000c5c:	11000017 	ldw	r4,0(r2)
 1000c60:	01404034 	movhi	r5,256
 1000c64:	29423304 	addi	r5,r5,2252
 1000c68:	10011281 	jmpi	1001128 <_fwalk>

01000c6c <__sfvwrite_r>:
 1000c6c:	30800217 	ldw	r2,8(r6)
 1000c70:	10006726 	beq	r2,zero,1000e10 <__sfvwrite_r+0x1a4>
 1000c74:	28c0030b 	ldhu	r3,12(r5)
 1000c78:	defff404 	addi	sp,sp,-48
 1000c7c:	dd400715 	stw	r21,28(sp)
 1000c80:	dd000615 	stw	r20,24(sp)
 1000c84:	dc000215 	stw	r16,8(sp)
 1000c88:	dfc00b15 	stw	ra,44(sp)
 1000c8c:	df000a15 	stw	fp,40(sp)
 1000c90:	ddc00915 	stw	r23,36(sp)
 1000c94:	dd800815 	stw	r22,32(sp)
 1000c98:	dcc00515 	stw	r19,20(sp)
 1000c9c:	dc800415 	stw	r18,16(sp)
 1000ca0:	dc400315 	stw	r17,12(sp)
 1000ca4:	1880020c 	andi	r2,r3,8
 1000ca8:	2821883a 	mov	r16,r5
 1000cac:	202b883a 	mov	r21,r4
 1000cb0:	3029883a 	mov	r20,r6
 1000cb4:	10002726 	beq	r2,zero,1000d54 <__sfvwrite_r+0xe8>
 1000cb8:	28800417 	ldw	r2,16(r5)
 1000cbc:	10002526 	beq	r2,zero,1000d54 <__sfvwrite_r+0xe8>
 1000cc0:	1880008c 	andi	r2,r3,2
 1000cc4:	a4400017 	ldw	r17,0(r20)
 1000cc8:	10002a26 	beq	r2,zero,1000d74 <__sfvwrite_r+0x108>
 1000ccc:	05a00034 	movhi	r22,32768
 1000cd0:	0027883a 	mov	r19,zero
 1000cd4:	0025883a 	mov	r18,zero
 1000cd8:	b5bf0004 	addi	r22,r22,-1024
 1000cdc:	980d883a 	mov	r6,r19
 1000ce0:	a809883a 	mov	r4,r21
 1000ce4:	90004626 	beq	r18,zero,1000e00 <__sfvwrite_r+0x194>
 1000ce8:	900f883a 	mov	r7,r18
 1000cec:	b480022e 	bgeu	r22,r18,1000cf8 <__sfvwrite_r+0x8c>
 1000cf0:	01e00034 	movhi	r7,32768
 1000cf4:	39ff0004 	addi	r7,r7,-1024
 1000cf8:	80800917 	ldw	r2,36(r16)
 1000cfc:	81400717 	ldw	r5,28(r16)
 1000d00:	103ee83a 	callr	r2
 1000d04:	0080570e 	bge	zero,r2,1000e64 <__sfvwrite_r+0x1f8>
 1000d08:	a0c00217 	ldw	r3,8(r20)
 1000d0c:	98a7883a 	add	r19,r19,r2
 1000d10:	90a5c83a 	sub	r18,r18,r2
 1000d14:	1885c83a 	sub	r2,r3,r2
 1000d18:	a0800215 	stw	r2,8(r20)
 1000d1c:	103fef1e 	bne	r2,zero,1000cdc <__alt_mem_TCDM+0xfefffcdc>
 1000d20:	0005883a 	mov	r2,zero
 1000d24:	dfc00b17 	ldw	ra,44(sp)
 1000d28:	df000a17 	ldw	fp,40(sp)
 1000d2c:	ddc00917 	ldw	r23,36(sp)
 1000d30:	dd800817 	ldw	r22,32(sp)
 1000d34:	dd400717 	ldw	r21,28(sp)
 1000d38:	dd000617 	ldw	r20,24(sp)
 1000d3c:	dcc00517 	ldw	r19,20(sp)
 1000d40:	dc800417 	ldw	r18,16(sp)
 1000d44:	dc400317 	ldw	r17,12(sp)
 1000d48:	dc000217 	ldw	r16,8(sp)
 1000d4c:	dec00c04 	addi	sp,sp,48
 1000d50:	f800283a 	ret
 1000d54:	800b883a 	mov	r5,r16
 1000d58:	a809883a 	mov	r4,r21
 1000d5c:	10026c00 	call	10026c0 <__swsetup_r>
 1000d60:	1000eb1e 	bne	r2,zero,1001110 <__sfvwrite_r+0x4a4>
 1000d64:	80c0030b 	ldhu	r3,12(r16)
 1000d68:	a4400017 	ldw	r17,0(r20)
 1000d6c:	1880008c 	andi	r2,r3,2
 1000d70:	103fd61e 	bne	r2,zero,1000ccc <__alt_mem_TCDM+0xfefffccc>
 1000d74:	1880004c 	andi	r2,r3,1
 1000d78:	10003f1e 	bne	r2,zero,1000e78 <__sfvwrite_r+0x20c>
 1000d7c:	0039883a 	mov	fp,zero
 1000d80:	0025883a 	mov	r18,zero
 1000d84:	90001a26 	beq	r18,zero,1000df0 <__sfvwrite_r+0x184>
 1000d88:	1880800c 	andi	r2,r3,512
 1000d8c:	84c00217 	ldw	r19,8(r16)
 1000d90:	10002126 	beq	r2,zero,1000e18 <__sfvwrite_r+0x1ac>
 1000d94:	982f883a 	mov	r23,r19
 1000d98:	94c09336 	bltu	r18,r19,1000fe8 <__sfvwrite_r+0x37c>
 1000d9c:	1881200c 	andi	r2,r3,1152
 1000da0:	10009e1e 	bne	r2,zero,100101c <__sfvwrite_r+0x3b0>
 1000da4:	81000017 	ldw	r4,0(r16)
 1000da8:	b80d883a 	mov	r6,r23
 1000dac:	e00b883a 	mov	r5,fp
 1000db0:	1001ce80 	call	1001ce8 <memmove>
 1000db4:	80c00217 	ldw	r3,8(r16)
 1000db8:	81000017 	ldw	r4,0(r16)
 1000dbc:	9005883a 	mov	r2,r18
 1000dc0:	1ce7c83a 	sub	r19,r3,r19
 1000dc4:	25cf883a 	add	r7,r4,r23
 1000dc8:	84c00215 	stw	r19,8(r16)
 1000dcc:	81c00015 	stw	r7,0(r16)
 1000dd0:	a0c00217 	ldw	r3,8(r20)
 1000dd4:	e0b9883a 	add	fp,fp,r2
 1000dd8:	90a5c83a 	sub	r18,r18,r2
 1000ddc:	18a7c83a 	sub	r19,r3,r2
 1000de0:	a4c00215 	stw	r19,8(r20)
 1000de4:	983fce26 	beq	r19,zero,1000d20 <__alt_mem_TCDM+0xfefffd20>
 1000de8:	80c0030b 	ldhu	r3,12(r16)
 1000dec:	903fe61e 	bne	r18,zero,1000d88 <__alt_mem_TCDM+0xfefffd88>
 1000df0:	8f000017 	ldw	fp,0(r17)
 1000df4:	8c800117 	ldw	r18,4(r17)
 1000df8:	8c400204 	addi	r17,r17,8
 1000dfc:	003fe106 	br	1000d84 <__alt_mem_TCDM+0xfefffd84>
 1000e00:	8cc00017 	ldw	r19,0(r17)
 1000e04:	8c800117 	ldw	r18,4(r17)
 1000e08:	8c400204 	addi	r17,r17,8
 1000e0c:	003fb306 	br	1000cdc <__alt_mem_TCDM+0xfefffcdc>
 1000e10:	0005883a 	mov	r2,zero
 1000e14:	f800283a 	ret
 1000e18:	81000017 	ldw	r4,0(r16)
 1000e1c:	80800417 	ldw	r2,16(r16)
 1000e20:	11005736 	bltu	r2,r4,1000f80 <__sfvwrite_r+0x314>
 1000e24:	85c00517 	ldw	r23,20(r16)
 1000e28:	95c05536 	bltu	r18,r23,1000f80 <__sfvwrite_r+0x314>
 1000e2c:	00a00034 	movhi	r2,32768
 1000e30:	10bfffc4 	addi	r2,r2,-1
 1000e34:	9009883a 	mov	r4,r18
 1000e38:	1480012e 	bgeu	r2,r18,1000e40 <__sfvwrite_r+0x1d4>
 1000e3c:	1009883a 	mov	r4,r2
 1000e40:	b80b883a 	mov	r5,r23
 1000e44:	10033740 	call	1003374 <__divsi3>
 1000e48:	15cf383a 	mul	r7,r2,r23
 1000e4c:	81400717 	ldw	r5,28(r16)
 1000e50:	80800917 	ldw	r2,36(r16)
 1000e54:	e00d883a 	mov	r6,fp
 1000e58:	a809883a 	mov	r4,r21
 1000e5c:	103ee83a 	callr	r2
 1000e60:	00bfdb16 	blt	zero,r2,1000dd0 <__alt_mem_TCDM+0xfefffdd0>
 1000e64:	8080030b 	ldhu	r2,12(r16)
 1000e68:	10801014 	ori	r2,r2,64
 1000e6c:	8080030d 	sth	r2,12(r16)
 1000e70:	00bfffc4 	movi	r2,-1
 1000e74:	003fab06 	br	1000d24 <__alt_mem_TCDM+0xfefffd24>
 1000e78:	0027883a 	mov	r19,zero
 1000e7c:	0011883a 	mov	r8,zero
 1000e80:	0039883a 	mov	fp,zero
 1000e84:	0025883a 	mov	r18,zero
 1000e88:	90001f26 	beq	r18,zero,1000f08 <__sfvwrite_r+0x29c>
 1000e8c:	40005a26 	beq	r8,zero,1000ff8 <__sfvwrite_r+0x38c>
 1000e90:	982d883a 	mov	r22,r19
 1000e94:	94c0012e 	bgeu	r18,r19,1000e9c <__sfvwrite_r+0x230>
 1000e98:	902d883a 	mov	r22,r18
 1000e9c:	81000017 	ldw	r4,0(r16)
 1000ea0:	80800417 	ldw	r2,16(r16)
 1000ea4:	b02f883a 	mov	r23,r22
 1000ea8:	81c00517 	ldw	r7,20(r16)
 1000eac:	1100032e 	bgeu	r2,r4,1000ebc <__sfvwrite_r+0x250>
 1000eb0:	80c00217 	ldw	r3,8(r16)
 1000eb4:	38c7883a 	add	r3,r7,r3
 1000eb8:	1d801816 	blt	r3,r22,1000f1c <__sfvwrite_r+0x2b0>
 1000ebc:	b1c03e16 	blt	r22,r7,1000fb8 <__sfvwrite_r+0x34c>
 1000ec0:	80800917 	ldw	r2,36(r16)
 1000ec4:	81400717 	ldw	r5,28(r16)
 1000ec8:	e00d883a 	mov	r6,fp
 1000ecc:	da000115 	stw	r8,4(sp)
 1000ed0:	a809883a 	mov	r4,r21
 1000ed4:	103ee83a 	callr	r2
 1000ed8:	102f883a 	mov	r23,r2
 1000edc:	da000117 	ldw	r8,4(sp)
 1000ee0:	00bfe00e 	bge	zero,r2,1000e64 <__alt_mem_TCDM+0xfefffe64>
 1000ee4:	9de7c83a 	sub	r19,r19,r23
 1000ee8:	98001f26 	beq	r19,zero,1000f68 <__sfvwrite_r+0x2fc>
 1000eec:	a0800217 	ldw	r2,8(r20)
 1000ef0:	e5f9883a 	add	fp,fp,r23
 1000ef4:	95e5c83a 	sub	r18,r18,r23
 1000ef8:	15efc83a 	sub	r23,r2,r23
 1000efc:	a5c00215 	stw	r23,8(r20)
 1000f00:	b83f8726 	beq	r23,zero,1000d20 <__alt_mem_TCDM+0xfefffd20>
 1000f04:	903fe11e 	bne	r18,zero,1000e8c <__alt_mem_TCDM+0xfefffe8c>
 1000f08:	8f000017 	ldw	fp,0(r17)
 1000f0c:	8c800117 	ldw	r18,4(r17)
 1000f10:	0011883a 	mov	r8,zero
 1000f14:	8c400204 	addi	r17,r17,8
 1000f18:	003fdb06 	br	1000e88 <__alt_mem_TCDM+0xfefffe88>
 1000f1c:	180d883a 	mov	r6,r3
 1000f20:	e00b883a 	mov	r5,fp
 1000f24:	da000115 	stw	r8,4(sp)
 1000f28:	d8c00015 	stw	r3,0(sp)
 1000f2c:	1001ce80 	call	1001ce8 <memmove>
 1000f30:	d8c00017 	ldw	r3,0(sp)
 1000f34:	80800017 	ldw	r2,0(r16)
 1000f38:	800b883a 	mov	r5,r16
 1000f3c:	a809883a 	mov	r4,r21
 1000f40:	10c5883a 	add	r2,r2,r3
 1000f44:	80800015 	stw	r2,0(r16)
 1000f48:	d8c00015 	stw	r3,0(sp)
 1000f4c:	1002b880 	call	1002b88 <_fflush_r>
 1000f50:	d8c00017 	ldw	r3,0(sp)
 1000f54:	da000117 	ldw	r8,4(sp)
 1000f58:	103fc21e 	bne	r2,zero,1000e64 <__alt_mem_TCDM+0xfefffe64>
 1000f5c:	182f883a 	mov	r23,r3
 1000f60:	9de7c83a 	sub	r19,r19,r23
 1000f64:	983fe11e 	bne	r19,zero,1000eec <__alt_mem_TCDM+0xfefffeec>
 1000f68:	800b883a 	mov	r5,r16
 1000f6c:	a809883a 	mov	r4,r21
 1000f70:	1002b880 	call	1002b88 <_fflush_r>
 1000f74:	103fbb1e 	bne	r2,zero,1000e64 <__alt_mem_TCDM+0xfefffe64>
 1000f78:	0011883a 	mov	r8,zero
 1000f7c:	003fdb06 	br	1000eec <__alt_mem_TCDM+0xfefffeec>
 1000f80:	94c0012e 	bgeu	r18,r19,1000f88 <__sfvwrite_r+0x31c>
 1000f84:	9027883a 	mov	r19,r18
 1000f88:	980d883a 	mov	r6,r19
 1000f8c:	e00b883a 	mov	r5,fp
 1000f90:	1001ce80 	call	1001ce8 <memmove>
 1000f94:	80800217 	ldw	r2,8(r16)
 1000f98:	80c00017 	ldw	r3,0(r16)
 1000f9c:	14c5c83a 	sub	r2,r2,r19
 1000fa0:	1cc7883a 	add	r3,r3,r19
 1000fa4:	80800215 	stw	r2,8(r16)
 1000fa8:	80c00015 	stw	r3,0(r16)
 1000fac:	10004326 	beq	r2,zero,10010bc <__sfvwrite_r+0x450>
 1000fb0:	9805883a 	mov	r2,r19
 1000fb4:	003f8606 	br	1000dd0 <__alt_mem_TCDM+0xfefffdd0>
 1000fb8:	b00d883a 	mov	r6,r22
 1000fbc:	e00b883a 	mov	r5,fp
 1000fc0:	da000115 	stw	r8,4(sp)
 1000fc4:	1001ce80 	call	1001ce8 <memmove>
 1000fc8:	80800217 	ldw	r2,8(r16)
 1000fcc:	80c00017 	ldw	r3,0(r16)
 1000fd0:	da000117 	ldw	r8,4(sp)
 1000fd4:	1585c83a 	sub	r2,r2,r22
 1000fd8:	1dad883a 	add	r22,r3,r22
 1000fdc:	80800215 	stw	r2,8(r16)
 1000fe0:	85800015 	stw	r22,0(r16)
 1000fe4:	003fbf06 	br	1000ee4 <__alt_mem_TCDM+0xfefffee4>
 1000fe8:	81000017 	ldw	r4,0(r16)
 1000fec:	9027883a 	mov	r19,r18
 1000ff0:	902f883a 	mov	r23,r18
 1000ff4:	003f6c06 	br	1000da8 <__alt_mem_TCDM+0xfefffda8>
 1000ff8:	900d883a 	mov	r6,r18
 1000ffc:	01400284 	movi	r5,10
 1001000:	e009883a 	mov	r4,fp
 1001004:	1001abc0 	call	1001abc <memchr>
 1001008:	10003e26 	beq	r2,zero,1001104 <__sfvwrite_r+0x498>
 100100c:	10800044 	addi	r2,r2,1
 1001010:	1727c83a 	sub	r19,r2,fp
 1001014:	02000044 	movi	r8,1
 1001018:	003f9d06 	br	1000e90 <__alt_mem_TCDM+0xfefffe90>
 100101c:	80800517 	ldw	r2,20(r16)
 1001020:	81400417 	ldw	r5,16(r16)
 1001024:	81c00017 	ldw	r7,0(r16)
 1001028:	10a7883a 	add	r19,r2,r2
 100102c:	9885883a 	add	r2,r19,r2
 1001030:	1026d7fa 	srli	r19,r2,31
 1001034:	396dc83a 	sub	r22,r7,r5
 1001038:	b1000044 	addi	r4,r22,1
 100103c:	9885883a 	add	r2,r19,r2
 1001040:	1027d07a 	srai	r19,r2,1
 1001044:	2485883a 	add	r2,r4,r18
 1001048:	980d883a 	mov	r6,r19
 100104c:	9880022e 	bgeu	r19,r2,1001058 <__sfvwrite_r+0x3ec>
 1001050:	1027883a 	mov	r19,r2
 1001054:	100d883a 	mov	r6,r2
 1001058:	18c1000c 	andi	r3,r3,1024
 100105c:	18001c26 	beq	r3,zero,10010d0 <__sfvwrite_r+0x464>
 1001060:	300b883a 	mov	r5,r6
 1001064:	a809883a 	mov	r4,r21
 1001068:	10012b00 	call	10012b0 <_malloc_r>
 100106c:	102f883a 	mov	r23,r2
 1001070:	10002926 	beq	r2,zero,1001118 <__sfvwrite_r+0x4ac>
 1001074:	81400417 	ldw	r5,16(r16)
 1001078:	b00d883a 	mov	r6,r22
 100107c:	1009883a 	mov	r4,r2
 1001080:	1001ba00 	call	1001ba0 <memcpy>
 1001084:	8080030b 	ldhu	r2,12(r16)
 1001088:	00fedfc4 	movi	r3,-1153
 100108c:	10c4703a 	and	r2,r2,r3
 1001090:	10802014 	ori	r2,r2,128
 1001094:	8080030d 	sth	r2,12(r16)
 1001098:	bd89883a 	add	r4,r23,r22
 100109c:	9d8fc83a 	sub	r7,r19,r22
 10010a0:	85c00415 	stw	r23,16(r16)
 10010a4:	84c00515 	stw	r19,20(r16)
 10010a8:	81000015 	stw	r4,0(r16)
 10010ac:	9027883a 	mov	r19,r18
 10010b0:	81c00215 	stw	r7,8(r16)
 10010b4:	902f883a 	mov	r23,r18
 10010b8:	003f3b06 	br	1000da8 <__alt_mem_TCDM+0xfefffda8>
 10010bc:	800b883a 	mov	r5,r16
 10010c0:	a809883a 	mov	r4,r21
 10010c4:	1002b880 	call	1002b88 <_fflush_r>
 10010c8:	103fb926 	beq	r2,zero,1000fb0 <__alt_mem_TCDM+0xfeffffb0>
 10010cc:	003f6506 	br	1000e64 <__alt_mem_TCDM+0xfefffe64>
 10010d0:	a809883a 	mov	r4,r21
 10010d4:	1001f6c0 	call	1001f6c <_realloc_r>
 10010d8:	102f883a 	mov	r23,r2
 10010dc:	103fee1e 	bne	r2,zero,1001098 <__alt_mem_TCDM+0xff000098>
 10010e0:	81400417 	ldw	r5,16(r16)
 10010e4:	a809883a 	mov	r4,r21
 10010e8:	1002d380 	call	1002d38 <_free_r>
 10010ec:	8080030b 	ldhu	r2,12(r16)
 10010f0:	00ffdfc4 	movi	r3,-129
 10010f4:	1884703a 	and	r2,r3,r2
 10010f8:	00c00304 	movi	r3,12
 10010fc:	a8c00015 	stw	r3,0(r21)
 1001100:	003f5906 	br	1000e68 <__alt_mem_TCDM+0xfefffe68>
 1001104:	94c00044 	addi	r19,r18,1
 1001108:	02000044 	movi	r8,1
 100110c:	003f6006 	br	1000e90 <__alt_mem_TCDM+0xfefffe90>
 1001110:	00bfffc4 	movi	r2,-1
 1001114:	003f0306 	br	1000d24 <__alt_mem_TCDM+0xfefffd24>
 1001118:	00800304 	movi	r2,12
 100111c:	a8800015 	stw	r2,0(r21)
 1001120:	8080030b 	ldhu	r2,12(r16)
 1001124:	003f5006 	br	1000e68 <__alt_mem_TCDM+0xfefffe68>

01001128 <_fwalk>:
 1001128:	defff704 	addi	sp,sp,-36
 100112c:	dd000415 	stw	r20,16(sp)
 1001130:	dfc00815 	stw	ra,32(sp)
 1001134:	ddc00715 	stw	r23,28(sp)
 1001138:	dd800615 	stw	r22,24(sp)
 100113c:	dd400515 	stw	r21,20(sp)
 1001140:	dcc00315 	stw	r19,12(sp)
 1001144:	dc800215 	stw	r18,8(sp)
 1001148:	dc400115 	stw	r17,4(sp)
 100114c:	dc000015 	stw	r16,0(sp)
 1001150:	2500b804 	addi	r20,r4,736
 1001154:	a0002326 	beq	r20,zero,10011e4 <_fwalk+0xbc>
 1001158:	282b883a 	mov	r21,r5
 100115c:	002f883a 	mov	r23,zero
 1001160:	05800044 	movi	r22,1
 1001164:	04ffffc4 	movi	r19,-1
 1001168:	a4400117 	ldw	r17,4(r20)
 100116c:	a4800217 	ldw	r18,8(r20)
 1001170:	8c7fffc4 	addi	r17,r17,-1
 1001174:	88000d16 	blt	r17,zero,10011ac <_fwalk+0x84>
 1001178:	94000304 	addi	r16,r18,12
 100117c:	94800384 	addi	r18,r18,14
 1001180:	8080000b 	ldhu	r2,0(r16)
 1001184:	8c7fffc4 	addi	r17,r17,-1
 1001188:	813ffd04 	addi	r4,r16,-12
 100118c:	b080042e 	bgeu	r22,r2,10011a0 <_fwalk+0x78>
 1001190:	9080000f 	ldh	r2,0(r18)
 1001194:	14c00226 	beq	r2,r19,10011a0 <_fwalk+0x78>
 1001198:	a83ee83a 	callr	r21
 100119c:	b8aeb03a 	or	r23,r23,r2
 10011a0:	84001a04 	addi	r16,r16,104
 10011a4:	94801a04 	addi	r18,r18,104
 10011a8:	8cfff51e 	bne	r17,r19,1001180 <__alt_mem_TCDM+0xff000180>
 10011ac:	a5000017 	ldw	r20,0(r20)
 10011b0:	a03fed1e 	bne	r20,zero,1001168 <__alt_mem_TCDM+0xff000168>
 10011b4:	b805883a 	mov	r2,r23
 10011b8:	dfc00817 	ldw	ra,32(sp)
 10011bc:	ddc00717 	ldw	r23,28(sp)
 10011c0:	dd800617 	ldw	r22,24(sp)
 10011c4:	dd400517 	ldw	r21,20(sp)
 10011c8:	dd000417 	ldw	r20,16(sp)
 10011cc:	dcc00317 	ldw	r19,12(sp)
 10011d0:	dc800217 	ldw	r18,8(sp)
 10011d4:	dc400117 	ldw	r17,4(sp)
 10011d8:	dc000017 	ldw	r16,0(sp)
 10011dc:	dec00904 	addi	sp,sp,36
 10011e0:	f800283a 	ret
 10011e4:	002f883a 	mov	r23,zero
 10011e8:	003ff206 	br	10011b4 <__alt_mem_TCDM+0xff0001b4>

010011ec <_fwalk_reent>:
 10011ec:	defff704 	addi	sp,sp,-36
 10011f0:	dd000415 	stw	r20,16(sp)
 10011f4:	dfc00815 	stw	ra,32(sp)
 10011f8:	ddc00715 	stw	r23,28(sp)
 10011fc:	dd800615 	stw	r22,24(sp)
 1001200:	dd400515 	stw	r21,20(sp)
 1001204:	dcc00315 	stw	r19,12(sp)
 1001208:	dc800215 	stw	r18,8(sp)
 100120c:	dc400115 	stw	r17,4(sp)
 1001210:	dc000015 	stw	r16,0(sp)
 1001214:	2500b804 	addi	r20,r4,736
 1001218:	a0002326 	beq	r20,zero,10012a8 <_fwalk_reent+0xbc>
 100121c:	282b883a 	mov	r21,r5
 1001220:	2027883a 	mov	r19,r4
 1001224:	002f883a 	mov	r23,zero
 1001228:	05800044 	movi	r22,1
 100122c:	04bfffc4 	movi	r18,-1
 1001230:	a4400117 	ldw	r17,4(r20)
 1001234:	a4000217 	ldw	r16,8(r20)
 1001238:	8c7fffc4 	addi	r17,r17,-1
 100123c:	88000c16 	blt	r17,zero,1001270 <_fwalk_reent+0x84>
 1001240:	84000304 	addi	r16,r16,12
 1001244:	8080000b 	ldhu	r2,0(r16)
 1001248:	8c7fffc4 	addi	r17,r17,-1
 100124c:	817ffd04 	addi	r5,r16,-12
 1001250:	b080052e 	bgeu	r22,r2,1001268 <_fwalk_reent+0x7c>
 1001254:	8080008f 	ldh	r2,2(r16)
 1001258:	9809883a 	mov	r4,r19
 100125c:	14800226 	beq	r2,r18,1001268 <_fwalk_reent+0x7c>
 1001260:	a83ee83a 	callr	r21
 1001264:	b8aeb03a 	or	r23,r23,r2
 1001268:	84001a04 	addi	r16,r16,104
 100126c:	8cbff51e 	bne	r17,r18,1001244 <__alt_mem_TCDM+0xff000244>
 1001270:	a5000017 	ldw	r20,0(r20)
 1001274:	a03fee1e 	bne	r20,zero,1001230 <__alt_mem_TCDM+0xff000230>
 1001278:	b805883a 	mov	r2,r23
 100127c:	dfc00817 	ldw	ra,32(sp)
 1001280:	ddc00717 	ldw	r23,28(sp)
 1001284:	dd800617 	ldw	r22,24(sp)
 1001288:	dd400517 	ldw	r21,20(sp)
 100128c:	dd000417 	ldw	r20,16(sp)
 1001290:	dcc00317 	ldw	r19,12(sp)
 1001294:	dc800217 	ldw	r18,8(sp)
 1001298:	dc400117 	ldw	r17,4(sp)
 100129c:	dc000017 	ldw	r16,0(sp)
 10012a0:	dec00904 	addi	sp,sp,36
 10012a4:	f800283a 	ret
 10012a8:	002f883a 	mov	r23,zero
 10012ac:	003ff206 	br	1001278 <__alt_mem_TCDM+0xff000278>

010012b0 <_malloc_r>:
 10012b0:	defff504 	addi	sp,sp,-44
 10012b4:	dc800315 	stw	r18,12(sp)
 10012b8:	dfc00a15 	stw	ra,40(sp)
 10012bc:	df000915 	stw	fp,36(sp)
 10012c0:	ddc00815 	stw	r23,32(sp)
 10012c4:	dd800715 	stw	r22,28(sp)
 10012c8:	dd400615 	stw	r21,24(sp)
 10012cc:	dd000515 	stw	r20,20(sp)
 10012d0:	dcc00415 	stw	r19,16(sp)
 10012d4:	dc400215 	stw	r17,8(sp)
 10012d8:	dc000115 	stw	r16,4(sp)
 10012dc:	288002c4 	addi	r2,r5,11
 10012e0:	00c00584 	movi	r3,22
 10012e4:	2025883a 	mov	r18,r4
 10012e8:	18807f2e 	bgeu	r3,r2,10014e8 <_malloc_r+0x238>
 10012ec:	047ffe04 	movi	r17,-8
 10012f0:	1462703a 	and	r17,r2,r17
 10012f4:	8800a316 	blt	r17,zero,1001584 <_malloc_r+0x2d4>
 10012f8:	8940a236 	bltu	r17,r5,1001584 <_malloc_r+0x2d4>
 10012fc:	1003aa40 	call	1003aa4 <__malloc_lock>
 1001300:	00807dc4 	movi	r2,503
 1001304:	1441e92e 	bgeu	r2,r17,1001aac <_malloc_r+0x7fc>
 1001308:	8804d27a 	srli	r2,r17,9
 100130c:	1000a126 	beq	r2,zero,1001594 <_malloc_r+0x2e4>
 1001310:	00c00104 	movi	r3,4
 1001314:	18811e36 	bltu	r3,r2,1001790 <_malloc_r+0x4e0>
 1001318:	8804d1ba 	srli	r2,r17,6
 100131c:	12000e44 	addi	r8,r2,57
 1001320:	11c00e04 	addi	r7,r2,56
 1001324:	4209883a 	add	r4,r8,r8
 1001328:	04c041f4 	movhi	r19,263
 100132c:	2109883a 	add	r4,r4,r4
 1001330:	9cdab704 	addi	r19,r19,27356
 1001334:	2109883a 	add	r4,r4,r4
 1001338:	9909883a 	add	r4,r19,r4
 100133c:	24000117 	ldw	r16,4(r4)
 1001340:	213ffe04 	addi	r4,r4,-8
 1001344:	24009726 	beq	r4,r16,10015a4 <_malloc_r+0x2f4>
 1001348:	80800117 	ldw	r2,4(r16)
 100134c:	01bfff04 	movi	r6,-4
 1001350:	014003c4 	movi	r5,15
 1001354:	1184703a 	and	r2,r2,r6
 1001358:	1447c83a 	sub	r3,r2,r17
 100135c:	28c00716 	blt	r5,r3,100137c <_malloc_r+0xcc>
 1001360:	1800920e 	bge	r3,zero,10015ac <_malloc_r+0x2fc>
 1001364:	84000317 	ldw	r16,12(r16)
 1001368:	24008e26 	beq	r4,r16,10015a4 <_malloc_r+0x2f4>
 100136c:	80800117 	ldw	r2,4(r16)
 1001370:	1184703a 	and	r2,r2,r6
 1001374:	1447c83a 	sub	r3,r2,r17
 1001378:	28fff90e 	bge	r5,r3,1001360 <__alt_mem_TCDM+0xff000360>
 100137c:	3809883a 	mov	r4,r7
 1001380:	018041f4 	movhi	r6,263
 1001384:	9c000417 	ldw	r16,16(r19)
 1001388:	319ab704 	addi	r6,r6,27356
 100138c:	32000204 	addi	r8,r6,8
 1001390:	82013426 	beq	r16,r8,1001864 <_malloc_r+0x5b4>
 1001394:	80c00117 	ldw	r3,4(r16)
 1001398:	00bfff04 	movi	r2,-4
 100139c:	188e703a 	and	r7,r3,r2
 10013a0:	3c45c83a 	sub	r2,r7,r17
 10013a4:	00c003c4 	movi	r3,15
 10013a8:	18811f16 	blt	r3,r2,1001828 <_malloc_r+0x578>
 10013ac:	32000515 	stw	r8,20(r6)
 10013b0:	32000415 	stw	r8,16(r6)
 10013b4:	10007f0e 	bge	r2,zero,10015b4 <_malloc_r+0x304>
 10013b8:	00807fc4 	movi	r2,511
 10013bc:	11c0fd36 	bltu	r2,r7,10017b4 <_malloc_r+0x504>
 10013c0:	3806d0fa 	srli	r3,r7,3
 10013c4:	01c00044 	movi	r7,1
 10013c8:	30800117 	ldw	r2,4(r6)
 10013cc:	19400044 	addi	r5,r3,1
 10013d0:	294b883a 	add	r5,r5,r5
 10013d4:	1807d0ba 	srai	r3,r3,2
 10013d8:	294b883a 	add	r5,r5,r5
 10013dc:	294b883a 	add	r5,r5,r5
 10013e0:	298b883a 	add	r5,r5,r6
 10013e4:	38c6983a 	sll	r3,r7,r3
 10013e8:	29c00017 	ldw	r7,0(r5)
 10013ec:	2a7ffe04 	addi	r9,r5,-8
 10013f0:	1886b03a 	or	r3,r3,r2
 10013f4:	82400315 	stw	r9,12(r16)
 10013f8:	81c00215 	stw	r7,8(r16)
 10013fc:	30c00115 	stw	r3,4(r6)
 1001400:	2c000015 	stw	r16,0(r5)
 1001404:	3c000315 	stw	r16,12(r7)
 1001408:	2005d0ba 	srai	r2,r4,2
 100140c:	01400044 	movi	r5,1
 1001410:	288a983a 	sll	r5,r5,r2
 1001414:	19406f36 	bltu	r3,r5,10015d4 <_malloc_r+0x324>
 1001418:	28c4703a 	and	r2,r5,r3
 100141c:	10000a1e 	bne	r2,zero,1001448 <_malloc_r+0x198>
 1001420:	00bfff04 	movi	r2,-4
 1001424:	294b883a 	add	r5,r5,r5
 1001428:	2088703a 	and	r4,r4,r2
 100142c:	28c4703a 	and	r2,r5,r3
 1001430:	21000104 	addi	r4,r4,4
 1001434:	1000041e 	bne	r2,zero,1001448 <_malloc_r+0x198>
 1001438:	294b883a 	add	r5,r5,r5
 100143c:	28c4703a 	and	r2,r5,r3
 1001440:	21000104 	addi	r4,r4,4
 1001444:	103ffc26 	beq	r2,zero,1001438 <__alt_mem_TCDM+0xff000438>
 1001448:	02bfff04 	movi	r10,-4
 100144c:	024003c4 	movi	r9,15
 1001450:	21800044 	addi	r6,r4,1
 1001454:	318d883a 	add	r6,r6,r6
 1001458:	318d883a 	add	r6,r6,r6
 100145c:	318d883a 	add	r6,r6,r6
 1001460:	998d883a 	add	r6,r19,r6
 1001464:	333ffe04 	addi	r12,r6,-8
 1001468:	2017883a 	mov	r11,r4
 100146c:	31800104 	addi	r6,r6,4
 1001470:	34000017 	ldw	r16,0(r6)
 1001474:	31fffd04 	addi	r7,r6,-12
 1001478:	81c0041e 	bne	r16,r7,100148c <_malloc_r+0x1dc>
 100147c:	0000fb06 	br	100186c <_malloc_r+0x5bc>
 1001480:	1801030e 	bge	r3,zero,1001890 <_malloc_r+0x5e0>
 1001484:	84000317 	ldw	r16,12(r16)
 1001488:	81c0f826 	beq	r16,r7,100186c <_malloc_r+0x5bc>
 100148c:	80800117 	ldw	r2,4(r16)
 1001490:	1284703a 	and	r2,r2,r10
 1001494:	1447c83a 	sub	r3,r2,r17
 1001498:	48fff90e 	bge	r9,r3,1001480 <__alt_mem_TCDM+0xff000480>
 100149c:	80800317 	ldw	r2,12(r16)
 10014a0:	81000217 	ldw	r4,8(r16)
 10014a4:	89400054 	ori	r5,r17,1
 10014a8:	81400115 	stw	r5,4(r16)
 10014ac:	20800315 	stw	r2,12(r4)
 10014b0:	11000215 	stw	r4,8(r2)
 10014b4:	8463883a 	add	r17,r16,r17
 10014b8:	9c400515 	stw	r17,20(r19)
 10014bc:	9c400415 	stw	r17,16(r19)
 10014c0:	18800054 	ori	r2,r3,1
 10014c4:	88800115 	stw	r2,4(r17)
 10014c8:	8a000315 	stw	r8,12(r17)
 10014cc:	8a000215 	stw	r8,8(r17)
 10014d0:	88e3883a 	add	r17,r17,r3
 10014d4:	88c00015 	stw	r3,0(r17)
 10014d8:	9009883a 	mov	r4,r18
 10014dc:	1003ac80 	call	1003ac8 <__malloc_unlock>
 10014e0:	80800204 	addi	r2,r16,8
 10014e4:	00001b06 	br	1001554 <_malloc_r+0x2a4>
 10014e8:	04400404 	movi	r17,16
 10014ec:	89402536 	bltu	r17,r5,1001584 <_malloc_r+0x2d4>
 10014f0:	1003aa40 	call	1003aa4 <__malloc_lock>
 10014f4:	00800184 	movi	r2,6
 10014f8:	01000084 	movi	r4,2
 10014fc:	04c041f4 	movhi	r19,263
 1001500:	1085883a 	add	r2,r2,r2
 1001504:	9cdab704 	addi	r19,r19,27356
 1001508:	1085883a 	add	r2,r2,r2
 100150c:	9885883a 	add	r2,r19,r2
 1001510:	14000117 	ldw	r16,4(r2)
 1001514:	10fffe04 	addi	r3,r2,-8
 1001518:	80c0d926 	beq	r16,r3,1001880 <_malloc_r+0x5d0>
 100151c:	80c00117 	ldw	r3,4(r16)
 1001520:	81000317 	ldw	r4,12(r16)
 1001524:	00bfff04 	movi	r2,-4
 1001528:	1884703a 	and	r2,r3,r2
 100152c:	81400217 	ldw	r5,8(r16)
 1001530:	8085883a 	add	r2,r16,r2
 1001534:	10c00117 	ldw	r3,4(r2)
 1001538:	29000315 	stw	r4,12(r5)
 100153c:	21400215 	stw	r5,8(r4)
 1001540:	18c00054 	ori	r3,r3,1
 1001544:	10c00115 	stw	r3,4(r2)
 1001548:	9009883a 	mov	r4,r18
 100154c:	1003ac80 	call	1003ac8 <__malloc_unlock>
 1001550:	80800204 	addi	r2,r16,8
 1001554:	dfc00a17 	ldw	ra,40(sp)
 1001558:	df000917 	ldw	fp,36(sp)
 100155c:	ddc00817 	ldw	r23,32(sp)
 1001560:	dd800717 	ldw	r22,28(sp)
 1001564:	dd400617 	ldw	r21,24(sp)
 1001568:	dd000517 	ldw	r20,20(sp)
 100156c:	dcc00417 	ldw	r19,16(sp)
 1001570:	dc800317 	ldw	r18,12(sp)
 1001574:	dc400217 	ldw	r17,8(sp)
 1001578:	dc000117 	ldw	r16,4(sp)
 100157c:	dec00b04 	addi	sp,sp,44
 1001580:	f800283a 	ret
 1001584:	00800304 	movi	r2,12
 1001588:	90800015 	stw	r2,0(r18)
 100158c:	0005883a 	mov	r2,zero
 1001590:	003ff006 	br	1001554 <__alt_mem_TCDM+0xff000554>
 1001594:	01002004 	movi	r4,128
 1001598:	02001004 	movi	r8,64
 100159c:	01c00fc4 	movi	r7,63
 10015a0:	003f6106 	br	1001328 <__alt_mem_TCDM+0xff000328>
 10015a4:	4009883a 	mov	r4,r8
 10015a8:	003f7506 	br	1001380 <__alt_mem_TCDM+0xff000380>
 10015ac:	81000317 	ldw	r4,12(r16)
 10015b0:	003fde06 	br	100152c <__alt_mem_TCDM+0xff00052c>
 10015b4:	81c5883a 	add	r2,r16,r7
 10015b8:	11400117 	ldw	r5,4(r2)
 10015bc:	9009883a 	mov	r4,r18
 10015c0:	29400054 	ori	r5,r5,1
 10015c4:	11400115 	stw	r5,4(r2)
 10015c8:	1003ac80 	call	1003ac8 <__malloc_unlock>
 10015cc:	80800204 	addi	r2,r16,8
 10015d0:	003fe006 	br	1001554 <__alt_mem_TCDM+0xff000554>
 10015d4:	9c000217 	ldw	r16,8(r19)
 10015d8:	00bfff04 	movi	r2,-4
 10015dc:	85800117 	ldw	r22,4(r16)
 10015e0:	b0ac703a 	and	r22,r22,r2
 10015e4:	b4400336 	bltu	r22,r17,10015f4 <_malloc_r+0x344>
 10015e8:	b445c83a 	sub	r2,r22,r17
 10015ec:	00c003c4 	movi	r3,15
 10015f0:	18805d16 	blt	r3,r2,1001768 <_malloc_r+0x4b8>
 10015f4:	05c04234 	movhi	r23,264
 10015f8:	00804234 	movhi	r2,264
 10015fc:	10a6f204 	addi	r2,r2,-25656
 1001600:	bde04304 	addi	r23,r23,-32500
 1001604:	15400017 	ldw	r21,0(r2)
 1001608:	b8c00017 	ldw	r3,0(r23)
 100160c:	00bfffc4 	movi	r2,-1
 1001610:	858d883a 	add	r6,r16,r22
 1001614:	8d6b883a 	add	r21,r17,r21
 1001618:	1880ea26 	beq	r3,r2,10019c4 <_malloc_r+0x714>
 100161c:	ad4403c4 	addi	r21,r21,4111
 1001620:	00bc0004 	movi	r2,-4096
 1001624:	a8aa703a 	and	r21,r21,r2
 1001628:	a80b883a 	mov	r5,r21
 100162c:	9009883a 	mov	r4,r18
 1001630:	d9800015 	stw	r6,0(sp)
 1001634:	10024d00 	call	10024d0 <_sbrk_r>
 1001638:	1029883a 	mov	r20,r2
 100163c:	00bfffc4 	movi	r2,-1
 1001640:	d9800017 	ldw	r6,0(sp)
 1001644:	a080e826 	beq	r20,r2,10019e8 <_malloc_r+0x738>
 1001648:	a180a636 	bltu	r20,r6,10018e4 <_malloc_r+0x634>
 100164c:	07004234 	movhi	fp,264
 1001650:	e726fb04 	addi	fp,fp,-25620
 1001654:	e0800017 	ldw	r2,0(fp)
 1001658:	a887883a 	add	r3,r21,r2
 100165c:	e0c00015 	stw	r3,0(fp)
 1001660:	3500e626 	beq	r6,r20,10019fc <_malloc_r+0x74c>
 1001664:	b9000017 	ldw	r4,0(r23)
 1001668:	00bfffc4 	movi	r2,-1
 100166c:	2080ee26 	beq	r4,r2,1001a28 <_malloc_r+0x778>
 1001670:	a185c83a 	sub	r2,r20,r6
 1001674:	10c5883a 	add	r2,r2,r3
 1001678:	e0800015 	stw	r2,0(fp)
 100167c:	a0c001cc 	andi	r3,r20,7
 1001680:	1800bc26 	beq	r3,zero,1001974 <_malloc_r+0x6c4>
 1001684:	a0e9c83a 	sub	r20,r20,r3
 1001688:	00840204 	movi	r2,4104
 100168c:	a5000204 	addi	r20,r20,8
 1001690:	10c7c83a 	sub	r3,r2,r3
 1001694:	a545883a 	add	r2,r20,r21
 1001698:	1083ffcc 	andi	r2,r2,4095
 100169c:	18abc83a 	sub	r21,r3,r2
 10016a0:	a80b883a 	mov	r5,r21
 10016a4:	9009883a 	mov	r4,r18
 10016a8:	10024d00 	call	10024d0 <_sbrk_r>
 10016ac:	00ffffc4 	movi	r3,-1
 10016b0:	10c0e126 	beq	r2,r3,1001a38 <_malloc_r+0x788>
 10016b4:	1505c83a 	sub	r2,r2,r20
 10016b8:	1545883a 	add	r2,r2,r21
 10016bc:	10800054 	ori	r2,r2,1
 10016c0:	e0c00017 	ldw	r3,0(fp)
 10016c4:	9d000215 	stw	r20,8(r19)
 10016c8:	a0800115 	stw	r2,4(r20)
 10016cc:	a8c7883a 	add	r3,r21,r3
 10016d0:	e0c00015 	stw	r3,0(fp)
 10016d4:	84c00e26 	beq	r16,r19,1001710 <_malloc_r+0x460>
 10016d8:	018003c4 	movi	r6,15
 10016dc:	3580a72e 	bgeu	r6,r22,100197c <_malloc_r+0x6cc>
 10016e0:	81400117 	ldw	r5,4(r16)
 10016e4:	013ffe04 	movi	r4,-8
 10016e8:	b0bffd04 	addi	r2,r22,-12
 10016ec:	1104703a 	and	r2,r2,r4
 10016f0:	2900004c 	andi	r4,r5,1
 10016f4:	2088b03a 	or	r4,r4,r2
 10016f8:	81000115 	stw	r4,4(r16)
 10016fc:	01400144 	movi	r5,5
 1001700:	8089883a 	add	r4,r16,r2
 1001704:	21400115 	stw	r5,4(r4)
 1001708:	21400215 	stw	r5,8(r4)
 100170c:	3080cd36 	bltu	r6,r2,1001a44 <_malloc_r+0x794>
 1001710:	00804234 	movhi	r2,264
 1001714:	10a6f104 	addi	r2,r2,-25660
 1001718:	11000017 	ldw	r4,0(r2)
 100171c:	20c0012e 	bgeu	r4,r3,1001724 <_malloc_r+0x474>
 1001720:	10c00015 	stw	r3,0(r2)
 1001724:	00804234 	movhi	r2,264
 1001728:	10a6f004 	addi	r2,r2,-25664
 100172c:	11000017 	ldw	r4,0(r2)
 1001730:	9c000217 	ldw	r16,8(r19)
 1001734:	20c0012e 	bgeu	r4,r3,100173c <_malloc_r+0x48c>
 1001738:	10c00015 	stw	r3,0(r2)
 100173c:	80c00117 	ldw	r3,4(r16)
 1001740:	00bfff04 	movi	r2,-4
 1001744:	1886703a 	and	r3,r3,r2
 1001748:	1c45c83a 	sub	r2,r3,r17
 100174c:	1c400236 	bltu	r3,r17,1001758 <_malloc_r+0x4a8>
 1001750:	00c003c4 	movi	r3,15
 1001754:	18800416 	blt	r3,r2,1001768 <_malloc_r+0x4b8>
 1001758:	9009883a 	mov	r4,r18
 100175c:	1003ac80 	call	1003ac8 <__malloc_unlock>
 1001760:	0005883a 	mov	r2,zero
 1001764:	003f7b06 	br	1001554 <__alt_mem_TCDM+0xff000554>
 1001768:	88c00054 	ori	r3,r17,1
 100176c:	80c00115 	stw	r3,4(r16)
 1001770:	8463883a 	add	r17,r16,r17
 1001774:	10800054 	ori	r2,r2,1
 1001778:	9c400215 	stw	r17,8(r19)
 100177c:	88800115 	stw	r2,4(r17)
 1001780:	9009883a 	mov	r4,r18
 1001784:	1003ac80 	call	1003ac8 <__malloc_unlock>
 1001788:	80800204 	addi	r2,r16,8
 100178c:	003f7106 	br	1001554 <__alt_mem_TCDM+0xff000554>
 1001790:	00c00504 	movi	r3,20
 1001794:	18804a2e 	bgeu	r3,r2,10018c0 <_malloc_r+0x610>
 1001798:	00c01504 	movi	r3,84
 100179c:	18806e36 	bltu	r3,r2,1001958 <_malloc_r+0x6a8>
 10017a0:	8804d33a 	srli	r2,r17,12
 10017a4:	12001bc4 	addi	r8,r2,111
 10017a8:	11c01b84 	addi	r7,r2,110
 10017ac:	4209883a 	add	r4,r8,r8
 10017b0:	003edd06 	br	1001328 <__alt_mem_TCDM+0xff000328>
 10017b4:	3804d27a 	srli	r2,r7,9
 10017b8:	00c00104 	movi	r3,4
 10017bc:	1880442e 	bgeu	r3,r2,10018d0 <_malloc_r+0x620>
 10017c0:	00c00504 	movi	r3,20
 10017c4:	18808136 	bltu	r3,r2,10019cc <_malloc_r+0x71c>
 10017c8:	11401704 	addi	r5,r2,92
 10017cc:	10c016c4 	addi	r3,r2,91
 10017d0:	294b883a 	add	r5,r5,r5
 10017d4:	294b883a 	add	r5,r5,r5
 10017d8:	294b883a 	add	r5,r5,r5
 10017dc:	994b883a 	add	r5,r19,r5
 10017e0:	28800017 	ldw	r2,0(r5)
 10017e4:	018041f4 	movhi	r6,263
 10017e8:	297ffe04 	addi	r5,r5,-8
 10017ec:	319ab704 	addi	r6,r6,27356
 10017f0:	28806526 	beq	r5,r2,1001988 <_malloc_r+0x6d8>
 10017f4:	01bfff04 	movi	r6,-4
 10017f8:	10c00117 	ldw	r3,4(r2)
 10017fc:	1986703a 	and	r3,r3,r6
 1001800:	38c0022e 	bgeu	r7,r3,100180c <_malloc_r+0x55c>
 1001804:	10800217 	ldw	r2,8(r2)
 1001808:	28bffb1e 	bne	r5,r2,10017f8 <__alt_mem_TCDM+0xff0007f8>
 100180c:	11400317 	ldw	r5,12(r2)
 1001810:	98c00117 	ldw	r3,4(r19)
 1001814:	81400315 	stw	r5,12(r16)
 1001818:	80800215 	stw	r2,8(r16)
 100181c:	2c000215 	stw	r16,8(r5)
 1001820:	14000315 	stw	r16,12(r2)
 1001824:	003ef806 	br	1001408 <__alt_mem_TCDM+0xff000408>
 1001828:	88c00054 	ori	r3,r17,1
 100182c:	80c00115 	stw	r3,4(r16)
 1001830:	8463883a 	add	r17,r16,r17
 1001834:	34400515 	stw	r17,20(r6)
 1001838:	34400415 	stw	r17,16(r6)
 100183c:	10c00054 	ori	r3,r2,1
 1001840:	8a000315 	stw	r8,12(r17)
 1001844:	8a000215 	stw	r8,8(r17)
 1001848:	88c00115 	stw	r3,4(r17)
 100184c:	88a3883a 	add	r17,r17,r2
 1001850:	88800015 	stw	r2,0(r17)
 1001854:	9009883a 	mov	r4,r18
 1001858:	1003ac80 	call	1003ac8 <__malloc_unlock>
 100185c:	80800204 	addi	r2,r16,8
 1001860:	003f3c06 	br	1001554 <__alt_mem_TCDM+0xff000554>
 1001864:	30c00117 	ldw	r3,4(r6)
 1001868:	003ee706 	br	1001408 <__alt_mem_TCDM+0xff000408>
 100186c:	5ac00044 	addi	r11,r11,1
 1001870:	588000cc 	andi	r2,r11,3
 1001874:	31800204 	addi	r6,r6,8
 1001878:	103efd1e 	bne	r2,zero,1001470 <__alt_mem_TCDM+0xff000470>
 100187c:	00002406 	br	1001910 <_malloc_r+0x660>
 1001880:	14000317 	ldw	r16,12(r2)
 1001884:	143f251e 	bne	r2,r16,100151c <__alt_mem_TCDM+0xff00051c>
 1001888:	21000084 	addi	r4,r4,2
 100188c:	003ebc06 	br	1001380 <__alt_mem_TCDM+0xff000380>
 1001890:	8085883a 	add	r2,r16,r2
 1001894:	10c00117 	ldw	r3,4(r2)
 1001898:	81000317 	ldw	r4,12(r16)
 100189c:	81400217 	ldw	r5,8(r16)
 10018a0:	18c00054 	ori	r3,r3,1
 10018a4:	10c00115 	stw	r3,4(r2)
 10018a8:	29000315 	stw	r4,12(r5)
 10018ac:	21400215 	stw	r5,8(r4)
 10018b0:	9009883a 	mov	r4,r18
 10018b4:	1003ac80 	call	1003ac8 <__malloc_unlock>
 10018b8:	80800204 	addi	r2,r16,8
 10018bc:	003f2506 	br	1001554 <__alt_mem_TCDM+0xff000554>
 10018c0:	12001704 	addi	r8,r2,92
 10018c4:	11c016c4 	addi	r7,r2,91
 10018c8:	4209883a 	add	r4,r8,r8
 10018cc:	003e9606 	br	1001328 <__alt_mem_TCDM+0xff000328>
 10018d0:	3804d1ba 	srli	r2,r7,6
 10018d4:	11400e44 	addi	r5,r2,57
 10018d8:	10c00e04 	addi	r3,r2,56
 10018dc:	294b883a 	add	r5,r5,r5
 10018e0:	003fbc06 	br	10017d4 <__alt_mem_TCDM+0xff0007d4>
 10018e4:	84ff5926 	beq	r16,r19,100164c <__alt_mem_TCDM+0xff00064c>
 10018e8:	008041f4 	movhi	r2,263
 10018ec:	109ab704 	addi	r2,r2,27356
 10018f0:	14000217 	ldw	r16,8(r2)
 10018f4:	00bfff04 	movi	r2,-4
 10018f8:	80c00117 	ldw	r3,4(r16)
 10018fc:	1886703a 	and	r3,r3,r2
 1001900:	003f9106 	br	1001748 <__alt_mem_TCDM+0xff000748>
 1001904:	60800217 	ldw	r2,8(r12)
 1001908:	213fffc4 	addi	r4,r4,-1
 100190c:	1300651e 	bne	r2,r12,1001aa4 <_malloc_r+0x7f4>
 1001910:	208000cc 	andi	r2,r4,3
 1001914:	633ffe04 	addi	r12,r12,-8
 1001918:	103ffa1e 	bne	r2,zero,1001904 <__alt_mem_TCDM+0xff000904>
 100191c:	98800117 	ldw	r2,4(r19)
 1001920:	0146303a 	nor	r3,zero,r5
 1001924:	1884703a 	and	r2,r3,r2
 1001928:	98800115 	stw	r2,4(r19)
 100192c:	294b883a 	add	r5,r5,r5
 1001930:	117f2836 	bltu	r2,r5,10015d4 <__alt_mem_TCDM+0xff0005d4>
 1001934:	283f2726 	beq	r5,zero,10015d4 <__alt_mem_TCDM+0xff0005d4>
 1001938:	2886703a 	and	r3,r5,r2
 100193c:	5809883a 	mov	r4,r11
 1001940:	183ec31e 	bne	r3,zero,1001450 <__alt_mem_TCDM+0xff000450>
 1001944:	294b883a 	add	r5,r5,r5
 1001948:	2886703a 	and	r3,r5,r2
 100194c:	21000104 	addi	r4,r4,4
 1001950:	183ffc26 	beq	r3,zero,1001944 <__alt_mem_TCDM+0xff000944>
 1001954:	003ebe06 	br	1001450 <__alt_mem_TCDM+0xff000450>
 1001958:	00c05504 	movi	r3,340
 100195c:	18801236 	bltu	r3,r2,10019a8 <_malloc_r+0x6f8>
 1001960:	8804d3fa 	srli	r2,r17,15
 1001964:	12001e04 	addi	r8,r2,120
 1001968:	11c01dc4 	addi	r7,r2,119
 100196c:	4209883a 	add	r4,r8,r8
 1001970:	003e6d06 	br	1001328 <__alt_mem_TCDM+0xff000328>
 1001974:	00c40004 	movi	r3,4096
 1001978:	003f4606 	br	1001694 <__alt_mem_TCDM+0xff000694>
 100197c:	00800044 	movi	r2,1
 1001980:	a0800115 	stw	r2,4(r20)
 1001984:	003f7406 	br	1001758 <__alt_mem_TCDM+0xff000758>
 1001988:	1805d0ba 	srai	r2,r3,2
 100198c:	01c00044 	movi	r7,1
 1001990:	30c00117 	ldw	r3,4(r6)
 1001994:	388e983a 	sll	r7,r7,r2
 1001998:	2805883a 	mov	r2,r5
 100199c:	38c6b03a 	or	r3,r7,r3
 10019a0:	30c00115 	stw	r3,4(r6)
 10019a4:	003f9b06 	br	1001814 <__alt_mem_TCDM+0xff000814>
 10019a8:	00c15504 	movi	r3,1364
 10019ac:	18801a36 	bltu	r3,r2,1001a18 <_malloc_r+0x768>
 10019b0:	8804d4ba 	srli	r2,r17,18
 10019b4:	12001f44 	addi	r8,r2,125
 10019b8:	11c01f04 	addi	r7,r2,124
 10019bc:	4209883a 	add	r4,r8,r8
 10019c0:	003e5906 	br	1001328 <__alt_mem_TCDM+0xff000328>
 10019c4:	ad400404 	addi	r21,r21,16
 10019c8:	003f1706 	br	1001628 <__alt_mem_TCDM+0xff000628>
 10019cc:	00c01504 	movi	r3,84
 10019d0:	18802336 	bltu	r3,r2,1001a60 <_malloc_r+0x7b0>
 10019d4:	3804d33a 	srli	r2,r7,12
 10019d8:	11401bc4 	addi	r5,r2,111
 10019dc:	10c01b84 	addi	r3,r2,110
 10019e0:	294b883a 	add	r5,r5,r5
 10019e4:	003f7b06 	br	10017d4 <__alt_mem_TCDM+0xff0007d4>
 10019e8:	9c000217 	ldw	r16,8(r19)
 10019ec:	00bfff04 	movi	r2,-4
 10019f0:	80c00117 	ldw	r3,4(r16)
 10019f4:	1886703a 	and	r3,r3,r2
 10019f8:	003f5306 	br	1001748 <__alt_mem_TCDM+0xff000748>
 10019fc:	3083ffcc 	andi	r2,r6,4095
 1001a00:	103f181e 	bne	r2,zero,1001664 <__alt_mem_TCDM+0xff000664>
 1001a04:	99000217 	ldw	r4,8(r19)
 1001a08:	b545883a 	add	r2,r22,r21
 1001a0c:	10800054 	ori	r2,r2,1
 1001a10:	20800115 	stw	r2,4(r4)
 1001a14:	003f3e06 	br	1001710 <__alt_mem_TCDM+0xff000710>
 1001a18:	01003f84 	movi	r4,254
 1001a1c:	02001fc4 	movi	r8,127
 1001a20:	01c01f84 	movi	r7,126
 1001a24:	003e4006 	br	1001328 <__alt_mem_TCDM+0xff000328>
 1001a28:	00804234 	movhi	r2,264
 1001a2c:	10a04304 	addi	r2,r2,-32500
 1001a30:	15000015 	stw	r20,0(r2)
 1001a34:	003f1106 	br	100167c <__alt_mem_TCDM+0xff00067c>
 1001a38:	00800044 	movi	r2,1
 1001a3c:	002b883a 	mov	r21,zero
 1001a40:	003f1f06 	br	10016c0 <__alt_mem_TCDM+0xff0006c0>
 1001a44:	81400204 	addi	r5,r16,8
 1001a48:	9009883a 	mov	r4,r18
 1001a4c:	1002d380 	call	1002d38 <_free_r>
 1001a50:	00804234 	movhi	r2,264
 1001a54:	10a6fb04 	addi	r2,r2,-25620
 1001a58:	10c00017 	ldw	r3,0(r2)
 1001a5c:	003f2c06 	br	1001710 <__alt_mem_TCDM+0xff000710>
 1001a60:	00c05504 	movi	r3,340
 1001a64:	18800536 	bltu	r3,r2,1001a7c <_malloc_r+0x7cc>
 1001a68:	3804d3fa 	srli	r2,r7,15
 1001a6c:	11401e04 	addi	r5,r2,120
 1001a70:	10c01dc4 	addi	r3,r2,119
 1001a74:	294b883a 	add	r5,r5,r5
 1001a78:	003f5606 	br	10017d4 <__alt_mem_TCDM+0xff0007d4>
 1001a7c:	00c15504 	movi	r3,1364
 1001a80:	18800536 	bltu	r3,r2,1001a98 <_malloc_r+0x7e8>
 1001a84:	3804d4ba 	srli	r2,r7,18
 1001a88:	11401f44 	addi	r5,r2,125
 1001a8c:	10c01f04 	addi	r3,r2,124
 1001a90:	294b883a 	add	r5,r5,r5
 1001a94:	003f4f06 	br	10017d4 <__alt_mem_TCDM+0xff0007d4>
 1001a98:	01403f84 	movi	r5,254
 1001a9c:	00c01f84 	movi	r3,126
 1001aa0:	003f4c06 	br	10017d4 <__alt_mem_TCDM+0xff0007d4>
 1001aa4:	98800117 	ldw	r2,4(r19)
 1001aa8:	003fa006 	br	100192c <__alt_mem_TCDM+0xff00092c>
 1001aac:	8808d0fa 	srli	r4,r17,3
 1001ab0:	20800044 	addi	r2,r4,1
 1001ab4:	1085883a 	add	r2,r2,r2
 1001ab8:	003e9006 	br	10014fc <__alt_mem_TCDM+0xff0004fc>

01001abc <memchr>:
 1001abc:	208000cc 	andi	r2,r4,3
 1001ac0:	280f883a 	mov	r7,r5
 1001ac4:	10003426 	beq	r2,zero,1001b98 <memchr+0xdc>
 1001ac8:	30bfffc4 	addi	r2,r6,-1
 1001acc:	30001a26 	beq	r6,zero,1001b38 <memchr+0x7c>
 1001ad0:	20c00003 	ldbu	r3,0(r4)
 1001ad4:	29803fcc 	andi	r6,r5,255
 1001ad8:	30c0051e 	bne	r6,r3,1001af0 <memchr+0x34>
 1001adc:	00001806 	br	1001b40 <memchr+0x84>
 1001ae0:	10001526 	beq	r2,zero,1001b38 <memchr+0x7c>
 1001ae4:	20c00003 	ldbu	r3,0(r4)
 1001ae8:	10bfffc4 	addi	r2,r2,-1
 1001aec:	30c01426 	beq	r6,r3,1001b40 <memchr+0x84>
 1001af0:	21000044 	addi	r4,r4,1
 1001af4:	20c000cc 	andi	r3,r4,3
 1001af8:	183ff91e 	bne	r3,zero,1001ae0 <__alt_mem_TCDM+0xff000ae0>
 1001afc:	020000c4 	movi	r8,3
 1001b00:	40801136 	bltu	r8,r2,1001b48 <memchr+0x8c>
 1001b04:	10000c26 	beq	r2,zero,1001b38 <memchr+0x7c>
 1001b08:	20c00003 	ldbu	r3,0(r4)
 1001b0c:	29403fcc 	andi	r5,r5,255
 1001b10:	28c00b26 	beq	r5,r3,1001b40 <memchr+0x84>
 1001b14:	20c00044 	addi	r3,r4,1
 1001b18:	39803fcc 	andi	r6,r7,255
 1001b1c:	2089883a 	add	r4,r4,r2
 1001b20:	00000306 	br	1001b30 <memchr+0x74>
 1001b24:	18c00044 	addi	r3,r3,1
 1001b28:	197fffc3 	ldbu	r5,-1(r3)
 1001b2c:	31400526 	beq	r6,r5,1001b44 <memchr+0x88>
 1001b30:	1805883a 	mov	r2,r3
 1001b34:	20fffb1e 	bne	r4,r3,1001b24 <__alt_mem_TCDM+0xff000b24>
 1001b38:	0005883a 	mov	r2,zero
 1001b3c:	f800283a 	ret
 1001b40:	2005883a 	mov	r2,r4
 1001b44:	f800283a 	ret
 1001b48:	28c03fcc 	andi	r3,r5,255
 1001b4c:	1812923a 	slli	r9,r3,8
 1001b50:	02ffbff4 	movhi	r11,65279
 1001b54:	02a02074 	movhi	r10,32897
 1001b58:	48d2b03a 	or	r9,r9,r3
 1001b5c:	4806943a 	slli	r3,r9,16
 1001b60:	5affbfc4 	addi	r11,r11,-257
 1001b64:	52a02004 	addi	r10,r10,-32640
 1001b68:	48d2b03a 	or	r9,r9,r3
 1001b6c:	20c00017 	ldw	r3,0(r4)
 1001b70:	48c6f03a 	xor	r3,r9,r3
 1001b74:	1acd883a 	add	r6,r3,r11
 1001b78:	00c6303a 	nor	r3,zero,r3
 1001b7c:	30c6703a 	and	r3,r6,r3
 1001b80:	1a86703a 	and	r3,r3,r10
 1001b84:	183fe01e 	bne	r3,zero,1001b08 <__alt_mem_TCDM+0xff000b08>
 1001b88:	10bfff04 	addi	r2,r2,-4
 1001b8c:	21000104 	addi	r4,r4,4
 1001b90:	40bff636 	bltu	r8,r2,1001b6c <__alt_mem_TCDM+0xff000b6c>
 1001b94:	003fdb06 	br	1001b04 <__alt_mem_TCDM+0xff000b04>
 1001b98:	3005883a 	mov	r2,r6
 1001b9c:	003fd706 	br	1001afc <__alt_mem_TCDM+0xff000afc>

01001ba0 <memcpy>:
 1001ba0:	defffd04 	addi	sp,sp,-12
 1001ba4:	dfc00215 	stw	ra,8(sp)
 1001ba8:	dc400115 	stw	r17,4(sp)
 1001bac:	dc000015 	stw	r16,0(sp)
 1001bb0:	00c003c4 	movi	r3,15
 1001bb4:	2005883a 	mov	r2,r4
 1001bb8:	1980452e 	bgeu	r3,r6,1001cd0 <memcpy+0x130>
 1001bbc:	2906b03a 	or	r3,r5,r4
 1001bc0:	18c000cc 	andi	r3,r3,3
 1001bc4:	1800441e 	bne	r3,zero,1001cd8 <memcpy+0x138>
 1001bc8:	347ffc04 	addi	r17,r6,-16
 1001bcc:	8822d13a 	srli	r17,r17,4
 1001bd0:	28c00104 	addi	r3,r5,4
 1001bd4:	23400104 	addi	r13,r4,4
 1001bd8:	8820913a 	slli	r16,r17,4
 1001bdc:	2b000204 	addi	r12,r5,8
 1001be0:	22c00204 	addi	r11,r4,8
 1001be4:	84000504 	addi	r16,r16,20
 1001be8:	2a800304 	addi	r10,r5,12
 1001bec:	22400304 	addi	r9,r4,12
 1001bf0:	2c21883a 	add	r16,r5,r16
 1001bf4:	2811883a 	mov	r8,r5
 1001bf8:	200f883a 	mov	r7,r4
 1001bfc:	41000017 	ldw	r4,0(r8)
 1001c00:	1fc00017 	ldw	ra,0(r3)
 1001c04:	63c00017 	ldw	r15,0(r12)
 1001c08:	39000015 	stw	r4,0(r7)
 1001c0c:	53800017 	ldw	r14,0(r10)
 1001c10:	6fc00015 	stw	ra,0(r13)
 1001c14:	5bc00015 	stw	r15,0(r11)
 1001c18:	4b800015 	stw	r14,0(r9)
 1001c1c:	18c00404 	addi	r3,r3,16
 1001c20:	39c00404 	addi	r7,r7,16
 1001c24:	42000404 	addi	r8,r8,16
 1001c28:	6b400404 	addi	r13,r13,16
 1001c2c:	63000404 	addi	r12,r12,16
 1001c30:	5ac00404 	addi	r11,r11,16
 1001c34:	52800404 	addi	r10,r10,16
 1001c38:	4a400404 	addi	r9,r9,16
 1001c3c:	1c3fef1e 	bne	r3,r16,1001bfc <__alt_mem_TCDM+0xff000bfc>
 1001c40:	89c00044 	addi	r7,r17,1
 1001c44:	380e913a 	slli	r7,r7,4
 1001c48:	310003cc 	andi	r4,r6,15
 1001c4c:	02c000c4 	movi	r11,3
 1001c50:	11c7883a 	add	r3,r2,r7
 1001c54:	29cb883a 	add	r5,r5,r7
 1001c58:	5900212e 	bgeu	r11,r4,1001ce0 <memcpy+0x140>
 1001c5c:	1813883a 	mov	r9,r3
 1001c60:	2811883a 	mov	r8,r5
 1001c64:	200f883a 	mov	r7,r4
 1001c68:	42800017 	ldw	r10,0(r8)
 1001c6c:	4a400104 	addi	r9,r9,4
 1001c70:	39ffff04 	addi	r7,r7,-4
 1001c74:	4abfff15 	stw	r10,-4(r9)
 1001c78:	42000104 	addi	r8,r8,4
 1001c7c:	59fffa36 	bltu	r11,r7,1001c68 <__alt_mem_TCDM+0xff000c68>
 1001c80:	213fff04 	addi	r4,r4,-4
 1001c84:	2008d0ba 	srli	r4,r4,2
 1001c88:	318000cc 	andi	r6,r6,3
 1001c8c:	21000044 	addi	r4,r4,1
 1001c90:	2109883a 	add	r4,r4,r4
 1001c94:	2109883a 	add	r4,r4,r4
 1001c98:	1907883a 	add	r3,r3,r4
 1001c9c:	290b883a 	add	r5,r5,r4
 1001ca0:	30000626 	beq	r6,zero,1001cbc <memcpy+0x11c>
 1001ca4:	198d883a 	add	r6,r3,r6
 1001ca8:	29c00003 	ldbu	r7,0(r5)
 1001cac:	18c00044 	addi	r3,r3,1
 1001cb0:	29400044 	addi	r5,r5,1
 1001cb4:	19ffffc5 	stb	r7,-1(r3)
 1001cb8:	19bffb1e 	bne	r3,r6,1001ca8 <__alt_mem_TCDM+0xff000ca8>
 1001cbc:	dfc00217 	ldw	ra,8(sp)
 1001cc0:	dc400117 	ldw	r17,4(sp)
 1001cc4:	dc000017 	ldw	r16,0(sp)
 1001cc8:	dec00304 	addi	sp,sp,12
 1001ccc:	f800283a 	ret
 1001cd0:	2007883a 	mov	r3,r4
 1001cd4:	003ff206 	br	1001ca0 <__alt_mem_TCDM+0xff000ca0>
 1001cd8:	2007883a 	mov	r3,r4
 1001cdc:	003ff106 	br	1001ca4 <__alt_mem_TCDM+0xff000ca4>
 1001ce0:	200d883a 	mov	r6,r4
 1001ce4:	003fee06 	br	1001ca0 <__alt_mem_TCDM+0xff000ca0>

01001ce8 <memmove>:
 1001ce8:	2005883a 	mov	r2,r4
 1001cec:	29000b2e 	bgeu	r5,r4,1001d1c <memmove+0x34>
 1001cf0:	298f883a 	add	r7,r5,r6
 1001cf4:	21c0092e 	bgeu	r4,r7,1001d1c <memmove+0x34>
 1001cf8:	2187883a 	add	r3,r4,r6
 1001cfc:	198bc83a 	sub	r5,r3,r6
 1001d00:	30004826 	beq	r6,zero,1001e24 <memmove+0x13c>
 1001d04:	39ffffc4 	addi	r7,r7,-1
 1001d08:	39000003 	ldbu	r4,0(r7)
 1001d0c:	18ffffc4 	addi	r3,r3,-1
 1001d10:	19000005 	stb	r4,0(r3)
 1001d14:	28fffb1e 	bne	r5,r3,1001d04 <__alt_mem_TCDM+0xff000d04>
 1001d18:	f800283a 	ret
 1001d1c:	00c003c4 	movi	r3,15
 1001d20:	1980412e 	bgeu	r3,r6,1001e28 <memmove+0x140>
 1001d24:	2886b03a 	or	r3,r5,r2
 1001d28:	18c000cc 	andi	r3,r3,3
 1001d2c:	1800401e 	bne	r3,zero,1001e30 <memmove+0x148>
 1001d30:	33fffc04 	addi	r15,r6,-16
 1001d34:	781ed13a 	srli	r15,r15,4
 1001d38:	28c00104 	addi	r3,r5,4
 1001d3c:	13400104 	addi	r13,r2,4
 1001d40:	781c913a 	slli	r14,r15,4
 1001d44:	2b000204 	addi	r12,r5,8
 1001d48:	12c00204 	addi	r11,r2,8
 1001d4c:	73800504 	addi	r14,r14,20
 1001d50:	2a800304 	addi	r10,r5,12
 1001d54:	12400304 	addi	r9,r2,12
 1001d58:	2b9d883a 	add	r14,r5,r14
 1001d5c:	2811883a 	mov	r8,r5
 1001d60:	100f883a 	mov	r7,r2
 1001d64:	41000017 	ldw	r4,0(r8)
 1001d68:	39c00404 	addi	r7,r7,16
 1001d6c:	18c00404 	addi	r3,r3,16
 1001d70:	393ffc15 	stw	r4,-16(r7)
 1001d74:	193ffc17 	ldw	r4,-16(r3)
 1001d78:	6b400404 	addi	r13,r13,16
 1001d7c:	5ac00404 	addi	r11,r11,16
 1001d80:	693ffc15 	stw	r4,-16(r13)
 1001d84:	61000017 	ldw	r4,0(r12)
 1001d88:	4a400404 	addi	r9,r9,16
 1001d8c:	42000404 	addi	r8,r8,16
 1001d90:	593ffc15 	stw	r4,-16(r11)
 1001d94:	51000017 	ldw	r4,0(r10)
 1001d98:	63000404 	addi	r12,r12,16
 1001d9c:	52800404 	addi	r10,r10,16
 1001da0:	493ffc15 	stw	r4,-16(r9)
 1001da4:	1bbfef1e 	bne	r3,r14,1001d64 <__alt_mem_TCDM+0xff000d64>
 1001da8:	79000044 	addi	r4,r15,1
 1001dac:	2008913a 	slli	r4,r4,4
 1001db0:	328003cc 	andi	r10,r6,15
 1001db4:	02c000c4 	movi	r11,3
 1001db8:	1107883a 	add	r3,r2,r4
 1001dbc:	290b883a 	add	r5,r5,r4
 1001dc0:	5a801e2e 	bgeu	r11,r10,1001e3c <memmove+0x154>
 1001dc4:	1813883a 	mov	r9,r3
 1001dc8:	2811883a 	mov	r8,r5
 1001dcc:	500f883a 	mov	r7,r10
 1001dd0:	41000017 	ldw	r4,0(r8)
 1001dd4:	4a400104 	addi	r9,r9,4
 1001dd8:	39ffff04 	addi	r7,r7,-4
 1001ddc:	493fff15 	stw	r4,-4(r9)
 1001de0:	42000104 	addi	r8,r8,4
 1001de4:	59fffa36 	bltu	r11,r7,1001dd0 <__alt_mem_TCDM+0xff000dd0>
 1001de8:	513fff04 	addi	r4,r10,-4
 1001dec:	2008d0ba 	srli	r4,r4,2
 1001df0:	318000cc 	andi	r6,r6,3
 1001df4:	21000044 	addi	r4,r4,1
 1001df8:	2109883a 	add	r4,r4,r4
 1001dfc:	2109883a 	add	r4,r4,r4
 1001e00:	1907883a 	add	r3,r3,r4
 1001e04:	290b883a 	add	r5,r5,r4
 1001e08:	30000b26 	beq	r6,zero,1001e38 <memmove+0x150>
 1001e0c:	198d883a 	add	r6,r3,r6
 1001e10:	29c00003 	ldbu	r7,0(r5)
 1001e14:	18c00044 	addi	r3,r3,1
 1001e18:	29400044 	addi	r5,r5,1
 1001e1c:	19ffffc5 	stb	r7,-1(r3)
 1001e20:	19bffb1e 	bne	r3,r6,1001e10 <__alt_mem_TCDM+0xff000e10>
 1001e24:	f800283a 	ret
 1001e28:	1007883a 	mov	r3,r2
 1001e2c:	003ff606 	br	1001e08 <__alt_mem_TCDM+0xff000e08>
 1001e30:	1007883a 	mov	r3,r2
 1001e34:	003ff506 	br	1001e0c <__alt_mem_TCDM+0xff000e0c>
 1001e38:	f800283a 	ret
 1001e3c:	500d883a 	mov	r6,r10
 1001e40:	003ff106 	br	1001e08 <__alt_mem_TCDM+0xff000e08>

01001e44 <memset>:
 1001e44:	20c000cc 	andi	r3,r4,3
 1001e48:	2005883a 	mov	r2,r4
 1001e4c:	18004426 	beq	r3,zero,1001f60 <memset+0x11c>
 1001e50:	31ffffc4 	addi	r7,r6,-1
 1001e54:	30004026 	beq	r6,zero,1001f58 <memset+0x114>
 1001e58:	2813883a 	mov	r9,r5
 1001e5c:	200d883a 	mov	r6,r4
 1001e60:	2007883a 	mov	r3,r4
 1001e64:	00000406 	br	1001e78 <memset+0x34>
 1001e68:	3a3fffc4 	addi	r8,r7,-1
 1001e6c:	31800044 	addi	r6,r6,1
 1001e70:	38003926 	beq	r7,zero,1001f58 <memset+0x114>
 1001e74:	400f883a 	mov	r7,r8
 1001e78:	18c00044 	addi	r3,r3,1
 1001e7c:	32400005 	stb	r9,0(r6)
 1001e80:	1a0000cc 	andi	r8,r3,3
 1001e84:	403ff81e 	bne	r8,zero,1001e68 <__alt_mem_TCDM+0xff000e68>
 1001e88:	010000c4 	movi	r4,3
 1001e8c:	21c02d2e 	bgeu	r4,r7,1001f44 <memset+0x100>
 1001e90:	29003fcc 	andi	r4,r5,255
 1001e94:	200c923a 	slli	r6,r4,8
 1001e98:	3108b03a 	or	r4,r6,r4
 1001e9c:	200c943a 	slli	r6,r4,16
 1001ea0:	218cb03a 	or	r6,r4,r6
 1001ea4:	010003c4 	movi	r4,15
 1001ea8:	21c0182e 	bgeu	r4,r7,1001f0c <memset+0xc8>
 1001eac:	3b3ffc04 	addi	r12,r7,-16
 1001eb0:	6018d13a 	srli	r12,r12,4
 1001eb4:	1a000104 	addi	r8,r3,4
 1001eb8:	1ac00204 	addi	r11,r3,8
 1001ebc:	6008913a 	slli	r4,r12,4
 1001ec0:	1a800304 	addi	r10,r3,12
 1001ec4:	1813883a 	mov	r9,r3
 1001ec8:	21000504 	addi	r4,r4,20
 1001ecc:	1909883a 	add	r4,r3,r4
 1001ed0:	49800015 	stw	r6,0(r9)
 1001ed4:	41800015 	stw	r6,0(r8)
 1001ed8:	59800015 	stw	r6,0(r11)
 1001edc:	51800015 	stw	r6,0(r10)
 1001ee0:	42000404 	addi	r8,r8,16
 1001ee4:	4a400404 	addi	r9,r9,16
 1001ee8:	5ac00404 	addi	r11,r11,16
 1001eec:	52800404 	addi	r10,r10,16
 1001ef0:	413ff71e 	bne	r8,r4,1001ed0 <__alt_mem_TCDM+0xff000ed0>
 1001ef4:	63000044 	addi	r12,r12,1
 1001ef8:	6018913a 	slli	r12,r12,4
 1001efc:	39c003cc 	andi	r7,r7,15
 1001f00:	010000c4 	movi	r4,3
 1001f04:	1b07883a 	add	r3,r3,r12
 1001f08:	21c00e2e 	bgeu	r4,r7,1001f44 <memset+0x100>
 1001f0c:	1813883a 	mov	r9,r3
 1001f10:	3811883a 	mov	r8,r7
 1001f14:	010000c4 	movi	r4,3
 1001f18:	49800015 	stw	r6,0(r9)
 1001f1c:	423fff04 	addi	r8,r8,-4
 1001f20:	4a400104 	addi	r9,r9,4
 1001f24:	223ffc36 	bltu	r4,r8,1001f18 <__alt_mem_TCDM+0xff000f18>
 1001f28:	393fff04 	addi	r4,r7,-4
 1001f2c:	2008d0ba 	srli	r4,r4,2
 1001f30:	39c000cc 	andi	r7,r7,3
 1001f34:	21000044 	addi	r4,r4,1
 1001f38:	2109883a 	add	r4,r4,r4
 1001f3c:	2109883a 	add	r4,r4,r4
 1001f40:	1907883a 	add	r3,r3,r4
 1001f44:	38000526 	beq	r7,zero,1001f5c <memset+0x118>
 1001f48:	19cf883a 	add	r7,r3,r7
 1001f4c:	19400005 	stb	r5,0(r3)
 1001f50:	18c00044 	addi	r3,r3,1
 1001f54:	38fffd1e 	bne	r7,r3,1001f4c <__alt_mem_TCDM+0xff000f4c>
 1001f58:	f800283a 	ret
 1001f5c:	f800283a 	ret
 1001f60:	2007883a 	mov	r3,r4
 1001f64:	300f883a 	mov	r7,r6
 1001f68:	003fc706 	br	1001e88 <__alt_mem_TCDM+0xff000e88>

01001f6c <_realloc_r>:
 1001f6c:	defff604 	addi	sp,sp,-40
 1001f70:	dc800215 	stw	r18,8(sp)
 1001f74:	dfc00915 	stw	ra,36(sp)
 1001f78:	df000815 	stw	fp,32(sp)
 1001f7c:	ddc00715 	stw	r23,28(sp)
 1001f80:	dd800615 	stw	r22,24(sp)
 1001f84:	dd400515 	stw	r21,20(sp)
 1001f88:	dd000415 	stw	r20,16(sp)
 1001f8c:	dcc00315 	stw	r19,12(sp)
 1001f90:	dc400115 	stw	r17,4(sp)
 1001f94:	dc000015 	stw	r16,0(sp)
 1001f98:	3025883a 	mov	r18,r6
 1001f9c:	2800b726 	beq	r5,zero,100227c <_realloc_r+0x310>
 1001fa0:	282b883a 	mov	r21,r5
 1001fa4:	2029883a 	mov	r20,r4
 1001fa8:	1003aa40 	call	1003aa4 <__malloc_lock>
 1001fac:	a8bfff17 	ldw	r2,-4(r21)
 1001fb0:	043fff04 	movi	r16,-4
 1001fb4:	90c002c4 	addi	r3,r18,11
 1001fb8:	01000584 	movi	r4,22
 1001fbc:	acfffe04 	addi	r19,r21,-8
 1001fc0:	1420703a 	and	r16,r2,r16
 1001fc4:	20c0332e 	bgeu	r4,r3,1002094 <_realloc_r+0x128>
 1001fc8:	047ffe04 	movi	r17,-8
 1001fcc:	1c62703a 	and	r17,r3,r17
 1001fd0:	8807883a 	mov	r3,r17
 1001fd4:	88005816 	blt	r17,zero,1002138 <_realloc_r+0x1cc>
 1001fd8:	8c805736 	bltu	r17,r18,1002138 <_realloc_r+0x1cc>
 1001fdc:	80c0300e 	bge	r16,r3,10020a0 <_realloc_r+0x134>
 1001fe0:	070041f4 	movhi	fp,263
 1001fe4:	e71ab704 	addi	fp,fp,27356
 1001fe8:	e1c00217 	ldw	r7,8(fp)
 1001fec:	9c09883a 	add	r4,r19,r16
 1001ff0:	22000117 	ldw	r8,4(r4)
 1001ff4:	21c06326 	beq	r4,r7,1002184 <_realloc_r+0x218>
 1001ff8:	017fff84 	movi	r5,-2
 1001ffc:	414a703a 	and	r5,r8,r5
 1002000:	214b883a 	add	r5,r4,r5
 1002004:	29800117 	ldw	r6,4(r5)
 1002008:	3180004c 	andi	r6,r6,1
 100200c:	30003f26 	beq	r6,zero,100210c <_realloc_r+0x1a0>
 1002010:	1080004c 	andi	r2,r2,1
 1002014:	10008326 	beq	r2,zero,1002224 <_realloc_r+0x2b8>
 1002018:	900b883a 	mov	r5,r18
 100201c:	a009883a 	mov	r4,r20
 1002020:	10012b00 	call	10012b0 <_malloc_r>
 1002024:	1025883a 	mov	r18,r2
 1002028:	10011e26 	beq	r2,zero,10024a4 <_realloc_r+0x538>
 100202c:	a93fff17 	ldw	r4,-4(r21)
 1002030:	10fffe04 	addi	r3,r2,-8
 1002034:	00bfff84 	movi	r2,-2
 1002038:	2084703a 	and	r2,r4,r2
 100203c:	9885883a 	add	r2,r19,r2
 1002040:	1880ee26 	beq	r3,r2,10023fc <_realloc_r+0x490>
 1002044:	81bfff04 	addi	r6,r16,-4
 1002048:	00800904 	movi	r2,36
 100204c:	1180b836 	bltu	r2,r6,1002330 <_realloc_r+0x3c4>
 1002050:	00c004c4 	movi	r3,19
 1002054:	19809636 	bltu	r3,r6,10022b0 <_realloc_r+0x344>
 1002058:	9005883a 	mov	r2,r18
 100205c:	a807883a 	mov	r3,r21
 1002060:	19000017 	ldw	r4,0(r3)
 1002064:	11000015 	stw	r4,0(r2)
 1002068:	19000117 	ldw	r4,4(r3)
 100206c:	11000115 	stw	r4,4(r2)
 1002070:	18c00217 	ldw	r3,8(r3)
 1002074:	10c00215 	stw	r3,8(r2)
 1002078:	a80b883a 	mov	r5,r21
 100207c:	a009883a 	mov	r4,r20
 1002080:	1002d380 	call	1002d38 <_free_r>
 1002084:	a009883a 	mov	r4,r20
 1002088:	1003ac80 	call	1003ac8 <__malloc_unlock>
 100208c:	9005883a 	mov	r2,r18
 1002090:	00001206 	br	10020dc <_realloc_r+0x170>
 1002094:	00c00404 	movi	r3,16
 1002098:	1823883a 	mov	r17,r3
 100209c:	003fce06 	br	1001fd8 <__alt_mem_TCDM+0xff000fd8>
 10020a0:	a825883a 	mov	r18,r21
 10020a4:	8445c83a 	sub	r2,r16,r17
 10020a8:	00c003c4 	movi	r3,15
 10020ac:	18802636 	bltu	r3,r2,1002148 <_realloc_r+0x1dc>
 10020b0:	99800117 	ldw	r6,4(r19)
 10020b4:	9c07883a 	add	r3,r19,r16
 10020b8:	3180004c 	andi	r6,r6,1
 10020bc:	3420b03a 	or	r16,r6,r16
 10020c0:	9c000115 	stw	r16,4(r19)
 10020c4:	18800117 	ldw	r2,4(r3)
 10020c8:	10800054 	ori	r2,r2,1
 10020cc:	18800115 	stw	r2,4(r3)
 10020d0:	a009883a 	mov	r4,r20
 10020d4:	1003ac80 	call	1003ac8 <__malloc_unlock>
 10020d8:	9005883a 	mov	r2,r18
 10020dc:	dfc00917 	ldw	ra,36(sp)
 10020e0:	df000817 	ldw	fp,32(sp)
 10020e4:	ddc00717 	ldw	r23,28(sp)
 10020e8:	dd800617 	ldw	r22,24(sp)
 10020ec:	dd400517 	ldw	r21,20(sp)
 10020f0:	dd000417 	ldw	r20,16(sp)
 10020f4:	dcc00317 	ldw	r19,12(sp)
 10020f8:	dc800217 	ldw	r18,8(sp)
 10020fc:	dc400117 	ldw	r17,4(sp)
 1002100:	dc000017 	ldw	r16,0(sp)
 1002104:	dec00a04 	addi	sp,sp,40
 1002108:	f800283a 	ret
 100210c:	017fff04 	movi	r5,-4
 1002110:	414a703a 	and	r5,r8,r5
 1002114:	814d883a 	add	r6,r16,r5
 1002118:	30c01f16 	blt	r6,r3,1002198 <_realloc_r+0x22c>
 100211c:	20800317 	ldw	r2,12(r4)
 1002120:	20c00217 	ldw	r3,8(r4)
 1002124:	a825883a 	mov	r18,r21
 1002128:	3021883a 	mov	r16,r6
 100212c:	18800315 	stw	r2,12(r3)
 1002130:	10c00215 	stw	r3,8(r2)
 1002134:	003fdb06 	br	10020a4 <__alt_mem_TCDM+0xff0010a4>
 1002138:	00800304 	movi	r2,12
 100213c:	a0800015 	stw	r2,0(r20)
 1002140:	0005883a 	mov	r2,zero
 1002144:	003fe506 	br	10020dc <__alt_mem_TCDM+0xff0010dc>
 1002148:	98c00117 	ldw	r3,4(r19)
 100214c:	9c4b883a 	add	r5,r19,r17
 1002150:	11000054 	ori	r4,r2,1
 1002154:	18c0004c 	andi	r3,r3,1
 1002158:	1c62b03a 	or	r17,r3,r17
 100215c:	9c400115 	stw	r17,4(r19)
 1002160:	29000115 	stw	r4,4(r5)
 1002164:	2885883a 	add	r2,r5,r2
 1002168:	10c00117 	ldw	r3,4(r2)
 100216c:	29400204 	addi	r5,r5,8
 1002170:	a009883a 	mov	r4,r20
 1002174:	18c00054 	ori	r3,r3,1
 1002178:	10c00115 	stw	r3,4(r2)
 100217c:	1002d380 	call	1002d38 <_free_r>
 1002180:	003fd306 	br	10020d0 <__alt_mem_TCDM+0xff0010d0>
 1002184:	017fff04 	movi	r5,-4
 1002188:	414a703a 	and	r5,r8,r5
 100218c:	89800404 	addi	r6,r17,16
 1002190:	8151883a 	add	r8,r16,r5
 1002194:	4180590e 	bge	r8,r6,10022fc <_realloc_r+0x390>
 1002198:	1080004c 	andi	r2,r2,1
 100219c:	103f9e1e 	bne	r2,zero,1002018 <__alt_mem_TCDM+0xff001018>
 10021a0:	adbffe17 	ldw	r22,-8(r21)
 10021a4:	00bfff04 	movi	r2,-4
 10021a8:	9dadc83a 	sub	r22,r19,r22
 10021ac:	b1800117 	ldw	r6,4(r22)
 10021b0:	3084703a 	and	r2,r6,r2
 10021b4:	20002026 	beq	r4,zero,1002238 <_realloc_r+0x2cc>
 10021b8:	80af883a 	add	r23,r16,r2
 10021bc:	b96f883a 	add	r23,r23,r5
 10021c0:	21c05f26 	beq	r4,r7,1002340 <_realloc_r+0x3d4>
 10021c4:	b8c01c16 	blt	r23,r3,1002238 <_realloc_r+0x2cc>
 10021c8:	20800317 	ldw	r2,12(r4)
 10021cc:	20c00217 	ldw	r3,8(r4)
 10021d0:	81bfff04 	addi	r6,r16,-4
 10021d4:	01000904 	movi	r4,36
 10021d8:	18800315 	stw	r2,12(r3)
 10021dc:	10c00215 	stw	r3,8(r2)
 10021e0:	b0c00217 	ldw	r3,8(r22)
 10021e4:	b0800317 	ldw	r2,12(r22)
 10021e8:	b4800204 	addi	r18,r22,8
 10021ec:	18800315 	stw	r2,12(r3)
 10021f0:	10c00215 	stw	r3,8(r2)
 10021f4:	21801b36 	bltu	r4,r6,1002264 <_realloc_r+0x2f8>
 10021f8:	008004c4 	movi	r2,19
 10021fc:	1180352e 	bgeu	r2,r6,10022d4 <_realloc_r+0x368>
 1002200:	a8800017 	ldw	r2,0(r21)
 1002204:	b0800215 	stw	r2,8(r22)
 1002208:	a8800117 	ldw	r2,4(r21)
 100220c:	b0800315 	stw	r2,12(r22)
 1002210:	008006c4 	movi	r2,27
 1002214:	11807f36 	bltu	r2,r6,1002414 <_realloc_r+0x4a8>
 1002218:	b0800404 	addi	r2,r22,16
 100221c:	ad400204 	addi	r21,r21,8
 1002220:	00002d06 	br	10022d8 <_realloc_r+0x36c>
 1002224:	adbffe17 	ldw	r22,-8(r21)
 1002228:	00bfff04 	movi	r2,-4
 100222c:	9dadc83a 	sub	r22,r19,r22
 1002230:	b1000117 	ldw	r4,4(r22)
 1002234:	2084703a 	and	r2,r4,r2
 1002238:	b03f7726 	beq	r22,zero,1002018 <__alt_mem_TCDM+0xff001018>
 100223c:	80af883a 	add	r23,r16,r2
 1002240:	b8ff7516 	blt	r23,r3,1002018 <__alt_mem_TCDM+0xff001018>
 1002244:	b0800317 	ldw	r2,12(r22)
 1002248:	b0c00217 	ldw	r3,8(r22)
 100224c:	81bfff04 	addi	r6,r16,-4
 1002250:	01000904 	movi	r4,36
 1002254:	18800315 	stw	r2,12(r3)
 1002258:	10c00215 	stw	r3,8(r2)
 100225c:	b4800204 	addi	r18,r22,8
 1002260:	21bfe52e 	bgeu	r4,r6,10021f8 <__alt_mem_TCDM+0xff0011f8>
 1002264:	a80b883a 	mov	r5,r21
 1002268:	9009883a 	mov	r4,r18
 100226c:	1001ce80 	call	1001ce8 <memmove>
 1002270:	b821883a 	mov	r16,r23
 1002274:	b027883a 	mov	r19,r22
 1002278:	003f8a06 	br	10020a4 <__alt_mem_TCDM+0xff0010a4>
 100227c:	300b883a 	mov	r5,r6
 1002280:	dfc00917 	ldw	ra,36(sp)
 1002284:	df000817 	ldw	fp,32(sp)
 1002288:	ddc00717 	ldw	r23,28(sp)
 100228c:	dd800617 	ldw	r22,24(sp)
 1002290:	dd400517 	ldw	r21,20(sp)
 1002294:	dd000417 	ldw	r20,16(sp)
 1002298:	dcc00317 	ldw	r19,12(sp)
 100229c:	dc800217 	ldw	r18,8(sp)
 10022a0:	dc400117 	ldw	r17,4(sp)
 10022a4:	dc000017 	ldw	r16,0(sp)
 10022a8:	dec00a04 	addi	sp,sp,40
 10022ac:	10012b01 	jmpi	10012b0 <_malloc_r>
 10022b0:	a8c00017 	ldw	r3,0(r21)
 10022b4:	90c00015 	stw	r3,0(r18)
 10022b8:	a8c00117 	ldw	r3,4(r21)
 10022bc:	90c00115 	stw	r3,4(r18)
 10022c0:	00c006c4 	movi	r3,27
 10022c4:	19804536 	bltu	r3,r6,10023dc <_realloc_r+0x470>
 10022c8:	90800204 	addi	r2,r18,8
 10022cc:	a8c00204 	addi	r3,r21,8
 10022d0:	003f6306 	br	1002060 <__alt_mem_TCDM+0xff001060>
 10022d4:	9005883a 	mov	r2,r18
 10022d8:	a8c00017 	ldw	r3,0(r21)
 10022dc:	b821883a 	mov	r16,r23
 10022e0:	b027883a 	mov	r19,r22
 10022e4:	10c00015 	stw	r3,0(r2)
 10022e8:	a8c00117 	ldw	r3,4(r21)
 10022ec:	10c00115 	stw	r3,4(r2)
 10022f0:	a8c00217 	ldw	r3,8(r21)
 10022f4:	10c00215 	stw	r3,8(r2)
 10022f8:	003f6a06 	br	10020a4 <__alt_mem_TCDM+0xff0010a4>
 10022fc:	9c67883a 	add	r19,r19,r17
 1002300:	4445c83a 	sub	r2,r8,r17
 1002304:	e4c00215 	stw	r19,8(fp)
 1002308:	10800054 	ori	r2,r2,1
 100230c:	98800115 	stw	r2,4(r19)
 1002310:	a8bfff17 	ldw	r2,-4(r21)
 1002314:	a009883a 	mov	r4,r20
 1002318:	1080004c 	andi	r2,r2,1
 100231c:	1462b03a 	or	r17,r2,r17
 1002320:	ac7fff15 	stw	r17,-4(r21)
 1002324:	1003ac80 	call	1003ac8 <__malloc_unlock>
 1002328:	a805883a 	mov	r2,r21
 100232c:	003f6b06 	br	10020dc <__alt_mem_TCDM+0xff0010dc>
 1002330:	a80b883a 	mov	r5,r21
 1002334:	9009883a 	mov	r4,r18
 1002338:	1001ce80 	call	1001ce8 <memmove>
 100233c:	003f4e06 	br	1002078 <__alt_mem_TCDM+0xff001078>
 1002340:	89000404 	addi	r4,r17,16
 1002344:	b93fbc16 	blt	r23,r4,1002238 <__alt_mem_TCDM+0xff001238>
 1002348:	b0800317 	ldw	r2,12(r22)
 100234c:	b0c00217 	ldw	r3,8(r22)
 1002350:	81bfff04 	addi	r6,r16,-4
 1002354:	01000904 	movi	r4,36
 1002358:	18800315 	stw	r2,12(r3)
 100235c:	10c00215 	stw	r3,8(r2)
 1002360:	b4800204 	addi	r18,r22,8
 1002364:	21804336 	bltu	r4,r6,1002474 <_realloc_r+0x508>
 1002368:	008004c4 	movi	r2,19
 100236c:	11803f2e 	bgeu	r2,r6,100246c <_realloc_r+0x500>
 1002370:	a8800017 	ldw	r2,0(r21)
 1002374:	b0800215 	stw	r2,8(r22)
 1002378:	a8800117 	ldw	r2,4(r21)
 100237c:	b0800315 	stw	r2,12(r22)
 1002380:	008006c4 	movi	r2,27
 1002384:	11803f36 	bltu	r2,r6,1002484 <_realloc_r+0x518>
 1002388:	b0800404 	addi	r2,r22,16
 100238c:	ad400204 	addi	r21,r21,8
 1002390:	a8c00017 	ldw	r3,0(r21)
 1002394:	10c00015 	stw	r3,0(r2)
 1002398:	a8c00117 	ldw	r3,4(r21)
 100239c:	10c00115 	stw	r3,4(r2)
 10023a0:	a8c00217 	ldw	r3,8(r21)
 10023a4:	10c00215 	stw	r3,8(r2)
 10023a8:	b447883a 	add	r3,r22,r17
 10023ac:	bc45c83a 	sub	r2,r23,r17
 10023b0:	e0c00215 	stw	r3,8(fp)
 10023b4:	10800054 	ori	r2,r2,1
 10023b8:	18800115 	stw	r2,4(r3)
 10023bc:	b0800117 	ldw	r2,4(r22)
 10023c0:	a009883a 	mov	r4,r20
 10023c4:	1080004c 	andi	r2,r2,1
 10023c8:	1462b03a 	or	r17,r2,r17
 10023cc:	b4400115 	stw	r17,4(r22)
 10023d0:	1003ac80 	call	1003ac8 <__malloc_unlock>
 10023d4:	9005883a 	mov	r2,r18
 10023d8:	003f4006 	br	10020dc <__alt_mem_TCDM+0xff0010dc>
 10023dc:	a8c00217 	ldw	r3,8(r21)
 10023e0:	90c00215 	stw	r3,8(r18)
 10023e4:	a8c00317 	ldw	r3,12(r21)
 10023e8:	90c00315 	stw	r3,12(r18)
 10023ec:	30801126 	beq	r6,r2,1002434 <_realloc_r+0x4c8>
 10023f0:	90800404 	addi	r2,r18,16
 10023f4:	a8c00404 	addi	r3,r21,16
 10023f8:	003f1906 	br	1002060 <__alt_mem_TCDM+0xff001060>
 10023fc:	90ffff17 	ldw	r3,-4(r18)
 1002400:	00bfff04 	movi	r2,-4
 1002404:	a825883a 	mov	r18,r21
 1002408:	1884703a 	and	r2,r3,r2
 100240c:	80a1883a 	add	r16,r16,r2
 1002410:	003f2406 	br	10020a4 <__alt_mem_TCDM+0xff0010a4>
 1002414:	a8800217 	ldw	r2,8(r21)
 1002418:	b0800415 	stw	r2,16(r22)
 100241c:	a8800317 	ldw	r2,12(r21)
 1002420:	b0800515 	stw	r2,20(r22)
 1002424:	31000a26 	beq	r6,r4,1002450 <_realloc_r+0x4e4>
 1002428:	b0800604 	addi	r2,r22,24
 100242c:	ad400404 	addi	r21,r21,16
 1002430:	003fa906 	br	10022d8 <__alt_mem_TCDM+0xff0012d8>
 1002434:	a9000417 	ldw	r4,16(r21)
 1002438:	90800604 	addi	r2,r18,24
 100243c:	a8c00604 	addi	r3,r21,24
 1002440:	91000415 	stw	r4,16(r18)
 1002444:	a9000517 	ldw	r4,20(r21)
 1002448:	91000515 	stw	r4,20(r18)
 100244c:	003f0406 	br	1002060 <__alt_mem_TCDM+0xff001060>
 1002450:	a8c00417 	ldw	r3,16(r21)
 1002454:	ad400604 	addi	r21,r21,24
 1002458:	b0800804 	addi	r2,r22,32
 100245c:	b0c00615 	stw	r3,24(r22)
 1002460:	a8ffff17 	ldw	r3,-4(r21)
 1002464:	b0c00715 	stw	r3,28(r22)
 1002468:	003f9b06 	br	10022d8 <__alt_mem_TCDM+0xff0012d8>
 100246c:	9005883a 	mov	r2,r18
 1002470:	003fc706 	br	1002390 <__alt_mem_TCDM+0xff001390>
 1002474:	a80b883a 	mov	r5,r21
 1002478:	9009883a 	mov	r4,r18
 100247c:	1001ce80 	call	1001ce8 <memmove>
 1002480:	003fc906 	br	10023a8 <__alt_mem_TCDM+0xff0013a8>
 1002484:	a8800217 	ldw	r2,8(r21)
 1002488:	b0800415 	stw	r2,16(r22)
 100248c:	a8800317 	ldw	r2,12(r21)
 1002490:	b0800515 	stw	r2,20(r22)
 1002494:	31000726 	beq	r6,r4,10024b4 <_realloc_r+0x548>
 1002498:	b0800604 	addi	r2,r22,24
 100249c:	ad400404 	addi	r21,r21,16
 10024a0:	003fbb06 	br	1002390 <__alt_mem_TCDM+0xff001390>
 10024a4:	a009883a 	mov	r4,r20
 10024a8:	1003ac80 	call	1003ac8 <__malloc_unlock>
 10024ac:	0005883a 	mov	r2,zero
 10024b0:	003f0a06 	br	10020dc <__alt_mem_TCDM+0xff0010dc>
 10024b4:	a8c00417 	ldw	r3,16(r21)
 10024b8:	ad400604 	addi	r21,r21,24
 10024bc:	b0800804 	addi	r2,r22,32
 10024c0:	b0c00615 	stw	r3,24(r22)
 10024c4:	a8ffff17 	ldw	r3,-4(r21)
 10024c8:	b0c00715 	stw	r3,28(r22)
 10024cc:	003fb006 	br	1002390 <__alt_mem_TCDM+0xff001390>

010024d0 <_sbrk_r>:
 10024d0:	defffd04 	addi	sp,sp,-12
 10024d4:	dc000015 	stw	r16,0(sp)
 10024d8:	04004234 	movhi	r16,264
 10024dc:	dc400115 	stw	r17,4(sp)
 10024e0:	8426f304 	addi	r16,r16,-25652
 10024e4:	2023883a 	mov	r17,r4
 10024e8:	2809883a 	mov	r4,r5
 10024ec:	dfc00215 	stw	ra,8(sp)
 10024f0:	80000015 	stw	zero,0(r16)
 10024f4:	1003c880 	call	1003c88 <sbrk>
 10024f8:	00ffffc4 	movi	r3,-1
 10024fc:	10c00526 	beq	r2,r3,1002514 <_sbrk_r+0x44>
 1002500:	dfc00217 	ldw	ra,8(sp)
 1002504:	dc400117 	ldw	r17,4(sp)
 1002508:	dc000017 	ldw	r16,0(sp)
 100250c:	dec00304 	addi	sp,sp,12
 1002510:	f800283a 	ret
 1002514:	80c00017 	ldw	r3,0(r16)
 1002518:	183ff926 	beq	r3,zero,1002500 <__alt_mem_TCDM+0xff001500>
 100251c:	88c00015 	stw	r3,0(r17)
 1002520:	003ff706 	br	1002500 <__alt_mem_TCDM+0xff001500>

01002524 <__sread>:
 1002524:	defffe04 	addi	sp,sp,-8
 1002528:	dc000015 	stw	r16,0(sp)
 100252c:	2821883a 	mov	r16,r5
 1002530:	2940038f 	ldh	r5,14(r5)
 1002534:	dfc00115 	stw	ra,4(sp)
 1002538:	10032640 	call	1003264 <_read_r>
 100253c:	10000716 	blt	r2,zero,100255c <__sread+0x38>
 1002540:	80c01417 	ldw	r3,80(r16)
 1002544:	1887883a 	add	r3,r3,r2
 1002548:	80c01415 	stw	r3,80(r16)
 100254c:	dfc00117 	ldw	ra,4(sp)
 1002550:	dc000017 	ldw	r16,0(sp)
 1002554:	dec00204 	addi	sp,sp,8
 1002558:	f800283a 	ret
 100255c:	80c0030b 	ldhu	r3,12(r16)
 1002560:	18fbffcc 	andi	r3,r3,61439
 1002564:	80c0030d 	sth	r3,12(r16)
 1002568:	dfc00117 	ldw	ra,4(sp)
 100256c:	dc000017 	ldw	r16,0(sp)
 1002570:	dec00204 	addi	sp,sp,8
 1002574:	f800283a 	ret

01002578 <__seofread>:
 1002578:	0005883a 	mov	r2,zero
 100257c:	f800283a 	ret

01002580 <__swrite>:
 1002580:	2880030b 	ldhu	r2,12(r5)
 1002584:	defffb04 	addi	sp,sp,-20
 1002588:	dcc00315 	stw	r19,12(sp)
 100258c:	dc800215 	stw	r18,8(sp)
 1002590:	dc400115 	stw	r17,4(sp)
 1002594:	dc000015 	stw	r16,0(sp)
 1002598:	dfc00415 	stw	ra,16(sp)
 100259c:	10c0400c 	andi	r3,r2,256
 10025a0:	2821883a 	mov	r16,r5
 10025a4:	2023883a 	mov	r17,r4
 10025a8:	3025883a 	mov	r18,r6
 10025ac:	3827883a 	mov	r19,r7
 10025b0:	18000526 	beq	r3,zero,10025c8 <__swrite+0x48>
 10025b4:	2940038f 	ldh	r5,14(r5)
 10025b8:	01c00084 	movi	r7,2
 10025bc:	000d883a 	mov	r6,zero
 10025c0:	10030480 	call	1003048 <_lseek_r>
 10025c4:	8080030b 	ldhu	r2,12(r16)
 10025c8:	8140038f 	ldh	r5,14(r16)
 10025cc:	10bbffcc 	andi	r2,r2,61439
 10025d0:	980f883a 	mov	r7,r19
 10025d4:	900d883a 	mov	r6,r18
 10025d8:	8809883a 	mov	r4,r17
 10025dc:	8080030d 	sth	r2,12(r16)
 10025e0:	dfc00417 	ldw	ra,16(sp)
 10025e4:	dcc00317 	ldw	r19,12(sp)
 10025e8:	dc800217 	ldw	r18,8(sp)
 10025ec:	dc400117 	ldw	r17,4(sp)
 10025f0:	dc000017 	ldw	r16,0(sp)
 10025f4:	dec00504 	addi	sp,sp,20
 10025f8:	10026601 	jmpi	1002660 <_write_r>

010025fc <__sseek>:
 10025fc:	defffe04 	addi	sp,sp,-8
 1002600:	dc000015 	stw	r16,0(sp)
 1002604:	2821883a 	mov	r16,r5
 1002608:	2940038f 	ldh	r5,14(r5)
 100260c:	dfc00115 	stw	ra,4(sp)
 1002610:	10030480 	call	1003048 <_lseek_r>
 1002614:	00ffffc4 	movi	r3,-1
 1002618:	10c00826 	beq	r2,r3,100263c <__sseek+0x40>
 100261c:	80c0030b 	ldhu	r3,12(r16)
 1002620:	80801415 	stw	r2,80(r16)
 1002624:	18c40014 	ori	r3,r3,4096
 1002628:	80c0030d 	sth	r3,12(r16)
 100262c:	dfc00117 	ldw	ra,4(sp)
 1002630:	dc000017 	ldw	r16,0(sp)
 1002634:	dec00204 	addi	sp,sp,8
 1002638:	f800283a 	ret
 100263c:	80c0030b 	ldhu	r3,12(r16)
 1002640:	18fbffcc 	andi	r3,r3,61439
 1002644:	80c0030d 	sth	r3,12(r16)
 1002648:	dfc00117 	ldw	ra,4(sp)
 100264c:	dc000017 	ldw	r16,0(sp)
 1002650:	dec00204 	addi	sp,sp,8
 1002654:	f800283a 	ret

01002658 <__sclose>:
 1002658:	2940038f 	ldh	r5,14(r5)
 100265c:	10028141 	jmpi	1002814 <_close_r>

01002660 <_write_r>:
 1002660:	defffd04 	addi	sp,sp,-12
 1002664:	2805883a 	mov	r2,r5
 1002668:	dc000015 	stw	r16,0(sp)
 100266c:	04004234 	movhi	r16,264
 1002670:	dc400115 	stw	r17,4(sp)
 1002674:	300b883a 	mov	r5,r6
 1002678:	8426f304 	addi	r16,r16,-25652
 100267c:	2023883a 	mov	r17,r4
 1002680:	380d883a 	mov	r6,r7
 1002684:	1009883a 	mov	r4,r2
 1002688:	dfc00215 	stw	ra,8(sp)
 100268c:	80000015 	stw	zero,0(r16)
 1002690:	1003da40 	call	1003da4 <write>
 1002694:	00ffffc4 	movi	r3,-1
 1002698:	10c00526 	beq	r2,r3,10026b0 <_write_r+0x50>
 100269c:	dfc00217 	ldw	ra,8(sp)
 10026a0:	dc400117 	ldw	r17,4(sp)
 10026a4:	dc000017 	ldw	r16,0(sp)
 10026a8:	dec00304 	addi	sp,sp,12
 10026ac:	f800283a 	ret
 10026b0:	80c00017 	ldw	r3,0(r16)
 10026b4:	183ff926 	beq	r3,zero,100269c <__alt_mem_TCDM+0xff00169c>
 10026b8:	88c00015 	stw	r3,0(r17)
 10026bc:	003ff706 	br	100269c <__alt_mem_TCDM+0xff00169c>

010026c0 <__swsetup_r>:
 10026c0:	00804234 	movhi	r2,264
 10026c4:	defffd04 	addi	sp,sp,-12
 10026c8:	10a04204 	addi	r2,r2,-32504
 10026cc:	dc400115 	stw	r17,4(sp)
 10026d0:	2023883a 	mov	r17,r4
 10026d4:	11000017 	ldw	r4,0(r2)
 10026d8:	dc000015 	stw	r16,0(sp)
 10026dc:	dfc00215 	stw	ra,8(sp)
 10026e0:	2821883a 	mov	r16,r5
 10026e4:	20000226 	beq	r4,zero,10026f0 <__swsetup_r+0x30>
 10026e8:	20800e17 	ldw	r2,56(r4)
 10026ec:	10003126 	beq	r2,zero,10027b4 <__swsetup_r+0xf4>
 10026f0:	8080030b 	ldhu	r2,12(r16)
 10026f4:	10c0020c 	andi	r3,r2,8
 10026f8:	1009883a 	mov	r4,r2
 10026fc:	18000f26 	beq	r3,zero,100273c <__swsetup_r+0x7c>
 1002700:	80c00417 	ldw	r3,16(r16)
 1002704:	18001526 	beq	r3,zero,100275c <__swsetup_r+0x9c>
 1002708:	1100004c 	andi	r4,r2,1
 100270c:	20001c1e 	bne	r4,zero,1002780 <__swsetup_r+0xc0>
 1002710:	1080008c 	andi	r2,r2,2
 1002714:	1000291e 	bne	r2,zero,10027bc <__swsetup_r+0xfc>
 1002718:	80800517 	ldw	r2,20(r16)
 100271c:	80800215 	stw	r2,8(r16)
 1002720:	18001c26 	beq	r3,zero,1002794 <__swsetup_r+0xd4>
 1002724:	0005883a 	mov	r2,zero
 1002728:	dfc00217 	ldw	ra,8(sp)
 100272c:	dc400117 	ldw	r17,4(sp)
 1002730:	dc000017 	ldw	r16,0(sp)
 1002734:	dec00304 	addi	sp,sp,12
 1002738:	f800283a 	ret
 100273c:	2080040c 	andi	r2,r4,16
 1002740:	10002e26 	beq	r2,zero,10027fc <__swsetup_r+0x13c>
 1002744:	2080010c 	andi	r2,r4,4
 1002748:	10001e1e 	bne	r2,zero,10027c4 <__swsetup_r+0x104>
 100274c:	80c00417 	ldw	r3,16(r16)
 1002750:	20800214 	ori	r2,r4,8
 1002754:	8080030d 	sth	r2,12(r16)
 1002758:	183feb1e 	bne	r3,zero,1002708 <__alt_mem_TCDM+0xff001708>
 100275c:	1100a00c 	andi	r4,r2,640
 1002760:	01408004 	movi	r5,512
 1002764:	217fe826 	beq	r4,r5,1002708 <__alt_mem_TCDM+0xff001708>
 1002768:	800b883a 	mov	r5,r16
 100276c:	8809883a 	mov	r4,r17
 1002770:	10030a80 	call	10030a8 <__smakebuf_r>
 1002774:	8080030b 	ldhu	r2,12(r16)
 1002778:	80c00417 	ldw	r3,16(r16)
 100277c:	003fe206 	br	1002708 <__alt_mem_TCDM+0xff001708>
 1002780:	80800517 	ldw	r2,20(r16)
 1002784:	80000215 	stw	zero,8(r16)
 1002788:	0085c83a 	sub	r2,zero,r2
 100278c:	80800615 	stw	r2,24(r16)
 1002790:	183fe41e 	bne	r3,zero,1002724 <__alt_mem_TCDM+0xff001724>
 1002794:	80c0030b 	ldhu	r3,12(r16)
 1002798:	0005883a 	mov	r2,zero
 100279c:	1900200c 	andi	r4,r3,128
 10027a0:	203fe126 	beq	r4,zero,1002728 <__alt_mem_TCDM+0xff001728>
 10027a4:	18c01014 	ori	r3,r3,64
 10027a8:	80c0030d 	sth	r3,12(r16)
 10027ac:	00bfffc4 	movi	r2,-1
 10027b0:	003fdd06 	br	1002728 <__alt_mem_TCDM+0xff001728>
 10027b4:	1000c1c0 	call	1000c1c <__sinit>
 10027b8:	003fcd06 	br	10026f0 <__alt_mem_TCDM+0xff0016f0>
 10027bc:	0005883a 	mov	r2,zero
 10027c0:	003fd606 	br	100271c <__alt_mem_TCDM+0xff00171c>
 10027c4:	81400c17 	ldw	r5,48(r16)
 10027c8:	28000626 	beq	r5,zero,10027e4 <__swsetup_r+0x124>
 10027cc:	80801004 	addi	r2,r16,64
 10027d0:	28800326 	beq	r5,r2,10027e0 <__swsetup_r+0x120>
 10027d4:	8809883a 	mov	r4,r17
 10027d8:	1002d380 	call	1002d38 <_free_r>
 10027dc:	8100030b 	ldhu	r4,12(r16)
 10027e0:	80000c15 	stw	zero,48(r16)
 10027e4:	80c00417 	ldw	r3,16(r16)
 10027e8:	00bff6c4 	movi	r2,-37
 10027ec:	1108703a 	and	r4,r2,r4
 10027f0:	80000115 	stw	zero,4(r16)
 10027f4:	80c00015 	stw	r3,0(r16)
 10027f8:	003fd506 	br	1002750 <__alt_mem_TCDM+0xff001750>
 10027fc:	00800244 	movi	r2,9
 1002800:	88800015 	stw	r2,0(r17)
 1002804:	20801014 	ori	r2,r4,64
 1002808:	8080030d 	sth	r2,12(r16)
 100280c:	00bfffc4 	movi	r2,-1
 1002810:	003fc506 	br	1002728 <__alt_mem_TCDM+0xff001728>

01002814 <_close_r>:
 1002814:	defffd04 	addi	sp,sp,-12
 1002818:	dc000015 	stw	r16,0(sp)
 100281c:	04004234 	movhi	r16,264
 1002820:	dc400115 	stw	r17,4(sp)
 1002824:	8426f304 	addi	r16,r16,-25652
 1002828:	2023883a 	mov	r17,r4
 100282c:	2809883a 	mov	r4,r5
 1002830:	dfc00215 	stw	ra,8(sp)
 1002834:	80000015 	stw	zero,0(r16)
 1002838:	10035640 	call	1003564 <close>
 100283c:	00ffffc4 	movi	r3,-1
 1002840:	10c00526 	beq	r2,r3,1002858 <_close_r+0x44>
 1002844:	dfc00217 	ldw	ra,8(sp)
 1002848:	dc400117 	ldw	r17,4(sp)
 100284c:	dc000017 	ldw	r16,0(sp)
 1002850:	dec00304 	addi	sp,sp,12
 1002854:	f800283a 	ret
 1002858:	80c00017 	ldw	r3,0(r16)
 100285c:	183ff926 	beq	r3,zero,1002844 <__alt_mem_TCDM+0xff001844>
 1002860:	88c00015 	stw	r3,0(r17)
 1002864:	003ff706 	br	1002844 <__alt_mem_TCDM+0xff001844>

01002868 <_fclose_r>:
 1002868:	28003926 	beq	r5,zero,1002950 <_fclose_r+0xe8>
 100286c:	defffc04 	addi	sp,sp,-16
 1002870:	dc400115 	stw	r17,4(sp)
 1002874:	dc000015 	stw	r16,0(sp)
 1002878:	dfc00315 	stw	ra,12(sp)
 100287c:	dc800215 	stw	r18,8(sp)
 1002880:	2023883a 	mov	r17,r4
 1002884:	2821883a 	mov	r16,r5
 1002888:	20000226 	beq	r4,zero,1002894 <_fclose_r+0x2c>
 100288c:	20800e17 	ldw	r2,56(r4)
 1002890:	10002726 	beq	r2,zero,1002930 <_fclose_r+0xc8>
 1002894:	8080030f 	ldh	r2,12(r16)
 1002898:	1000071e 	bne	r2,zero,10028b8 <_fclose_r+0x50>
 100289c:	0005883a 	mov	r2,zero
 10028a0:	dfc00317 	ldw	ra,12(sp)
 10028a4:	dc800217 	ldw	r18,8(sp)
 10028a8:	dc400117 	ldw	r17,4(sp)
 10028ac:	dc000017 	ldw	r16,0(sp)
 10028b0:	dec00404 	addi	sp,sp,16
 10028b4:	f800283a 	ret
 10028b8:	800b883a 	mov	r5,r16
 10028bc:	8809883a 	mov	r4,r17
 10028c0:	100296c0 	call	100296c <__sflush_r>
 10028c4:	1025883a 	mov	r18,r2
 10028c8:	80800b17 	ldw	r2,44(r16)
 10028cc:	10000426 	beq	r2,zero,10028e0 <_fclose_r+0x78>
 10028d0:	81400717 	ldw	r5,28(r16)
 10028d4:	8809883a 	mov	r4,r17
 10028d8:	103ee83a 	callr	r2
 10028dc:	10001616 	blt	r2,zero,1002938 <_fclose_r+0xd0>
 10028e0:	8080030b 	ldhu	r2,12(r16)
 10028e4:	1080200c 	andi	r2,r2,128
 10028e8:	1000151e 	bne	r2,zero,1002940 <_fclose_r+0xd8>
 10028ec:	81400c17 	ldw	r5,48(r16)
 10028f0:	28000526 	beq	r5,zero,1002908 <_fclose_r+0xa0>
 10028f4:	80801004 	addi	r2,r16,64
 10028f8:	28800226 	beq	r5,r2,1002904 <_fclose_r+0x9c>
 10028fc:	8809883a 	mov	r4,r17
 1002900:	1002d380 	call	1002d38 <_free_r>
 1002904:	80000c15 	stw	zero,48(r16)
 1002908:	81401117 	ldw	r5,68(r16)
 100290c:	28000326 	beq	r5,zero,100291c <_fclose_r+0xb4>
 1002910:	8809883a 	mov	r4,r17
 1002914:	1002d380 	call	1002d38 <_free_r>
 1002918:	80001115 	stw	zero,68(r16)
 100291c:	1000c2c0 	call	1000c2c <__sfp_lock_acquire>
 1002920:	8000030d 	sth	zero,12(r16)
 1002924:	1000c300 	call	1000c30 <__sfp_lock_release>
 1002928:	9005883a 	mov	r2,r18
 100292c:	003fdc06 	br	10028a0 <__alt_mem_TCDM+0xff0018a0>
 1002930:	1000c1c0 	call	1000c1c <__sinit>
 1002934:	003fd706 	br	1002894 <__alt_mem_TCDM+0xff001894>
 1002938:	04bfffc4 	movi	r18,-1
 100293c:	003fe806 	br	10028e0 <__alt_mem_TCDM+0xff0018e0>
 1002940:	81400417 	ldw	r5,16(r16)
 1002944:	8809883a 	mov	r4,r17
 1002948:	1002d380 	call	1002d38 <_free_r>
 100294c:	003fe706 	br	10028ec <__alt_mem_TCDM+0xff0018ec>
 1002950:	0005883a 	mov	r2,zero
 1002954:	f800283a 	ret

01002958 <fclose>:
 1002958:	00804234 	movhi	r2,264
 100295c:	10a04204 	addi	r2,r2,-32504
 1002960:	200b883a 	mov	r5,r4
 1002964:	11000017 	ldw	r4,0(r2)
 1002968:	10028681 	jmpi	1002868 <_fclose_r>

0100296c <__sflush_r>:
 100296c:	2880030b 	ldhu	r2,12(r5)
 1002970:	defffb04 	addi	sp,sp,-20
 1002974:	dcc00315 	stw	r19,12(sp)
 1002978:	dc400115 	stw	r17,4(sp)
 100297c:	dfc00415 	stw	ra,16(sp)
 1002980:	dc800215 	stw	r18,8(sp)
 1002984:	dc000015 	stw	r16,0(sp)
 1002988:	10c0020c 	andi	r3,r2,8
 100298c:	2823883a 	mov	r17,r5
 1002990:	2027883a 	mov	r19,r4
 1002994:	1800311e 	bne	r3,zero,1002a5c <__sflush_r+0xf0>
 1002998:	28c00117 	ldw	r3,4(r5)
 100299c:	10820014 	ori	r2,r2,2048
 10029a0:	2880030d 	sth	r2,12(r5)
 10029a4:	00c04b0e 	bge	zero,r3,1002ad4 <__sflush_r+0x168>
 10029a8:	8a000a17 	ldw	r8,40(r17)
 10029ac:	40002326 	beq	r8,zero,1002a3c <__sflush_r+0xd0>
 10029b0:	9c000017 	ldw	r16,0(r19)
 10029b4:	10c4000c 	andi	r3,r2,4096
 10029b8:	98000015 	stw	zero,0(r19)
 10029bc:	18004826 	beq	r3,zero,1002ae0 <__sflush_r+0x174>
 10029c0:	89801417 	ldw	r6,80(r17)
 10029c4:	10c0010c 	andi	r3,r2,4
 10029c8:	18000626 	beq	r3,zero,10029e4 <__sflush_r+0x78>
 10029cc:	88c00117 	ldw	r3,4(r17)
 10029d0:	88800c17 	ldw	r2,48(r17)
 10029d4:	30cdc83a 	sub	r6,r6,r3
 10029d8:	10000226 	beq	r2,zero,10029e4 <__sflush_r+0x78>
 10029dc:	88800f17 	ldw	r2,60(r17)
 10029e0:	308dc83a 	sub	r6,r6,r2
 10029e4:	89400717 	ldw	r5,28(r17)
 10029e8:	000f883a 	mov	r7,zero
 10029ec:	9809883a 	mov	r4,r19
 10029f0:	403ee83a 	callr	r8
 10029f4:	00ffffc4 	movi	r3,-1
 10029f8:	10c04426 	beq	r2,r3,1002b0c <__sflush_r+0x1a0>
 10029fc:	88c0030b 	ldhu	r3,12(r17)
 1002a00:	89000417 	ldw	r4,16(r17)
 1002a04:	88000115 	stw	zero,4(r17)
 1002a08:	197dffcc 	andi	r5,r3,63487
 1002a0c:	8940030d 	sth	r5,12(r17)
 1002a10:	89000015 	stw	r4,0(r17)
 1002a14:	18c4000c 	andi	r3,r3,4096
 1002a18:	18002c1e 	bne	r3,zero,1002acc <__sflush_r+0x160>
 1002a1c:	89400c17 	ldw	r5,48(r17)
 1002a20:	9c000015 	stw	r16,0(r19)
 1002a24:	28000526 	beq	r5,zero,1002a3c <__sflush_r+0xd0>
 1002a28:	88801004 	addi	r2,r17,64
 1002a2c:	28800226 	beq	r5,r2,1002a38 <__sflush_r+0xcc>
 1002a30:	9809883a 	mov	r4,r19
 1002a34:	1002d380 	call	1002d38 <_free_r>
 1002a38:	88000c15 	stw	zero,48(r17)
 1002a3c:	0005883a 	mov	r2,zero
 1002a40:	dfc00417 	ldw	ra,16(sp)
 1002a44:	dcc00317 	ldw	r19,12(sp)
 1002a48:	dc800217 	ldw	r18,8(sp)
 1002a4c:	dc400117 	ldw	r17,4(sp)
 1002a50:	dc000017 	ldw	r16,0(sp)
 1002a54:	dec00504 	addi	sp,sp,20
 1002a58:	f800283a 	ret
 1002a5c:	2c800417 	ldw	r18,16(r5)
 1002a60:	903ff626 	beq	r18,zero,1002a3c <__alt_mem_TCDM+0xff001a3c>
 1002a64:	2c000017 	ldw	r16,0(r5)
 1002a68:	108000cc 	andi	r2,r2,3
 1002a6c:	2c800015 	stw	r18,0(r5)
 1002a70:	84a1c83a 	sub	r16,r16,r18
 1002a74:	1000131e 	bne	r2,zero,1002ac4 <__sflush_r+0x158>
 1002a78:	28800517 	ldw	r2,20(r5)
 1002a7c:	88800215 	stw	r2,8(r17)
 1002a80:	04000316 	blt	zero,r16,1002a90 <__sflush_r+0x124>
 1002a84:	003fed06 	br	1002a3c <__alt_mem_TCDM+0xff001a3c>
 1002a88:	90a5883a 	add	r18,r18,r2
 1002a8c:	043feb0e 	bge	zero,r16,1002a3c <__alt_mem_TCDM+0xff001a3c>
 1002a90:	88800917 	ldw	r2,36(r17)
 1002a94:	89400717 	ldw	r5,28(r17)
 1002a98:	800f883a 	mov	r7,r16
 1002a9c:	900d883a 	mov	r6,r18
 1002aa0:	9809883a 	mov	r4,r19
 1002aa4:	103ee83a 	callr	r2
 1002aa8:	80a1c83a 	sub	r16,r16,r2
 1002aac:	00bff616 	blt	zero,r2,1002a88 <__alt_mem_TCDM+0xff001a88>
 1002ab0:	88c0030b 	ldhu	r3,12(r17)
 1002ab4:	00bfffc4 	movi	r2,-1
 1002ab8:	18c01014 	ori	r3,r3,64
 1002abc:	88c0030d 	sth	r3,12(r17)
 1002ac0:	003fdf06 	br	1002a40 <__alt_mem_TCDM+0xff001a40>
 1002ac4:	0005883a 	mov	r2,zero
 1002ac8:	003fec06 	br	1002a7c <__alt_mem_TCDM+0xff001a7c>
 1002acc:	88801415 	stw	r2,80(r17)
 1002ad0:	003fd206 	br	1002a1c <__alt_mem_TCDM+0xff001a1c>
 1002ad4:	28c00f17 	ldw	r3,60(r5)
 1002ad8:	00ffb316 	blt	zero,r3,10029a8 <__alt_mem_TCDM+0xff0019a8>
 1002adc:	003fd706 	br	1002a3c <__alt_mem_TCDM+0xff001a3c>
 1002ae0:	89400717 	ldw	r5,28(r17)
 1002ae4:	000d883a 	mov	r6,zero
 1002ae8:	01c00044 	movi	r7,1
 1002aec:	9809883a 	mov	r4,r19
 1002af0:	403ee83a 	callr	r8
 1002af4:	100d883a 	mov	r6,r2
 1002af8:	00bfffc4 	movi	r2,-1
 1002afc:	30801426 	beq	r6,r2,1002b50 <__sflush_r+0x1e4>
 1002b00:	8880030b 	ldhu	r2,12(r17)
 1002b04:	8a000a17 	ldw	r8,40(r17)
 1002b08:	003fae06 	br	10029c4 <__alt_mem_TCDM+0xff0019c4>
 1002b0c:	98c00017 	ldw	r3,0(r19)
 1002b10:	183fba26 	beq	r3,zero,10029fc <__alt_mem_TCDM+0xff0019fc>
 1002b14:	01000744 	movi	r4,29
 1002b18:	19000626 	beq	r3,r4,1002b34 <__sflush_r+0x1c8>
 1002b1c:	01000584 	movi	r4,22
 1002b20:	19000426 	beq	r3,r4,1002b34 <__sflush_r+0x1c8>
 1002b24:	88c0030b 	ldhu	r3,12(r17)
 1002b28:	18c01014 	ori	r3,r3,64
 1002b2c:	88c0030d 	sth	r3,12(r17)
 1002b30:	003fc306 	br	1002a40 <__alt_mem_TCDM+0xff001a40>
 1002b34:	8880030b 	ldhu	r2,12(r17)
 1002b38:	88c00417 	ldw	r3,16(r17)
 1002b3c:	88000115 	stw	zero,4(r17)
 1002b40:	10bdffcc 	andi	r2,r2,63487
 1002b44:	8880030d 	sth	r2,12(r17)
 1002b48:	88c00015 	stw	r3,0(r17)
 1002b4c:	003fb306 	br	1002a1c <__alt_mem_TCDM+0xff001a1c>
 1002b50:	98800017 	ldw	r2,0(r19)
 1002b54:	103fea26 	beq	r2,zero,1002b00 <__alt_mem_TCDM+0xff001b00>
 1002b58:	00c00744 	movi	r3,29
 1002b5c:	10c00226 	beq	r2,r3,1002b68 <__sflush_r+0x1fc>
 1002b60:	00c00584 	movi	r3,22
 1002b64:	10c0031e 	bne	r2,r3,1002b74 <__sflush_r+0x208>
 1002b68:	9c000015 	stw	r16,0(r19)
 1002b6c:	0005883a 	mov	r2,zero
 1002b70:	003fb306 	br	1002a40 <__alt_mem_TCDM+0xff001a40>
 1002b74:	88c0030b 	ldhu	r3,12(r17)
 1002b78:	3005883a 	mov	r2,r6
 1002b7c:	18c01014 	ori	r3,r3,64
 1002b80:	88c0030d 	sth	r3,12(r17)
 1002b84:	003fae06 	br	1002a40 <__alt_mem_TCDM+0xff001a40>

01002b88 <_fflush_r>:
 1002b88:	defffd04 	addi	sp,sp,-12
 1002b8c:	dc000115 	stw	r16,4(sp)
 1002b90:	dfc00215 	stw	ra,8(sp)
 1002b94:	2021883a 	mov	r16,r4
 1002b98:	20000226 	beq	r4,zero,1002ba4 <_fflush_r+0x1c>
 1002b9c:	20800e17 	ldw	r2,56(r4)
 1002ba0:	10000c26 	beq	r2,zero,1002bd4 <_fflush_r+0x4c>
 1002ba4:	2880030f 	ldh	r2,12(r5)
 1002ba8:	1000051e 	bne	r2,zero,1002bc0 <_fflush_r+0x38>
 1002bac:	0005883a 	mov	r2,zero
 1002bb0:	dfc00217 	ldw	ra,8(sp)
 1002bb4:	dc000117 	ldw	r16,4(sp)
 1002bb8:	dec00304 	addi	sp,sp,12
 1002bbc:	f800283a 	ret
 1002bc0:	8009883a 	mov	r4,r16
 1002bc4:	dfc00217 	ldw	ra,8(sp)
 1002bc8:	dc000117 	ldw	r16,4(sp)
 1002bcc:	dec00304 	addi	sp,sp,12
 1002bd0:	100296c1 	jmpi	100296c <__sflush_r>
 1002bd4:	d9400015 	stw	r5,0(sp)
 1002bd8:	1000c1c0 	call	1000c1c <__sinit>
 1002bdc:	d9400017 	ldw	r5,0(sp)
 1002be0:	003ff006 	br	1002ba4 <__alt_mem_TCDM+0xff001ba4>

01002be4 <fflush>:
 1002be4:	20000526 	beq	r4,zero,1002bfc <fflush+0x18>
 1002be8:	00804234 	movhi	r2,264
 1002bec:	10a04204 	addi	r2,r2,-32504
 1002bf0:	200b883a 	mov	r5,r4
 1002bf4:	11000017 	ldw	r4,0(r2)
 1002bf8:	1002b881 	jmpi	1002b88 <_fflush_r>
 1002bfc:	00804234 	movhi	r2,264
 1002c00:	10a04104 	addi	r2,r2,-32508
 1002c04:	11000017 	ldw	r4,0(r2)
 1002c08:	01404034 	movhi	r5,256
 1002c0c:	294ae204 	addi	r5,r5,11144
 1002c10:	10011ec1 	jmpi	10011ec <_fwalk_reent>

01002c14 <_malloc_trim_r>:
 1002c14:	defffb04 	addi	sp,sp,-20
 1002c18:	dcc00315 	stw	r19,12(sp)
 1002c1c:	04c041f4 	movhi	r19,263
 1002c20:	dc800215 	stw	r18,8(sp)
 1002c24:	dc400115 	stw	r17,4(sp)
 1002c28:	dc000015 	stw	r16,0(sp)
 1002c2c:	dfc00415 	stw	ra,16(sp)
 1002c30:	2821883a 	mov	r16,r5
 1002c34:	9cdab704 	addi	r19,r19,27356
 1002c38:	2025883a 	mov	r18,r4
 1002c3c:	1003aa40 	call	1003aa4 <__malloc_lock>
 1002c40:	98800217 	ldw	r2,8(r19)
 1002c44:	14400117 	ldw	r17,4(r2)
 1002c48:	00bfff04 	movi	r2,-4
 1002c4c:	88a2703a 	and	r17,r17,r2
 1002c50:	8c21c83a 	sub	r16,r17,r16
 1002c54:	8403fbc4 	addi	r16,r16,4079
 1002c58:	8020d33a 	srli	r16,r16,12
 1002c5c:	0083ffc4 	movi	r2,4095
 1002c60:	843fffc4 	addi	r16,r16,-1
 1002c64:	8020933a 	slli	r16,r16,12
 1002c68:	1400060e 	bge	r2,r16,1002c84 <_malloc_trim_r+0x70>
 1002c6c:	000b883a 	mov	r5,zero
 1002c70:	9009883a 	mov	r4,r18
 1002c74:	10024d00 	call	10024d0 <_sbrk_r>
 1002c78:	98c00217 	ldw	r3,8(r19)
 1002c7c:	1c47883a 	add	r3,r3,r17
 1002c80:	10c00a26 	beq	r2,r3,1002cac <_malloc_trim_r+0x98>
 1002c84:	9009883a 	mov	r4,r18
 1002c88:	1003ac80 	call	1003ac8 <__malloc_unlock>
 1002c8c:	0005883a 	mov	r2,zero
 1002c90:	dfc00417 	ldw	ra,16(sp)
 1002c94:	dcc00317 	ldw	r19,12(sp)
 1002c98:	dc800217 	ldw	r18,8(sp)
 1002c9c:	dc400117 	ldw	r17,4(sp)
 1002ca0:	dc000017 	ldw	r16,0(sp)
 1002ca4:	dec00504 	addi	sp,sp,20
 1002ca8:	f800283a 	ret
 1002cac:	040bc83a 	sub	r5,zero,r16
 1002cb0:	9009883a 	mov	r4,r18
 1002cb4:	10024d00 	call	10024d0 <_sbrk_r>
 1002cb8:	00ffffc4 	movi	r3,-1
 1002cbc:	10c00d26 	beq	r2,r3,1002cf4 <_malloc_trim_r+0xe0>
 1002cc0:	00c04234 	movhi	r3,264
 1002cc4:	18e6fb04 	addi	r3,r3,-25620
 1002cc8:	18800017 	ldw	r2,0(r3)
 1002ccc:	99000217 	ldw	r4,8(r19)
 1002cd0:	8c23c83a 	sub	r17,r17,r16
 1002cd4:	8c400054 	ori	r17,r17,1
 1002cd8:	1421c83a 	sub	r16,r2,r16
 1002cdc:	24400115 	stw	r17,4(r4)
 1002ce0:	9009883a 	mov	r4,r18
 1002ce4:	1c000015 	stw	r16,0(r3)
 1002ce8:	1003ac80 	call	1003ac8 <__malloc_unlock>
 1002cec:	00800044 	movi	r2,1
 1002cf0:	003fe706 	br	1002c90 <__alt_mem_TCDM+0xff001c90>
 1002cf4:	000b883a 	mov	r5,zero
 1002cf8:	9009883a 	mov	r4,r18
 1002cfc:	10024d00 	call	10024d0 <_sbrk_r>
 1002d00:	99000217 	ldw	r4,8(r19)
 1002d04:	014003c4 	movi	r5,15
 1002d08:	1107c83a 	sub	r3,r2,r4
 1002d0c:	28ffdd0e 	bge	r5,r3,1002c84 <__alt_mem_TCDM+0xff001c84>
 1002d10:	01404234 	movhi	r5,264
 1002d14:	29604304 	addi	r5,r5,-32500
 1002d18:	29400017 	ldw	r5,0(r5)
 1002d1c:	18c00054 	ori	r3,r3,1
 1002d20:	20c00115 	stw	r3,4(r4)
 1002d24:	00c04234 	movhi	r3,264
 1002d28:	1145c83a 	sub	r2,r2,r5
 1002d2c:	18e6fb04 	addi	r3,r3,-25620
 1002d30:	18800015 	stw	r2,0(r3)
 1002d34:	003fd306 	br	1002c84 <__alt_mem_TCDM+0xff001c84>

01002d38 <_free_r>:
 1002d38:	28004126 	beq	r5,zero,1002e40 <_free_r+0x108>
 1002d3c:	defffd04 	addi	sp,sp,-12
 1002d40:	dc400115 	stw	r17,4(sp)
 1002d44:	dc000015 	stw	r16,0(sp)
 1002d48:	2023883a 	mov	r17,r4
 1002d4c:	2821883a 	mov	r16,r5
 1002d50:	dfc00215 	stw	ra,8(sp)
 1002d54:	1003aa40 	call	1003aa4 <__malloc_lock>
 1002d58:	81ffff17 	ldw	r7,-4(r16)
 1002d5c:	00bfff84 	movi	r2,-2
 1002d60:	010041f4 	movhi	r4,263
 1002d64:	81bffe04 	addi	r6,r16,-8
 1002d68:	3884703a 	and	r2,r7,r2
 1002d6c:	211ab704 	addi	r4,r4,27356
 1002d70:	308b883a 	add	r5,r6,r2
 1002d74:	2a400117 	ldw	r9,4(r5)
 1002d78:	22000217 	ldw	r8,8(r4)
 1002d7c:	00ffff04 	movi	r3,-4
 1002d80:	48c6703a 	and	r3,r9,r3
 1002d84:	2a005726 	beq	r5,r8,1002ee4 <_free_r+0x1ac>
 1002d88:	28c00115 	stw	r3,4(r5)
 1002d8c:	39c0004c 	andi	r7,r7,1
 1002d90:	3800091e 	bne	r7,zero,1002db8 <_free_r+0x80>
 1002d94:	823ffe17 	ldw	r8,-8(r16)
 1002d98:	22400204 	addi	r9,r4,8
 1002d9c:	320dc83a 	sub	r6,r6,r8
 1002da0:	31c00217 	ldw	r7,8(r6)
 1002da4:	1205883a 	add	r2,r2,r8
 1002da8:	3a406526 	beq	r7,r9,1002f40 <_free_r+0x208>
 1002dac:	32000317 	ldw	r8,12(r6)
 1002db0:	3a000315 	stw	r8,12(r7)
 1002db4:	41c00215 	stw	r7,8(r8)
 1002db8:	28cf883a 	add	r7,r5,r3
 1002dbc:	39c00117 	ldw	r7,4(r7)
 1002dc0:	39c0004c 	andi	r7,r7,1
 1002dc4:	38003a26 	beq	r7,zero,1002eb0 <_free_r+0x178>
 1002dc8:	10c00054 	ori	r3,r2,1
 1002dcc:	30c00115 	stw	r3,4(r6)
 1002dd0:	3087883a 	add	r3,r6,r2
 1002dd4:	18800015 	stw	r2,0(r3)
 1002dd8:	00c07fc4 	movi	r3,511
 1002ddc:	18801936 	bltu	r3,r2,1002e44 <_free_r+0x10c>
 1002de0:	1004d0fa 	srli	r2,r2,3
 1002de4:	01c00044 	movi	r7,1
 1002de8:	21400117 	ldw	r5,4(r4)
 1002dec:	10c00044 	addi	r3,r2,1
 1002df0:	18c7883a 	add	r3,r3,r3
 1002df4:	1005d0ba 	srai	r2,r2,2
 1002df8:	18c7883a 	add	r3,r3,r3
 1002dfc:	18c7883a 	add	r3,r3,r3
 1002e00:	1907883a 	add	r3,r3,r4
 1002e04:	3884983a 	sll	r2,r7,r2
 1002e08:	19c00017 	ldw	r7,0(r3)
 1002e0c:	1a3ffe04 	addi	r8,r3,-8
 1002e10:	1144b03a 	or	r2,r2,r5
 1002e14:	32000315 	stw	r8,12(r6)
 1002e18:	31c00215 	stw	r7,8(r6)
 1002e1c:	20800115 	stw	r2,4(r4)
 1002e20:	19800015 	stw	r6,0(r3)
 1002e24:	39800315 	stw	r6,12(r7)
 1002e28:	8809883a 	mov	r4,r17
 1002e2c:	dfc00217 	ldw	ra,8(sp)
 1002e30:	dc400117 	ldw	r17,4(sp)
 1002e34:	dc000017 	ldw	r16,0(sp)
 1002e38:	dec00304 	addi	sp,sp,12
 1002e3c:	1003ac81 	jmpi	1003ac8 <__malloc_unlock>
 1002e40:	f800283a 	ret
 1002e44:	100ad27a 	srli	r5,r2,9
 1002e48:	00c00104 	movi	r3,4
 1002e4c:	19404a36 	bltu	r3,r5,1002f78 <_free_r+0x240>
 1002e50:	100ad1ba 	srli	r5,r2,6
 1002e54:	28c00e44 	addi	r3,r5,57
 1002e58:	18c7883a 	add	r3,r3,r3
 1002e5c:	29400e04 	addi	r5,r5,56
 1002e60:	18c7883a 	add	r3,r3,r3
 1002e64:	18c7883a 	add	r3,r3,r3
 1002e68:	1909883a 	add	r4,r3,r4
 1002e6c:	20c00017 	ldw	r3,0(r4)
 1002e70:	01c041f4 	movhi	r7,263
 1002e74:	213ffe04 	addi	r4,r4,-8
 1002e78:	39dab704 	addi	r7,r7,27356
 1002e7c:	20c04426 	beq	r4,r3,1002f90 <_free_r+0x258>
 1002e80:	01ffff04 	movi	r7,-4
 1002e84:	19400117 	ldw	r5,4(r3)
 1002e88:	29ca703a 	and	r5,r5,r7
 1002e8c:	1140022e 	bgeu	r2,r5,1002e98 <_free_r+0x160>
 1002e90:	18c00217 	ldw	r3,8(r3)
 1002e94:	20fffb1e 	bne	r4,r3,1002e84 <__alt_mem_TCDM+0xff001e84>
 1002e98:	19000317 	ldw	r4,12(r3)
 1002e9c:	31000315 	stw	r4,12(r6)
 1002ea0:	30c00215 	stw	r3,8(r6)
 1002ea4:	21800215 	stw	r6,8(r4)
 1002ea8:	19800315 	stw	r6,12(r3)
 1002eac:	003fde06 	br	1002e28 <__alt_mem_TCDM+0xff001e28>
 1002eb0:	29c00217 	ldw	r7,8(r5)
 1002eb4:	10c5883a 	add	r2,r2,r3
 1002eb8:	00c041f4 	movhi	r3,263
 1002ebc:	18dab904 	addi	r3,r3,27364
 1002ec0:	38c03b26 	beq	r7,r3,1002fb0 <_free_r+0x278>
 1002ec4:	2a000317 	ldw	r8,12(r5)
 1002ec8:	11400054 	ori	r5,r2,1
 1002ecc:	3087883a 	add	r3,r6,r2
 1002ed0:	3a000315 	stw	r8,12(r7)
 1002ed4:	41c00215 	stw	r7,8(r8)
 1002ed8:	31400115 	stw	r5,4(r6)
 1002edc:	18800015 	stw	r2,0(r3)
 1002ee0:	003fbd06 	br	1002dd8 <__alt_mem_TCDM+0xff001dd8>
 1002ee4:	39c0004c 	andi	r7,r7,1
 1002ee8:	10c5883a 	add	r2,r2,r3
 1002eec:	3800071e 	bne	r7,zero,1002f0c <_free_r+0x1d4>
 1002ef0:	81fffe17 	ldw	r7,-8(r16)
 1002ef4:	31cdc83a 	sub	r6,r6,r7
 1002ef8:	30c00317 	ldw	r3,12(r6)
 1002efc:	31400217 	ldw	r5,8(r6)
 1002f00:	11c5883a 	add	r2,r2,r7
 1002f04:	28c00315 	stw	r3,12(r5)
 1002f08:	19400215 	stw	r5,8(r3)
 1002f0c:	10c00054 	ori	r3,r2,1
 1002f10:	30c00115 	stw	r3,4(r6)
 1002f14:	00c04234 	movhi	r3,264
 1002f18:	18e04404 	addi	r3,r3,-32496
 1002f1c:	18c00017 	ldw	r3,0(r3)
 1002f20:	21800215 	stw	r6,8(r4)
 1002f24:	10ffc036 	bltu	r2,r3,1002e28 <__alt_mem_TCDM+0xff001e28>
 1002f28:	00804234 	movhi	r2,264
 1002f2c:	10a6f204 	addi	r2,r2,-25656
 1002f30:	11400017 	ldw	r5,0(r2)
 1002f34:	8809883a 	mov	r4,r17
 1002f38:	1002c140 	call	1002c14 <_malloc_trim_r>
 1002f3c:	003fba06 	br	1002e28 <__alt_mem_TCDM+0xff001e28>
 1002f40:	28c9883a 	add	r4,r5,r3
 1002f44:	21000117 	ldw	r4,4(r4)
 1002f48:	2100004c 	andi	r4,r4,1
 1002f4c:	2000391e 	bne	r4,zero,1003034 <_free_r+0x2fc>
 1002f50:	29c00217 	ldw	r7,8(r5)
 1002f54:	29000317 	ldw	r4,12(r5)
 1002f58:	1885883a 	add	r2,r3,r2
 1002f5c:	10c00054 	ori	r3,r2,1
 1002f60:	39000315 	stw	r4,12(r7)
 1002f64:	21c00215 	stw	r7,8(r4)
 1002f68:	30c00115 	stw	r3,4(r6)
 1002f6c:	308d883a 	add	r6,r6,r2
 1002f70:	30800015 	stw	r2,0(r6)
 1002f74:	003fac06 	br	1002e28 <__alt_mem_TCDM+0xff001e28>
 1002f78:	00c00504 	movi	r3,20
 1002f7c:	19401536 	bltu	r3,r5,1002fd4 <_free_r+0x29c>
 1002f80:	28c01704 	addi	r3,r5,92
 1002f84:	18c7883a 	add	r3,r3,r3
 1002f88:	294016c4 	addi	r5,r5,91
 1002f8c:	003fb406 	br	1002e60 <__alt_mem_TCDM+0xff001e60>
 1002f90:	280bd0ba 	srai	r5,r5,2
 1002f94:	00c00044 	movi	r3,1
 1002f98:	38800117 	ldw	r2,4(r7)
 1002f9c:	194a983a 	sll	r5,r3,r5
 1002fa0:	2007883a 	mov	r3,r4
 1002fa4:	2884b03a 	or	r2,r5,r2
 1002fa8:	38800115 	stw	r2,4(r7)
 1002fac:	003fbb06 	br	1002e9c <__alt_mem_TCDM+0xff001e9c>
 1002fb0:	21800515 	stw	r6,20(r4)
 1002fb4:	21800415 	stw	r6,16(r4)
 1002fb8:	10c00054 	ori	r3,r2,1
 1002fbc:	31c00315 	stw	r7,12(r6)
 1002fc0:	31c00215 	stw	r7,8(r6)
 1002fc4:	30c00115 	stw	r3,4(r6)
 1002fc8:	308d883a 	add	r6,r6,r2
 1002fcc:	30800015 	stw	r2,0(r6)
 1002fd0:	003f9506 	br	1002e28 <__alt_mem_TCDM+0xff001e28>
 1002fd4:	00c01504 	movi	r3,84
 1002fd8:	19400536 	bltu	r3,r5,1002ff0 <_free_r+0x2b8>
 1002fdc:	100ad33a 	srli	r5,r2,12
 1002fe0:	28c01bc4 	addi	r3,r5,111
 1002fe4:	18c7883a 	add	r3,r3,r3
 1002fe8:	29401b84 	addi	r5,r5,110
 1002fec:	003f9c06 	br	1002e60 <__alt_mem_TCDM+0xff001e60>
 1002ff0:	00c05504 	movi	r3,340
 1002ff4:	19400536 	bltu	r3,r5,100300c <_free_r+0x2d4>
 1002ff8:	100ad3fa 	srli	r5,r2,15
 1002ffc:	28c01e04 	addi	r3,r5,120
 1003000:	18c7883a 	add	r3,r3,r3
 1003004:	29401dc4 	addi	r5,r5,119
 1003008:	003f9506 	br	1002e60 <__alt_mem_TCDM+0xff001e60>
 100300c:	00c15504 	movi	r3,1364
 1003010:	19400536 	bltu	r3,r5,1003028 <_free_r+0x2f0>
 1003014:	100ad4ba 	srli	r5,r2,18
 1003018:	28c01f44 	addi	r3,r5,125
 100301c:	18c7883a 	add	r3,r3,r3
 1003020:	29401f04 	addi	r5,r5,124
 1003024:	003f8e06 	br	1002e60 <__alt_mem_TCDM+0xff001e60>
 1003028:	00c03f84 	movi	r3,254
 100302c:	01401f84 	movi	r5,126
 1003030:	003f8b06 	br	1002e60 <__alt_mem_TCDM+0xff001e60>
 1003034:	10c00054 	ori	r3,r2,1
 1003038:	30c00115 	stw	r3,4(r6)
 100303c:	308d883a 	add	r6,r6,r2
 1003040:	30800015 	stw	r2,0(r6)
 1003044:	003f7806 	br	1002e28 <__alt_mem_TCDM+0xff001e28>

01003048 <_lseek_r>:
 1003048:	defffd04 	addi	sp,sp,-12
 100304c:	2805883a 	mov	r2,r5
 1003050:	dc000015 	stw	r16,0(sp)
 1003054:	04004234 	movhi	r16,264
 1003058:	dc400115 	stw	r17,4(sp)
 100305c:	300b883a 	mov	r5,r6
 1003060:	8426f304 	addi	r16,r16,-25652
 1003064:	2023883a 	mov	r17,r4
 1003068:	380d883a 	mov	r6,r7
 100306c:	1009883a 	mov	r4,r2
 1003070:	dfc00215 	stw	ra,8(sp)
 1003074:	80000015 	stw	zero,0(r16)
 1003078:	10039540 	call	1003954 <lseek>
 100307c:	00ffffc4 	movi	r3,-1
 1003080:	10c00526 	beq	r2,r3,1003098 <_lseek_r+0x50>
 1003084:	dfc00217 	ldw	ra,8(sp)
 1003088:	dc400117 	ldw	r17,4(sp)
 100308c:	dc000017 	ldw	r16,0(sp)
 1003090:	dec00304 	addi	sp,sp,12
 1003094:	f800283a 	ret
 1003098:	80c00017 	ldw	r3,0(r16)
 100309c:	183ff926 	beq	r3,zero,1003084 <__alt_mem_TCDM+0xff002084>
 10030a0:	88c00015 	stw	r3,0(r17)
 10030a4:	003ff706 	br	1003084 <__alt_mem_TCDM+0xff002084>

010030a8 <__smakebuf_r>:
 10030a8:	2880030b 	ldhu	r2,12(r5)
 10030ac:	10c0008c 	andi	r3,r2,2
 10030b0:	1800411e 	bne	r3,zero,10031b8 <__smakebuf_r+0x110>
 10030b4:	deffec04 	addi	sp,sp,-80
 10030b8:	dc000f15 	stw	r16,60(sp)
 10030bc:	2821883a 	mov	r16,r5
 10030c0:	2940038f 	ldh	r5,14(r5)
 10030c4:	dc401015 	stw	r17,64(sp)
 10030c8:	dfc01315 	stw	ra,76(sp)
 10030cc:	dcc01215 	stw	r19,72(sp)
 10030d0:	dc801115 	stw	r18,68(sp)
 10030d4:	2023883a 	mov	r17,r4
 10030d8:	28001c16 	blt	r5,zero,100314c <__smakebuf_r+0xa4>
 10030dc:	d80d883a 	mov	r6,sp
 10030e0:	10032c40 	call	10032c4 <_fstat_r>
 10030e4:	10001816 	blt	r2,zero,1003148 <__smakebuf_r+0xa0>
 10030e8:	d8800117 	ldw	r2,4(sp)
 10030ec:	00e00014 	movui	r3,32768
 10030f0:	10bc000c 	andi	r2,r2,61440
 10030f4:	14c80020 	cmpeqi	r19,r2,8192
 10030f8:	10c03726 	beq	r2,r3,10031d8 <__smakebuf_r+0x130>
 10030fc:	80c0030b 	ldhu	r3,12(r16)
 1003100:	18c20014 	ori	r3,r3,2048
 1003104:	80c0030d 	sth	r3,12(r16)
 1003108:	00c80004 	movi	r3,8192
 100310c:	10c0521e 	bne	r2,r3,1003258 <__smakebuf_r+0x1b0>
 1003110:	8140038f 	ldh	r5,14(r16)
 1003114:	8809883a 	mov	r4,r17
 1003118:	10033200 	call	1003320 <_isatty_r>
 100311c:	10004c26 	beq	r2,zero,1003250 <__smakebuf_r+0x1a8>
 1003120:	8080030b 	ldhu	r2,12(r16)
 1003124:	80c010c4 	addi	r3,r16,67
 1003128:	80c00015 	stw	r3,0(r16)
 100312c:	10800054 	ori	r2,r2,1
 1003130:	8080030d 	sth	r2,12(r16)
 1003134:	00800044 	movi	r2,1
 1003138:	80c00415 	stw	r3,16(r16)
 100313c:	80800515 	stw	r2,20(r16)
 1003140:	04810004 	movi	r18,1024
 1003144:	00000706 	br	1003164 <__smakebuf_r+0xbc>
 1003148:	8080030b 	ldhu	r2,12(r16)
 100314c:	10c0200c 	andi	r3,r2,128
 1003150:	18001f1e 	bne	r3,zero,10031d0 <__smakebuf_r+0x128>
 1003154:	04810004 	movi	r18,1024
 1003158:	10820014 	ori	r2,r2,2048
 100315c:	8080030d 	sth	r2,12(r16)
 1003160:	0027883a 	mov	r19,zero
 1003164:	900b883a 	mov	r5,r18
 1003168:	8809883a 	mov	r4,r17
 100316c:	10012b00 	call	10012b0 <_malloc_r>
 1003170:	10002c26 	beq	r2,zero,1003224 <__smakebuf_r+0x17c>
 1003174:	80c0030b 	ldhu	r3,12(r16)
 1003178:	01004034 	movhi	r4,256
 100317c:	21023504 	addi	r4,r4,2260
 1003180:	89000f15 	stw	r4,60(r17)
 1003184:	18c02014 	ori	r3,r3,128
 1003188:	80c0030d 	sth	r3,12(r16)
 100318c:	80800015 	stw	r2,0(r16)
 1003190:	80800415 	stw	r2,16(r16)
 1003194:	84800515 	stw	r18,20(r16)
 1003198:	98001a1e 	bne	r19,zero,1003204 <__smakebuf_r+0x15c>
 100319c:	dfc01317 	ldw	ra,76(sp)
 10031a0:	dcc01217 	ldw	r19,72(sp)
 10031a4:	dc801117 	ldw	r18,68(sp)
 10031a8:	dc401017 	ldw	r17,64(sp)
 10031ac:	dc000f17 	ldw	r16,60(sp)
 10031b0:	dec01404 	addi	sp,sp,80
 10031b4:	f800283a 	ret
 10031b8:	288010c4 	addi	r2,r5,67
 10031bc:	28800015 	stw	r2,0(r5)
 10031c0:	28800415 	stw	r2,16(r5)
 10031c4:	00800044 	movi	r2,1
 10031c8:	28800515 	stw	r2,20(r5)
 10031cc:	f800283a 	ret
 10031d0:	04801004 	movi	r18,64
 10031d4:	003fe006 	br	1003158 <__alt_mem_TCDM+0xff002158>
 10031d8:	81000a17 	ldw	r4,40(r16)
 10031dc:	00c04034 	movhi	r3,256
 10031e0:	18c97f04 	addi	r3,r3,9724
 10031e4:	20ffc51e 	bne	r4,r3,10030fc <__alt_mem_TCDM+0xff0020fc>
 10031e8:	8080030b 	ldhu	r2,12(r16)
 10031ec:	04810004 	movi	r18,1024
 10031f0:	84801315 	stw	r18,76(r16)
 10031f4:	1484b03a 	or	r2,r2,r18
 10031f8:	8080030d 	sth	r2,12(r16)
 10031fc:	0027883a 	mov	r19,zero
 1003200:	003fd806 	br	1003164 <__alt_mem_TCDM+0xff002164>
 1003204:	8140038f 	ldh	r5,14(r16)
 1003208:	8809883a 	mov	r4,r17
 100320c:	10033200 	call	1003320 <_isatty_r>
 1003210:	103fe226 	beq	r2,zero,100319c <__alt_mem_TCDM+0xff00219c>
 1003214:	8080030b 	ldhu	r2,12(r16)
 1003218:	10800054 	ori	r2,r2,1
 100321c:	8080030d 	sth	r2,12(r16)
 1003220:	003fde06 	br	100319c <__alt_mem_TCDM+0xff00219c>
 1003224:	8080030b 	ldhu	r2,12(r16)
 1003228:	10c0800c 	andi	r3,r2,512
 100322c:	183fdb1e 	bne	r3,zero,100319c <__alt_mem_TCDM+0xff00219c>
 1003230:	10800094 	ori	r2,r2,2
 1003234:	80c010c4 	addi	r3,r16,67
 1003238:	8080030d 	sth	r2,12(r16)
 100323c:	00800044 	movi	r2,1
 1003240:	80c00015 	stw	r3,0(r16)
 1003244:	80c00415 	stw	r3,16(r16)
 1003248:	80800515 	stw	r2,20(r16)
 100324c:	003fd306 	br	100319c <__alt_mem_TCDM+0xff00219c>
 1003250:	04810004 	movi	r18,1024
 1003254:	003fc306 	br	1003164 <__alt_mem_TCDM+0xff002164>
 1003258:	0027883a 	mov	r19,zero
 100325c:	04810004 	movi	r18,1024
 1003260:	003fc006 	br	1003164 <__alt_mem_TCDM+0xff002164>

01003264 <_read_r>:
 1003264:	defffd04 	addi	sp,sp,-12
 1003268:	2805883a 	mov	r2,r5
 100326c:	dc000015 	stw	r16,0(sp)
 1003270:	04004234 	movhi	r16,264
 1003274:	dc400115 	stw	r17,4(sp)
 1003278:	300b883a 	mov	r5,r6
 100327c:	8426f304 	addi	r16,r16,-25652
 1003280:	2023883a 	mov	r17,r4
 1003284:	380d883a 	mov	r6,r7
 1003288:	1009883a 	mov	r4,r2
 100328c:	dfc00215 	stw	ra,8(sp)
 1003290:	80000015 	stw	zero,0(r16)
 1003294:	1003b280 	call	1003b28 <read>
 1003298:	00ffffc4 	movi	r3,-1
 100329c:	10c00526 	beq	r2,r3,10032b4 <_read_r+0x50>
 10032a0:	dfc00217 	ldw	ra,8(sp)
 10032a4:	dc400117 	ldw	r17,4(sp)
 10032a8:	dc000017 	ldw	r16,0(sp)
 10032ac:	dec00304 	addi	sp,sp,12
 10032b0:	f800283a 	ret
 10032b4:	80c00017 	ldw	r3,0(r16)
 10032b8:	183ff926 	beq	r3,zero,10032a0 <__alt_mem_TCDM+0xff0022a0>
 10032bc:	88c00015 	stw	r3,0(r17)
 10032c0:	003ff706 	br	10032a0 <__alt_mem_TCDM+0xff0022a0>

010032c4 <_fstat_r>:
 10032c4:	defffd04 	addi	sp,sp,-12
 10032c8:	2805883a 	mov	r2,r5
 10032cc:	dc000015 	stw	r16,0(sp)
 10032d0:	04004234 	movhi	r16,264
 10032d4:	dc400115 	stw	r17,4(sp)
 10032d8:	8426f304 	addi	r16,r16,-25652
 10032dc:	2023883a 	mov	r17,r4
 10032e0:	300b883a 	mov	r5,r6
 10032e4:	1009883a 	mov	r4,r2
 10032e8:	dfc00215 	stw	ra,8(sp)
 10032ec:	80000015 	stw	zero,0(r16)
 10032f0:	100369c0 	call	100369c <fstat>
 10032f4:	00ffffc4 	movi	r3,-1
 10032f8:	10c00526 	beq	r2,r3,1003310 <_fstat_r+0x4c>
 10032fc:	dfc00217 	ldw	ra,8(sp)
 1003300:	dc400117 	ldw	r17,4(sp)
 1003304:	dc000017 	ldw	r16,0(sp)
 1003308:	dec00304 	addi	sp,sp,12
 100330c:	f800283a 	ret
 1003310:	80c00017 	ldw	r3,0(r16)
 1003314:	183ff926 	beq	r3,zero,10032fc <__alt_mem_TCDM+0xff0022fc>
 1003318:	88c00015 	stw	r3,0(r17)
 100331c:	003ff706 	br	10032fc <__alt_mem_TCDM+0xff0022fc>

01003320 <_isatty_r>:
 1003320:	defffd04 	addi	sp,sp,-12
 1003324:	dc000015 	stw	r16,0(sp)
 1003328:	04004234 	movhi	r16,264
 100332c:	dc400115 	stw	r17,4(sp)
 1003330:	8426f304 	addi	r16,r16,-25652
 1003334:	2023883a 	mov	r17,r4
 1003338:	2809883a 	mov	r4,r5
 100333c:	dfc00215 	stw	ra,8(sp)
 1003340:	80000015 	stw	zero,0(r16)
 1003344:	10037880 	call	1003788 <isatty>
 1003348:	00ffffc4 	movi	r3,-1
 100334c:	10c00526 	beq	r2,r3,1003364 <_isatty_r+0x44>
 1003350:	dfc00217 	ldw	ra,8(sp)
 1003354:	dc400117 	ldw	r17,4(sp)
 1003358:	dc000017 	ldw	r16,0(sp)
 100335c:	dec00304 	addi	sp,sp,12
 1003360:	f800283a 	ret
 1003364:	80c00017 	ldw	r3,0(r16)
 1003368:	183ff926 	beq	r3,zero,1003350 <__alt_mem_TCDM+0xff002350>
 100336c:	88c00015 	stw	r3,0(r17)
 1003370:	003ff706 	br	1003350 <__alt_mem_TCDM+0xff002350>

01003374 <__divsi3>:
 1003374:	20001b16 	blt	r4,zero,10033e4 <__divsi3+0x70>
 1003378:	000f883a 	mov	r7,zero
 100337c:	28001616 	blt	r5,zero,10033d8 <__divsi3+0x64>
 1003380:	200d883a 	mov	r6,r4
 1003384:	29001a2e 	bgeu	r5,r4,10033f0 <__divsi3+0x7c>
 1003388:	00800804 	movi	r2,32
 100338c:	00c00044 	movi	r3,1
 1003390:	00000106 	br	1003398 <__divsi3+0x24>
 1003394:	10000d26 	beq	r2,zero,10033cc <__divsi3+0x58>
 1003398:	294b883a 	add	r5,r5,r5
 100339c:	10bfffc4 	addi	r2,r2,-1
 10033a0:	18c7883a 	add	r3,r3,r3
 10033a4:	293ffb36 	bltu	r5,r4,1003394 <__alt_mem_TCDM+0xff002394>
 10033a8:	0005883a 	mov	r2,zero
 10033ac:	18000726 	beq	r3,zero,10033cc <__divsi3+0x58>
 10033b0:	0005883a 	mov	r2,zero
 10033b4:	31400236 	bltu	r6,r5,10033c0 <__divsi3+0x4c>
 10033b8:	314dc83a 	sub	r6,r6,r5
 10033bc:	10c4b03a 	or	r2,r2,r3
 10033c0:	1806d07a 	srli	r3,r3,1
 10033c4:	280ad07a 	srli	r5,r5,1
 10033c8:	183ffa1e 	bne	r3,zero,10033b4 <__alt_mem_TCDM+0xff0023b4>
 10033cc:	38000126 	beq	r7,zero,10033d4 <__divsi3+0x60>
 10033d0:	0085c83a 	sub	r2,zero,r2
 10033d4:	f800283a 	ret
 10033d8:	014bc83a 	sub	r5,zero,r5
 10033dc:	39c0005c 	xori	r7,r7,1
 10033e0:	003fe706 	br	1003380 <__alt_mem_TCDM+0xff002380>
 10033e4:	0109c83a 	sub	r4,zero,r4
 10033e8:	01c00044 	movi	r7,1
 10033ec:	003fe306 	br	100337c <__alt_mem_TCDM+0xff00237c>
 10033f0:	00c00044 	movi	r3,1
 10033f4:	003fee06 	br	10033b0 <__alt_mem_TCDM+0xff0023b0>

010033f8 <__modsi3>:
 10033f8:	20001716 	blt	r4,zero,1003458 <__modsi3+0x60>
 10033fc:	000f883a 	mov	r7,zero
 1003400:	2005883a 	mov	r2,r4
 1003404:	28001216 	blt	r5,zero,1003450 <__modsi3+0x58>
 1003408:	2900162e 	bgeu	r5,r4,1003464 <__modsi3+0x6c>
 100340c:	01800804 	movi	r6,32
 1003410:	00c00044 	movi	r3,1
 1003414:	00000106 	br	100341c <__modsi3+0x24>
 1003418:	30000a26 	beq	r6,zero,1003444 <__modsi3+0x4c>
 100341c:	294b883a 	add	r5,r5,r5
 1003420:	31bfffc4 	addi	r6,r6,-1
 1003424:	18c7883a 	add	r3,r3,r3
 1003428:	293ffb36 	bltu	r5,r4,1003418 <__alt_mem_TCDM+0xff002418>
 100342c:	18000526 	beq	r3,zero,1003444 <__modsi3+0x4c>
 1003430:	1806d07a 	srli	r3,r3,1
 1003434:	11400136 	bltu	r2,r5,100343c <__modsi3+0x44>
 1003438:	1145c83a 	sub	r2,r2,r5
 100343c:	280ad07a 	srli	r5,r5,1
 1003440:	183ffb1e 	bne	r3,zero,1003430 <__alt_mem_TCDM+0xff002430>
 1003444:	38000126 	beq	r7,zero,100344c <__modsi3+0x54>
 1003448:	0085c83a 	sub	r2,zero,r2
 100344c:	f800283a 	ret
 1003450:	014bc83a 	sub	r5,zero,r5
 1003454:	003fec06 	br	1003408 <__alt_mem_TCDM+0xff002408>
 1003458:	0109c83a 	sub	r4,zero,r4
 100345c:	01c00044 	movi	r7,1
 1003460:	003fe706 	br	1003400 <__alt_mem_TCDM+0xff002400>
 1003464:	00c00044 	movi	r3,1
 1003468:	003ff106 	br	1003430 <__alt_mem_TCDM+0xff002430>

0100346c <__udivsi3>:
 100346c:	200d883a 	mov	r6,r4
 1003470:	2900152e 	bgeu	r5,r4,10034c8 <__udivsi3+0x5c>
 1003474:	28001416 	blt	r5,zero,10034c8 <__udivsi3+0x5c>
 1003478:	00800804 	movi	r2,32
 100347c:	00c00044 	movi	r3,1
 1003480:	00000206 	br	100348c <__udivsi3+0x20>
 1003484:	10000e26 	beq	r2,zero,10034c0 <__udivsi3+0x54>
 1003488:	28000516 	blt	r5,zero,10034a0 <__udivsi3+0x34>
 100348c:	294b883a 	add	r5,r5,r5
 1003490:	10bfffc4 	addi	r2,r2,-1
 1003494:	18c7883a 	add	r3,r3,r3
 1003498:	293ffa36 	bltu	r5,r4,1003484 <__alt_mem_TCDM+0xff002484>
 100349c:	18000826 	beq	r3,zero,10034c0 <__udivsi3+0x54>
 10034a0:	0005883a 	mov	r2,zero
 10034a4:	31400236 	bltu	r6,r5,10034b0 <__udivsi3+0x44>
 10034a8:	314dc83a 	sub	r6,r6,r5
 10034ac:	10c4b03a 	or	r2,r2,r3
 10034b0:	1806d07a 	srli	r3,r3,1
 10034b4:	280ad07a 	srli	r5,r5,1
 10034b8:	183ffa1e 	bne	r3,zero,10034a4 <__alt_mem_TCDM+0xff0024a4>
 10034bc:	f800283a 	ret
 10034c0:	0005883a 	mov	r2,zero
 10034c4:	f800283a 	ret
 10034c8:	00c00044 	movi	r3,1
 10034cc:	003ff406 	br	10034a0 <__alt_mem_TCDM+0xff0024a0>

010034d0 <__umodsi3>:
 10034d0:	2005883a 	mov	r2,r4
 10034d4:	2900122e 	bgeu	r5,r4,1003520 <__umodsi3+0x50>
 10034d8:	28001116 	blt	r5,zero,1003520 <__umodsi3+0x50>
 10034dc:	01800804 	movi	r6,32
 10034e0:	00c00044 	movi	r3,1
 10034e4:	00000206 	br	10034f0 <__umodsi3+0x20>
 10034e8:	30000c26 	beq	r6,zero,100351c <__umodsi3+0x4c>
 10034ec:	28000516 	blt	r5,zero,1003504 <__umodsi3+0x34>
 10034f0:	294b883a 	add	r5,r5,r5
 10034f4:	31bfffc4 	addi	r6,r6,-1
 10034f8:	18c7883a 	add	r3,r3,r3
 10034fc:	293ffa36 	bltu	r5,r4,10034e8 <__alt_mem_TCDM+0xff0024e8>
 1003500:	18000626 	beq	r3,zero,100351c <__umodsi3+0x4c>
 1003504:	1806d07a 	srli	r3,r3,1
 1003508:	11400136 	bltu	r2,r5,1003510 <__umodsi3+0x40>
 100350c:	1145c83a 	sub	r2,r2,r5
 1003510:	280ad07a 	srli	r5,r5,1
 1003514:	183ffb1e 	bne	r3,zero,1003504 <__alt_mem_TCDM+0xff002504>
 1003518:	f800283a 	ret
 100351c:	f800283a 	ret
 1003520:	00c00044 	movi	r3,1
 1003524:	003ff706 	br	1003504 <__alt_mem_TCDM+0xff002504>

01003528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003528:	defffe04 	addi	sp,sp,-8
 100352c:	dfc00115 	stw	ra,4(sp)
 1003530:	df000015 	stw	fp,0(sp)
 1003534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1003538:	d0a00f17 	ldw	r2,-32708(gp)
 100353c:	10000326 	beq	r2,zero,100354c <alt_get_errno+0x24>
 1003540:	d0a00f17 	ldw	r2,-32708(gp)
 1003544:	103ee83a 	callr	r2
 1003548:	00000106 	br	1003550 <alt_get_errno+0x28>
 100354c:	d0a6b804 	addi	r2,gp,-25888
}
 1003550:	e037883a 	mov	sp,fp
 1003554:	dfc00117 	ldw	ra,4(sp)
 1003558:	df000017 	ldw	fp,0(sp)
 100355c:	dec00204 	addi	sp,sp,8
 1003560:	f800283a 	ret

01003564 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1003564:	defffb04 	addi	sp,sp,-20
 1003568:	dfc00415 	stw	ra,16(sp)
 100356c:	df000315 	stw	fp,12(sp)
 1003570:	df000304 	addi	fp,sp,12
 1003574:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1003578:	e0bfff17 	ldw	r2,-4(fp)
 100357c:	10000616 	blt	r2,zero,1003598 <close+0x34>
 1003580:	e0bfff17 	ldw	r2,-4(fp)
 1003584:	10c00324 	muli	r3,r2,12
 1003588:	008041f4 	movhi	r2,263
 100358c:	109bc304 	addi	r2,r2,28428
 1003590:	1885883a 	add	r2,r3,r2
 1003594:	00000106 	br	100359c <close+0x38>
 1003598:	0005883a 	mov	r2,zero
 100359c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 10035a0:	e0bffd17 	ldw	r2,-12(fp)
 10035a4:	10001926 	beq	r2,zero,100360c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 10035a8:	e0bffd17 	ldw	r2,-12(fp)
 10035ac:	10800017 	ldw	r2,0(r2)
 10035b0:	10800417 	ldw	r2,16(r2)
 10035b4:	10000626 	beq	r2,zero,10035d0 <close+0x6c>
 10035b8:	e0bffd17 	ldw	r2,-12(fp)
 10035bc:	10800017 	ldw	r2,0(r2)
 10035c0:	10800417 	ldw	r2,16(r2)
 10035c4:	e13ffd17 	ldw	r4,-12(fp)
 10035c8:	103ee83a 	callr	r2
 10035cc:	00000106 	br	10035d4 <close+0x70>
 10035d0:	0005883a 	mov	r2,zero
 10035d4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 10035d8:	e13fff17 	ldw	r4,-4(fp)
 10035dc:	1003c240 	call	1003c24 <alt_release_fd>
    if (rval < 0)
 10035e0:	e0bffe17 	ldw	r2,-8(fp)
 10035e4:	1000070e 	bge	r2,zero,1003604 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 10035e8:	10035280 	call	1003528 <alt_get_errno>
 10035ec:	1007883a 	mov	r3,r2
 10035f0:	e0bffe17 	ldw	r2,-8(fp)
 10035f4:	0085c83a 	sub	r2,zero,r2
 10035f8:	18800015 	stw	r2,0(r3)
      return -1;
 10035fc:	00bfffc4 	movi	r2,-1
 1003600:	00000706 	br	1003620 <close+0xbc>
    }
    return 0;
 1003604:	0005883a 	mov	r2,zero
 1003608:	00000506 	br	1003620 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100360c:	10035280 	call	1003528 <alt_get_errno>
 1003610:	1007883a 	mov	r3,r2
 1003614:	00801444 	movi	r2,81
 1003618:	18800015 	stw	r2,0(r3)
    return -1;
 100361c:	00bfffc4 	movi	r2,-1
  }
}
 1003620:	e037883a 	mov	sp,fp
 1003624:	dfc00117 	ldw	ra,4(sp)
 1003628:	df000017 	ldw	fp,0(sp)
 100362c:	dec00204 	addi	sp,sp,8
 1003630:	f800283a 	ret

01003634 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1003634:	defffc04 	addi	sp,sp,-16
 1003638:	df000315 	stw	fp,12(sp)
 100363c:	df000304 	addi	fp,sp,12
 1003640:	e13ffd15 	stw	r4,-12(fp)
 1003644:	e17ffe15 	stw	r5,-8(fp)
 1003648:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100364c:	e0bfff17 	ldw	r2,-4(fp)
}
 1003650:	e037883a 	mov	sp,fp
 1003654:	df000017 	ldw	fp,0(sp)
 1003658:	dec00104 	addi	sp,sp,4
 100365c:	f800283a 	ret

01003660 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003660:	defffe04 	addi	sp,sp,-8
 1003664:	dfc00115 	stw	ra,4(sp)
 1003668:	df000015 	stw	fp,0(sp)
 100366c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1003670:	d0a00f17 	ldw	r2,-32708(gp)
 1003674:	10000326 	beq	r2,zero,1003684 <alt_get_errno+0x24>
 1003678:	d0a00f17 	ldw	r2,-32708(gp)
 100367c:	103ee83a 	callr	r2
 1003680:	00000106 	br	1003688 <alt_get_errno+0x28>
 1003684:	d0a6b804 	addi	r2,gp,-25888
}
 1003688:	e037883a 	mov	sp,fp
 100368c:	dfc00117 	ldw	ra,4(sp)
 1003690:	df000017 	ldw	fp,0(sp)
 1003694:	dec00204 	addi	sp,sp,8
 1003698:	f800283a 	ret

0100369c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100369c:	defffb04 	addi	sp,sp,-20
 10036a0:	dfc00415 	stw	ra,16(sp)
 10036a4:	df000315 	stw	fp,12(sp)
 10036a8:	df000304 	addi	fp,sp,12
 10036ac:	e13ffe15 	stw	r4,-8(fp)
 10036b0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10036b4:	e0bffe17 	ldw	r2,-8(fp)
 10036b8:	10000616 	blt	r2,zero,10036d4 <fstat+0x38>
 10036bc:	e0bffe17 	ldw	r2,-8(fp)
 10036c0:	10c00324 	muli	r3,r2,12
 10036c4:	008041f4 	movhi	r2,263
 10036c8:	109bc304 	addi	r2,r2,28428
 10036cc:	1885883a 	add	r2,r3,r2
 10036d0:	00000106 	br	10036d8 <fstat+0x3c>
 10036d4:	0005883a 	mov	r2,zero
 10036d8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 10036dc:	e0bffd17 	ldw	r2,-12(fp)
 10036e0:	10001026 	beq	r2,zero,1003724 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 10036e4:	e0bffd17 	ldw	r2,-12(fp)
 10036e8:	10800017 	ldw	r2,0(r2)
 10036ec:	10800817 	ldw	r2,32(r2)
 10036f0:	10000726 	beq	r2,zero,1003710 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 10036f4:	e0bffd17 	ldw	r2,-12(fp)
 10036f8:	10800017 	ldw	r2,0(r2)
 10036fc:	10800817 	ldw	r2,32(r2)
 1003700:	e17fff17 	ldw	r5,-4(fp)
 1003704:	e13ffd17 	ldw	r4,-12(fp)
 1003708:	103ee83a 	callr	r2
 100370c:	00000a06 	br	1003738 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1003710:	e0bfff17 	ldw	r2,-4(fp)
 1003714:	00c80004 	movi	r3,8192
 1003718:	10c00115 	stw	r3,4(r2)
      return 0;
 100371c:	0005883a 	mov	r2,zero
 1003720:	00000506 	br	1003738 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1003724:	10036600 	call	1003660 <alt_get_errno>
 1003728:	1007883a 	mov	r3,r2
 100372c:	00801444 	movi	r2,81
 1003730:	18800015 	stw	r2,0(r3)
    return -1;
 1003734:	00bfffc4 	movi	r2,-1
  }
}
 1003738:	e037883a 	mov	sp,fp
 100373c:	dfc00117 	ldw	ra,4(sp)
 1003740:	df000017 	ldw	fp,0(sp)
 1003744:	dec00204 	addi	sp,sp,8
 1003748:	f800283a 	ret

0100374c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100374c:	defffe04 	addi	sp,sp,-8
 1003750:	dfc00115 	stw	ra,4(sp)
 1003754:	df000015 	stw	fp,0(sp)
 1003758:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100375c:	d0a00f17 	ldw	r2,-32708(gp)
 1003760:	10000326 	beq	r2,zero,1003770 <alt_get_errno+0x24>
 1003764:	d0a00f17 	ldw	r2,-32708(gp)
 1003768:	103ee83a 	callr	r2
 100376c:	00000106 	br	1003774 <alt_get_errno+0x28>
 1003770:	d0a6b804 	addi	r2,gp,-25888
}
 1003774:	e037883a 	mov	sp,fp
 1003778:	dfc00117 	ldw	ra,4(sp)
 100377c:	df000017 	ldw	fp,0(sp)
 1003780:	dec00204 	addi	sp,sp,8
 1003784:	f800283a 	ret

01003788 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1003788:	deffed04 	addi	sp,sp,-76
 100378c:	dfc01215 	stw	ra,72(sp)
 1003790:	df001115 	stw	fp,68(sp)
 1003794:	df001104 	addi	fp,sp,68
 1003798:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100379c:	e0bfff17 	ldw	r2,-4(fp)
 10037a0:	10000616 	blt	r2,zero,10037bc <isatty+0x34>
 10037a4:	e0bfff17 	ldw	r2,-4(fp)
 10037a8:	10c00324 	muli	r3,r2,12
 10037ac:	008041f4 	movhi	r2,263
 10037b0:	109bc304 	addi	r2,r2,28428
 10037b4:	1885883a 	add	r2,r3,r2
 10037b8:	00000106 	br	10037c0 <isatty+0x38>
 10037bc:	0005883a 	mov	r2,zero
 10037c0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 10037c4:	e0bfef17 	ldw	r2,-68(fp)
 10037c8:	10000e26 	beq	r2,zero,1003804 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 10037cc:	e0bfef17 	ldw	r2,-68(fp)
 10037d0:	10800017 	ldw	r2,0(r2)
 10037d4:	10800817 	ldw	r2,32(r2)
 10037d8:	1000021e 	bne	r2,zero,10037e4 <isatty+0x5c>
    {
      return 1;
 10037dc:	00800044 	movi	r2,1
 10037e0:	00000d06 	br	1003818 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 10037e4:	e0bff004 	addi	r2,fp,-64
 10037e8:	100b883a 	mov	r5,r2
 10037ec:	e13fff17 	ldw	r4,-4(fp)
 10037f0:	100369c0 	call	100369c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 10037f4:	e0bff117 	ldw	r2,-60(fp)
 10037f8:	10880020 	cmpeqi	r2,r2,8192
 10037fc:	10803fcc 	andi	r2,r2,255
 1003800:	00000506 	br	1003818 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1003804:	100374c0 	call	100374c <alt_get_errno>
 1003808:	1007883a 	mov	r3,r2
 100380c:	00801444 	movi	r2,81
 1003810:	18800015 	stw	r2,0(r3)
    return 0;
 1003814:	0005883a 	mov	r2,zero
  }
}
 1003818:	e037883a 	mov	sp,fp
 100381c:	dfc00117 	ldw	ra,4(sp)
 1003820:	df000017 	ldw	fp,0(sp)
 1003824:	dec00204 	addi	sp,sp,8
 1003828:	f800283a 	ret

0100382c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100382c:	defffc04 	addi	sp,sp,-16
 1003830:	df000315 	stw	fp,12(sp)
 1003834:	df000304 	addi	fp,sp,12
 1003838:	e13ffd15 	stw	r4,-12(fp)
 100383c:	e17ffe15 	stw	r5,-8(fp)
 1003840:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1003844:	e0fffe17 	ldw	r3,-8(fp)
 1003848:	e0bffd17 	ldw	r2,-12(fp)
 100384c:	18800c26 	beq	r3,r2,1003880 <alt_load_section+0x54>
  {
    while( to != end )
 1003850:	00000806 	br	1003874 <alt_load_section+0x48>
    {
      *to++ = *from++;
 1003854:	e0bffe17 	ldw	r2,-8(fp)
 1003858:	10c00104 	addi	r3,r2,4
 100385c:	e0fffe15 	stw	r3,-8(fp)
 1003860:	e0fffd17 	ldw	r3,-12(fp)
 1003864:	19000104 	addi	r4,r3,4
 1003868:	e13ffd15 	stw	r4,-12(fp)
 100386c:	18c00017 	ldw	r3,0(r3)
 1003870:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1003874:	e0fffe17 	ldw	r3,-8(fp)
 1003878:	e0bfff17 	ldw	r2,-4(fp)
 100387c:	18bff51e 	bne	r3,r2,1003854 <__alt_mem_TCDM+0xff002854>
    {
      *to++ = *from++;
    }
  }
}
 1003880:	0001883a 	nop
 1003884:	e037883a 	mov	sp,fp
 1003888:	df000017 	ldw	fp,0(sp)
 100388c:	dec00104 	addi	sp,sp,4
 1003890:	f800283a 	ret

01003894 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1003894:	defffe04 	addi	sp,sp,-8
 1003898:	dfc00115 	stw	ra,4(sp)
 100389c:	df000015 	stw	fp,0(sp)
 10038a0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 10038a4:	01804234 	movhi	r6,264
 10038a8:	31a04f04 	addi	r6,r6,-32452
 10038ac:	014041f4 	movhi	r5,263
 10038b0:	2959ae04 	addi	r5,r5,26296
 10038b4:	01004234 	movhi	r4,264
 10038b8:	21204f04 	addi	r4,r4,-32452
 10038bc:	100382c0 	call	100382c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 10038c0:	01808034 	movhi	r6,512
 10038c4:	31809104 	addi	r6,r6,580
 10038c8:	01408034 	movhi	r5,512
 10038cc:	29400804 	addi	r5,r5,32
 10038d0:	01004034 	movhi	r4,256
 10038d4:	21000804 	addi	r4,r4,32
 10038d8:	100382c0 	call	100382c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 10038dc:	018041f4 	movhi	r6,263
 10038e0:	3199ae04 	addi	r6,r6,26296
 10038e4:	01404034 	movhi	r5,256
 10038e8:	29579c04 	addi	r5,r5,24176
 10038ec:	01004034 	movhi	r4,256
 10038f0:	21179c04 	addi	r4,r4,24176
 10038f4:	100382c0 	call	100382c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 10038f8:	1004d5c0 	call	1004d5c <alt_dcache_flush_all>
  alt_icache_flush_all();
 10038fc:	1004f440 	call	1004f44 <alt_icache_flush_all>
}
 1003900:	0001883a 	nop
 1003904:	e037883a 	mov	sp,fp
 1003908:	dfc00117 	ldw	ra,4(sp)
 100390c:	df000017 	ldw	fp,0(sp)
 1003910:	dec00204 	addi	sp,sp,8
 1003914:	f800283a 	ret

01003918 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003918:	defffe04 	addi	sp,sp,-8
 100391c:	dfc00115 	stw	ra,4(sp)
 1003920:	df000015 	stw	fp,0(sp)
 1003924:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1003928:	d0a00f17 	ldw	r2,-32708(gp)
 100392c:	10000326 	beq	r2,zero,100393c <alt_get_errno+0x24>
 1003930:	d0a00f17 	ldw	r2,-32708(gp)
 1003934:	103ee83a 	callr	r2
 1003938:	00000106 	br	1003940 <alt_get_errno+0x28>
 100393c:	d0a6b804 	addi	r2,gp,-25888
}
 1003940:	e037883a 	mov	sp,fp
 1003944:	dfc00117 	ldw	ra,4(sp)
 1003948:	df000017 	ldw	fp,0(sp)
 100394c:	dec00204 	addi	sp,sp,8
 1003950:	f800283a 	ret

01003954 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1003954:	defff904 	addi	sp,sp,-28
 1003958:	dfc00615 	stw	ra,24(sp)
 100395c:	df000515 	stw	fp,20(sp)
 1003960:	df000504 	addi	fp,sp,20
 1003964:	e13ffd15 	stw	r4,-12(fp)
 1003968:	e17ffe15 	stw	r5,-8(fp)
 100396c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1003970:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003974:	e0bffd17 	ldw	r2,-12(fp)
 1003978:	10000616 	blt	r2,zero,1003994 <lseek+0x40>
 100397c:	e0bffd17 	ldw	r2,-12(fp)
 1003980:	10c00324 	muli	r3,r2,12
 1003984:	008041f4 	movhi	r2,263
 1003988:	109bc304 	addi	r2,r2,28428
 100398c:	1885883a 	add	r2,r3,r2
 1003990:	00000106 	br	1003998 <lseek+0x44>
 1003994:	0005883a 	mov	r2,zero
 1003998:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 100399c:	e0bffc17 	ldw	r2,-16(fp)
 10039a0:	10001026 	beq	r2,zero,10039e4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 10039a4:	e0bffc17 	ldw	r2,-16(fp)
 10039a8:	10800017 	ldw	r2,0(r2)
 10039ac:	10800717 	ldw	r2,28(r2)
 10039b0:	10000926 	beq	r2,zero,10039d8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 10039b4:	e0bffc17 	ldw	r2,-16(fp)
 10039b8:	10800017 	ldw	r2,0(r2)
 10039bc:	10800717 	ldw	r2,28(r2)
 10039c0:	e1bfff17 	ldw	r6,-4(fp)
 10039c4:	e17ffe17 	ldw	r5,-8(fp)
 10039c8:	e13ffc17 	ldw	r4,-16(fp)
 10039cc:	103ee83a 	callr	r2
 10039d0:	e0bffb15 	stw	r2,-20(fp)
 10039d4:	00000506 	br	10039ec <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 10039d8:	00bfde84 	movi	r2,-134
 10039dc:	e0bffb15 	stw	r2,-20(fp)
 10039e0:	00000206 	br	10039ec <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 10039e4:	00bfebc4 	movi	r2,-81
 10039e8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 10039ec:	e0bffb17 	ldw	r2,-20(fp)
 10039f0:	1000070e 	bge	r2,zero,1003a10 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 10039f4:	10039180 	call	1003918 <alt_get_errno>
 10039f8:	1007883a 	mov	r3,r2
 10039fc:	e0bffb17 	ldw	r2,-20(fp)
 1003a00:	0085c83a 	sub	r2,zero,r2
 1003a04:	18800015 	stw	r2,0(r3)
    rc = -1;
 1003a08:	00bfffc4 	movi	r2,-1
 1003a0c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 1003a10:	e0bffb17 	ldw	r2,-20(fp)
}
 1003a14:	e037883a 	mov	sp,fp
 1003a18:	dfc00117 	ldw	ra,4(sp)
 1003a1c:	df000017 	ldw	fp,0(sp)
 1003a20:	dec00204 	addi	sp,sp,8
 1003a24:	f800283a 	ret

01003a28 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1003a28:	defffd04 	addi	sp,sp,-12
 1003a2c:	dfc00215 	stw	ra,8(sp)
 1003a30:	df000115 	stw	fp,4(sp)
 1003a34:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1003a38:	0009883a 	mov	r4,zero
 1003a3c:	1003ed00 	call	1003ed0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 1003a40:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1003a44:	1003f080 	call	1003f08 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1003a48:	018041f4 	movhi	r6,263
 1003a4c:	3199a604 	addi	r6,r6,26264
 1003a50:	014041f4 	movhi	r5,263
 1003a54:	2959a604 	addi	r5,r5,26264
 1003a58:	010041f4 	movhi	r4,263
 1003a5c:	2119a604 	addi	r4,r4,26264
 1003a60:	10052dc0 	call	10052dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1003a64:	1004e840 	call	1004e84 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1003a68:	01004034 	movhi	r4,256
 1003a6c:	2113b904 	addi	r4,r4,20196
 1003a70:	1005adc0 	call	1005adc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1003a74:	d0a6b917 	ldw	r2,-25884(gp)
 1003a78:	d0e6ba17 	ldw	r3,-25880(gp)
 1003a7c:	d126bb17 	ldw	r4,-25876(gp)
 1003a80:	200d883a 	mov	r6,r4
 1003a84:	180b883a 	mov	r5,r3
 1003a88:	1009883a 	mov	r4,r2
 1003a8c:	10002900 	call	1000290 <main>
 1003a90:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1003a94:	01000044 	movi	r4,1
 1003a98:	10035640 	call	1003564 <close>
  exit (result);
 1003a9c:	e13fff17 	ldw	r4,-4(fp)
 1003aa0:	1005af00 	call	1005af0 <exit>

01003aa4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1003aa4:	defffe04 	addi	sp,sp,-8
 1003aa8:	df000115 	stw	fp,4(sp)
 1003aac:	df000104 	addi	fp,sp,4
 1003ab0:	e13fff15 	stw	r4,-4(fp)
}
 1003ab4:	0001883a 	nop
 1003ab8:	e037883a 	mov	sp,fp
 1003abc:	df000017 	ldw	fp,0(sp)
 1003ac0:	dec00104 	addi	sp,sp,4
 1003ac4:	f800283a 	ret

01003ac8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1003ac8:	defffe04 	addi	sp,sp,-8
 1003acc:	df000115 	stw	fp,4(sp)
 1003ad0:	df000104 	addi	fp,sp,4
 1003ad4:	e13fff15 	stw	r4,-4(fp)
}
 1003ad8:	0001883a 	nop
 1003adc:	e037883a 	mov	sp,fp
 1003ae0:	df000017 	ldw	fp,0(sp)
 1003ae4:	dec00104 	addi	sp,sp,4
 1003ae8:	f800283a 	ret

01003aec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003aec:	defffe04 	addi	sp,sp,-8
 1003af0:	dfc00115 	stw	ra,4(sp)
 1003af4:	df000015 	stw	fp,0(sp)
 1003af8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1003afc:	d0a00f17 	ldw	r2,-32708(gp)
 1003b00:	10000326 	beq	r2,zero,1003b10 <alt_get_errno+0x24>
 1003b04:	d0a00f17 	ldw	r2,-32708(gp)
 1003b08:	103ee83a 	callr	r2
 1003b0c:	00000106 	br	1003b14 <alt_get_errno+0x28>
 1003b10:	d0a6b804 	addi	r2,gp,-25888
}
 1003b14:	e037883a 	mov	sp,fp
 1003b18:	dfc00117 	ldw	ra,4(sp)
 1003b1c:	df000017 	ldw	fp,0(sp)
 1003b20:	dec00204 	addi	sp,sp,8
 1003b24:	f800283a 	ret

01003b28 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1003b28:	defff904 	addi	sp,sp,-28
 1003b2c:	dfc00615 	stw	ra,24(sp)
 1003b30:	df000515 	stw	fp,20(sp)
 1003b34:	df000504 	addi	fp,sp,20
 1003b38:	e13ffd15 	stw	r4,-12(fp)
 1003b3c:	e17ffe15 	stw	r5,-8(fp)
 1003b40:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003b44:	e0bffd17 	ldw	r2,-12(fp)
 1003b48:	10000616 	blt	r2,zero,1003b64 <read+0x3c>
 1003b4c:	e0bffd17 	ldw	r2,-12(fp)
 1003b50:	10c00324 	muli	r3,r2,12
 1003b54:	008041f4 	movhi	r2,263
 1003b58:	109bc304 	addi	r2,r2,28428
 1003b5c:	1885883a 	add	r2,r3,r2
 1003b60:	00000106 	br	1003b68 <read+0x40>
 1003b64:	0005883a 	mov	r2,zero
 1003b68:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1003b6c:	e0bffb17 	ldw	r2,-20(fp)
 1003b70:	10002226 	beq	r2,zero,1003bfc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1003b74:	e0bffb17 	ldw	r2,-20(fp)
 1003b78:	10800217 	ldw	r2,8(r2)
 1003b7c:	108000cc 	andi	r2,r2,3
 1003b80:	10800060 	cmpeqi	r2,r2,1
 1003b84:	1000181e 	bne	r2,zero,1003be8 <read+0xc0>
        (fd->dev->read))
 1003b88:	e0bffb17 	ldw	r2,-20(fp)
 1003b8c:	10800017 	ldw	r2,0(r2)
 1003b90:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1003b94:	10001426 	beq	r2,zero,1003be8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1003b98:	e0bffb17 	ldw	r2,-20(fp)
 1003b9c:	10800017 	ldw	r2,0(r2)
 1003ba0:	10800517 	ldw	r2,20(r2)
 1003ba4:	e0ffff17 	ldw	r3,-4(fp)
 1003ba8:	180d883a 	mov	r6,r3
 1003bac:	e17ffe17 	ldw	r5,-8(fp)
 1003bb0:	e13ffb17 	ldw	r4,-20(fp)
 1003bb4:	103ee83a 	callr	r2
 1003bb8:	e0bffc15 	stw	r2,-16(fp)
 1003bbc:	e0bffc17 	ldw	r2,-16(fp)
 1003bc0:	1000070e 	bge	r2,zero,1003be0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 1003bc4:	1003aec0 	call	1003aec <alt_get_errno>
 1003bc8:	1007883a 	mov	r3,r2
 1003bcc:	e0bffc17 	ldw	r2,-16(fp)
 1003bd0:	0085c83a 	sub	r2,zero,r2
 1003bd4:	18800015 	stw	r2,0(r3)
          return -1;
 1003bd8:	00bfffc4 	movi	r2,-1
 1003bdc:	00000c06 	br	1003c10 <read+0xe8>
        }
        return rval;
 1003be0:	e0bffc17 	ldw	r2,-16(fp)
 1003be4:	00000a06 	br	1003c10 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1003be8:	1003aec0 	call	1003aec <alt_get_errno>
 1003bec:	1007883a 	mov	r3,r2
 1003bf0:	00800344 	movi	r2,13
 1003bf4:	18800015 	stw	r2,0(r3)
 1003bf8:	00000406 	br	1003c0c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1003bfc:	1003aec0 	call	1003aec <alt_get_errno>
 1003c00:	1007883a 	mov	r3,r2
 1003c04:	00801444 	movi	r2,81
 1003c08:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1003c0c:	00bfffc4 	movi	r2,-1
}
 1003c10:	e037883a 	mov	sp,fp
 1003c14:	dfc00117 	ldw	ra,4(sp)
 1003c18:	df000017 	ldw	fp,0(sp)
 1003c1c:	dec00204 	addi	sp,sp,8
 1003c20:	f800283a 	ret

01003c24 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1003c24:	defffe04 	addi	sp,sp,-8
 1003c28:	df000115 	stw	fp,4(sp)
 1003c2c:	df000104 	addi	fp,sp,4
 1003c30:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1003c34:	e0bfff17 	ldw	r2,-4(fp)
 1003c38:	108000d0 	cmplti	r2,r2,3
 1003c3c:	10000d1e 	bne	r2,zero,1003c74 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1003c40:	008041f4 	movhi	r2,263
 1003c44:	109bc304 	addi	r2,r2,28428
 1003c48:	e0ffff17 	ldw	r3,-4(fp)
 1003c4c:	18c00324 	muli	r3,r3,12
 1003c50:	10c5883a 	add	r2,r2,r3
 1003c54:	10800204 	addi	r2,r2,8
 1003c58:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1003c5c:	008041f4 	movhi	r2,263
 1003c60:	109bc304 	addi	r2,r2,28428
 1003c64:	e0ffff17 	ldw	r3,-4(fp)
 1003c68:	18c00324 	muli	r3,r3,12
 1003c6c:	10c5883a 	add	r2,r2,r3
 1003c70:	10000015 	stw	zero,0(r2)
  }
}
 1003c74:	0001883a 	nop
 1003c78:	e037883a 	mov	sp,fp
 1003c7c:	df000017 	ldw	fp,0(sp)
 1003c80:	dec00104 	addi	sp,sp,4
 1003c84:	f800283a 	ret

01003c88 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1003c88:	defff904 	addi	sp,sp,-28
 1003c8c:	df000615 	stw	fp,24(sp)
 1003c90:	df000604 	addi	fp,sp,24
 1003c94:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1003c98:	0005303a 	rdctl	r2,status
 1003c9c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003ca0:	e0fffe17 	ldw	r3,-8(fp)
 1003ca4:	00bfff84 	movi	r2,-2
 1003ca8:	1884703a 	and	r2,r3,r2
 1003cac:	1001703a 	wrctl	status,r2
  
  return context;
 1003cb0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1003cb4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1003cb8:	d0a01017 	ldw	r2,-32704(gp)
 1003cbc:	10c000c4 	addi	r3,r2,3
 1003cc0:	00bfff04 	movi	r2,-4
 1003cc4:	1884703a 	and	r2,r3,r2
 1003cc8:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1003ccc:	d0e01017 	ldw	r3,-32704(gp)
 1003cd0:	e0bfff17 	ldw	r2,-4(fp)
 1003cd4:	1887883a 	add	r3,r3,r2
 1003cd8:	00808034 	movhi	r2,512
 1003cdc:	10800004 	addi	r2,r2,0
 1003ce0:	10c0062e 	bgeu	r2,r3,1003cfc <sbrk+0x74>
 1003ce4:	e0bffb17 	ldw	r2,-20(fp)
 1003ce8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1003cec:	e0bffa17 	ldw	r2,-24(fp)
 1003cf0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1003cf4:	00bfffc4 	movi	r2,-1
 1003cf8:	00000b06 	br	1003d28 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 1003cfc:	d0a01017 	ldw	r2,-32704(gp)
 1003d00:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 1003d04:	d0e01017 	ldw	r3,-32704(gp)
 1003d08:	e0bfff17 	ldw	r2,-4(fp)
 1003d0c:	1885883a 	add	r2,r3,r2
 1003d10:	d0a01015 	stw	r2,-32704(gp)
 1003d14:	e0bffb17 	ldw	r2,-20(fp)
 1003d18:	e0bffc15 	stw	r2,-16(fp)
 1003d1c:	e0bffc17 	ldw	r2,-16(fp)
 1003d20:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1003d24:	e0bffd17 	ldw	r2,-12(fp)
} 
 1003d28:	e037883a 	mov	sp,fp
 1003d2c:	df000017 	ldw	fp,0(sp)
 1003d30:	dec00104 	addi	sp,sp,4
 1003d34:	f800283a 	ret

01003d38 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 1003d38:	defffd04 	addi	sp,sp,-12
 1003d3c:	dfc00215 	stw	ra,8(sp)
 1003d40:	df000115 	stw	fp,4(sp)
 1003d44:	df000104 	addi	fp,sp,4
 1003d48:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 1003d4c:	e13fff17 	ldw	r4,-4(fp)
 1003d50:	1004c040 	call	1004c04 <alt_busy_sleep>
}
 1003d54:	e037883a 	mov	sp,fp
 1003d58:	dfc00117 	ldw	ra,4(sp)
 1003d5c:	df000017 	ldw	fp,0(sp)
 1003d60:	dec00204 	addi	sp,sp,8
 1003d64:	f800283a 	ret

01003d68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003d68:	defffe04 	addi	sp,sp,-8
 1003d6c:	dfc00115 	stw	ra,4(sp)
 1003d70:	df000015 	stw	fp,0(sp)
 1003d74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1003d78:	d0a00f17 	ldw	r2,-32708(gp)
 1003d7c:	10000326 	beq	r2,zero,1003d8c <alt_get_errno+0x24>
 1003d80:	d0a00f17 	ldw	r2,-32708(gp)
 1003d84:	103ee83a 	callr	r2
 1003d88:	00000106 	br	1003d90 <alt_get_errno+0x28>
 1003d8c:	d0a6b804 	addi	r2,gp,-25888
}
 1003d90:	e037883a 	mov	sp,fp
 1003d94:	dfc00117 	ldw	ra,4(sp)
 1003d98:	df000017 	ldw	fp,0(sp)
 1003d9c:	dec00204 	addi	sp,sp,8
 1003da0:	f800283a 	ret

01003da4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1003da4:	defff904 	addi	sp,sp,-28
 1003da8:	dfc00615 	stw	ra,24(sp)
 1003dac:	df000515 	stw	fp,20(sp)
 1003db0:	df000504 	addi	fp,sp,20
 1003db4:	e13ffd15 	stw	r4,-12(fp)
 1003db8:	e17ffe15 	stw	r5,-8(fp)
 1003dbc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003dc0:	e0bffd17 	ldw	r2,-12(fp)
 1003dc4:	10000616 	blt	r2,zero,1003de0 <write+0x3c>
 1003dc8:	e0bffd17 	ldw	r2,-12(fp)
 1003dcc:	10c00324 	muli	r3,r2,12
 1003dd0:	008041f4 	movhi	r2,263
 1003dd4:	109bc304 	addi	r2,r2,28428
 1003dd8:	1885883a 	add	r2,r3,r2
 1003ddc:	00000106 	br	1003de4 <write+0x40>
 1003de0:	0005883a 	mov	r2,zero
 1003de4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1003de8:	e0bffb17 	ldw	r2,-20(fp)
 1003dec:	10002126 	beq	r2,zero,1003e74 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1003df0:	e0bffb17 	ldw	r2,-20(fp)
 1003df4:	10800217 	ldw	r2,8(r2)
 1003df8:	108000cc 	andi	r2,r2,3
 1003dfc:	10001826 	beq	r2,zero,1003e60 <write+0xbc>
 1003e00:	e0bffb17 	ldw	r2,-20(fp)
 1003e04:	10800017 	ldw	r2,0(r2)
 1003e08:	10800617 	ldw	r2,24(r2)
 1003e0c:	10001426 	beq	r2,zero,1003e60 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1003e10:	e0bffb17 	ldw	r2,-20(fp)
 1003e14:	10800017 	ldw	r2,0(r2)
 1003e18:	10800617 	ldw	r2,24(r2)
 1003e1c:	e0ffff17 	ldw	r3,-4(fp)
 1003e20:	180d883a 	mov	r6,r3
 1003e24:	e17ffe17 	ldw	r5,-8(fp)
 1003e28:	e13ffb17 	ldw	r4,-20(fp)
 1003e2c:	103ee83a 	callr	r2
 1003e30:	e0bffc15 	stw	r2,-16(fp)
 1003e34:	e0bffc17 	ldw	r2,-16(fp)
 1003e38:	1000070e 	bge	r2,zero,1003e58 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 1003e3c:	1003d680 	call	1003d68 <alt_get_errno>
 1003e40:	1007883a 	mov	r3,r2
 1003e44:	e0bffc17 	ldw	r2,-16(fp)
 1003e48:	0085c83a 	sub	r2,zero,r2
 1003e4c:	18800015 	stw	r2,0(r3)
        return -1;
 1003e50:	00bfffc4 	movi	r2,-1
 1003e54:	00000c06 	br	1003e88 <write+0xe4>
      }
      return rval;
 1003e58:	e0bffc17 	ldw	r2,-16(fp)
 1003e5c:	00000a06 	br	1003e88 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1003e60:	1003d680 	call	1003d68 <alt_get_errno>
 1003e64:	1007883a 	mov	r3,r2
 1003e68:	00800344 	movi	r2,13
 1003e6c:	18800015 	stw	r2,0(r3)
 1003e70:	00000406 	br	1003e84 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1003e74:	1003d680 	call	1003d68 <alt_get_errno>
 1003e78:	1007883a 	mov	r3,r2
 1003e7c:	00801444 	movi	r2,81
 1003e80:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1003e84:	00bfffc4 	movi	r2,-1
}
 1003e88:	e037883a 	mov	sp,fp
 1003e8c:	dfc00117 	ldw	ra,4(sp)
 1003e90:	df000017 	ldw	fp,0(sp)
 1003e94:	dec00204 	addi	sp,sp,8
 1003e98:	f800283a 	ret

01003e9c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1003e9c:	defffd04 	addi	sp,sp,-12
 1003ea0:	dfc00215 	stw	ra,8(sp)
 1003ea4:	df000115 	stw	fp,4(sp)
 1003ea8:	df000104 	addi	fp,sp,4
 1003eac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1003eb0:	d1600c04 	addi	r5,gp,-32720
 1003eb4:	e13fff17 	ldw	r4,-4(fp)
 1003eb8:	1004de00 	call	1004de0 <alt_dev_llist_insert>
}
 1003ebc:	e037883a 	mov	sp,fp
 1003ec0:	dfc00117 	ldw	ra,4(sp)
 1003ec4:	df000017 	ldw	fp,0(sp)
 1003ec8:	dec00204 	addi	sp,sp,8
 1003ecc:	f800283a 	ret

01003ed0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1003ed0:	defffd04 	addi	sp,sp,-12
 1003ed4:	dfc00215 	stw	ra,8(sp)
 1003ed8:	df000115 	stw	fp,4(sp)
 1003edc:	df000104 	addi	fp,sp,4
 1003ee0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
 1003ee4:	10057500 	call	1005750 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1003ee8:	00800044 	movi	r2,1
 1003eec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1003ef0:	0001883a 	nop
 1003ef4:	e037883a 	mov	sp,fp
 1003ef8:	dfc00117 	ldw	ra,4(sp)
 1003efc:	df000017 	ldw	fp,0(sp)
 1003f00:	dec00204 	addi	sp,sp,8
 1003f04:	f800283a 	ret

01003f08 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1003f08:	defffe04 	addi	sp,sp,-8
 1003f0c:	dfc00115 	stw	ra,4(sp)
 1003f10:	df000015 	stw	fp,0(sp)
 1003f14:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 1003f18:	01c01904 	movi	r7,100
 1003f1c:	01800044 	movi	r6,1
 1003f20:	000b883a 	mov	r5,zero
 1003f24:	01008034 	movhi	r4,512
 1003f28:	210c2004 	addi	r4,r4,12416
 1003f2c:	1004a5c0 	call	1004a5c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 1003f30:	000d883a 	mov	r6,zero
 1003f34:	000b883a 	mov	r5,zero
 1003f38:	010041f4 	movhi	r4,263
 1003f3c:	211c2d04 	addi	r4,r4,28852
 1003f40:	10040e00 	call	10040e0 <altera_avalon_jtag_uart_init>
 1003f44:	010041f4 	movhi	r4,263
 1003f48:	211c2304 	addi	r4,r4,28812
 1003f4c:	1003e9c0 	call	1003e9c <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 1003f50:	00c00044 	movi	r3,1
 1003f54:	00808034 	movhi	r2,512
 1003f58:	108c0004 	addi	r2,r2,12288
 1003f5c:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 1003f60:	0001883a 	nop
}
 1003f64:	0001883a 	nop
 1003f68:	e037883a 	mov	sp,fp
 1003f6c:	dfc00117 	ldw	ra,4(sp)
 1003f70:	df000017 	ldw	fp,0(sp)
 1003f74:	dec00204 	addi	sp,sp,8
 1003f78:	f800283a 	ret

01003f7c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1003f7c:	defffa04 	addi	sp,sp,-24
 1003f80:	dfc00515 	stw	ra,20(sp)
 1003f84:	df000415 	stw	fp,16(sp)
 1003f88:	df000404 	addi	fp,sp,16
 1003f8c:	e13ffd15 	stw	r4,-12(fp)
 1003f90:	e17ffe15 	stw	r5,-8(fp)
 1003f94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003f98:	e0bffd17 	ldw	r2,-12(fp)
 1003f9c:	10800017 	ldw	r2,0(r2)
 1003fa0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1003fa4:	e0bffc17 	ldw	r2,-16(fp)
 1003fa8:	10c00a04 	addi	r3,r2,40
 1003fac:	e0bffd17 	ldw	r2,-12(fp)
 1003fb0:	10800217 	ldw	r2,8(r2)
 1003fb4:	100f883a 	mov	r7,r2
 1003fb8:	e1bfff17 	ldw	r6,-4(fp)
 1003fbc:	e17ffe17 	ldw	r5,-8(fp)
 1003fc0:	1809883a 	mov	r4,r3
 1003fc4:	10045a40 	call	10045a4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1003fc8:	e037883a 	mov	sp,fp
 1003fcc:	dfc00117 	ldw	ra,4(sp)
 1003fd0:	df000017 	ldw	fp,0(sp)
 1003fd4:	dec00204 	addi	sp,sp,8
 1003fd8:	f800283a 	ret

01003fdc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1003fdc:	defffa04 	addi	sp,sp,-24
 1003fe0:	dfc00515 	stw	ra,20(sp)
 1003fe4:	df000415 	stw	fp,16(sp)
 1003fe8:	df000404 	addi	fp,sp,16
 1003fec:	e13ffd15 	stw	r4,-12(fp)
 1003ff0:	e17ffe15 	stw	r5,-8(fp)
 1003ff4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003ff8:	e0bffd17 	ldw	r2,-12(fp)
 1003ffc:	10800017 	ldw	r2,0(r2)
 1004000:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1004004:	e0bffc17 	ldw	r2,-16(fp)
 1004008:	10c00a04 	addi	r3,r2,40
 100400c:	e0bffd17 	ldw	r2,-12(fp)
 1004010:	10800217 	ldw	r2,8(r2)
 1004014:	100f883a 	mov	r7,r2
 1004018:	e1bfff17 	ldw	r6,-4(fp)
 100401c:	e17ffe17 	ldw	r5,-8(fp)
 1004020:	1809883a 	mov	r4,r3
 1004024:	10047c00 	call	10047c0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1004028:	e037883a 	mov	sp,fp
 100402c:	dfc00117 	ldw	ra,4(sp)
 1004030:	df000017 	ldw	fp,0(sp)
 1004034:	dec00204 	addi	sp,sp,8
 1004038:	f800283a 	ret

0100403c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100403c:	defffc04 	addi	sp,sp,-16
 1004040:	dfc00315 	stw	ra,12(sp)
 1004044:	df000215 	stw	fp,8(sp)
 1004048:	df000204 	addi	fp,sp,8
 100404c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1004050:	e0bfff17 	ldw	r2,-4(fp)
 1004054:	10800017 	ldw	r2,0(r2)
 1004058:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100405c:	e0bffe17 	ldw	r2,-8(fp)
 1004060:	10c00a04 	addi	r3,r2,40
 1004064:	e0bfff17 	ldw	r2,-4(fp)
 1004068:	10800217 	ldw	r2,8(r2)
 100406c:	100b883a 	mov	r5,r2
 1004070:	1809883a 	mov	r4,r3
 1004074:	100444c0 	call	100444c <altera_avalon_jtag_uart_close>
}
 1004078:	e037883a 	mov	sp,fp
 100407c:	dfc00117 	ldw	ra,4(sp)
 1004080:	df000017 	ldw	fp,0(sp)
 1004084:	dec00204 	addi	sp,sp,8
 1004088:	f800283a 	ret

0100408c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100408c:	defffa04 	addi	sp,sp,-24
 1004090:	dfc00515 	stw	ra,20(sp)
 1004094:	df000415 	stw	fp,16(sp)
 1004098:	df000404 	addi	fp,sp,16
 100409c:	e13ffd15 	stw	r4,-12(fp)
 10040a0:	e17ffe15 	stw	r5,-8(fp)
 10040a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 10040a8:	e0bffd17 	ldw	r2,-12(fp)
 10040ac:	10800017 	ldw	r2,0(r2)
 10040b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 10040b4:	e0bffc17 	ldw	r2,-16(fp)
 10040b8:	10800a04 	addi	r2,r2,40
 10040bc:	e1bfff17 	ldw	r6,-4(fp)
 10040c0:	e17ffe17 	ldw	r5,-8(fp)
 10040c4:	1009883a 	mov	r4,r2
 10040c8:	10044b40 	call	10044b4 <altera_avalon_jtag_uart_ioctl>
}
 10040cc:	e037883a 	mov	sp,fp
 10040d0:	dfc00117 	ldw	ra,4(sp)
 10040d4:	df000017 	ldw	fp,0(sp)
 10040d8:	dec00204 	addi	sp,sp,8
 10040dc:	f800283a 	ret

010040e0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 10040e0:	defffa04 	addi	sp,sp,-24
 10040e4:	dfc00515 	stw	ra,20(sp)
 10040e8:	df000415 	stw	fp,16(sp)
 10040ec:	df000404 	addi	fp,sp,16
 10040f0:	e13ffd15 	stw	r4,-12(fp)
 10040f4:	e17ffe15 	stw	r5,-8(fp)
 10040f8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10040fc:	e0bffd17 	ldw	r2,-12(fp)
 1004100:	00c00044 	movi	r3,1
 1004104:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1004108:	e0bffd17 	ldw	r2,-12(fp)
 100410c:	10800017 	ldw	r2,0(r2)
 1004110:	10800104 	addi	r2,r2,4
 1004114:	1007883a 	mov	r3,r2
 1004118:	e0bffd17 	ldw	r2,-12(fp)
 100411c:	10800817 	ldw	r2,32(r2)
 1004120:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 1004124:	e0bffe17 	ldw	r2,-8(fp)
 1004128:	e0ffff17 	ldw	r3,-4(fp)
 100412c:	d8000015 	stw	zero,0(sp)
 1004130:	e1fffd17 	ldw	r7,-12(fp)
 1004134:	01804034 	movhi	r6,256
 1004138:	31906804 	addi	r6,r6,16800
 100413c:	180b883a 	mov	r5,r3
 1004140:	1009883a 	mov	r4,r2
 1004144:	1004f780 	call	1004f78 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1004148:	e0bffd17 	ldw	r2,-12(fp)
 100414c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1004150:	e0bffd17 	ldw	r2,-12(fp)
 1004154:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1004158:	d0e6bd17 	ldw	r3,-25868(gp)
 100415c:	e1fffd17 	ldw	r7,-12(fp)
 1004160:	01804034 	movhi	r6,256
 1004164:	3190eb04 	addi	r6,r6,17324
 1004168:	180b883a 	mov	r5,r3
 100416c:	1009883a 	mov	r4,r2
 1004170:	1004ad80 	call	1004ad8 <alt_alarm_start>
 1004174:	1000040e 	bge	r2,zero,1004188 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1004178:	e0fffd17 	ldw	r3,-12(fp)
 100417c:	00a00034 	movhi	r2,32768
 1004180:	10bfffc4 	addi	r2,r2,-1
 1004184:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1004188:	0001883a 	nop
 100418c:	e037883a 	mov	sp,fp
 1004190:	dfc00117 	ldw	ra,4(sp)
 1004194:	df000017 	ldw	fp,0(sp)
 1004198:	dec00204 	addi	sp,sp,8
 100419c:	f800283a 	ret

010041a0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 10041a0:	defff804 	addi	sp,sp,-32
 10041a4:	df000715 	stw	fp,28(sp)
 10041a8:	df000704 	addi	fp,sp,28
 10041ac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 10041b0:	e0bfff17 	ldw	r2,-4(fp)
 10041b4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 10041b8:	e0bffb17 	ldw	r2,-20(fp)
 10041bc:	10800017 	ldw	r2,0(r2)
 10041c0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10041c4:	e0bffc17 	ldw	r2,-16(fp)
 10041c8:	10800104 	addi	r2,r2,4
 10041cc:	10800037 	ldwio	r2,0(r2)
 10041d0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 10041d4:	e0bffd17 	ldw	r2,-12(fp)
 10041d8:	1080c00c 	andi	r2,r2,768
 10041dc:	10006d26 	beq	r2,zero,1004394 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 10041e0:	e0bffd17 	ldw	r2,-12(fp)
 10041e4:	1080400c 	andi	r2,r2,256
 10041e8:	10003526 	beq	r2,zero,10042c0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 10041ec:	00800074 	movhi	r2,1
 10041f0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10041f4:	e0bffb17 	ldw	r2,-20(fp)
 10041f8:	10800a17 	ldw	r2,40(r2)
 10041fc:	10800044 	addi	r2,r2,1
 1004200:	1081ffcc 	andi	r2,r2,2047
 1004204:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 1004208:	e0bffb17 	ldw	r2,-20(fp)
 100420c:	10c00b17 	ldw	r3,44(r2)
 1004210:	e0bffe17 	ldw	r2,-8(fp)
 1004214:	18801526 	beq	r3,r2,100426c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1004218:	e0bffc17 	ldw	r2,-16(fp)
 100421c:	10800037 	ldwio	r2,0(r2)
 1004220:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1004224:	e0bff917 	ldw	r2,-28(fp)
 1004228:	10a0000c 	andi	r2,r2,32768
 100422c:	10001126 	beq	r2,zero,1004274 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1004230:	e0bffb17 	ldw	r2,-20(fp)
 1004234:	10800a17 	ldw	r2,40(r2)
 1004238:	e0fff917 	ldw	r3,-28(fp)
 100423c:	1809883a 	mov	r4,r3
 1004240:	e0fffb17 	ldw	r3,-20(fp)
 1004244:	1885883a 	add	r2,r3,r2
 1004248:	10800e04 	addi	r2,r2,56
 100424c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1004250:	e0bffb17 	ldw	r2,-20(fp)
 1004254:	10800a17 	ldw	r2,40(r2)
 1004258:	10800044 	addi	r2,r2,1
 100425c:	10c1ffcc 	andi	r3,r2,2047
 1004260:	e0bffb17 	ldw	r2,-20(fp)
 1004264:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1004268:	003fe206 	br	10041f4 <__alt_mem_TCDM+0xff0031f4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 100426c:	0001883a 	nop
 1004270:	00000106 	br	1004278 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 1004274:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1004278:	e0bff917 	ldw	r2,-28(fp)
 100427c:	10bfffec 	andhi	r2,r2,65535
 1004280:	10000f26 	beq	r2,zero,10042c0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1004284:	e0bffb17 	ldw	r2,-20(fp)
 1004288:	10c00817 	ldw	r3,32(r2)
 100428c:	00bfff84 	movi	r2,-2
 1004290:	1886703a 	and	r3,r3,r2
 1004294:	e0bffb17 	ldw	r2,-20(fp)
 1004298:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100429c:	e0bffc17 	ldw	r2,-16(fp)
 10042a0:	10800104 	addi	r2,r2,4
 10042a4:	1007883a 	mov	r3,r2
 10042a8:	e0bffb17 	ldw	r2,-20(fp)
 10042ac:	10800817 	ldw	r2,32(r2)
 10042b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10042b4:	e0bffc17 	ldw	r2,-16(fp)
 10042b8:	10800104 	addi	r2,r2,4
 10042bc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 10042c0:	e0bffd17 	ldw	r2,-12(fp)
 10042c4:	1080800c 	andi	r2,r2,512
 10042c8:	103fbe26 	beq	r2,zero,10041c4 <__alt_mem_TCDM+0xff0031c4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 10042cc:	e0bffd17 	ldw	r2,-12(fp)
 10042d0:	1004d43a 	srli	r2,r2,16
 10042d4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 10042d8:	00001406 	br	100432c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 10042dc:	e0bffc17 	ldw	r2,-16(fp)
 10042e0:	e0fffb17 	ldw	r3,-20(fp)
 10042e4:	18c00d17 	ldw	r3,52(r3)
 10042e8:	e13ffb17 	ldw	r4,-20(fp)
 10042ec:	20c7883a 	add	r3,r4,r3
 10042f0:	18c20e04 	addi	r3,r3,2104
 10042f4:	18c00003 	ldbu	r3,0(r3)
 10042f8:	18c03fcc 	andi	r3,r3,255
 10042fc:	18c0201c 	xori	r3,r3,128
 1004300:	18ffe004 	addi	r3,r3,-128
 1004304:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1004308:	e0bffb17 	ldw	r2,-20(fp)
 100430c:	10800d17 	ldw	r2,52(r2)
 1004310:	10800044 	addi	r2,r2,1
 1004314:	10c1ffcc 	andi	r3,r2,2047
 1004318:	e0bffb17 	ldw	r2,-20(fp)
 100431c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1004320:	e0bffa17 	ldw	r2,-24(fp)
 1004324:	10bfffc4 	addi	r2,r2,-1
 1004328:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100432c:	e0bffa17 	ldw	r2,-24(fp)
 1004330:	10000526 	beq	r2,zero,1004348 <altera_avalon_jtag_uart_irq+0x1a8>
 1004334:	e0bffb17 	ldw	r2,-20(fp)
 1004338:	10c00d17 	ldw	r3,52(r2)
 100433c:	e0bffb17 	ldw	r2,-20(fp)
 1004340:	10800c17 	ldw	r2,48(r2)
 1004344:	18bfe51e 	bne	r3,r2,10042dc <__alt_mem_TCDM+0xff0032dc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1004348:	e0bffa17 	ldw	r2,-24(fp)
 100434c:	103f9d26 	beq	r2,zero,10041c4 <__alt_mem_TCDM+0xff0031c4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1004350:	e0bffb17 	ldw	r2,-20(fp)
 1004354:	10c00817 	ldw	r3,32(r2)
 1004358:	00bfff44 	movi	r2,-3
 100435c:	1886703a 	and	r3,r3,r2
 1004360:	e0bffb17 	ldw	r2,-20(fp)
 1004364:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1004368:	e0bffb17 	ldw	r2,-20(fp)
 100436c:	10800017 	ldw	r2,0(r2)
 1004370:	10800104 	addi	r2,r2,4
 1004374:	1007883a 	mov	r3,r2
 1004378:	e0bffb17 	ldw	r2,-20(fp)
 100437c:	10800817 	ldw	r2,32(r2)
 1004380:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1004384:	e0bffc17 	ldw	r2,-16(fp)
 1004388:	10800104 	addi	r2,r2,4
 100438c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1004390:	003f8c06 	br	10041c4 <__alt_mem_TCDM+0xff0031c4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 1004394:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 1004398:	0001883a 	nop
 100439c:	e037883a 	mov	sp,fp
 10043a0:	df000017 	ldw	fp,0(sp)
 10043a4:	dec00104 	addi	sp,sp,4
 10043a8:	f800283a 	ret

010043ac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 10043ac:	defff804 	addi	sp,sp,-32
 10043b0:	df000715 	stw	fp,28(sp)
 10043b4:	df000704 	addi	fp,sp,28
 10043b8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 10043bc:	e0bffb17 	ldw	r2,-20(fp)
 10043c0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 10043c4:	e0bff917 	ldw	r2,-28(fp)
 10043c8:	10800017 	ldw	r2,0(r2)
 10043cc:	10800104 	addi	r2,r2,4
 10043d0:	10800037 	ldwio	r2,0(r2)
 10043d4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 10043d8:	e0bffa17 	ldw	r2,-24(fp)
 10043dc:	1081000c 	andi	r2,r2,1024
 10043e0:	10000b26 	beq	r2,zero,1004410 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 10043e4:	e0bff917 	ldw	r2,-28(fp)
 10043e8:	10800017 	ldw	r2,0(r2)
 10043ec:	10800104 	addi	r2,r2,4
 10043f0:	1007883a 	mov	r3,r2
 10043f4:	e0bff917 	ldw	r2,-28(fp)
 10043f8:	10800817 	ldw	r2,32(r2)
 10043fc:	10810014 	ori	r2,r2,1024
 1004400:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 1004404:	e0bff917 	ldw	r2,-28(fp)
 1004408:	10000915 	stw	zero,36(r2)
 100440c:	00000a06 	br	1004438 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1004410:	e0bff917 	ldw	r2,-28(fp)
 1004414:	10c00917 	ldw	r3,36(r2)
 1004418:	00a00034 	movhi	r2,32768
 100441c:	10bfff04 	addi	r2,r2,-4
 1004420:	10c00536 	bltu	r2,r3,1004438 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 1004424:	e0bff917 	ldw	r2,-28(fp)
 1004428:	10800917 	ldw	r2,36(r2)
 100442c:	10c00044 	addi	r3,r2,1
 1004430:	e0bff917 	ldw	r2,-28(fp)
 1004434:	10c00915 	stw	r3,36(r2)
 1004438:	d0a6bd17 	ldw	r2,-25868(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100443c:	e037883a 	mov	sp,fp
 1004440:	df000017 	ldw	fp,0(sp)
 1004444:	dec00104 	addi	sp,sp,4
 1004448:	f800283a 	ret

0100444c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100444c:	defffd04 	addi	sp,sp,-12
 1004450:	df000215 	stw	fp,8(sp)
 1004454:	df000204 	addi	fp,sp,8
 1004458:	e13ffe15 	stw	r4,-8(fp)
 100445c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1004460:	00000506 	br	1004478 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 1004464:	e0bfff17 	ldw	r2,-4(fp)
 1004468:	1090000c 	andi	r2,r2,16384
 100446c:	10000226 	beq	r2,zero,1004478 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 1004470:	00bffd44 	movi	r2,-11
 1004474:	00000b06 	br	10044a4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1004478:	e0bffe17 	ldw	r2,-8(fp)
 100447c:	10c00d17 	ldw	r3,52(r2)
 1004480:	e0bffe17 	ldw	r2,-8(fp)
 1004484:	10800c17 	ldw	r2,48(r2)
 1004488:	18800526 	beq	r3,r2,10044a0 <altera_avalon_jtag_uart_close+0x54>
 100448c:	e0bffe17 	ldw	r2,-8(fp)
 1004490:	10c00917 	ldw	r3,36(r2)
 1004494:	e0bffe17 	ldw	r2,-8(fp)
 1004498:	10800117 	ldw	r2,4(r2)
 100449c:	18bff136 	bltu	r3,r2,1004464 <__alt_mem_TCDM+0xff003464>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 10044a0:	0005883a 	mov	r2,zero
}
 10044a4:	e037883a 	mov	sp,fp
 10044a8:	df000017 	ldw	fp,0(sp)
 10044ac:	dec00104 	addi	sp,sp,4
 10044b0:	f800283a 	ret

010044b4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 10044b4:	defffa04 	addi	sp,sp,-24
 10044b8:	df000515 	stw	fp,20(sp)
 10044bc:	df000504 	addi	fp,sp,20
 10044c0:	e13ffd15 	stw	r4,-12(fp)
 10044c4:	e17ffe15 	stw	r5,-8(fp)
 10044c8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 10044cc:	00bff9c4 	movi	r2,-25
 10044d0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 10044d4:	e0bffe17 	ldw	r2,-8(fp)
 10044d8:	10da8060 	cmpeqi	r3,r2,27137
 10044dc:	1800031e 	bne	r3,zero,10044ec <altera_avalon_jtag_uart_ioctl+0x38>
 10044e0:	109a80a0 	cmpeqi	r2,r2,27138
 10044e4:	1000181e 	bne	r2,zero,1004548 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 10044e8:	00002906 	br	1004590 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 10044ec:	e0bffd17 	ldw	r2,-12(fp)
 10044f0:	10c00117 	ldw	r3,4(r2)
 10044f4:	00a00034 	movhi	r2,32768
 10044f8:	10bfffc4 	addi	r2,r2,-1
 10044fc:	18802126 	beq	r3,r2,1004584 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 1004500:	e0bfff17 	ldw	r2,-4(fp)
 1004504:	10800017 	ldw	r2,0(r2)
 1004508:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100450c:	e0bffc17 	ldw	r2,-16(fp)
 1004510:	10800090 	cmplti	r2,r2,2
 1004514:	1000061e 	bne	r2,zero,1004530 <altera_avalon_jtag_uart_ioctl+0x7c>
 1004518:	e0fffc17 	ldw	r3,-16(fp)
 100451c:	00a00034 	movhi	r2,32768
 1004520:	10bfffc4 	addi	r2,r2,-1
 1004524:	18800226 	beq	r3,r2,1004530 <altera_avalon_jtag_uart_ioctl+0x7c>
 1004528:	e0bffc17 	ldw	r2,-16(fp)
 100452c:	00000206 	br	1004538 <altera_avalon_jtag_uart_ioctl+0x84>
 1004530:	00a00034 	movhi	r2,32768
 1004534:	10bfff84 	addi	r2,r2,-2
 1004538:	e0fffd17 	ldw	r3,-12(fp)
 100453c:	18800115 	stw	r2,4(r3)
      rc = 0;
 1004540:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1004544:	00000f06 	br	1004584 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1004548:	e0bffd17 	ldw	r2,-12(fp)
 100454c:	10c00117 	ldw	r3,4(r2)
 1004550:	00a00034 	movhi	r2,32768
 1004554:	10bfffc4 	addi	r2,r2,-1
 1004558:	18800c26 	beq	r3,r2,100458c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100455c:	e0bffd17 	ldw	r2,-12(fp)
 1004560:	10c00917 	ldw	r3,36(r2)
 1004564:	e0bffd17 	ldw	r2,-12(fp)
 1004568:	10800117 	ldw	r2,4(r2)
 100456c:	1885803a 	cmpltu	r2,r3,r2
 1004570:	10c03fcc 	andi	r3,r2,255
 1004574:	e0bfff17 	ldw	r2,-4(fp)
 1004578:	10c00015 	stw	r3,0(r2)
      rc = 0;
 100457c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1004580:	00000206 	br	100458c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 1004584:	0001883a 	nop
 1004588:	00000106 	br	1004590 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 100458c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 1004590:	e0bffb17 	ldw	r2,-20(fp)
}
 1004594:	e037883a 	mov	sp,fp
 1004598:	df000017 	ldw	fp,0(sp)
 100459c:	dec00104 	addi	sp,sp,4
 10045a0:	f800283a 	ret

010045a4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 10045a4:	defff304 	addi	sp,sp,-52
 10045a8:	dfc00c15 	stw	ra,48(sp)
 10045ac:	df000b15 	stw	fp,44(sp)
 10045b0:	df000b04 	addi	fp,sp,44
 10045b4:	e13ffc15 	stw	r4,-16(fp)
 10045b8:	e17ffd15 	stw	r5,-12(fp)
 10045bc:	e1bffe15 	stw	r6,-8(fp)
 10045c0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 10045c4:	e0bffd17 	ldw	r2,-12(fp)
 10045c8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10045cc:	00004706 	br	10046ec <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 10045d0:	e0bffc17 	ldw	r2,-16(fp)
 10045d4:	10800a17 	ldw	r2,40(r2)
 10045d8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 10045dc:	e0bffc17 	ldw	r2,-16(fp)
 10045e0:	10800b17 	ldw	r2,44(r2)
 10045e4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 10045e8:	e0fff717 	ldw	r3,-36(fp)
 10045ec:	e0bff817 	ldw	r2,-32(fp)
 10045f0:	18800536 	bltu	r3,r2,1004608 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 10045f4:	e0fff717 	ldw	r3,-36(fp)
 10045f8:	e0bff817 	ldw	r2,-32(fp)
 10045fc:	1885c83a 	sub	r2,r3,r2
 1004600:	e0bff615 	stw	r2,-40(fp)
 1004604:	00000406 	br	1004618 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1004608:	00c20004 	movi	r3,2048
 100460c:	e0bff817 	ldw	r2,-32(fp)
 1004610:	1885c83a 	sub	r2,r3,r2
 1004614:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1004618:	e0bff617 	ldw	r2,-40(fp)
 100461c:	10001e26 	beq	r2,zero,1004698 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 1004620:	e0fffe17 	ldw	r3,-8(fp)
 1004624:	e0bff617 	ldw	r2,-40(fp)
 1004628:	1880022e 	bgeu	r3,r2,1004634 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 100462c:	e0bffe17 	ldw	r2,-8(fp)
 1004630:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1004634:	e0bffc17 	ldw	r2,-16(fp)
 1004638:	10c00e04 	addi	r3,r2,56
 100463c:	e0bff817 	ldw	r2,-32(fp)
 1004640:	1885883a 	add	r2,r3,r2
 1004644:	e1bff617 	ldw	r6,-40(fp)
 1004648:	100b883a 	mov	r5,r2
 100464c:	e13ff517 	ldw	r4,-44(fp)
 1004650:	1001ba00 	call	1001ba0 <memcpy>
      ptr   += n;
 1004654:	e0fff517 	ldw	r3,-44(fp)
 1004658:	e0bff617 	ldw	r2,-40(fp)
 100465c:	1885883a 	add	r2,r3,r2
 1004660:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 1004664:	e0fffe17 	ldw	r3,-8(fp)
 1004668:	e0bff617 	ldw	r2,-40(fp)
 100466c:	1885c83a 	sub	r2,r3,r2
 1004670:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1004674:	e0fff817 	ldw	r3,-32(fp)
 1004678:	e0bff617 	ldw	r2,-40(fp)
 100467c:	1885883a 	add	r2,r3,r2
 1004680:	10c1ffcc 	andi	r3,r2,2047
 1004684:	e0bffc17 	ldw	r2,-16(fp)
 1004688:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100468c:	e0bffe17 	ldw	r2,-8(fp)
 1004690:	00bfcf16 	blt	zero,r2,10045d0 <__alt_mem_TCDM+0xff0035d0>
 1004694:	00000106 	br	100469c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 1004698:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 100469c:	e0fff517 	ldw	r3,-44(fp)
 10046a0:	e0bffd17 	ldw	r2,-12(fp)
 10046a4:	1880141e 	bne	r3,r2,10046f8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 10046a8:	e0bfff17 	ldw	r2,-4(fp)
 10046ac:	1090000c 	andi	r2,r2,16384
 10046b0:	1000131e 	bne	r2,zero,1004700 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 10046b4:	0001883a 	nop
 10046b8:	e0bffc17 	ldw	r2,-16(fp)
 10046bc:	10c00a17 	ldw	r3,40(r2)
 10046c0:	e0bff717 	ldw	r2,-36(fp)
 10046c4:	1880051e 	bne	r3,r2,10046dc <altera_avalon_jtag_uart_read+0x138>
 10046c8:	e0bffc17 	ldw	r2,-16(fp)
 10046cc:	10c00917 	ldw	r3,36(r2)
 10046d0:	e0bffc17 	ldw	r2,-16(fp)
 10046d4:	10800117 	ldw	r2,4(r2)
 10046d8:	18bff736 	bltu	r3,r2,10046b8 <__alt_mem_TCDM+0xff0036b8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 10046dc:	e0bffc17 	ldw	r2,-16(fp)
 10046e0:	10c00a17 	ldw	r3,40(r2)
 10046e4:	e0bff717 	ldw	r2,-36(fp)
 10046e8:	18800726 	beq	r3,r2,1004708 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10046ec:	e0bffe17 	ldw	r2,-8(fp)
 10046f0:	00bfb716 	blt	zero,r2,10045d0 <__alt_mem_TCDM+0xff0035d0>
 10046f4:	00000506 	br	100470c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 10046f8:	0001883a 	nop
 10046fc:	00000306 	br	100470c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 1004700:	0001883a 	nop
 1004704:	00000106 	br	100470c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 1004708:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100470c:	e0fff517 	ldw	r3,-44(fp)
 1004710:	e0bffd17 	ldw	r2,-12(fp)
 1004714:	18801826 	beq	r3,r2,1004778 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004718:	0005303a 	rdctl	r2,status
 100471c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004720:	e0fffb17 	ldw	r3,-20(fp)
 1004724:	00bfff84 	movi	r2,-2
 1004728:	1884703a 	and	r2,r3,r2
 100472c:	1001703a 	wrctl	status,r2
  
  return context;
 1004730:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1004734:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1004738:	e0bffc17 	ldw	r2,-16(fp)
 100473c:	10800817 	ldw	r2,32(r2)
 1004740:	10c00054 	ori	r3,r2,1
 1004744:	e0bffc17 	ldw	r2,-16(fp)
 1004748:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100474c:	e0bffc17 	ldw	r2,-16(fp)
 1004750:	10800017 	ldw	r2,0(r2)
 1004754:	10800104 	addi	r2,r2,4
 1004758:	1007883a 	mov	r3,r2
 100475c:	e0bffc17 	ldw	r2,-16(fp)
 1004760:	10800817 	ldw	r2,32(r2)
 1004764:	18800035 	stwio	r2,0(r3)
 1004768:	e0bffa17 	ldw	r2,-24(fp)
 100476c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004770:	e0bff917 	ldw	r2,-28(fp)
 1004774:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1004778:	e0fff517 	ldw	r3,-44(fp)
 100477c:	e0bffd17 	ldw	r2,-12(fp)
 1004780:	18800426 	beq	r3,r2,1004794 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 1004784:	e0fff517 	ldw	r3,-44(fp)
 1004788:	e0bffd17 	ldw	r2,-12(fp)
 100478c:	1885c83a 	sub	r2,r3,r2
 1004790:	00000606 	br	10047ac <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 1004794:	e0bfff17 	ldw	r2,-4(fp)
 1004798:	1090000c 	andi	r2,r2,16384
 100479c:	10000226 	beq	r2,zero,10047a8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 10047a0:	00bffd44 	movi	r2,-11
 10047a4:	00000106 	br	10047ac <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 10047a8:	00bffec4 	movi	r2,-5
}
 10047ac:	e037883a 	mov	sp,fp
 10047b0:	dfc00117 	ldw	ra,4(sp)
 10047b4:	df000017 	ldw	fp,0(sp)
 10047b8:	dec00204 	addi	sp,sp,8
 10047bc:	f800283a 	ret

010047c0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 10047c0:	defff304 	addi	sp,sp,-52
 10047c4:	dfc00c15 	stw	ra,48(sp)
 10047c8:	df000b15 	stw	fp,44(sp)
 10047cc:	df000b04 	addi	fp,sp,44
 10047d0:	e13ffc15 	stw	r4,-16(fp)
 10047d4:	e17ffd15 	stw	r5,-12(fp)
 10047d8:	e1bffe15 	stw	r6,-8(fp)
 10047dc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 10047e0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 10047e4:	e0bffd17 	ldw	r2,-12(fp)
 10047e8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10047ec:	00003706 	br	10048cc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 10047f0:	e0bffc17 	ldw	r2,-16(fp)
 10047f4:	10800c17 	ldw	r2,48(r2)
 10047f8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 10047fc:	e0bffc17 	ldw	r2,-16(fp)
 1004800:	10800d17 	ldw	r2,52(r2)
 1004804:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 1004808:	e0fff917 	ldw	r3,-28(fp)
 100480c:	e0bff517 	ldw	r2,-44(fp)
 1004810:	1880062e 	bgeu	r3,r2,100482c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1004814:	e0fff517 	ldw	r3,-44(fp)
 1004818:	e0bff917 	ldw	r2,-28(fp)
 100481c:	1885c83a 	sub	r2,r3,r2
 1004820:	10bfffc4 	addi	r2,r2,-1
 1004824:	e0bff615 	stw	r2,-40(fp)
 1004828:	00000b06 	br	1004858 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 100482c:	e0bff517 	ldw	r2,-44(fp)
 1004830:	10000526 	beq	r2,zero,1004848 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1004834:	00c20004 	movi	r3,2048
 1004838:	e0bff917 	ldw	r2,-28(fp)
 100483c:	1885c83a 	sub	r2,r3,r2
 1004840:	e0bff615 	stw	r2,-40(fp)
 1004844:	00000406 	br	1004858 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1004848:	00c1ffc4 	movi	r3,2047
 100484c:	e0bff917 	ldw	r2,-28(fp)
 1004850:	1885c83a 	sub	r2,r3,r2
 1004854:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1004858:	e0bff617 	ldw	r2,-40(fp)
 100485c:	10001e26 	beq	r2,zero,10048d8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 1004860:	e0fffe17 	ldw	r3,-8(fp)
 1004864:	e0bff617 	ldw	r2,-40(fp)
 1004868:	1880022e 	bgeu	r3,r2,1004874 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 100486c:	e0bffe17 	ldw	r2,-8(fp)
 1004870:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1004874:	e0bffc17 	ldw	r2,-16(fp)
 1004878:	10c20e04 	addi	r3,r2,2104
 100487c:	e0bff917 	ldw	r2,-28(fp)
 1004880:	1885883a 	add	r2,r3,r2
 1004884:	e1bff617 	ldw	r6,-40(fp)
 1004888:	e17ffd17 	ldw	r5,-12(fp)
 100488c:	1009883a 	mov	r4,r2
 1004890:	1001ba00 	call	1001ba0 <memcpy>
      ptr   += n;
 1004894:	e0fffd17 	ldw	r3,-12(fp)
 1004898:	e0bff617 	ldw	r2,-40(fp)
 100489c:	1885883a 	add	r2,r3,r2
 10048a0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 10048a4:	e0fffe17 	ldw	r3,-8(fp)
 10048a8:	e0bff617 	ldw	r2,-40(fp)
 10048ac:	1885c83a 	sub	r2,r3,r2
 10048b0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10048b4:	e0fff917 	ldw	r3,-28(fp)
 10048b8:	e0bff617 	ldw	r2,-40(fp)
 10048bc:	1885883a 	add	r2,r3,r2
 10048c0:	10c1ffcc 	andi	r3,r2,2047
 10048c4:	e0bffc17 	ldw	r2,-16(fp)
 10048c8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10048cc:	e0bffe17 	ldw	r2,-8(fp)
 10048d0:	00bfc716 	blt	zero,r2,10047f0 <__alt_mem_TCDM+0xff0037f0>
 10048d4:	00000106 	br	10048dc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 10048d8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10048dc:	0005303a 	rdctl	r2,status
 10048e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10048e4:	e0fffb17 	ldw	r3,-20(fp)
 10048e8:	00bfff84 	movi	r2,-2
 10048ec:	1884703a 	and	r2,r3,r2
 10048f0:	1001703a 	wrctl	status,r2
  
  return context;
 10048f4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 10048f8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10048fc:	e0bffc17 	ldw	r2,-16(fp)
 1004900:	10800817 	ldw	r2,32(r2)
 1004904:	10c00094 	ori	r3,r2,2
 1004908:	e0bffc17 	ldw	r2,-16(fp)
 100490c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1004910:	e0bffc17 	ldw	r2,-16(fp)
 1004914:	10800017 	ldw	r2,0(r2)
 1004918:	10800104 	addi	r2,r2,4
 100491c:	1007883a 	mov	r3,r2
 1004920:	e0bffc17 	ldw	r2,-16(fp)
 1004924:	10800817 	ldw	r2,32(r2)
 1004928:	18800035 	stwio	r2,0(r3)
 100492c:	e0bffa17 	ldw	r2,-24(fp)
 1004930:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004934:	e0bff817 	ldw	r2,-32(fp)
 1004938:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100493c:	e0bffe17 	ldw	r2,-8(fp)
 1004940:	0080100e 	bge	zero,r2,1004984 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 1004944:	e0bfff17 	ldw	r2,-4(fp)
 1004948:	1090000c 	andi	r2,r2,16384
 100494c:	1000101e 	bne	r2,zero,1004990 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1004950:	0001883a 	nop
 1004954:	e0bffc17 	ldw	r2,-16(fp)
 1004958:	10c00d17 	ldw	r3,52(r2)
 100495c:	e0bff517 	ldw	r2,-44(fp)
 1004960:	1880051e 	bne	r3,r2,1004978 <altera_avalon_jtag_uart_write+0x1b8>
 1004964:	e0bffc17 	ldw	r2,-16(fp)
 1004968:	10c00917 	ldw	r3,36(r2)
 100496c:	e0bffc17 	ldw	r2,-16(fp)
 1004970:	10800117 	ldw	r2,4(r2)
 1004974:	18bff736 	bltu	r3,r2,1004954 <__alt_mem_TCDM+0xff003954>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1004978:	e0bffc17 	ldw	r2,-16(fp)
 100497c:	10800917 	ldw	r2,36(r2)
 1004980:	1000051e 	bne	r2,zero,1004998 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 1004984:	e0bffe17 	ldw	r2,-8(fp)
 1004988:	00bfd016 	blt	zero,r2,10048cc <__alt_mem_TCDM+0xff0038cc>
 100498c:	00000306 	br	100499c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 1004990:	0001883a 	nop
 1004994:	00000106 	br	100499c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 1004998:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100499c:	e0fffd17 	ldw	r3,-12(fp)
 10049a0:	e0bff717 	ldw	r2,-36(fp)
 10049a4:	18800426 	beq	r3,r2,10049b8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 10049a8:	e0fffd17 	ldw	r3,-12(fp)
 10049ac:	e0bff717 	ldw	r2,-36(fp)
 10049b0:	1885c83a 	sub	r2,r3,r2
 10049b4:	00000606 	br	10049d0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 10049b8:	e0bfff17 	ldw	r2,-4(fp)
 10049bc:	1090000c 	andi	r2,r2,16384
 10049c0:	10000226 	beq	r2,zero,10049cc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 10049c4:	00bffd44 	movi	r2,-11
 10049c8:	00000106 	br	10049d0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 10049cc:	00bffec4 	movi	r2,-5
}
 10049d0:	e037883a 	mov	sp,fp
 10049d4:	dfc00117 	ldw	ra,4(sp)
 10049d8:	df000017 	ldw	fp,0(sp)
 10049dc:	dec00204 	addi	sp,sp,8
 10049e0:	f800283a 	ret

010049e4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 10049e4:	defffa04 	addi	sp,sp,-24
 10049e8:	dfc00515 	stw	ra,20(sp)
 10049ec:	df000415 	stw	fp,16(sp)
 10049f0:	df000404 	addi	fp,sp,16
 10049f4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 10049f8:	0007883a 	mov	r3,zero
 10049fc:	e0bfff17 	ldw	r2,-4(fp)
 1004a00:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1004a04:	e0bfff17 	ldw	r2,-4(fp)
 1004a08:	10800104 	addi	r2,r2,4
 1004a0c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004a10:	0005303a 	rdctl	r2,status
 1004a14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004a18:	e0fffd17 	ldw	r3,-12(fp)
 1004a1c:	00bfff84 	movi	r2,-2
 1004a20:	1884703a 	and	r2,r3,r2
 1004a24:	1001703a 	wrctl	status,r2
  
  return context;
 1004a28:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 1004a2c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 1004a30:	10056480 	call	1005648 <alt_tick>
 1004a34:	e0bffc17 	ldw	r2,-16(fp)
 1004a38:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004a3c:	e0bffe17 	ldw	r2,-8(fp)
 1004a40:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1004a44:	0001883a 	nop
 1004a48:	e037883a 	mov	sp,fp
 1004a4c:	dfc00117 	ldw	ra,4(sp)
 1004a50:	df000017 	ldw	fp,0(sp)
 1004a54:	dec00204 	addi	sp,sp,8
 1004a58:	f800283a 	ret

01004a5c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1004a5c:	defff804 	addi	sp,sp,-32
 1004a60:	dfc00715 	stw	ra,28(sp)
 1004a64:	df000615 	stw	fp,24(sp)
 1004a68:	df000604 	addi	fp,sp,24
 1004a6c:	e13ffc15 	stw	r4,-16(fp)
 1004a70:	e17ffd15 	stw	r5,-12(fp)
 1004a74:	e1bffe15 	stw	r6,-8(fp)
 1004a78:	e1ffff15 	stw	r7,-4(fp)
 1004a7c:	e0bfff17 	ldw	r2,-4(fp)
 1004a80:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1004a84:	d0a6bd17 	ldw	r2,-25868(gp)
 1004a88:	1000021e 	bne	r2,zero,1004a94 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 1004a8c:	e0bffb17 	ldw	r2,-20(fp)
 1004a90:	d0a6bd15 	stw	r2,-25868(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1004a94:	e0bffc17 	ldw	r2,-16(fp)
 1004a98:	10800104 	addi	r2,r2,4
 1004a9c:	00c001c4 	movi	r3,7
 1004aa0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 1004aa4:	d8000015 	stw	zero,0(sp)
 1004aa8:	e1fffc17 	ldw	r7,-16(fp)
 1004aac:	01804034 	movhi	r6,256
 1004ab0:	31927904 	addi	r6,r6,18916
 1004ab4:	e17ffe17 	ldw	r5,-8(fp)
 1004ab8:	e13ffd17 	ldw	r4,-12(fp)
 1004abc:	1004f780 	call	1004f78 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 1004ac0:	0001883a 	nop
 1004ac4:	e037883a 	mov	sp,fp
 1004ac8:	dfc00117 	ldw	ra,4(sp)
 1004acc:	df000017 	ldw	fp,0(sp)
 1004ad0:	dec00204 	addi	sp,sp,8
 1004ad4:	f800283a 	ret

01004ad8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1004ad8:	defff504 	addi	sp,sp,-44
 1004adc:	df000a15 	stw	fp,40(sp)
 1004ae0:	df000a04 	addi	fp,sp,40
 1004ae4:	e13ffc15 	stw	r4,-16(fp)
 1004ae8:	e17ffd15 	stw	r5,-12(fp)
 1004aec:	e1bffe15 	stw	r6,-8(fp)
 1004af0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1004af4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1004af8:	d0a6bd17 	ldw	r2,-25868(gp)
  
  if (alt_ticks_per_second ())
 1004afc:	10003c26 	beq	r2,zero,1004bf0 <alt_alarm_start+0x118>
  {
    if (alarm)
 1004b00:	e0bffc17 	ldw	r2,-16(fp)
 1004b04:	10003826 	beq	r2,zero,1004be8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 1004b08:	e0bffc17 	ldw	r2,-16(fp)
 1004b0c:	e0fffe17 	ldw	r3,-8(fp)
 1004b10:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 1004b14:	e0bffc17 	ldw	r2,-16(fp)
 1004b18:	e0ffff17 	ldw	r3,-4(fp)
 1004b1c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004b20:	0005303a 	rdctl	r2,status
 1004b24:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004b28:	e0fff917 	ldw	r3,-28(fp)
 1004b2c:	00bfff84 	movi	r2,-2
 1004b30:	1884703a 	and	r2,r3,r2
 1004b34:	1001703a 	wrctl	status,r2
  
  return context;
 1004b38:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 1004b3c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1004b40:	d0a6be17 	ldw	r2,-25864(gp)
      
      current_nticks = alt_nticks();
 1004b44:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1004b48:	e0fffd17 	ldw	r3,-12(fp)
 1004b4c:	e0bff617 	ldw	r2,-40(fp)
 1004b50:	1885883a 	add	r2,r3,r2
 1004b54:	10c00044 	addi	r3,r2,1
 1004b58:	e0bffc17 	ldw	r2,-16(fp)
 1004b5c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1004b60:	e0bffc17 	ldw	r2,-16(fp)
 1004b64:	10c00217 	ldw	r3,8(r2)
 1004b68:	e0bff617 	ldw	r2,-40(fp)
 1004b6c:	1880042e 	bgeu	r3,r2,1004b80 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 1004b70:	e0bffc17 	ldw	r2,-16(fp)
 1004b74:	00c00044 	movi	r3,1
 1004b78:	10c00405 	stb	r3,16(r2)
 1004b7c:	00000206 	br	1004b88 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 1004b80:	e0bffc17 	ldw	r2,-16(fp)
 1004b84:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1004b88:	e0bffc17 	ldw	r2,-16(fp)
 1004b8c:	d0e01204 	addi	r3,gp,-32696
 1004b90:	e0fffa15 	stw	r3,-24(fp)
 1004b94:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1004b98:	e0bffb17 	ldw	r2,-20(fp)
 1004b9c:	e0fffa17 	ldw	r3,-24(fp)
 1004ba0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1004ba4:	e0bffa17 	ldw	r2,-24(fp)
 1004ba8:	10c00017 	ldw	r3,0(r2)
 1004bac:	e0bffb17 	ldw	r2,-20(fp)
 1004bb0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1004bb4:	e0bffa17 	ldw	r2,-24(fp)
 1004bb8:	10800017 	ldw	r2,0(r2)
 1004bbc:	e0fffb17 	ldw	r3,-20(fp)
 1004bc0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1004bc4:	e0bffa17 	ldw	r2,-24(fp)
 1004bc8:	e0fffb17 	ldw	r3,-20(fp)
 1004bcc:	10c00015 	stw	r3,0(r2)
 1004bd0:	e0bff817 	ldw	r2,-32(fp)
 1004bd4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004bd8:	e0bff717 	ldw	r2,-36(fp)
 1004bdc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1004be0:	0005883a 	mov	r2,zero
 1004be4:	00000306 	br	1004bf4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 1004be8:	00bffa84 	movi	r2,-22
 1004bec:	00000106 	br	1004bf4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 1004bf0:	00bfde84 	movi	r2,-134
  }
}
 1004bf4:	e037883a 	mov	sp,fp
 1004bf8:	df000017 	ldw	fp,0(sp)
 1004bfc:	dec00104 	addi	sp,sp,4
 1004c00:	f800283a 	ret

01004c04 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 1004c04:	defffa04 	addi	sp,sp,-24
 1004c08:	dfc00515 	stw	ra,20(sp)
 1004c0c:	df000415 	stw	fp,16(sp)
 1004c10:	df000404 	addi	fp,sp,16
 1004c14:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 1004c18:	008000c4 	movi	r2,3
 1004c1c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 1004c20:	e0fffd17 	ldw	r3,-12(fp)
 1004c24:	008003f4 	movhi	r2,15
 1004c28:	10909004 	addi	r2,r2,16960
 1004c2c:	1885383a 	mul	r2,r3,r2
 1004c30:	100b883a 	mov	r5,r2
 1004c34:	0100bef4 	movhi	r4,763
 1004c38:	213c2004 	addi	r4,r4,-3968
 1004c3c:	100346c0 	call	100346c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 1004c40:	100b883a 	mov	r5,r2
 1004c44:	01200034 	movhi	r4,32768
 1004c48:	213fffc4 	addi	r4,r4,-1
 1004c4c:	100346c0 	call	100346c <__udivsi3>
 1004c50:	100b883a 	mov	r5,r2
 1004c54:	e13fff17 	ldw	r4,-4(fp)
 1004c58:	100346c0 	call	100346c <__udivsi3>
 1004c5c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1004c60:	e0bffe17 	ldw	r2,-8(fp)
 1004c64:	10002a26 	beq	r2,zero,1004d10 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 1004c68:	e03ffc15 	stw	zero,-16(fp)
 1004c6c:	00001706 	br	1004ccc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1004c70:	00a00034 	movhi	r2,32768
 1004c74:	10bfffc4 	addi	r2,r2,-1
 1004c78:	10bfffc4 	addi	r2,r2,-1
 1004c7c:	103ffe1e 	bne	r2,zero,1004c78 <__alt_mem_TCDM+0xff003c78>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 1004c80:	e0fffd17 	ldw	r3,-12(fp)
 1004c84:	008003f4 	movhi	r2,15
 1004c88:	10909004 	addi	r2,r2,16960
 1004c8c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 1004c90:	100b883a 	mov	r5,r2
 1004c94:	0100bef4 	movhi	r4,763
 1004c98:	213c2004 	addi	r4,r4,-3968
 1004c9c:	100346c0 	call	100346c <__udivsi3>
 1004ca0:	100b883a 	mov	r5,r2
 1004ca4:	01200034 	movhi	r4,32768
 1004ca8:	213fffc4 	addi	r4,r4,-1
 1004cac:	100346c0 	call	100346c <__udivsi3>
 1004cb0:	1007883a 	mov	r3,r2
 1004cb4:	e0bfff17 	ldw	r2,-4(fp)
 1004cb8:	10c5c83a 	sub	r2,r2,r3
 1004cbc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 1004cc0:	e0bffc17 	ldw	r2,-16(fp)
 1004cc4:	10800044 	addi	r2,r2,1
 1004cc8:	e0bffc15 	stw	r2,-16(fp)
 1004ccc:	e0fffc17 	ldw	r3,-16(fp)
 1004cd0:	e0bffe17 	ldw	r2,-8(fp)
 1004cd4:	18bfe616 	blt	r3,r2,1004c70 <__alt_mem_TCDM+0xff003c70>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1004cd8:	e0fffd17 	ldw	r3,-12(fp)
 1004cdc:	008003f4 	movhi	r2,15
 1004ce0:	10909004 	addi	r2,r2,16960
 1004ce4:	1885383a 	mul	r2,r3,r2
 1004ce8:	100b883a 	mov	r5,r2
 1004cec:	0100bef4 	movhi	r4,763
 1004cf0:	213c2004 	addi	r4,r4,-3968
 1004cf4:	100346c0 	call	100346c <__udivsi3>
 1004cf8:	1007883a 	mov	r3,r2
 1004cfc:	e0bfff17 	ldw	r2,-4(fp)
 1004d00:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1004d04:	10bfffc4 	addi	r2,r2,-1
 1004d08:	103ffe1e 	bne	r2,zero,1004d04 <__alt_mem_TCDM+0xff003d04>
 1004d0c:	00000d06 	br	1004d44 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1004d10:	e0fffd17 	ldw	r3,-12(fp)
 1004d14:	008003f4 	movhi	r2,15
 1004d18:	10909004 	addi	r2,r2,16960
 1004d1c:	1885383a 	mul	r2,r3,r2
 1004d20:	100b883a 	mov	r5,r2
 1004d24:	0100bef4 	movhi	r4,763
 1004d28:	213c2004 	addi	r4,r4,-3968
 1004d2c:	100346c0 	call	100346c <__udivsi3>
 1004d30:	1007883a 	mov	r3,r2
 1004d34:	e0bfff17 	ldw	r2,-4(fp)
 1004d38:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1004d3c:	10bfffc4 	addi	r2,r2,-1
 1004d40:	00bffe16 	blt	zero,r2,1004d3c <__alt_mem_TCDM+0xff003d3c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 1004d44:	0005883a 	mov	r2,zero
}
 1004d48:	e037883a 	mov	sp,fp
 1004d4c:	dfc00117 	ldw	ra,4(sp)
 1004d50:	df000017 	ldw	fp,0(sp)
 1004d54:	dec00204 	addi	sp,sp,8
 1004d58:	f800283a 	ret

01004d5c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1004d5c:	defffe04 	addi	sp,sp,-8
 1004d60:	df000115 	stw	fp,4(sp)
 1004d64:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1004d68:	e03fff15 	stw	zero,-4(fp)
 1004d6c:	00000506 	br	1004d84 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1004d70:	e0bfff17 	ldw	r2,-4(fp)
 1004d74:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1004d78:	e0bfff17 	ldw	r2,-4(fp)
 1004d7c:	10800804 	addi	r2,r2,32
 1004d80:	e0bfff15 	stw	r2,-4(fp)
 1004d84:	e0bfff17 	ldw	r2,-4(fp)
 1004d88:	10820030 	cmpltui	r2,r2,2048
 1004d8c:	103ff81e 	bne	r2,zero,1004d70 <__alt_mem_TCDM+0xff003d70>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1004d90:	0001883a 	nop
 1004d94:	e037883a 	mov	sp,fp
 1004d98:	df000017 	ldw	fp,0(sp)
 1004d9c:	dec00104 	addi	sp,sp,4
 1004da0:	f800283a 	ret

01004da4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1004da4:	defffe04 	addi	sp,sp,-8
 1004da8:	dfc00115 	stw	ra,4(sp)
 1004dac:	df000015 	stw	fp,0(sp)
 1004db0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1004db4:	d0a00f17 	ldw	r2,-32708(gp)
 1004db8:	10000326 	beq	r2,zero,1004dc8 <alt_get_errno+0x24>
 1004dbc:	d0a00f17 	ldw	r2,-32708(gp)
 1004dc0:	103ee83a 	callr	r2
 1004dc4:	00000106 	br	1004dcc <alt_get_errno+0x28>
 1004dc8:	d0a6b804 	addi	r2,gp,-25888
}
 1004dcc:	e037883a 	mov	sp,fp
 1004dd0:	dfc00117 	ldw	ra,4(sp)
 1004dd4:	df000017 	ldw	fp,0(sp)
 1004dd8:	dec00204 	addi	sp,sp,8
 1004ddc:	f800283a 	ret

01004de0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1004de0:	defffa04 	addi	sp,sp,-24
 1004de4:	dfc00515 	stw	ra,20(sp)
 1004de8:	df000415 	stw	fp,16(sp)
 1004dec:	df000404 	addi	fp,sp,16
 1004df0:	e13ffe15 	stw	r4,-8(fp)
 1004df4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1004df8:	e0bffe17 	ldw	r2,-8(fp)
 1004dfc:	10000326 	beq	r2,zero,1004e0c <alt_dev_llist_insert+0x2c>
 1004e00:	e0bffe17 	ldw	r2,-8(fp)
 1004e04:	10800217 	ldw	r2,8(r2)
 1004e08:	1000061e 	bne	r2,zero,1004e24 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 1004e0c:	1004da40 	call	1004da4 <alt_get_errno>
 1004e10:	1007883a 	mov	r3,r2
 1004e14:	00800584 	movi	r2,22
 1004e18:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1004e1c:	00bffa84 	movi	r2,-22
 1004e20:	00001306 	br	1004e70 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1004e24:	e0bffe17 	ldw	r2,-8(fp)
 1004e28:	e0ffff17 	ldw	r3,-4(fp)
 1004e2c:	e0fffc15 	stw	r3,-16(fp)
 1004e30:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1004e34:	e0bffd17 	ldw	r2,-12(fp)
 1004e38:	e0fffc17 	ldw	r3,-16(fp)
 1004e3c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1004e40:	e0bffc17 	ldw	r2,-16(fp)
 1004e44:	10c00017 	ldw	r3,0(r2)
 1004e48:	e0bffd17 	ldw	r2,-12(fp)
 1004e4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1004e50:	e0bffc17 	ldw	r2,-16(fp)
 1004e54:	10800017 	ldw	r2,0(r2)
 1004e58:	e0fffd17 	ldw	r3,-12(fp)
 1004e5c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1004e60:	e0bffc17 	ldw	r2,-16(fp)
 1004e64:	e0fffd17 	ldw	r3,-12(fp)
 1004e68:	10c00015 	stw	r3,0(r2)

  return 0;  
 1004e6c:	0005883a 	mov	r2,zero
}
 1004e70:	e037883a 	mov	sp,fp
 1004e74:	dfc00117 	ldw	ra,4(sp)
 1004e78:	df000017 	ldw	fp,0(sp)
 1004e7c:	dec00204 	addi	sp,sp,8
 1004e80:	f800283a 	ret

01004e84 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1004e84:	defffd04 	addi	sp,sp,-12
 1004e88:	dfc00215 	stw	ra,8(sp)
 1004e8c:	df000115 	stw	fp,4(sp)
 1004e90:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1004e94:	00804034 	movhi	r2,256
 1004e98:	10979b04 	addi	r2,r2,24172
 1004e9c:	e0bfff15 	stw	r2,-4(fp)
 1004ea0:	00000606 	br	1004ebc <_do_ctors+0x38>
        (*ctor) (); 
 1004ea4:	e0bfff17 	ldw	r2,-4(fp)
 1004ea8:	10800017 	ldw	r2,0(r2)
 1004eac:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1004eb0:	e0bfff17 	ldw	r2,-4(fp)
 1004eb4:	10bfff04 	addi	r2,r2,-4
 1004eb8:	e0bfff15 	stw	r2,-4(fp)
 1004ebc:	e0ffff17 	ldw	r3,-4(fp)
 1004ec0:	00804034 	movhi	r2,256
 1004ec4:	10979c04 	addi	r2,r2,24176
 1004ec8:	18bff62e 	bgeu	r3,r2,1004ea4 <__alt_mem_TCDM+0xff003ea4>
        (*ctor) (); 
}
 1004ecc:	0001883a 	nop
 1004ed0:	e037883a 	mov	sp,fp
 1004ed4:	dfc00117 	ldw	ra,4(sp)
 1004ed8:	df000017 	ldw	fp,0(sp)
 1004edc:	dec00204 	addi	sp,sp,8
 1004ee0:	f800283a 	ret

01004ee4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1004ee4:	defffd04 	addi	sp,sp,-12
 1004ee8:	dfc00215 	stw	ra,8(sp)
 1004eec:	df000115 	stw	fp,4(sp)
 1004ef0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1004ef4:	00804034 	movhi	r2,256
 1004ef8:	10979b04 	addi	r2,r2,24172
 1004efc:	e0bfff15 	stw	r2,-4(fp)
 1004f00:	00000606 	br	1004f1c <_do_dtors+0x38>
        (*dtor) (); 
 1004f04:	e0bfff17 	ldw	r2,-4(fp)
 1004f08:	10800017 	ldw	r2,0(r2)
 1004f0c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1004f10:	e0bfff17 	ldw	r2,-4(fp)
 1004f14:	10bfff04 	addi	r2,r2,-4
 1004f18:	e0bfff15 	stw	r2,-4(fp)
 1004f1c:	e0ffff17 	ldw	r3,-4(fp)
 1004f20:	00804034 	movhi	r2,256
 1004f24:	10979c04 	addi	r2,r2,24176
 1004f28:	18bff62e 	bgeu	r3,r2,1004f04 <__alt_mem_TCDM+0xff003f04>
        (*dtor) (); 
}
 1004f2c:	0001883a 	nop
 1004f30:	e037883a 	mov	sp,fp
 1004f34:	dfc00117 	ldw	ra,4(sp)
 1004f38:	df000017 	ldw	fp,0(sp)
 1004f3c:	dec00204 	addi	sp,sp,8
 1004f40:	f800283a 	ret

01004f44 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1004f44:	defffe04 	addi	sp,sp,-8
 1004f48:	dfc00115 	stw	ra,4(sp)
 1004f4c:	df000015 	stw	fp,0(sp)
 1004f50:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1004f54:	01440004 	movi	r5,4096
 1004f58:	0009883a 	mov	r4,zero
 1004f5c:	10059b00 	call	10059b0 <alt_icache_flush>
#endif
}
 1004f60:	0001883a 	nop
 1004f64:	e037883a 	mov	sp,fp
 1004f68:	dfc00117 	ldw	ra,4(sp)
 1004f6c:	df000017 	ldw	fp,0(sp)
 1004f70:	dec00204 	addi	sp,sp,8
 1004f74:	f800283a 	ret

01004f78 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1004f78:	defff904 	addi	sp,sp,-28
 1004f7c:	dfc00615 	stw	ra,24(sp)
 1004f80:	df000515 	stw	fp,20(sp)
 1004f84:	df000504 	addi	fp,sp,20
 1004f88:	e13ffc15 	stw	r4,-16(fp)
 1004f8c:	e17ffd15 	stw	r5,-12(fp)
 1004f90:	e1bffe15 	stw	r6,-8(fp)
 1004f94:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1004f98:	e0800217 	ldw	r2,8(fp)
 1004f9c:	d8800015 	stw	r2,0(sp)
 1004fa0:	e1ffff17 	ldw	r7,-4(fp)
 1004fa4:	e1bffe17 	ldw	r6,-8(fp)
 1004fa8:	e17ffd17 	ldw	r5,-12(fp)
 1004fac:	e13ffc17 	ldw	r4,-16(fp)
 1004fb0:	10051280 	call	1005128 <alt_iic_isr_register>
}  
 1004fb4:	e037883a 	mov	sp,fp
 1004fb8:	dfc00117 	ldw	ra,4(sp)
 1004fbc:	df000017 	ldw	fp,0(sp)
 1004fc0:	dec00204 	addi	sp,sp,8
 1004fc4:	f800283a 	ret

01004fc8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1004fc8:	defff904 	addi	sp,sp,-28
 1004fcc:	df000615 	stw	fp,24(sp)
 1004fd0:	df000604 	addi	fp,sp,24
 1004fd4:	e13ffe15 	stw	r4,-8(fp)
 1004fd8:	e17fff15 	stw	r5,-4(fp)
 1004fdc:	e0bfff17 	ldw	r2,-4(fp)
 1004fe0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004fe4:	0005303a 	rdctl	r2,status
 1004fe8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004fec:	e0fffb17 	ldw	r3,-20(fp)
 1004ff0:	00bfff84 	movi	r2,-2
 1004ff4:	1884703a 	and	r2,r3,r2
 1004ff8:	1001703a 	wrctl	status,r2
  
  return context;
 1004ffc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1005000:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 1005004:	00c00044 	movi	r3,1
 1005008:	e0bffa17 	ldw	r2,-24(fp)
 100500c:	1884983a 	sll	r2,r3,r2
 1005010:	1007883a 	mov	r3,r2
 1005014:	d0a6bc17 	ldw	r2,-25872(gp)
 1005018:	1884b03a 	or	r2,r3,r2
 100501c:	d0a6bc15 	stw	r2,-25872(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1005020:	d0a6bc17 	ldw	r2,-25872(gp)
 1005024:	100170fa 	wrctl	ienable,r2
 1005028:	e0bffc17 	ldw	r2,-16(fp)
 100502c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005030:	e0bffd17 	ldw	r2,-12(fp)
 1005034:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1005038:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 100503c:	0001883a 	nop
}
 1005040:	e037883a 	mov	sp,fp
 1005044:	df000017 	ldw	fp,0(sp)
 1005048:	dec00104 	addi	sp,sp,4
 100504c:	f800283a 	ret

01005050 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1005050:	defff904 	addi	sp,sp,-28
 1005054:	df000615 	stw	fp,24(sp)
 1005058:	df000604 	addi	fp,sp,24
 100505c:	e13ffe15 	stw	r4,-8(fp)
 1005060:	e17fff15 	stw	r5,-4(fp)
 1005064:	e0bfff17 	ldw	r2,-4(fp)
 1005068:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100506c:	0005303a 	rdctl	r2,status
 1005070:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1005074:	e0fffb17 	ldw	r3,-20(fp)
 1005078:	00bfff84 	movi	r2,-2
 100507c:	1884703a 	and	r2,r3,r2
 1005080:	1001703a 	wrctl	status,r2
  
  return context;
 1005084:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1005088:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 100508c:	00c00044 	movi	r3,1
 1005090:	e0bffa17 	ldw	r2,-24(fp)
 1005094:	1884983a 	sll	r2,r3,r2
 1005098:	0084303a 	nor	r2,zero,r2
 100509c:	1007883a 	mov	r3,r2
 10050a0:	d0a6bc17 	ldw	r2,-25872(gp)
 10050a4:	1884703a 	and	r2,r3,r2
 10050a8:	d0a6bc15 	stw	r2,-25872(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10050ac:	d0a6bc17 	ldw	r2,-25872(gp)
 10050b0:	100170fa 	wrctl	ienable,r2
 10050b4:	e0bffc17 	ldw	r2,-16(fp)
 10050b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10050bc:	e0bffd17 	ldw	r2,-12(fp)
 10050c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10050c4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 10050c8:	0001883a 	nop
}
 10050cc:	e037883a 	mov	sp,fp
 10050d0:	df000017 	ldw	fp,0(sp)
 10050d4:	dec00104 	addi	sp,sp,4
 10050d8:	f800283a 	ret

010050dc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 10050dc:	defffc04 	addi	sp,sp,-16
 10050e0:	df000315 	stw	fp,12(sp)
 10050e4:	df000304 	addi	fp,sp,12
 10050e8:	e13ffe15 	stw	r4,-8(fp)
 10050ec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 10050f0:	000530fa 	rdctl	r2,ienable
 10050f4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 10050f8:	00c00044 	movi	r3,1
 10050fc:	e0bfff17 	ldw	r2,-4(fp)
 1005100:	1884983a 	sll	r2,r3,r2
 1005104:	1007883a 	mov	r3,r2
 1005108:	e0bffd17 	ldw	r2,-12(fp)
 100510c:	1884703a 	and	r2,r3,r2
 1005110:	1004c03a 	cmpne	r2,r2,zero
 1005114:	10803fcc 	andi	r2,r2,255
}
 1005118:	e037883a 	mov	sp,fp
 100511c:	df000017 	ldw	fp,0(sp)
 1005120:	dec00104 	addi	sp,sp,4
 1005124:	f800283a 	ret

01005128 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1005128:	defff504 	addi	sp,sp,-44
 100512c:	dfc00a15 	stw	ra,40(sp)
 1005130:	df000915 	stw	fp,36(sp)
 1005134:	df000904 	addi	fp,sp,36
 1005138:	e13ffc15 	stw	r4,-16(fp)
 100513c:	e17ffd15 	stw	r5,-12(fp)
 1005140:	e1bffe15 	stw	r6,-8(fp)
 1005144:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 1005148:	00bffa84 	movi	r2,-22
 100514c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1005150:	e0bffd17 	ldw	r2,-12(fp)
 1005154:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1005158:	e0bff817 	ldw	r2,-32(fp)
 100515c:	10800808 	cmpgei	r2,r2,32
 1005160:	1000271e 	bne	r2,zero,1005200 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1005164:	0005303a 	rdctl	r2,status
 1005168:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100516c:	e0fffb17 	ldw	r3,-20(fp)
 1005170:	00bfff84 	movi	r2,-2
 1005174:	1884703a 	and	r2,r3,r2
 1005178:	1001703a 	wrctl	status,r2
  
  return context;
 100517c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1005180:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 1005184:	00804234 	movhi	r2,264
 1005188:	10a70504 	addi	r2,r2,-25580
 100518c:	e0fff817 	ldw	r3,-32(fp)
 1005190:	180690fa 	slli	r3,r3,3
 1005194:	10c5883a 	add	r2,r2,r3
 1005198:	e0fffe17 	ldw	r3,-8(fp)
 100519c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 10051a0:	00804234 	movhi	r2,264
 10051a4:	10a70504 	addi	r2,r2,-25580
 10051a8:	e0fff817 	ldw	r3,-32(fp)
 10051ac:	180690fa 	slli	r3,r3,3
 10051b0:	10c5883a 	add	r2,r2,r3
 10051b4:	10800104 	addi	r2,r2,4
 10051b8:	e0ffff17 	ldw	r3,-4(fp)
 10051bc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 10051c0:	e0bffe17 	ldw	r2,-8(fp)
 10051c4:	10000526 	beq	r2,zero,10051dc <alt_iic_isr_register+0xb4>
 10051c8:	e0bff817 	ldw	r2,-32(fp)
 10051cc:	100b883a 	mov	r5,r2
 10051d0:	e13ffc17 	ldw	r4,-16(fp)
 10051d4:	1004fc80 	call	1004fc8 <alt_ic_irq_enable>
 10051d8:	00000406 	br	10051ec <alt_iic_isr_register+0xc4>
 10051dc:	e0bff817 	ldw	r2,-32(fp)
 10051e0:	100b883a 	mov	r5,r2
 10051e4:	e13ffc17 	ldw	r4,-16(fp)
 10051e8:	10050500 	call	1005050 <alt_ic_irq_disable>
 10051ec:	e0bff715 	stw	r2,-36(fp)
 10051f0:	e0bffa17 	ldw	r2,-24(fp)
 10051f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10051f8:	e0bff917 	ldw	r2,-28(fp)
 10051fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1005200:	e0bff717 	ldw	r2,-36(fp)
}
 1005204:	e037883a 	mov	sp,fp
 1005208:	dfc00117 	ldw	ra,4(sp)
 100520c:	df000017 	ldw	fp,0(sp)
 1005210:	dec00204 	addi	sp,sp,8
 1005214:	f800283a 	ret

01005218 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1005218:	defff904 	addi	sp,sp,-28
 100521c:	dfc00615 	stw	ra,24(sp)
 1005220:	df000515 	stw	fp,20(sp)
 1005224:	df000504 	addi	fp,sp,20
 1005228:	e13ffc15 	stw	r4,-16(fp)
 100522c:	e17ffd15 	stw	r5,-12(fp)
 1005230:	e1bffe15 	stw	r6,-8(fp)
 1005234:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1005238:	e1bfff17 	ldw	r6,-4(fp)
 100523c:	e17ffe17 	ldw	r5,-8(fp)
 1005240:	e13ffd17 	ldw	r4,-12(fp)
 1005244:	10054580 	call	1005458 <open>
 1005248:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 100524c:	e0bffb17 	ldw	r2,-20(fp)
 1005250:	10001c16 	blt	r2,zero,10052c4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 1005254:	008041f4 	movhi	r2,263
 1005258:	109bc304 	addi	r2,r2,28428
 100525c:	e0fffb17 	ldw	r3,-20(fp)
 1005260:	18c00324 	muli	r3,r3,12
 1005264:	10c5883a 	add	r2,r2,r3
 1005268:	10c00017 	ldw	r3,0(r2)
 100526c:	e0bffc17 	ldw	r2,-16(fp)
 1005270:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1005274:	008041f4 	movhi	r2,263
 1005278:	109bc304 	addi	r2,r2,28428
 100527c:	e0fffb17 	ldw	r3,-20(fp)
 1005280:	18c00324 	muli	r3,r3,12
 1005284:	10c5883a 	add	r2,r2,r3
 1005288:	10800104 	addi	r2,r2,4
 100528c:	10c00017 	ldw	r3,0(r2)
 1005290:	e0bffc17 	ldw	r2,-16(fp)
 1005294:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1005298:	008041f4 	movhi	r2,263
 100529c:	109bc304 	addi	r2,r2,28428
 10052a0:	e0fffb17 	ldw	r3,-20(fp)
 10052a4:	18c00324 	muli	r3,r3,12
 10052a8:	10c5883a 	add	r2,r2,r3
 10052ac:	10800204 	addi	r2,r2,8
 10052b0:	10c00017 	ldw	r3,0(r2)
 10052b4:	e0bffc17 	ldw	r2,-16(fp)
 10052b8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 10052bc:	e13ffb17 	ldw	r4,-20(fp)
 10052c0:	1003c240 	call	1003c24 <alt_release_fd>
  }
} 
 10052c4:	0001883a 	nop
 10052c8:	e037883a 	mov	sp,fp
 10052cc:	dfc00117 	ldw	ra,4(sp)
 10052d0:	df000017 	ldw	fp,0(sp)
 10052d4:	dec00204 	addi	sp,sp,8
 10052d8:	f800283a 	ret

010052dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 10052dc:	defffb04 	addi	sp,sp,-20
 10052e0:	dfc00415 	stw	ra,16(sp)
 10052e4:	df000315 	stw	fp,12(sp)
 10052e8:	df000304 	addi	fp,sp,12
 10052ec:	e13ffd15 	stw	r4,-12(fp)
 10052f0:	e17ffe15 	stw	r5,-8(fp)
 10052f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 10052f8:	01c07fc4 	movi	r7,511
 10052fc:	01800044 	movi	r6,1
 1005300:	e17ffd17 	ldw	r5,-12(fp)
 1005304:	010041f4 	movhi	r4,263
 1005308:	211bc604 	addi	r4,r4,28440
 100530c:	10052180 	call	1005218 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1005310:	01c07fc4 	movi	r7,511
 1005314:	000d883a 	mov	r6,zero
 1005318:	e17ffe17 	ldw	r5,-8(fp)
 100531c:	010041f4 	movhi	r4,263
 1005320:	211bc304 	addi	r4,r4,28428
 1005324:	10052180 	call	1005218 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1005328:	01c07fc4 	movi	r7,511
 100532c:	01800044 	movi	r6,1
 1005330:	e17fff17 	ldw	r5,-4(fp)
 1005334:	010041f4 	movhi	r4,263
 1005338:	211bc904 	addi	r4,r4,28452
 100533c:	10052180 	call	1005218 <alt_open_fd>
}  
 1005340:	0001883a 	nop
 1005344:	e037883a 	mov	sp,fp
 1005348:	dfc00117 	ldw	ra,4(sp)
 100534c:	df000017 	ldw	fp,0(sp)
 1005350:	dec00204 	addi	sp,sp,8
 1005354:	f800283a 	ret

01005358 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1005358:	defffe04 	addi	sp,sp,-8
 100535c:	dfc00115 	stw	ra,4(sp)
 1005360:	df000015 	stw	fp,0(sp)
 1005364:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1005368:	d0a00f17 	ldw	r2,-32708(gp)
 100536c:	10000326 	beq	r2,zero,100537c <alt_get_errno+0x24>
 1005370:	d0a00f17 	ldw	r2,-32708(gp)
 1005374:	103ee83a 	callr	r2
 1005378:	00000106 	br	1005380 <alt_get_errno+0x28>
 100537c:	d0a6b804 	addi	r2,gp,-25888
}
 1005380:	e037883a 	mov	sp,fp
 1005384:	dfc00117 	ldw	ra,4(sp)
 1005388:	df000017 	ldw	fp,0(sp)
 100538c:	dec00204 	addi	sp,sp,8
 1005390:	f800283a 	ret

01005394 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1005394:	defffd04 	addi	sp,sp,-12
 1005398:	df000215 	stw	fp,8(sp)
 100539c:	df000204 	addi	fp,sp,8
 10053a0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 10053a4:	e0bfff17 	ldw	r2,-4(fp)
 10053a8:	10800217 	ldw	r2,8(r2)
 10053ac:	10d00034 	orhi	r3,r2,16384
 10053b0:	e0bfff17 	ldw	r2,-4(fp)
 10053b4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10053b8:	e03ffe15 	stw	zero,-8(fp)
 10053bc:	00001d06 	br	1005434 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 10053c0:	008041f4 	movhi	r2,263
 10053c4:	109bc304 	addi	r2,r2,28428
 10053c8:	e0fffe17 	ldw	r3,-8(fp)
 10053cc:	18c00324 	muli	r3,r3,12
 10053d0:	10c5883a 	add	r2,r2,r3
 10053d4:	10c00017 	ldw	r3,0(r2)
 10053d8:	e0bfff17 	ldw	r2,-4(fp)
 10053dc:	10800017 	ldw	r2,0(r2)
 10053e0:	1880111e 	bne	r3,r2,1005428 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 10053e4:	008041f4 	movhi	r2,263
 10053e8:	109bc304 	addi	r2,r2,28428
 10053ec:	e0fffe17 	ldw	r3,-8(fp)
 10053f0:	18c00324 	muli	r3,r3,12
 10053f4:	10c5883a 	add	r2,r2,r3
 10053f8:	10800204 	addi	r2,r2,8
 10053fc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1005400:	1000090e 	bge	r2,zero,1005428 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 1005404:	e0bffe17 	ldw	r2,-8(fp)
 1005408:	10c00324 	muli	r3,r2,12
 100540c:	008041f4 	movhi	r2,263
 1005410:	109bc304 	addi	r2,r2,28428
 1005414:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1005418:	e0bfff17 	ldw	r2,-4(fp)
 100541c:	18800226 	beq	r3,r2,1005428 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1005420:	00bffcc4 	movi	r2,-13
 1005424:	00000806 	br	1005448 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1005428:	e0bffe17 	ldw	r2,-8(fp)
 100542c:	10800044 	addi	r2,r2,1
 1005430:	e0bffe15 	stw	r2,-8(fp)
 1005434:	d0a00e17 	ldw	r2,-32712(gp)
 1005438:	1007883a 	mov	r3,r2
 100543c:	e0bffe17 	ldw	r2,-8(fp)
 1005440:	18bfdf2e 	bgeu	r3,r2,10053c0 <__alt_mem_TCDM+0xff0043c0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1005444:	0005883a 	mov	r2,zero
}
 1005448:	e037883a 	mov	sp,fp
 100544c:	df000017 	ldw	fp,0(sp)
 1005450:	dec00104 	addi	sp,sp,4
 1005454:	f800283a 	ret

01005458 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1005458:	defff604 	addi	sp,sp,-40
 100545c:	dfc00915 	stw	ra,36(sp)
 1005460:	df000815 	stw	fp,32(sp)
 1005464:	df000804 	addi	fp,sp,32
 1005468:	e13ffd15 	stw	r4,-12(fp)
 100546c:	e17ffe15 	stw	r5,-8(fp)
 1005470:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1005474:	00bfffc4 	movi	r2,-1
 1005478:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 100547c:	00bffb44 	movi	r2,-19
 1005480:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 1005484:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1005488:	d1600c04 	addi	r5,gp,-32720
 100548c:	e13ffd17 	ldw	r4,-12(fp)
 1005490:	10057740 	call	1005774 <alt_find_dev>
 1005494:	e0bff815 	stw	r2,-32(fp)
 1005498:	e0bff817 	ldw	r2,-32(fp)
 100549c:	1000051e 	bne	r2,zero,10054b4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 10054a0:	e13ffd17 	ldw	r4,-12(fp)
 10054a4:	10058040 	call	1005804 <alt_find_file>
 10054a8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 10054ac:	00800044 	movi	r2,1
 10054b0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 10054b4:	e0bff817 	ldw	r2,-32(fp)
 10054b8:	10002926 	beq	r2,zero,1005560 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 10054bc:	e13ff817 	ldw	r4,-32(fp)
 10054c0:	100590c0 	call	100590c <alt_get_fd>
 10054c4:	e0bff915 	stw	r2,-28(fp)
 10054c8:	e0bff917 	ldw	r2,-28(fp)
 10054cc:	1000030e 	bge	r2,zero,10054dc <open+0x84>
    {
      status = index;
 10054d0:	e0bff917 	ldw	r2,-28(fp)
 10054d4:	e0bffa15 	stw	r2,-24(fp)
 10054d8:	00002306 	br	1005568 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 10054dc:	e0bff917 	ldw	r2,-28(fp)
 10054e0:	10c00324 	muli	r3,r2,12
 10054e4:	008041f4 	movhi	r2,263
 10054e8:	109bc304 	addi	r2,r2,28428
 10054ec:	1885883a 	add	r2,r3,r2
 10054f0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 10054f4:	e0fffe17 	ldw	r3,-8(fp)
 10054f8:	00900034 	movhi	r2,16384
 10054fc:	10bfffc4 	addi	r2,r2,-1
 1005500:	1886703a 	and	r3,r3,r2
 1005504:	e0bffc17 	ldw	r2,-16(fp)
 1005508:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100550c:	e0bffb17 	ldw	r2,-20(fp)
 1005510:	1000051e 	bne	r2,zero,1005528 <open+0xd0>
 1005514:	e13ffc17 	ldw	r4,-16(fp)
 1005518:	10053940 	call	1005394 <alt_file_locked>
 100551c:	e0bffa15 	stw	r2,-24(fp)
 1005520:	e0bffa17 	ldw	r2,-24(fp)
 1005524:	10001016 	blt	r2,zero,1005568 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1005528:	e0bff817 	ldw	r2,-32(fp)
 100552c:	10800317 	ldw	r2,12(r2)
 1005530:	10000826 	beq	r2,zero,1005554 <open+0xfc>
 1005534:	e0bff817 	ldw	r2,-32(fp)
 1005538:	10800317 	ldw	r2,12(r2)
 100553c:	e1ffff17 	ldw	r7,-4(fp)
 1005540:	e1bffe17 	ldw	r6,-8(fp)
 1005544:	e17ffd17 	ldw	r5,-12(fp)
 1005548:	e13ffc17 	ldw	r4,-16(fp)
 100554c:	103ee83a 	callr	r2
 1005550:	00000106 	br	1005558 <open+0x100>
 1005554:	0005883a 	mov	r2,zero
 1005558:	e0bffa15 	stw	r2,-24(fp)
 100555c:	00000206 	br	1005568 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1005560:	00bffb44 	movi	r2,-19
 1005564:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1005568:	e0bffa17 	ldw	r2,-24(fp)
 100556c:	1000090e 	bge	r2,zero,1005594 <open+0x13c>
  {
    alt_release_fd (index);  
 1005570:	e13ff917 	ldw	r4,-28(fp)
 1005574:	1003c240 	call	1003c24 <alt_release_fd>
    ALT_ERRNO = -status;
 1005578:	10053580 	call	1005358 <alt_get_errno>
 100557c:	1007883a 	mov	r3,r2
 1005580:	e0bffa17 	ldw	r2,-24(fp)
 1005584:	0085c83a 	sub	r2,zero,r2
 1005588:	18800015 	stw	r2,0(r3)
    return -1;
 100558c:	00bfffc4 	movi	r2,-1
 1005590:	00000106 	br	1005598 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 1005594:	e0bff917 	ldw	r2,-28(fp)
}
 1005598:	e037883a 	mov	sp,fp
 100559c:	dfc00117 	ldw	ra,4(sp)
 10055a0:	df000017 	ldw	fp,0(sp)
 10055a4:	dec00204 	addi	sp,sp,8
 10055a8:	f800283a 	ret

010055ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 10055ac:	defffa04 	addi	sp,sp,-24
 10055b0:	df000515 	stw	fp,20(sp)
 10055b4:	df000504 	addi	fp,sp,20
 10055b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10055bc:	0005303a 	rdctl	r2,status
 10055c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10055c4:	e0fffc17 	ldw	r3,-16(fp)
 10055c8:	00bfff84 	movi	r2,-2
 10055cc:	1884703a 	and	r2,r3,r2
 10055d0:	1001703a 	wrctl	status,r2
  
  return context;
 10055d4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 10055d8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 10055dc:	e0bfff17 	ldw	r2,-4(fp)
 10055e0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 10055e4:	e0bffd17 	ldw	r2,-12(fp)
 10055e8:	10800017 	ldw	r2,0(r2)
 10055ec:	e0fffd17 	ldw	r3,-12(fp)
 10055f0:	18c00117 	ldw	r3,4(r3)
 10055f4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 10055f8:	e0bffd17 	ldw	r2,-12(fp)
 10055fc:	10800117 	ldw	r2,4(r2)
 1005600:	e0fffd17 	ldw	r3,-12(fp)
 1005604:	18c00017 	ldw	r3,0(r3)
 1005608:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100560c:	e0bffd17 	ldw	r2,-12(fp)
 1005610:	e0fffd17 	ldw	r3,-12(fp)
 1005614:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 1005618:	e0bffd17 	ldw	r2,-12(fp)
 100561c:	e0fffd17 	ldw	r3,-12(fp)
 1005620:	10c00015 	stw	r3,0(r2)
 1005624:	e0bffb17 	ldw	r2,-20(fp)
 1005628:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100562c:	e0bffe17 	ldw	r2,-8(fp)
 1005630:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1005634:	0001883a 	nop
 1005638:	e037883a 	mov	sp,fp
 100563c:	df000017 	ldw	fp,0(sp)
 1005640:	dec00104 	addi	sp,sp,4
 1005644:	f800283a 	ret

01005648 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1005648:	defffb04 	addi	sp,sp,-20
 100564c:	dfc00415 	stw	ra,16(sp)
 1005650:	df000315 	stw	fp,12(sp)
 1005654:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1005658:	d0a01217 	ldw	r2,-32696(gp)
 100565c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1005660:	d0a6be17 	ldw	r2,-25864(gp)
 1005664:	10800044 	addi	r2,r2,1
 1005668:	d0a6be15 	stw	r2,-25864(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100566c:	00002e06 	br	1005728 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 1005670:	e0bffd17 	ldw	r2,-12(fp)
 1005674:	10800017 	ldw	r2,0(r2)
 1005678:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100567c:	e0bffd17 	ldw	r2,-12(fp)
 1005680:	10800403 	ldbu	r2,16(r2)
 1005684:	10803fcc 	andi	r2,r2,255
 1005688:	10000426 	beq	r2,zero,100569c <alt_tick+0x54>
 100568c:	d0a6be17 	ldw	r2,-25864(gp)
 1005690:	1000021e 	bne	r2,zero,100569c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 1005694:	e0bffd17 	ldw	r2,-12(fp)
 1005698:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100569c:	e0bffd17 	ldw	r2,-12(fp)
 10056a0:	10800217 	ldw	r2,8(r2)
 10056a4:	d0e6be17 	ldw	r3,-25864(gp)
 10056a8:	18801d36 	bltu	r3,r2,1005720 <alt_tick+0xd8>
 10056ac:	e0bffd17 	ldw	r2,-12(fp)
 10056b0:	10800403 	ldbu	r2,16(r2)
 10056b4:	10803fcc 	andi	r2,r2,255
 10056b8:	1000191e 	bne	r2,zero,1005720 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 10056bc:	e0bffd17 	ldw	r2,-12(fp)
 10056c0:	10800317 	ldw	r2,12(r2)
 10056c4:	e0fffd17 	ldw	r3,-12(fp)
 10056c8:	18c00517 	ldw	r3,20(r3)
 10056cc:	1809883a 	mov	r4,r3
 10056d0:	103ee83a 	callr	r2
 10056d4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 10056d8:	e0bfff17 	ldw	r2,-4(fp)
 10056dc:	1000031e 	bne	r2,zero,10056ec <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 10056e0:	e13ffd17 	ldw	r4,-12(fp)
 10056e4:	10055ac0 	call	10055ac <alt_alarm_stop>
 10056e8:	00000d06 	br	1005720 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 10056ec:	e0bffd17 	ldw	r2,-12(fp)
 10056f0:	10c00217 	ldw	r3,8(r2)
 10056f4:	e0bfff17 	ldw	r2,-4(fp)
 10056f8:	1887883a 	add	r3,r3,r2
 10056fc:	e0bffd17 	ldw	r2,-12(fp)
 1005700:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1005704:	e0bffd17 	ldw	r2,-12(fp)
 1005708:	10c00217 	ldw	r3,8(r2)
 100570c:	d0a6be17 	ldw	r2,-25864(gp)
 1005710:	1880032e 	bgeu	r3,r2,1005720 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 1005714:	e0bffd17 	ldw	r2,-12(fp)
 1005718:	00c00044 	movi	r3,1
 100571c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 1005720:	e0bffe17 	ldw	r2,-8(fp)
 1005724:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1005728:	e0fffd17 	ldw	r3,-12(fp)
 100572c:	d0a01204 	addi	r2,gp,-32696
 1005730:	18bfcf1e 	bne	r3,r2,1005670 <__alt_mem_TCDM+0xff004670>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 1005734:	0001883a 	nop
}
 1005738:	0001883a 	nop
 100573c:	e037883a 	mov	sp,fp
 1005740:	dfc00117 	ldw	ra,4(sp)
 1005744:	df000017 	ldw	fp,0(sp)
 1005748:	dec00204 	addi	sp,sp,8
 100574c:	f800283a 	ret

01005750 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 1005750:	deffff04 	addi	sp,sp,-4
 1005754:	df000015 	stw	fp,0(sp)
 1005758:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 100575c:	000170fa 	wrctl	ienable,zero
}
 1005760:	0001883a 	nop
 1005764:	e037883a 	mov	sp,fp
 1005768:	df000017 	ldw	fp,0(sp)
 100576c:	dec00104 	addi	sp,sp,4
 1005770:	f800283a 	ret

01005774 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1005774:	defffa04 	addi	sp,sp,-24
 1005778:	dfc00515 	stw	ra,20(sp)
 100577c:	df000415 	stw	fp,16(sp)
 1005780:	df000404 	addi	fp,sp,16
 1005784:	e13ffe15 	stw	r4,-8(fp)
 1005788:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 100578c:	e0bfff17 	ldw	r2,-4(fp)
 1005790:	10800017 	ldw	r2,0(r2)
 1005794:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1005798:	e13ffe17 	ldw	r4,-8(fp)
 100579c:	10008340 	call	1000834 <strlen>
 10057a0:	10800044 	addi	r2,r2,1
 10057a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10057a8:	00000d06 	br	10057e0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 10057ac:	e0bffc17 	ldw	r2,-16(fp)
 10057b0:	10800217 	ldw	r2,8(r2)
 10057b4:	e0fffd17 	ldw	r3,-12(fp)
 10057b8:	180d883a 	mov	r6,r3
 10057bc:	e17ffe17 	ldw	r5,-8(fp)
 10057c0:	1009883a 	mov	r4,r2
 10057c4:	1005b280 	call	1005b28 <memcmp>
 10057c8:	1000021e 	bne	r2,zero,10057d4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 10057cc:	e0bffc17 	ldw	r2,-16(fp)
 10057d0:	00000706 	br	10057f0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 10057d4:	e0bffc17 	ldw	r2,-16(fp)
 10057d8:	10800017 	ldw	r2,0(r2)
 10057dc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10057e0:	e0fffc17 	ldw	r3,-16(fp)
 10057e4:	e0bfff17 	ldw	r2,-4(fp)
 10057e8:	18bff01e 	bne	r3,r2,10057ac <__alt_mem_TCDM+0xff0047ac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 10057ec:	0005883a 	mov	r2,zero
}
 10057f0:	e037883a 	mov	sp,fp
 10057f4:	dfc00117 	ldw	ra,4(sp)
 10057f8:	df000017 	ldw	fp,0(sp)
 10057fc:	dec00204 	addi	sp,sp,8
 1005800:	f800283a 	ret

01005804 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1005804:	defffb04 	addi	sp,sp,-20
 1005808:	dfc00415 	stw	ra,16(sp)
 100580c:	df000315 	stw	fp,12(sp)
 1005810:	df000304 	addi	fp,sp,12
 1005814:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1005818:	d0a00a17 	ldw	r2,-32728(gp)
 100581c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1005820:	00003106 	br	10058e8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 1005824:	e0bffd17 	ldw	r2,-12(fp)
 1005828:	10800217 	ldw	r2,8(r2)
 100582c:	1009883a 	mov	r4,r2
 1005830:	10008340 	call	1000834 <strlen>
 1005834:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 1005838:	e0bffd17 	ldw	r2,-12(fp)
 100583c:	10c00217 	ldw	r3,8(r2)
 1005840:	e0bffe17 	ldw	r2,-8(fp)
 1005844:	10bfffc4 	addi	r2,r2,-1
 1005848:	1885883a 	add	r2,r3,r2
 100584c:	10800003 	ldbu	r2,0(r2)
 1005850:	10803fcc 	andi	r2,r2,255
 1005854:	1080201c 	xori	r2,r2,128
 1005858:	10bfe004 	addi	r2,r2,-128
 100585c:	10800bd8 	cmpnei	r2,r2,47
 1005860:	1000031e 	bne	r2,zero,1005870 <alt_find_file+0x6c>
    {
      len -= 1;
 1005864:	e0bffe17 	ldw	r2,-8(fp)
 1005868:	10bfffc4 	addi	r2,r2,-1
 100586c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1005870:	e0bffe17 	ldw	r2,-8(fp)
 1005874:	e0ffff17 	ldw	r3,-4(fp)
 1005878:	1885883a 	add	r2,r3,r2
 100587c:	10800003 	ldbu	r2,0(r2)
 1005880:	10803fcc 	andi	r2,r2,255
 1005884:	1080201c 	xori	r2,r2,128
 1005888:	10bfe004 	addi	r2,r2,-128
 100588c:	10800be0 	cmpeqi	r2,r2,47
 1005890:	1000081e 	bne	r2,zero,10058b4 <alt_find_file+0xb0>
 1005894:	e0bffe17 	ldw	r2,-8(fp)
 1005898:	e0ffff17 	ldw	r3,-4(fp)
 100589c:	1885883a 	add	r2,r3,r2
 10058a0:	10800003 	ldbu	r2,0(r2)
 10058a4:	10803fcc 	andi	r2,r2,255
 10058a8:	1080201c 	xori	r2,r2,128
 10058ac:	10bfe004 	addi	r2,r2,-128
 10058b0:	10000a1e 	bne	r2,zero,10058dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 10058b4:	e0bffd17 	ldw	r2,-12(fp)
 10058b8:	10800217 	ldw	r2,8(r2)
 10058bc:	e0fffe17 	ldw	r3,-8(fp)
 10058c0:	180d883a 	mov	r6,r3
 10058c4:	e17fff17 	ldw	r5,-4(fp)
 10058c8:	1009883a 	mov	r4,r2
 10058cc:	1005b280 	call	1005b28 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10058d0:	1000021e 	bne	r2,zero,10058dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 10058d4:	e0bffd17 	ldw	r2,-12(fp)
 10058d8:	00000706 	br	10058f8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 10058dc:	e0bffd17 	ldw	r2,-12(fp)
 10058e0:	10800017 	ldw	r2,0(r2)
 10058e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10058e8:	e0fffd17 	ldw	r3,-12(fp)
 10058ec:	d0a00a04 	addi	r2,gp,-32728
 10058f0:	18bfcc1e 	bne	r3,r2,1005824 <__alt_mem_TCDM+0xff004824>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 10058f4:	0005883a 	mov	r2,zero
}
 10058f8:	e037883a 	mov	sp,fp
 10058fc:	dfc00117 	ldw	ra,4(sp)
 1005900:	df000017 	ldw	fp,0(sp)
 1005904:	dec00204 	addi	sp,sp,8
 1005908:	f800283a 	ret

0100590c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 100590c:	defffc04 	addi	sp,sp,-16
 1005910:	df000315 	stw	fp,12(sp)
 1005914:	df000304 	addi	fp,sp,12
 1005918:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 100591c:	00bffa04 	movi	r2,-24
 1005920:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1005924:	e03ffd15 	stw	zero,-12(fp)
 1005928:	00001906 	br	1005990 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 100592c:	008041f4 	movhi	r2,263
 1005930:	109bc304 	addi	r2,r2,28428
 1005934:	e0fffd17 	ldw	r3,-12(fp)
 1005938:	18c00324 	muli	r3,r3,12
 100593c:	10c5883a 	add	r2,r2,r3
 1005940:	10800017 	ldw	r2,0(r2)
 1005944:	10000f1e 	bne	r2,zero,1005984 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 1005948:	008041f4 	movhi	r2,263
 100594c:	109bc304 	addi	r2,r2,28428
 1005950:	e0fffd17 	ldw	r3,-12(fp)
 1005954:	18c00324 	muli	r3,r3,12
 1005958:	10c5883a 	add	r2,r2,r3
 100595c:	e0ffff17 	ldw	r3,-4(fp)
 1005960:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 1005964:	d0e00e17 	ldw	r3,-32712(gp)
 1005968:	e0bffd17 	ldw	r2,-12(fp)
 100596c:	1880020e 	bge	r3,r2,1005978 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 1005970:	e0bffd17 	ldw	r2,-12(fp)
 1005974:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
 1005978:	e0bffd17 	ldw	r2,-12(fp)
 100597c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 1005980:	00000606 	br	100599c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1005984:	e0bffd17 	ldw	r2,-12(fp)
 1005988:	10800044 	addi	r2,r2,1
 100598c:	e0bffd15 	stw	r2,-12(fp)
 1005990:	e0bffd17 	ldw	r2,-12(fp)
 1005994:	10800810 	cmplti	r2,r2,32
 1005998:	103fe41e 	bne	r2,zero,100592c <__alt_mem_TCDM+0xff00492c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 100599c:	e0bffe17 	ldw	r2,-8(fp)
}
 10059a0:	e037883a 	mov	sp,fp
 10059a4:	df000017 	ldw	fp,0(sp)
 10059a8:	dec00104 	addi	sp,sp,4
 10059ac:	f800283a 	ret

010059b0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 10059b0:	defffb04 	addi	sp,sp,-20
 10059b4:	df000415 	stw	fp,16(sp)
 10059b8:	df000404 	addi	fp,sp,16
 10059bc:	e13ffe15 	stw	r4,-8(fp)
 10059c0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 10059c4:	e0bfff17 	ldw	r2,-4(fp)
 10059c8:	10840070 	cmpltui	r2,r2,4097
 10059cc:	1000021e 	bne	r2,zero,10059d8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 10059d0:	00840004 	movi	r2,4096
 10059d4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 10059d8:	e0fffe17 	ldw	r3,-8(fp)
 10059dc:	e0bfff17 	ldw	r2,-4(fp)
 10059e0:	1885883a 	add	r2,r3,r2
 10059e4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 10059e8:	e0bffe17 	ldw	r2,-8(fp)
 10059ec:	e0bffc15 	stw	r2,-16(fp)
 10059f0:	00000506 	br	1005a08 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 10059f4:	e0bffc17 	ldw	r2,-16(fp)
 10059f8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 10059fc:	e0bffc17 	ldw	r2,-16(fp)
 1005a00:	10800804 	addi	r2,r2,32
 1005a04:	e0bffc15 	stw	r2,-16(fp)
 1005a08:	e0fffc17 	ldw	r3,-16(fp)
 1005a0c:	e0bffd17 	ldw	r2,-12(fp)
 1005a10:	18bff836 	bltu	r3,r2,10059f4 <__alt_mem_TCDM+0xff0049f4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1005a14:	e0bffe17 	ldw	r2,-8(fp)
 1005a18:	108007cc 	andi	r2,r2,31
 1005a1c:	10000226 	beq	r2,zero,1005a28 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1005a20:	e0bffc17 	ldw	r2,-16(fp)
 1005a24:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 1005a28:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1005a2c:	0001883a 	nop
 1005a30:	e037883a 	mov	sp,fp
 1005a34:	df000017 	ldw	fp,0(sp)
 1005a38:	dec00104 	addi	sp,sp,4
 1005a3c:	f800283a 	ret

01005a40 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 1005a40:	defffe04 	addi	sp,sp,-8
 1005a44:	df000115 	stw	fp,4(sp)
 1005a48:	df000104 	addi	fp,sp,4
 1005a4c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 1005a50:	e0bfff17 	ldw	r2,-4(fp)
 1005a54:	10bffe84 	addi	r2,r2,-6
 1005a58:	10c00428 	cmpgeui	r3,r2,16
 1005a5c:	18001a1e 	bne	r3,zero,1005ac8 <alt_exception_cause_generated_bad_addr+0x88>
 1005a60:	100690ba 	slli	r3,r2,2
 1005a64:	00804034 	movhi	r2,256
 1005a68:	10969e04 	addi	r2,r2,23160
 1005a6c:	1885883a 	add	r2,r3,r2
 1005a70:	10800017 	ldw	r2,0(r2)
 1005a74:	1000683a 	jmp	r2
 1005a78:	01005ab8 	rdprs	r4,zero,362
 1005a7c:	01005ab8 	rdprs	r4,zero,362
 1005a80:	01005ac8 	cmpgei	r4,zero,363
 1005a84:	01005ac8 	cmpgei	r4,zero,363
 1005a88:	01005ac8 	cmpgei	r4,zero,363
 1005a8c:	01005ab8 	rdprs	r4,zero,362
 1005a90:	01005ac0 	call	1005ac <__reset-0xeffa54>
 1005a94:	01005ac8 	cmpgei	r4,zero,363
 1005a98:	01005ab8 	rdprs	r4,zero,362
 1005a9c:	01005ab8 	rdprs	r4,zero,362
 1005aa0:	01005ac8 	cmpgei	r4,zero,363
 1005aa4:	01005ab8 	rdprs	r4,zero,362
 1005aa8:	01005ac0 	call	1005ac <__reset-0xeffa54>
 1005aac:	01005ac8 	cmpgei	r4,zero,363
 1005ab0:	01005ac8 	cmpgei	r4,zero,363
 1005ab4:	01005ab8 	rdprs	r4,zero,362
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 1005ab8:	00800044 	movi	r2,1
 1005abc:	00000306 	br	1005acc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 1005ac0:	0005883a 	mov	r2,zero
 1005ac4:	00000106 	br	1005acc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 1005ac8:	0005883a 	mov	r2,zero
  }
}
 1005acc:	e037883a 	mov	sp,fp
 1005ad0:	df000017 	ldw	fp,0(sp)
 1005ad4:	dec00104 	addi	sp,sp,4
 1005ad8:	f800283a 	ret

01005adc <atexit>:
 1005adc:	200b883a 	mov	r5,r4
 1005ae0:	000f883a 	mov	r7,zero
 1005ae4:	000d883a 	mov	r6,zero
 1005ae8:	0009883a 	mov	r4,zero
 1005aec:	1005ba41 	jmpi	1005ba4 <__register_exitproc>

01005af0 <exit>:
 1005af0:	defffe04 	addi	sp,sp,-8
 1005af4:	000b883a 	mov	r5,zero
 1005af8:	dc000015 	stw	r16,0(sp)
 1005afc:	dfc00115 	stw	ra,4(sp)
 1005b00:	2021883a 	mov	r16,r4
 1005b04:	1005cbc0 	call	1005cbc <__call_exitprocs>
 1005b08:	00804234 	movhi	r2,264
 1005b0c:	10a04104 	addi	r2,r2,-32508
 1005b10:	11000017 	ldw	r4,0(r2)
 1005b14:	20800f17 	ldw	r2,60(r4)
 1005b18:	10000126 	beq	r2,zero,1005b20 <exit+0x30>
 1005b1c:	103ee83a 	callr	r2
 1005b20:	8009883a 	mov	r4,r16
 1005b24:	1005e3c0 	call	1005e3c <_exit>

01005b28 <memcmp>:
 1005b28:	01c000c4 	movi	r7,3
 1005b2c:	3980192e 	bgeu	r7,r6,1005b94 <memcmp+0x6c>
 1005b30:	2144b03a 	or	r2,r4,r5
 1005b34:	11c4703a 	and	r2,r2,r7
 1005b38:	10000f26 	beq	r2,zero,1005b78 <memcmp+0x50>
 1005b3c:	20800003 	ldbu	r2,0(r4)
 1005b40:	28c00003 	ldbu	r3,0(r5)
 1005b44:	10c0151e 	bne	r2,r3,1005b9c <memcmp+0x74>
 1005b48:	31bfff84 	addi	r6,r6,-2
 1005b4c:	01ffffc4 	movi	r7,-1
 1005b50:	00000406 	br	1005b64 <memcmp+0x3c>
 1005b54:	20800003 	ldbu	r2,0(r4)
 1005b58:	28c00003 	ldbu	r3,0(r5)
 1005b5c:	31bfffc4 	addi	r6,r6,-1
 1005b60:	10c00e1e 	bne	r2,r3,1005b9c <memcmp+0x74>
 1005b64:	21000044 	addi	r4,r4,1
 1005b68:	29400044 	addi	r5,r5,1
 1005b6c:	31fff91e 	bne	r6,r7,1005b54 <__alt_mem_TCDM+0xff004b54>
 1005b70:	0005883a 	mov	r2,zero
 1005b74:	f800283a 	ret
 1005b78:	20c00017 	ldw	r3,0(r4)
 1005b7c:	28800017 	ldw	r2,0(r5)
 1005b80:	18bfee1e 	bne	r3,r2,1005b3c <__alt_mem_TCDM+0xff004b3c>
 1005b84:	31bfff04 	addi	r6,r6,-4
 1005b88:	21000104 	addi	r4,r4,4
 1005b8c:	29400104 	addi	r5,r5,4
 1005b90:	39bff936 	bltu	r7,r6,1005b78 <__alt_mem_TCDM+0xff004b78>
 1005b94:	303fe91e 	bne	r6,zero,1005b3c <__alt_mem_TCDM+0xff004b3c>
 1005b98:	003ff506 	br	1005b70 <__alt_mem_TCDM+0xff004b70>
 1005b9c:	10c5c83a 	sub	r2,r2,r3
 1005ba0:	f800283a 	ret

01005ba4 <__register_exitproc>:
 1005ba4:	defffa04 	addi	sp,sp,-24
 1005ba8:	dc000315 	stw	r16,12(sp)
 1005bac:	04004234 	movhi	r16,264
 1005bb0:	84204104 	addi	r16,r16,-32508
 1005bb4:	80c00017 	ldw	r3,0(r16)
 1005bb8:	dc400415 	stw	r17,16(sp)
 1005bbc:	dfc00515 	stw	ra,20(sp)
 1005bc0:	18805217 	ldw	r2,328(r3)
 1005bc4:	2023883a 	mov	r17,r4
 1005bc8:	10003726 	beq	r2,zero,1005ca8 <__register_exitproc+0x104>
 1005bcc:	10c00117 	ldw	r3,4(r2)
 1005bd0:	010007c4 	movi	r4,31
 1005bd4:	20c00e16 	blt	r4,r3,1005c10 <__register_exitproc+0x6c>
 1005bd8:	1a000044 	addi	r8,r3,1
 1005bdc:	8800221e 	bne	r17,zero,1005c68 <__register_exitproc+0xc4>
 1005be0:	18c00084 	addi	r3,r3,2
 1005be4:	18c7883a 	add	r3,r3,r3
 1005be8:	18c7883a 	add	r3,r3,r3
 1005bec:	12000115 	stw	r8,4(r2)
 1005bf0:	10c7883a 	add	r3,r2,r3
 1005bf4:	19400015 	stw	r5,0(r3)
 1005bf8:	0005883a 	mov	r2,zero
 1005bfc:	dfc00517 	ldw	ra,20(sp)
 1005c00:	dc400417 	ldw	r17,16(sp)
 1005c04:	dc000317 	ldw	r16,12(sp)
 1005c08:	dec00604 	addi	sp,sp,24
 1005c0c:	f800283a 	ret
 1005c10:	00800034 	movhi	r2,0
 1005c14:	10800004 	addi	r2,r2,0
 1005c18:	10002626 	beq	r2,zero,1005cb4 <__register_exitproc+0x110>
 1005c1c:	01006404 	movi	r4,400
 1005c20:	d9400015 	stw	r5,0(sp)
 1005c24:	d9800115 	stw	r6,4(sp)
 1005c28:	d9c00215 	stw	r7,8(sp)
 1005c2c:	00000000 	call	0 <__reset-0x1000000>
 1005c30:	d9400017 	ldw	r5,0(sp)
 1005c34:	d9800117 	ldw	r6,4(sp)
 1005c38:	d9c00217 	ldw	r7,8(sp)
 1005c3c:	10001d26 	beq	r2,zero,1005cb4 <__register_exitproc+0x110>
 1005c40:	81000017 	ldw	r4,0(r16)
 1005c44:	10000115 	stw	zero,4(r2)
 1005c48:	02000044 	movi	r8,1
 1005c4c:	22405217 	ldw	r9,328(r4)
 1005c50:	0007883a 	mov	r3,zero
 1005c54:	12400015 	stw	r9,0(r2)
 1005c58:	20805215 	stw	r2,328(r4)
 1005c5c:	10006215 	stw	zero,392(r2)
 1005c60:	10006315 	stw	zero,396(r2)
 1005c64:	883fde26 	beq	r17,zero,1005be0 <__alt_mem_TCDM+0xff004be0>
 1005c68:	18c9883a 	add	r4,r3,r3
 1005c6c:	2109883a 	add	r4,r4,r4
 1005c70:	1109883a 	add	r4,r2,r4
 1005c74:	21802215 	stw	r6,136(r4)
 1005c78:	01800044 	movi	r6,1
 1005c7c:	12406217 	ldw	r9,392(r2)
 1005c80:	30cc983a 	sll	r6,r6,r3
 1005c84:	4992b03a 	or	r9,r9,r6
 1005c88:	12406215 	stw	r9,392(r2)
 1005c8c:	21c04215 	stw	r7,264(r4)
 1005c90:	01000084 	movi	r4,2
 1005c94:	893fd21e 	bne	r17,r4,1005be0 <__alt_mem_TCDM+0xff004be0>
 1005c98:	11006317 	ldw	r4,396(r2)
 1005c9c:	218cb03a 	or	r6,r4,r6
 1005ca0:	11806315 	stw	r6,396(r2)
 1005ca4:	003fce06 	br	1005be0 <__alt_mem_TCDM+0xff004be0>
 1005ca8:	18805304 	addi	r2,r3,332
 1005cac:	18805215 	stw	r2,328(r3)
 1005cb0:	003fc606 	br	1005bcc <__alt_mem_TCDM+0xff004bcc>
 1005cb4:	00bfffc4 	movi	r2,-1
 1005cb8:	003fd006 	br	1005bfc <__alt_mem_TCDM+0xff004bfc>

01005cbc <__call_exitprocs>:
 1005cbc:	defff504 	addi	sp,sp,-44
 1005cc0:	df000915 	stw	fp,36(sp)
 1005cc4:	dd400615 	stw	r21,24(sp)
 1005cc8:	dc800315 	stw	r18,12(sp)
 1005ccc:	dfc00a15 	stw	ra,40(sp)
 1005cd0:	ddc00815 	stw	r23,32(sp)
 1005cd4:	dd800715 	stw	r22,28(sp)
 1005cd8:	dd000515 	stw	r20,20(sp)
 1005cdc:	dcc00415 	stw	r19,16(sp)
 1005ce0:	dc400215 	stw	r17,8(sp)
 1005ce4:	dc000115 	stw	r16,4(sp)
 1005ce8:	d9000015 	stw	r4,0(sp)
 1005cec:	2839883a 	mov	fp,r5
 1005cf0:	04800044 	movi	r18,1
 1005cf4:	057fffc4 	movi	r21,-1
 1005cf8:	00804234 	movhi	r2,264
 1005cfc:	10a04104 	addi	r2,r2,-32508
 1005d00:	12000017 	ldw	r8,0(r2)
 1005d04:	45005217 	ldw	r20,328(r8)
 1005d08:	44c05204 	addi	r19,r8,328
 1005d0c:	a0001c26 	beq	r20,zero,1005d80 <__call_exitprocs+0xc4>
 1005d10:	a0800117 	ldw	r2,4(r20)
 1005d14:	15ffffc4 	addi	r23,r2,-1
 1005d18:	b8000d16 	blt	r23,zero,1005d50 <__call_exitprocs+0x94>
 1005d1c:	14000044 	addi	r16,r2,1
 1005d20:	8421883a 	add	r16,r16,r16
 1005d24:	8421883a 	add	r16,r16,r16
 1005d28:	84402004 	addi	r17,r16,128
 1005d2c:	a463883a 	add	r17,r20,r17
 1005d30:	a421883a 	add	r16,r20,r16
 1005d34:	e0001e26 	beq	fp,zero,1005db0 <__call_exitprocs+0xf4>
 1005d38:	80804017 	ldw	r2,256(r16)
 1005d3c:	e0801c26 	beq	fp,r2,1005db0 <__call_exitprocs+0xf4>
 1005d40:	bdffffc4 	addi	r23,r23,-1
 1005d44:	843fff04 	addi	r16,r16,-4
 1005d48:	8c7fff04 	addi	r17,r17,-4
 1005d4c:	bd7ff91e 	bne	r23,r21,1005d34 <__alt_mem_TCDM+0xff004d34>
 1005d50:	00800034 	movhi	r2,0
 1005d54:	10800004 	addi	r2,r2,0
 1005d58:	10000926 	beq	r2,zero,1005d80 <__call_exitprocs+0xc4>
 1005d5c:	a0800117 	ldw	r2,4(r20)
 1005d60:	1000301e 	bne	r2,zero,1005e24 <__call_exitprocs+0x168>
 1005d64:	a0800017 	ldw	r2,0(r20)
 1005d68:	10003226 	beq	r2,zero,1005e34 <__call_exitprocs+0x178>
 1005d6c:	a009883a 	mov	r4,r20
 1005d70:	98800015 	stw	r2,0(r19)
 1005d74:	00000000 	call	0 <__reset-0x1000000>
 1005d78:	9d000017 	ldw	r20,0(r19)
 1005d7c:	a03fe41e 	bne	r20,zero,1005d10 <__alt_mem_TCDM+0xff004d10>
 1005d80:	dfc00a17 	ldw	ra,40(sp)
 1005d84:	df000917 	ldw	fp,36(sp)
 1005d88:	ddc00817 	ldw	r23,32(sp)
 1005d8c:	dd800717 	ldw	r22,28(sp)
 1005d90:	dd400617 	ldw	r21,24(sp)
 1005d94:	dd000517 	ldw	r20,20(sp)
 1005d98:	dcc00417 	ldw	r19,16(sp)
 1005d9c:	dc800317 	ldw	r18,12(sp)
 1005da0:	dc400217 	ldw	r17,8(sp)
 1005da4:	dc000117 	ldw	r16,4(sp)
 1005da8:	dec00b04 	addi	sp,sp,44
 1005dac:	f800283a 	ret
 1005db0:	a0800117 	ldw	r2,4(r20)
 1005db4:	80c00017 	ldw	r3,0(r16)
 1005db8:	10bfffc4 	addi	r2,r2,-1
 1005dbc:	15c01426 	beq	r2,r23,1005e10 <__call_exitprocs+0x154>
 1005dc0:	80000015 	stw	zero,0(r16)
 1005dc4:	183fde26 	beq	r3,zero,1005d40 <__alt_mem_TCDM+0xff004d40>
 1005dc8:	95c8983a 	sll	r4,r18,r23
 1005dcc:	a0806217 	ldw	r2,392(r20)
 1005dd0:	a5800117 	ldw	r22,4(r20)
 1005dd4:	2084703a 	and	r2,r4,r2
 1005dd8:	10000b26 	beq	r2,zero,1005e08 <__call_exitprocs+0x14c>
 1005ddc:	a0806317 	ldw	r2,396(r20)
 1005de0:	2088703a 	and	r4,r4,r2
 1005de4:	20000c1e 	bne	r4,zero,1005e18 <__call_exitprocs+0x15c>
 1005de8:	89400017 	ldw	r5,0(r17)
 1005dec:	d9000017 	ldw	r4,0(sp)
 1005df0:	183ee83a 	callr	r3
 1005df4:	a0800117 	ldw	r2,4(r20)
 1005df8:	15bfbf1e 	bne	r2,r22,1005cf8 <__alt_mem_TCDM+0xff004cf8>
 1005dfc:	98800017 	ldw	r2,0(r19)
 1005e00:	153fcf26 	beq	r2,r20,1005d40 <__alt_mem_TCDM+0xff004d40>
 1005e04:	003fbc06 	br	1005cf8 <__alt_mem_TCDM+0xff004cf8>
 1005e08:	183ee83a 	callr	r3
 1005e0c:	003ff906 	br	1005df4 <__alt_mem_TCDM+0xff004df4>
 1005e10:	a5c00115 	stw	r23,4(r20)
 1005e14:	003feb06 	br	1005dc4 <__alt_mem_TCDM+0xff004dc4>
 1005e18:	89000017 	ldw	r4,0(r17)
 1005e1c:	183ee83a 	callr	r3
 1005e20:	003ff406 	br	1005df4 <__alt_mem_TCDM+0xff004df4>
 1005e24:	a0800017 	ldw	r2,0(r20)
 1005e28:	a027883a 	mov	r19,r20
 1005e2c:	1029883a 	mov	r20,r2
 1005e30:	003fb606 	br	1005d0c <__alt_mem_TCDM+0xff004d0c>
 1005e34:	0005883a 	mov	r2,zero
 1005e38:	003ffb06 	br	1005e28 <__alt_mem_TCDM+0xff004e28>

01005e3c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1005e3c:	defffd04 	addi	sp,sp,-12
 1005e40:	df000215 	stw	fp,8(sp)
 1005e44:	df000204 	addi	fp,sp,8
 1005e48:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 1005e4c:	0001883a 	nop
 1005e50:	e0bfff17 	ldw	r2,-4(fp)
 1005e54:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 1005e58:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1005e5c:	10000226 	beq	r2,zero,1005e68 <_exit+0x2c>
    ALT_SIM_FAIL();
 1005e60:	002af070 	cmpltui	zero,zero,43969
 1005e64:	00000106 	br	1005e6c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 1005e68:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1005e6c:	003fff06 	br	1005e6c <__alt_mem_TCDM+0xff004e6c>
