
lab4LcdInterface.elf:     file format elf32-littlenios2
lab4LcdInterface.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01000244

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02020020 paddr 0x01000020 align 2**12
         filesz 0x00000224 memsz 0x00000224 flags r-x
    LOAD off    0x00001244 vaddr 0x01000244 paddr 0x01000244 align 2**12
         filesz 0x000763e4 memsz 0x000763e4 flags r-x
    LOAD off    0x00077628 vaddr 0x01076628 paddr 0x010780ac align 2**12
         filesz 0x00001a84 memsz 0x00001a84 flags rw-
    LOAD off    0x00079b30 vaddr 0x01079b30 paddr 0x01079b30 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  02020020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005b9c  01000244  01000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00070848  01005de0  01005de0  00006de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a84  01076628  010780ac  00077628  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  01079b30  01079b30  00079b30  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM_ctrl   00000000  01079c84  01079c84  000790ac  2**0
                  CONTENTS
  7 .TCIM         00000000  02020244  02020244  000790ac  2**0
                  CONTENTS
  8 .TCDM         00000000  02021000  02021000  000790ac  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  000790ac  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000a70  00000000  00000000  000790d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000168ce  00000000  00000000  00079b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000061c1  00000000  00000000  0009040e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006be9  00000000  00000000  000965cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001670  00000000  00000000  0009d1b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002915  00000000  00000000  0009e828  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00004a4c  00000000  00000000  000a113d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000060  00000000  00000000  000a5b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000680  00000000  00000000  000a5bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  000a8b06  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  000a8b09  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000a8b0c  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000a8b0d  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000a8b0e  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  000a8b12  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  000a8b16  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  000a8b1a  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  000a8b23  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  000a8b2c  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000a  00000000  00000000  000a8b35  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000005d  00000000  00000000  000a8b3f  2**0
                  CONTENTS, READONLY
 31 .jdi          0000522c  00000000  00000000  000a8b9c  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     0007a953  00000000  00000000  000addc8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
02020020 l    d  .exceptions	00000000 .exceptions
01000244 l    d  .text	00000000 .text
01005de0 l    d  .rodata	00000000 .rodata
01076628 l    d  .rwdata	00000000 .rwdata
01079b30 l    d  .bss	00000000 .bss
01079c84 l    d  .SDRAM_ctrl	00000000 .SDRAM_ctrl
02020244 l    d  .TCIM	00000000 .TCIM
02021000 l    d  .TCDM	00000000 .TCDM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab4LcdInterface_bsp//obj/HAL/src/crt0.o
0100028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0100083c l     F .text	00000008 __fp_unlock
01000850 l     F .text	0000019c __sinit.part.1
010009ec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01076628 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
01003498 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
010035a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
010035d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
010036bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100379c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01003888 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01003a5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0107809c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
01003cd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01003e0c l     F .text	00000034 alt_dev_reg
01076ffc l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01004110 l     F .text	0000020c altera_avalon_jtag_uart_irq
0100431c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01004954 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01004d14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01005188 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
010052c8 l     F .text	0000003c alt_get_errno
01005304 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
01079b58 g     O .bss	00000004 alt_instruction_exception_handler
01003290 g     F .text	00000054 _isatty_r
01003998 g     F .text	0000007c alt_main
010006d0 g     F .text	000000c0 _puts_r
01079b84 g     O .bss	00000100 alt_irq
01002fb8 g     F .text	00000060 _lseek_r
010780ac g       *ABS*	00000000 __flash_rwdata_start
01079c84 g       *ABS*	00000000 __alt_heap_start
0100256c g     F .text	0000005c __sseek
01000b8c g     F .text	00000010 __sinit
010009f4 g     F .text	00000068 __sfmoreglue
01003a38 g     F .text	00000024 __malloc_unlock
01000668 g     F .text	00000034 LCD_Write_Command
01001c58 g     F .text	0000015c memmove
0100069c g     F .text	00000034 LCD_Write_Data
01000b74 g     F .text	00000018 _cleanup
010056c0 g     F .text	00000024 altera_nios2_gen2_irq_init
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
01003234 g     F .text	0000005c _fstat_r
01079b3c g     O .bss	00000004 errno
010024e8 g     F .text	00000008 __seofread
01079b44 g     O .bss	00000004 alt_argv
0108005c g       *ABS*	00000000 _gp
01003ca8 g     F .text	00000030 usleep
01050de0 g     O .rodata	00025800 picture_array_tuxAnimation_3
01076e7c g     O .rwdata	00000180 alt_fd_list
01005de0 g     O .rodata	00025800 picture_array_tuxAnimation_1
010056e4 g     F .text	00000090 alt_find_dev
01001b10 g     F .text	00000148 memcpy
01000844 g     F .text	0000000c _cleanup_r
0100524c g     F .text	0000007c alt_io_redirect
01005de0 g       *ABS*	00000000 __DTOR_END__
01000790 g     F .text	00000014 puts
010059b0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
01004514 g     F .text	0000021c altera_avalon_jtag_uart_read
010033dc g     F .text	00000064 .hidden __udivsi3
010036f8 g     F .text	000000a4 isatty
01000000 g       *ABS*	00000000 __alt_mem_SDRAM_ctrl
0107806c g     O .rwdata	00000004 picture_width_tuxAnimation_3
01005920 g     F .text	00000090 alt_icache_flush
01079b38 g     O .bss	00000004 __malloc_top_pad
01000bdc g     F .text	000004bc __sfvwrite_r
0100044c g     F .text	0000021c init_LCD
01002440 g     F .text	00000054 _sbrk_r
01078064 g     O .rwdata	00000004 picture_width_tuxAnimation_2
010031d4 g     F .text	00000060 _read_r
01078094 g     O .rwdata	00000004 alt_max_fd
010027d8 g     F .text	000000f0 _fclose_r
01002b54 g     F .text	00000030 fflush
01079b34 g     O .bss	00000004 __malloc_max_sbrked_mem
010038c4 g     F .text	000000d4 lseek
01078074 g     O .rwdata	00000004 _global_impure_ptr
01001edc g     F .text	00000564 _realloc_r
01079c84 g       *ABS*	00000000 __bss_end
01005098 g     F .text	000000f0 alt_iic_isr_register
010055b8 g     F .text	00000108 alt_tick
01000bac g     F .text	00000018 __fp_lock_all
0100504c g     F .text	0000004c alt_ic_irq_enabled
0100551c g     F .text	0000009c alt_alarm_stop
01079b4c g     O .bss	00000004 alt_irq_active
020200fc g     F .exceptions	000000d4 alt_irq_handler
01076e54 g     O .rwdata	00000028 alt_dev_null
01004ccc g     F .text	00000048 alt_dcache_flush_all
010780ac g       *ABS*	00000000 __ram_rwdata_end
0107808c g     O .rwdata	00000008 alt_dev_list
01078060 g     O .rwdata	00000004 picture_height_tuxAnimation_1
01003d14 g     F .text	000000f8 write
01076628 g       *ABS*	00000000 __ram_rodata_end
0100360c g     F .text	000000b0 fstat
01003440 g     F .text	00000058 .hidden __umodsi3
01079c84 g       *ABS*	00000000 end
01004050 g     F .text	000000c0 altera_avalon_jtag_uart_init
020201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
01005de0 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
010049cc g     F .text	0000007c alt_avalon_timer_sc_init
01004730 g     F .text	00000224 altera_avalon_jtag_uart_write
01000b9c g     F .text	00000004 __sfp_lock_acquire
01001a2c g     F .text	000000e4 memchr
01002ca8 g     F .text	00000310 _free_r
01005c2c g     F .text	00000180 __call_exitprocs
0107807c g     O .rwdata	00000004 __malloc_sbrk_base
01000244 g     F .text	0000004c _start
01079b50 g     O .bss	00000004 _alt_tick_rate
01079b54 g     O .bss	00000004 _alt_nticks
01003a98 g     F .text	000000fc read
01003e78 g     F .text	00000074 alt_sys_init
01005b14 g     F .text	00000118 __register_exitproc
010043bc g     F .text	00000068 altera_avalon_jtag_uart_close
01076628 g       *ABS*	00000000 __ram_rwdata_start
01005de0 g       *ABS*	00000000 __ram_rodata_start
01079b5c g     O .bss	00000028 __malloc_current_mallinfo
01003eec g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0100587c g     F .text	000000a4 alt_get_fd
01004b74 g     F .text	00000158 alt_busy_sleep
01002784 g     F .text	00000054 _close_r
01005a98 g     F .text	0000007c memcmp
01003fac g     F .text	00000050 altera_avalon_jtag_uart_close_fd
01079c84 g       *ABS*	00000000 __alt_stack_base
01003ffc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01002630 g     F .text	00000154 __swsetup_r
01000a5c g     F .text	00000118 __sfp
01076a4c g     O .rwdata	00000408 __malloc_av_
01000ba8 g     F .text	00000004 __sinit_lock_release
01002494 g     F .text	00000054 __sread
01005774 g     F .text	00000108 alt_find_file
01004d50 g     F .text	000000a4 alt_dev_llist_insert
01003a14 g     F .text	00000024 __malloc_lock
01003bf8 g     F .text	000000b0 sbrk
01002af8 g     F .text	0000005c _fflush_r
01079b30 g       *ABS*	00000000 __bss_start
01001db4 g     F .text	00000128 memset
01000290 g     F .text	000001bc main
01079b48 g     O .bss	00000004 alt_envp
01079b30 g     O .bss	00000004 __malloc_max_total_mem
01003f4c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
010025c8 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
010028c8 g     F .text	00000014 fclose
01078070 g     O .rwdata	00000004 picture_height_tuxAnimation_3
01001220 g     F .text	0000080c _malloc_r
01078098 g     O .rwdata	00000004 alt_errno
01001098 g     F .text	000000c4 _fwalk
010032e4 g     F .text	00000084 .hidden __divsi3
01002b84 g     F .text	00000124 _malloc_trim_r
01005de0 g       *ABS*	00000000 __CTOR_END__
01005de0 g       *ABS*	00000000 __flash_rodata_start
01005de0 g       *ABS*	00000000 __DTOR_LIST__
01003e40 g     F .text	00000038 alt_irq_init
01003b94 g     F .text	00000064 alt_release_fd
01005a4c g     F .text	00000014 atexit
010025d0 g     F .text	00000060 _write_r
01078078 g     O .rwdata	00000004 _impure_ptr
01079b40 g     O .bss	00000004 alt_argc
010028dc g     F .text	0000021c __sflush_r
01004e54 g     F .text	00000060 _do_dtors
02020020 g       .exceptions	00000000 alt_irq_entry
01000bc4 g     F .text	00000018 __fp_unlock_all
01078084 g     O .rwdata	00000008 alt_fs_list
02020020 g       *ABS*	00000000 __ram_exceptions_start
01004ee8 g     F .text	00000050 alt_ic_isr_register
010780ac g       *ABS*	00000000 _edata
02021000 g       *ABS*	00000000 __alt_mem_TCDM
01079c84 g       *ABS*	00000000 _end
0102b5e0 g     O .rodata	00025800 picture_array_tuxAnimation_2
02020244 g       *ABS*	00000000 __ram_exceptions_end
01004424 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
01004fc0 g     F .text	0000008c alt_ic_irq_disable
010024f0 g     F .text	0000007c __swrite
01078080 g     O .rwdata	00000004 __malloc_trim_threshold
01005a60 g     F .text	00000038 exit
0100115c g     F .text	000000c4 _fwalk_reent
01078068 g     O .rwdata	00000004 picture_height_tuxAnimation_2
01003368 g     F .text	00000074 .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
02020020 g     F .exceptions	00000000 alt_exception
01000ba0 g     F .text	00000004 __sfp_lock_release
0107805c g     O .rwdata	00000004 picture_width_tuxAnimation_1
01005dac g     F .text	00000034 _exit
02020000 g       *ABS*	00000000 __alt_mem_TCIM
01004a48 g     F .text	0000012c alt_alarm_start
01003018 g     F .text	000001bc __smakebuf_r
010007a4 g     F .text	00000098 strlen
010053c8 g     F .text	00000154 open
01004eb4 g     F .text	00000034 alt_icache_flush_all
010780a0 g     O .rwdata	00000004 alt_priority_mask
01004f38 g     F .text	00000088 alt_ic_irq_enable
010780a4 g     O .rwdata	00000008 alt_alarm_list
01004df4 g     F .text	00000060 _do_ctors
010034d4 g     F .text	000000d0 close
01003804 g     F .text	00000084 alt_load
01000ba4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__alt_mem_TCDM+0xfefdf004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08409114 	ori	at,at,580
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__reset-0x1000000>

Disassembly of section .exceptions:

02020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 202002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 202003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 202004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 202005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 202006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 202007c:	10000326 	beq	r2,zero,202008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2020080:	20000226 	beq	r4,zero,202008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2020084:	20200fc0 	call	20200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2020088:	00000706 	br	20200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 202008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2020098:	20201d00 	call	20201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 202009c:	1000021e 	bne	r2,zero,20200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20200f8:	ef80083a 	eret

020200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20200fc:	defff904 	addi	sp,sp,-28
 2020100:	dfc00615 	stw	ra,24(sp)
 2020104:	df000515 	stw	fp,20(sp)
 2020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 202010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2020110:	0005313a 	rdctl	r2,ipending
 2020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 202011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2020124:	00800044 	movi	r2,1
 2020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 202012c:	e0fffb17 	ldw	r3,-20(fp)
 2020130:	e0bffc17 	ldw	r2,-16(fp)
 2020134:	1884703a 	and	r2,r3,r2
 2020138:	10001426 	beq	r2,zero,202018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 202013c:	00804234 	movhi	r2,264
 2020140:	10a6e104 	addi	r2,r2,-25724
 2020144:	e0fffd17 	ldw	r3,-12(fp)
 2020148:	180690fa 	slli	r3,r3,3
 202014c:	10c5883a 	add	r2,r2,r3
 2020150:	10c00017 	ldw	r3,0(r2)
 2020154:	00804234 	movhi	r2,264
 2020158:	10a6e104 	addi	r2,r2,-25724
 202015c:	e13ffd17 	ldw	r4,-12(fp)
 2020160:	200890fa 	slli	r4,r4,3
 2020164:	1105883a 	add	r2,r2,r4
 2020168:	10800104 	addi	r2,r2,4
 202016c:	10800017 	ldw	r2,0(r2)
 2020170:	1009883a 	mov	r4,r2
 2020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 202017c:	0005313a 	rdctl	r2,ipending
 2020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2020184:	e0bfff17 	ldw	r2,-4(fp)
 2020188:	00000706 	br	20201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 202018c:	e0bffc17 	ldw	r2,-16(fp)
 2020190:	1085883a 	add	r2,r2,r2
 2020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2020198:	e0bffd17 	ldw	r2,-12(fp)
 202019c:	10800044 	addi	r2,r2,1
 20201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20201a4:	003fe106 	br	202012c <__alt_mem_TCDM+0xfffff12c>

    active = alt_irq_pending ();
 20201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20201ac:	e0bffb17 	ldw	r2,-20(fp)
 20201b0:	103fdb1e 	bne	r2,zero,2020120 <__alt_mem_TCDM+0xfffff120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20201b4:	0001883a 	nop
}
 20201b8:	0001883a 	nop
 20201bc:	e037883a 	mov	sp,fp
 20201c0:	dfc00117 	ldw	ra,4(sp)
 20201c4:	df000017 	ldw	fp,0(sp)
 20201c8:	dec00204 	addi	sp,sp,8
 20201cc:	f800283a 	ret

020201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20201d0:	defffb04 	addi	sp,sp,-20
 20201d4:	dfc00415 	stw	ra,16(sp)
 20201d8:	df000315 	stw	fp,12(sp)
 20201dc:	df000304 	addi	fp,sp,12
 20201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 20201e4:	000531fa 	rdctl	r2,exception
 20201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 20201ec:	e0bffd17 	ldw	r2,-12(fp)
 20201f0:	10801f0c 	andi	r2,r2,124
 20201f4:	1004d0ba 	srli	r2,r2,2
 20201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 20201fc:	0005333a 	rdctl	r2,badaddr
 2020200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 2020204:	d0a6bf17 	ldw	r2,-25860(gp)
 2020208:	10000726 	beq	r2,zero,2020228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 202020c:	d0a6bf17 	ldw	r2,-25860(gp)
 2020210:	e0fffd17 	ldw	r3,-12(fp)
 2020214:	e1bffe17 	ldw	r6,-8(fp)
 2020218:	e17fff17 	ldw	r5,-4(fp)
 202021c:	1809883a 	mov	r4,r3
 2020220:	103ee83a 	callr	r2
 2020224:	00000206 	br	2020230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2020228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 202022c:	0005883a 	mov	r2,zero
}
 2020230:	e037883a 	mov	sp,fp
 2020234:	dfc00117 	ldw	ra,4(sp)
 2020238:	df000017 	ldw	fp,0(sp)
 202023c:	dec00204 	addi	sp,sp,8
 2020240:	f800283a 	ret

Disassembly of section .text:

01000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 1000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 1000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 100024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 1000250:	00bffd16 	blt	zero,r2,1000248 <__alt_mem_TCDM+0xfefdf248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1000254:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 1000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 100025c:	06804234 	movhi	gp,264
    ori gp, gp, %lo(_gp)
 1000260:	d6801714 	ori	gp,gp,92
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1000264:	008041f4 	movhi	r2,263
    ori r2, r2, %lo(__bss_start)
 1000268:	10a6cc14 	ori	r2,r2,39728

    movhi r3, %hi(__bss_end)
 100026c:	00c041f4 	movhi	r3,263
    ori r3, r3, %lo(__bss_end)
 1000270:	18e72114 	ori	r3,r3,40068

    beq r2, r3, 1f
 1000274:	10c00326 	beq	r2,r3,1000284 <_start+0x40>

0:
    stw zero, (r2)
 1000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 100027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1000280:	10fffd36 	bltu	r2,r3,1000278 <__alt_mem_TCDM+0xfefdf278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1000284:	10038040 	call	1003804 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1000288:	10039980 	call	1003998 <alt_main>

0100028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 100028c:	003fff06 	br	100028c <__alt_mem_TCDM+0xfefdf28c>

01000290 <main>:
void LCD_Write_Command(int command);
void LCD_Write_Data(int data);
void init_LCD();

int main()
{
 1000290:	defff804 	addi	sp,sp,-32
 1000294:	dfc00715 	stw	ra,28(sp)
 1000298:	df000615 	stw	fp,24(sp)
 100029c:	df000604 	addi	fp,sp,24
  printf("Hello from Nios II!\n");
 10002a0:	010041f4 	movhi	r4,263
 10002a4:	21197804 	addi	r4,r4,26080
 10002a8:	10007900 	call	1000790 <puts>
//		  IOWR_16DIRECT(LCD_BASE, i, i);
//	  }
//  }


  init_LCD();
 10002ac:	100044c0 	call	100044c <init_LCD>

  usleep(500E3);
 10002b0:	01000234 	movhi	r4,8
 10002b4:	21284804 	addi	r4,r4,-24288
 10002b8:	1003ca80 	call	1003ca8 <usleep>


  while (true)
  {
	  LCD_Write_Command(0x002CU);
 10002bc:	01000b04 	movi	r4,44
 10002c0:	10006680 	call	1000668 <LCD_Write_Command>
	  for(int i = 0; i < picture_height_tuxAnimation_1; i++)
 10002c4:	e03ffa15 	stw	zero,-24(fp)
 10002c8:	00001706 	br	1000328 <main+0x98>
	  {
		  for(int j = 0; j < picture_width_tuxAnimation_1; j++)
 10002cc:	e03ffb15 	stw	zero,-20(fp)
 10002d0:	00000f06 	br	1000310 <main+0x80>
		  {
//			  LCD_Write_Data(0);
			   LCD_Write_Data(picture_array_tuxAnimation_1[i][j]);
 10002d4:	00804034 	movhi	r2,256
 10002d8:	10977804 	addi	r2,r2,24032
 10002dc:	e0fffa17 	ldw	r3,-24(fp)
 10002e0:	19003c24 	muli	r4,r3,240
 10002e4:	e0fffb17 	ldw	r3,-20(fp)
 10002e8:	20c7883a 	add	r3,r4,r3
 10002ec:	18c7883a 	add	r3,r3,r3
 10002f0:	10c5883a 	add	r2,r2,r3
 10002f4:	1080000b 	ldhu	r2,0(r2)
 10002f8:	10bfffcc 	andi	r2,r2,65535
 10002fc:	1009883a 	mov	r4,r2
 1000300:	100069c0 	call	100069c <LCD_Write_Data>
  while (true)
  {
	  LCD_Write_Command(0x002CU);
	  for(int i = 0; i < picture_height_tuxAnimation_1; i++)
	  {
		  for(int j = 0; j < picture_width_tuxAnimation_1; j++)
 1000304:	e0bffb17 	ldw	r2,-20(fp)
 1000308:	10800044 	addi	r2,r2,1
 100030c:	e0bffb15 	stw	r2,-20(fp)
 1000310:	e0fffb17 	ldw	r3,-20(fp)
 1000314:	00803c04 	movi	r2,240
 1000318:	18bfee36 	bltu	r3,r2,10002d4 <__alt_mem_TCDM+0xfefdf2d4>


  while (true)
  {
	  LCD_Write_Command(0x002CU);
	  for(int i = 0; i < picture_height_tuxAnimation_1; i++)
 100031c:	e0bffa17 	ldw	r2,-24(fp)
 1000320:	10800044 	addi	r2,r2,1
 1000324:	e0bffa15 	stw	r2,-24(fp)
 1000328:	e0fffa17 	ldw	r3,-24(fp)
 100032c:	00805004 	movi	r2,320
 1000330:	18bfe636 	bltu	r3,r2,10002cc <__alt_mem_TCDM+0xfefdf2cc>
//			  LCD_Write_Data(0);
			   LCD_Write_Data(picture_array_tuxAnimation_1[i][j]);
		  }
	  }

	  usleep(500E3);
 1000334:	01000234 	movhi	r4,8
 1000338:	21284804 	addi	r4,r4,-24288
 100033c:	1003ca80 	call	1003ca8 <usleep>

	  LCD_Write_Command(0x002CU);
 1000340:	01000b04 	movi	r4,44
 1000344:	10006680 	call	1000668 <LCD_Write_Command>
	  for(int i = 0; i < picture_height_tuxAnimation_2; i++)
 1000348:	e03ffc15 	stw	zero,-16(fp)
 100034c:	00001706 	br	10003ac <main+0x11c>
	  {
		  for(int j = 0; j < picture_width_tuxAnimation_2; j++)
 1000350:	e03ffd15 	stw	zero,-12(fp)
 1000354:	00000f06 	br	1000394 <main+0x104>
		  {
			  LCD_Write_Data(picture_array_tuxAnimation_2[i][j]);
 1000358:	008040f4 	movhi	r2,259
 100035c:	10ad7804 	addi	r2,r2,-18976
 1000360:	e0fffc17 	ldw	r3,-16(fp)
 1000364:	19003c24 	muli	r4,r3,240
 1000368:	e0fffd17 	ldw	r3,-12(fp)
 100036c:	20c7883a 	add	r3,r4,r3
 1000370:	18c7883a 	add	r3,r3,r3
 1000374:	10c5883a 	add	r2,r2,r3
 1000378:	1080000b 	ldhu	r2,0(r2)
 100037c:	10bfffcc 	andi	r2,r2,65535
 1000380:	1009883a 	mov	r4,r2
 1000384:	100069c0 	call	100069c <LCD_Write_Data>
	  usleep(500E3);

	  LCD_Write_Command(0x002CU);
	  for(int i = 0; i < picture_height_tuxAnimation_2; i++)
	  {
		  for(int j = 0; j < picture_width_tuxAnimation_2; j++)
 1000388:	e0bffd17 	ldw	r2,-12(fp)
 100038c:	10800044 	addi	r2,r2,1
 1000390:	e0bffd15 	stw	r2,-12(fp)
 1000394:	e0fffd17 	ldw	r3,-12(fp)
 1000398:	00803c04 	movi	r2,240
 100039c:	18bfee36 	bltu	r3,r2,1000358 <__alt_mem_TCDM+0xfefdf358>
	  }

	  usleep(500E3);

	  LCD_Write_Command(0x002CU);
	  for(int i = 0; i < picture_height_tuxAnimation_2; i++)
 10003a0:	e0bffc17 	ldw	r2,-16(fp)
 10003a4:	10800044 	addi	r2,r2,1
 10003a8:	e0bffc15 	stw	r2,-16(fp)
 10003ac:	e0fffc17 	ldw	r3,-16(fp)
 10003b0:	00805004 	movi	r2,320
 10003b4:	18bfe636 	bltu	r3,r2,1000350 <__alt_mem_TCDM+0xfefdf350>
		  {
			  LCD_Write_Data(picture_array_tuxAnimation_2[i][j]);
		  }
	  }

	  usleep(500E3);
 10003b8:	01000234 	movhi	r4,8
 10003bc:	21284804 	addi	r4,r4,-24288
 10003c0:	1003ca80 	call	1003ca8 <usleep>

	  LCD_Write_Command(0x002CU);
 10003c4:	01000b04 	movi	r4,44
 10003c8:	10006680 	call	1000668 <LCD_Write_Command>
	  for(int i = 0; i < picture_height_tuxAnimation_3; i++)
 10003cc:	e03ffe15 	stw	zero,-8(fp)
 10003d0:	00001706 	br	1000430 <main+0x1a0>
	  {
		  for(int j = 0; j < picture_width_tuxAnimation_3; j++)
 10003d4:	e03fff15 	stw	zero,-4(fp)
 10003d8:	00000f06 	br	1000418 <main+0x188>
		  {
			  LCD_Write_Data(picture_array_tuxAnimation_3[i][j]);
 10003dc:	00804174 	movhi	r2,261
 10003e0:	10837804 	addi	r2,r2,3552
 10003e4:	e0fffe17 	ldw	r3,-8(fp)
 10003e8:	19003c24 	muli	r4,r3,240
 10003ec:	e0ffff17 	ldw	r3,-4(fp)
 10003f0:	20c7883a 	add	r3,r4,r3
 10003f4:	18c7883a 	add	r3,r3,r3
 10003f8:	10c5883a 	add	r2,r2,r3
 10003fc:	1080000b 	ldhu	r2,0(r2)
 1000400:	10bfffcc 	andi	r2,r2,65535
 1000404:	1009883a 	mov	r4,r2
 1000408:	100069c0 	call	100069c <LCD_Write_Data>
	  usleep(500E3);

	  LCD_Write_Command(0x002CU);
	  for(int i = 0; i < picture_height_tuxAnimation_3; i++)
	  {
		  for(int j = 0; j < picture_width_tuxAnimation_3; j++)
 100040c:	e0bfff17 	ldw	r2,-4(fp)
 1000410:	10800044 	addi	r2,r2,1
 1000414:	e0bfff15 	stw	r2,-4(fp)
 1000418:	e0ffff17 	ldw	r3,-4(fp)
 100041c:	00803c04 	movi	r2,240
 1000420:	18bfee36 	bltu	r3,r2,10003dc <__alt_mem_TCDM+0xfefdf3dc>
	  }

	  usleep(500E3);

	  LCD_Write_Command(0x002CU);
	  for(int i = 0; i < picture_height_tuxAnimation_3; i++)
 1000424:	e0bffe17 	ldw	r2,-8(fp)
 1000428:	10800044 	addi	r2,r2,1
 100042c:	e0bffe15 	stw	r2,-8(fp)
 1000430:	e0fffe17 	ldw	r3,-8(fp)
 1000434:	00805004 	movi	r2,320
 1000438:	18bfe636 	bltu	r3,r2,10003d4 <__alt_mem_TCDM+0xfefdf3d4>
		  {
			  LCD_Write_Data(picture_array_tuxAnimation_3[i][j]);

		  }
	  }
	  usleep(500E3);
 100043c:	01000234 	movhi	r4,8
 1000440:	21284804 	addi	r4,r4,-24288
 1000444:	1003ca80 	call	1003ca8 <usleep>
  }
 1000448:	003f9c06 	br	10002bc <__alt_mem_TCDM+0xfefdf2bc>

0100044c <init_LCD>:


  return 0;
}

void init_LCD() {
 100044c:	defffe04 	addi	sp,sp,-8
 1000450:	dfc00115 	stw	ra,4(sp)
 1000454:	df000015 	stw	fp,0(sp)
 1000458:	d839883a 	mov	fp,sp
	usleep(500E3);
 100045c:	01000234 	movhi	r4,8
 1000460:	21284804 	addi	r4,r4,-24288
 1000464:	1003ca80 	call	1003ca8 <usleep>

	LCD_Write_Command(0x0028);     //display OFF
 1000468:	01000a04 	movi	r4,40
 100046c:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Command(0x0011);     //exit SLEEP mode
 1000470:	01000444 	movi	r4,17
 1000474:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
 1000478:	0009883a 	mov	r4,zero
 100047c:	100069c0 	call	100069c <LCD_Write_Data>

	LCD_Write_Command(0x00CB);     //Power Control A
 1000480:	010032c4 	movi	r4,203
 1000484:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Data(0x0039);     //always 0x39
 1000488:	01000e44 	movi	r4,57
 100048c:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x002C);     //always 0x2C
 1000490:	01000b04 	movi	r4,44
 1000494:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x0000);     //always 0x00
 1000498:	0009883a 	mov	r4,zero
 100049c:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x0034);     //Vcore = 1.6V
 10004a0:	01000d04 	movi	r4,52
 10004a4:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x0002);     //DDVDH = 5.6V
 10004a8:	01000084 	movi	r4,2
 10004ac:	100069c0 	call	100069c <LCD_Write_Data>

	LCD_Write_Command(0x00CF);     //Power Control B
 10004b0:	010033c4 	movi	r4,207
 10004b4:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Data(0x0000);     //always 0x00
 10004b8:	0009883a 	mov	r4,zero
 10004bc:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x0081);     //PCEQ off
 10004c0:	01002044 	movi	r4,129
 10004c4:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x0030);     //ESD protection
 10004c8:	01000c04 	movi	r4,48
 10004cc:	100069c0 	call	100069c <LCD_Write_Data>

	LCD_Write_Command(0x00E8);     //Driver timing control A
 10004d0:	01003a04 	movi	r4,232
 10004d4:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Data(0x0085);     //non - overlap
 10004d8:	01002144 	movi	r4,133
 10004dc:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x0001);     //EQ timing
 10004e0:	01000044 	movi	r4,1
 10004e4:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x0079);     //Pre-chargetiming
 10004e8:	01001e44 	movi	r4,121
 10004ec:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Command(0x00EA);     //Driver timing control B
 10004f0:	01003a84 	movi	r4,234
 10004f4:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Data(0x0000);        //Gate driver timing
 10004f8:	0009883a 	mov	r4,zero
 10004fc:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x0000);        //always 0x00
 1000500:	0009883a 	mov	r4,zero
 1000504:	100069c0 	call	100069c <LCD_Write_Data>

	LCD_Write_Data(0x0064);        //soft start
 1000508:	01001904 	movi	r4,100
 100050c:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x0003);        //power on sequence
 1000510:	010000c4 	movi	r4,3
 1000514:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x0012);        //power on sequence
 1000518:	01000484 	movi	r4,18
 100051c:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x0081);        //DDVDH enhance on
 1000520:	01002044 	movi	r4,129
 1000524:	100069c0 	call	100069c <LCD_Write_Data>

	LCD_Write_Command(0x00F7);     //Pump ratio control
 1000528:	01003dc4 	movi	r4,247
 100052c:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Data(0x0020);     //DDVDH=2xVCI
 1000530:	01000804 	movi	r4,32
 1000534:	100069c0 	call	100069c <LCD_Write_Data>

	LCD_Write_Command(0x00C0);    //power control 1
 1000538:	01003004 	movi	r4,192
 100053c:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Data(0x0026);
 1000540:	01000984 	movi	r4,38
 1000544:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x0004);     //second parameter for ILI9340 (ignored by ILI9341)
 1000548:	01000104 	movi	r4,4
 100054c:	100069c0 	call	100069c <LCD_Write_Data>

	LCD_Write_Command(0x00C1);     //power control 2
 1000550:	01003044 	movi	r4,193
 1000554:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Data(0x0011);
 1000558:	01000444 	movi	r4,17
 100055c:	100069c0 	call	100069c <LCD_Write_Data>

	LCD_Write_Command(0x00C5);     //VCOM control 1
 1000560:	01003144 	movi	r4,197
 1000564:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Data(0x0035);
 1000568:	01000d44 	movi	r4,53
 100056c:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x003E);
 1000570:	01000f84 	movi	r4,62
 1000574:	100069c0 	call	100069c <LCD_Write_Data>

	LCD_Write_Command(0x00C7);     //VCOM control 2
 1000578:	010031c4 	movi	r4,199
 100057c:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Data(0x00BE);
 1000580:	01002f84 	movi	r4,190
 1000584:	100069c0 	call	100069c <LCD_Write_Data>

	LCD_Write_Command(0x00B1);     //frame rate control
 1000588:	01002c44 	movi	r4,177
 100058c:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
 1000590:	0009883a 	mov	r4,zero
 1000594:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x0010);
 1000598:	01000404 	movi	r4,16
 100059c:	100069c0 	call	100069c <LCD_Write_Data>

	LCD_Write_Command(0x003A);    //pixel format = 16 bit per pixel
 10005a0:	01000e84 	movi	r4,58
 10005a4:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Data(0x0055);
 10005a8:	01001544 	movi	r4,85
 10005ac:	100069c0 	call	100069c <LCD_Write_Data>

	LCD_Write_Command(0x00B6);     //display function control
 10005b0:	01002d84 	movi	r4,182
 10005b4:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Data(0x000A);
 10005b8:	01000284 	movi	r4,10
 10005bc:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x00A2);
 10005c0:	01002884 	movi	r4,162
 10005c4:	100069c0 	call	100069c <LCD_Write_Data>

	LCD_Write_Command(0x00F2);     //3G Gamma control
 10005c8:	01003c84 	movi	r4,242
 10005cc:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Data(0x0002);         //off
 10005d0:	01000084 	movi	r4,2
 10005d4:	100069c0 	call	100069c <LCD_Write_Data>

	LCD_Write_Command(0x0026);     //Gamma curve 3
 10005d8:	01000984 	movi	r4,38
 10005dc:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Data(0x0001);
 10005e0:	01000044 	movi	r4,1
 10005e4:	100069c0 	call	100069c <LCD_Write_Data>

	LCD_Write_Command(0x0036);     //memory access control = BGR
 10005e8:	01000d84 	movi	r4,54
 10005ec:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
 10005f0:	0009883a 	mov	r4,zero
 10005f4:	100069c0 	call	100069c <LCD_Write_Data>

	LCD_Write_Command(0x002A);     //column address set
 10005f8:	01000a84 	movi	r4,42
 10005fc:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
 1000600:	0009883a 	mov	r4,zero
 1000604:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x0000);        //start 0x0000
 1000608:	0009883a 	mov	r4,zero
 100060c:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x0000);
 1000610:	0009883a 	mov	r4,zero
 1000614:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x00EF);        //end 0x00EF
 1000618:	01003bc4 	movi	r4,239
 100061c:	100069c0 	call	100069c <LCD_Write_Data>

	LCD_Write_Command(0x002B);    //page address set
 1000620:	01000ac4 	movi	r4,43
 1000624:	10006680 	call	1000668 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
 1000628:	0009883a 	mov	r4,zero
 100062c:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x0000);        //start 0x0000
 1000630:	0009883a 	mov	r4,zero
 1000634:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x0001);
 1000638:	01000044 	movi	r4,1
 100063c:	100069c0 	call	100069c <LCD_Write_Data>
	LCD_Write_Data(0x003F);        //end 0x013F
 1000640:	01000fc4 	movi	r4,63
 1000644:	100069c0 	call	100069c <LCD_Write_Data>

	LCD_Write_Command(0x0029);
 1000648:	01000a44 	movi	r4,41
 100064c:	10006680 	call	1000668 <LCD_Write_Command>

}
 1000650:	0001883a 	nop
 1000654:	e037883a 	mov	sp,fp
 1000658:	dfc00117 	ldw	ra,4(sp)
 100065c:	df000017 	ldw	fp,0(sp)
 1000660:	dec00204 	addi	sp,sp,8
 1000664:	f800283a 	ret

01000668 <LCD_Write_Command>:

void LCD_Write_Command(int command) {
 1000668:	defffe04 	addi	sp,sp,-8
 100066c:	df000115 	stw	fp,4(sp)
 1000670:	df000104 	addi	fp,sp,4
 1000674:	e13fff15 	stw	r4,-4(fp)
  IOWR_16DIRECT(LCD_BASE, LCD_REG_WRITECMD, command);
 1000678:	00808034 	movhi	r2,512
 100067c:	10800a04 	addi	r2,r2,40
 1000680:	e0ffff0b 	ldhu	r3,-4(fp)
 1000684:	10c0002d 	sthio	r3,0(r2)
}
 1000688:	0001883a 	nop
 100068c:	e037883a 	mov	sp,fp
 1000690:	df000017 	ldw	fp,0(sp)
 1000694:	dec00104 	addi	sp,sp,4
 1000698:	f800283a 	ret

0100069c <LCD_Write_Data>:

void LCD_Write_Data(int data) {
 100069c:	defffe04 	addi	sp,sp,-8
 10006a0:	df000115 	stw	fp,4(sp)
 10006a4:	df000104 	addi	fp,sp,4
 10006a8:	e13fff15 	stw	r4,-4(fp)
  IOWR_16DIRECT(LCD_BASE, LCD_REG_WRITEDATA,data);
 10006ac:	00808034 	movhi	r2,512
 10006b0:	10800904 	addi	r2,r2,36
 10006b4:	e0ffff0b 	ldhu	r3,-4(fp)
 10006b8:	10c0002d 	sthio	r3,0(r2)
}
 10006bc:	0001883a 	nop
 10006c0:	e037883a 	mov	sp,fp
 10006c4:	df000017 	ldw	fp,0(sp)
 10006c8:	dec00104 	addi	sp,sp,4
 10006cc:	f800283a 	ret

010006d0 <_puts_r>:
 10006d0:	defff604 	addi	sp,sp,-40
 10006d4:	dc000715 	stw	r16,28(sp)
 10006d8:	2021883a 	mov	r16,r4
 10006dc:	2809883a 	mov	r4,r5
 10006e0:	dc400815 	stw	r17,32(sp)
 10006e4:	dfc00915 	stw	ra,36(sp)
 10006e8:	2823883a 	mov	r17,r5
 10006ec:	10007a40 	call	10007a4 <strlen>
 10006f0:	10c00044 	addi	r3,r2,1
 10006f4:	d8800115 	stw	r2,4(sp)
 10006f8:	008041f4 	movhi	r2,263
 10006fc:	10997d04 	addi	r2,r2,26100
 1000700:	d8800215 	stw	r2,8(sp)
 1000704:	00800044 	movi	r2,1
 1000708:	d8800315 	stw	r2,12(sp)
 100070c:	00800084 	movi	r2,2
 1000710:	dc400015 	stw	r17,0(sp)
 1000714:	d8c00615 	stw	r3,24(sp)
 1000718:	dec00415 	stw	sp,16(sp)
 100071c:	d8800515 	stw	r2,20(sp)
 1000720:	80000226 	beq	r16,zero,100072c <_puts_r+0x5c>
 1000724:	80800e17 	ldw	r2,56(r16)
 1000728:	10001426 	beq	r2,zero,100077c <_puts_r+0xac>
 100072c:	81400217 	ldw	r5,8(r16)
 1000730:	2880030b 	ldhu	r2,12(r5)
 1000734:	10c8000c 	andi	r3,r2,8192
 1000738:	1800061e 	bne	r3,zero,1000754 <_puts_r+0x84>
 100073c:	29001917 	ldw	r4,100(r5)
 1000740:	00f7ffc4 	movi	r3,-8193
 1000744:	10880014 	ori	r2,r2,8192
 1000748:	20c6703a 	and	r3,r4,r3
 100074c:	2880030d 	sth	r2,12(r5)
 1000750:	28c01915 	stw	r3,100(r5)
 1000754:	d9800404 	addi	r6,sp,16
 1000758:	8009883a 	mov	r4,r16
 100075c:	1000bdc0 	call	1000bdc <__sfvwrite_r>
 1000760:	1000091e 	bne	r2,zero,1000788 <_puts_r+0xb8>
 1000764:	00800284 	movi	r2,10
 1000768:	dfc00917 	ldw	ra,36(sp)
 100076c:	dc400817 	ldw	r17,32(sp)
 1000770:	dc000717 	ldw	r16,28(sp)
 1000774:	dec00a04 	addi	sp,sp,40
 1000778:	f800283a 	ret
 100077c:	8009883a 	mov	r4,r16
 1000780:	1000b8c0 	call	1000b8c <__sinit>
 1000784:	003fe906 	br	100072c <__alt_mem_TCDM+0xfefdf72c>
 1000788:	00bfffc4 	movi	r2,-1
 100078c:	003ff606 	br	1000768 <__alt_mem_TCDM+0xfefdf768>

01000790 <puts>:
 1000790:	00804234 	movhi	r2,264
 1000794:	10a01e04 	addi	r2,r2,-32648
 1000798:	200b883a 	mov	r5,r4
 100079c:	11000017 	ldw	r4,0(r2)
 10007a0:	10006d01 	jmpi	10006d0 <_puts_r>

010007a4 <strlen>:
 10007a4:	208000cc 	andi	r2,r4,3
 10007a8:	10002026 	beq	r2,zero,100082c <strlen+0x88>
 10007ac:	20800007 	ldb	r2,0(r4)
 10007b0:	10002026 	beq	r2,zero,1000834 <strlen+0x90>
 10007b4:	2005883a 	mov	r2,r4
 10007b8:	00000206 	br	10007c4 <strlen+0x20>
 10007bc:	10c00007 	ldb	r3,0(r2)
 10007c0:	18001826 	beq	r3,zero,1000824 <strlen+0x80>
 10007c4:	10800044 	addi	r2,r2,1
 10007c8:	10c000cc 	andi	r3,r2,3
 10007cc:	183ffb1e 	bne	r3,zero,10007bc <__alt_mem_TCDM+0xfefdf7bc>
 10007d0:	10c00017 	ldw	r3,0(r2)
 10007d4:	01ffbff4 	movhi	r7,65279
 10007d8:	39ffbfc4 	addi	r7,r7,-257
 10007dc:	00ca303a 	nor	r5,zero,r3
 10007e0:	01a02074 	movhi	r6,32897
 10007e4:	19c7883a 	add	r3,r3,r7
 10007e8:	31a02004 	addi	r6,r6,-32640
 10007ec:	1946703a 	and	r3,r3,r5
 10007f0:	1986703a 	and	r3,r3,r6
 10007f4:	1800091e 	bne	r3,zero,100081c <strlen+0x78>
 10007f8:	10800104 	addi	r2,r2,4
 10007fc:	10c00017 	ldw	r3,0(r2)
 1000800:	19cb883a 	add	r5,r3,r7
 1000804:	00c6303a 	nor	r3,zero,r3
 1000808:	28c6703a 	and	r3,r5,r3
 100080c:	1986703a 	and	r3,r3,r6
 1000810:	183ff926 	beq	r3,zero,10007f8 <__alt_mem_TCDM+0xfefdf7f8>
 1000814:	00000106 	br	100081c <strlen+0x78>
 1000818:	10800044 	addi	r2,r2,1
 100081c:	10c00007 	ldb	r3,0(r2)
 1000820:	183ffd1e 	bne	r3,zero,1000818 <__alt_mem_TCDM+0xfefdf818>
 1000824:	1105c83a 	sub	r2,r2,r4
 1000828:	f800283a 	ret
 100082c:	2005883a 	mov	r2,r4
 1000830:	003fe706 	br	10007d0 <__alt_mem_TCDM+0xfefdf7d0>
 1000834:	0005883a 	mov	r2,zero
 1000838:	f800283a 	ret

0100083c <__fp_unlock>:
 100083c:	0005883a 	mov	r2,zero
 1000840:	f800283a 	ret

01000844 <_cleanup_r>:
 1000844:	01404034 	movhi	r5,256
 1000848:	2949f604 	addi	r5,r5,10200
 100084c:	100115c1 	jmpi	100115c <_fwalk_reent>

01000850 <__sinit.part.1>:
 1000850:	defff704 	addi	sp,sp,-36
 1000854:	00c04034 	movhi	r3,256
 1000858:	dfc00815 	stw	ra,32(sp)
 100085c:	ddc00715 	stw	r23,28(sp)
 1000860:	dd800615 	stw	r22,24(sp)
 1000864:	dd400515 	stw	r21,20(sp)
 1000868:	dd000415 	stw	r20,16(sp)
 100086c:	dcc00315 	stw	r19,12(sp)
 1000870:	dc800215 	stw	r18,8(sp)
 1000874:	dc400115 	stw	r17,4(sp)
 1000878:	dc000015 	stw	r16,0(sp)
 100087c:	18c21104 	addi	r3,r3,2116
 1000880:	24000117 	ldw	r16,4(r4)
 1000884:	20c00f15 	stw	r3,60(r4)
 1000888:	2080bb04 	addi	r2,r4,748
 100088c:	00c000c4 	movi	r3,3
 1000890:	20c0b915 	stw	r3,740(r4)
 1000894:	2080ba15 	stw	r2,744(r4)
 1000898:	2000b815 	stw	zero,736(r4)
 100089c:	05c00204 	movi	r23,8
 10008a0:	00800104 	movi	r2,4
 10008a4:	2025883a 	mov	r18,r4
 10008a8:	b80d883a 	mov	r6,r23
 10008ac:	81001704 	addi	r4,r16,92
 10008b0:	000b883a 	mov	r5,zero
 10008b4:	80000015 	stw	zero,0(r16)
 10008b8:	80000115 	stw	zero,4(r16)
 10008bc:	80000215 	stw	zero,8(r16)
 10008c0:	8080030d 	sth	r2,12(r16)
 10008c4:	80001915 	stw	zero,100(r16)
 10008c8:	8000038d 	sth	zero,14(r16)
 10008cc:	80000415 	stw	zero,16(r16)
 10008d0:	80000515 	stw	zero,20(r16)
 10008d4:	80000615 	stw	zero,24(r16)
 10008d8:	1001db40 	call	1001db4 <memset>
 10008dc:	05804034 	movhi	r22,256
 10008e0:	94400217 	ldw	r17,8(r18)
 10008e4:	05404034 	movhi	r21,256
 10008e8:	05004034 	movhi	r20,256
 10008ec:	04c04034 	movhi	r19,256
 10008f0:	b5892504 	addi	r22,r22,9364
 10008f4:	ad493c04 	addi	r21,r21,9456
 10008f8:	a5095b04 	addi	r20,r20,9580
 10008fc:	9cc97204 	addi	r19,r19,9672
 1000900:	85800815 	stw	r22,32(r16)
 1000904:	85400915 	stw	r21,36(r16)
 1000908:	85000a15 	stw	r20,40(r16)
 100090c:	84c00b15 	stw	r19,44(r16)
 1000910:	84000715 	stw	r16,28(r16)
 1000914:	00800284 	movi	r2,10
 1000918:	8880030d 	sth	r2,12(r17)
 100091c:	00800044 	movi	r2,1
 1000920:	b80d883a 	mov	r6,r23
 1000924:	89001704 	addi	r4,r17,92
 1000928:	000b883a 	mov	r5,zero
 100092c:	88000015 	stw	zero,0(r17)
 1000930:	88000115 	stw	zero,4(r17)
 1000934:	88000215 	stw	zero,8(r17)
 1000938:	88001915 	stw	zero,100(r17)
 100093c:	8880038d 	sth	r2,14(r17)
 1000940:	88000415 	stw	zero,16(r17)
 1000944:	88000515 	stw	zero,20(r17)
 1000948:	88000615 	stw	zero,24(r17)
 100094c:	1001db40 	call	1001db4 <memset>
 1000950:	94000317 	ldw	r16,12(r18)
 1000954:	00800484 	movi	r2,18
 1000958:	8c400715 	stw	r17,28(r17)
 100095c:	8d800815 	stw	r22,32(r17)
 1000960:	8d400915 	stw	r21,36(r17)
 1000964:	8d000a15 	stw	r20,40(r17)
 1000968:	8cc00b15 	stw	r19,44(r17)
 100096c:	8080030d 	sth	r2,12(r16)
 1000970:	00800084 	movi	r2,2
 1000974:	80000015 	stw	zero,0(r16)
 1000978:	80000115 	stw	zero,4(r16)
 100097c:	80000215 	stw	zero,8(r16)
 1000980:	80001915 	stw	zero,100(r16)
 1000984:	8080038d 	sth	r2,14(r16)
 1000988:	80000415 	stw	zero,16(r16)
 100098c:	80000515 	stw	zero,20(r16)
 1000990:	80000615 	stw	zero,24(r16)
 1000994:	b80d883a 	mov	r6,r23
 1000998:	000b883a 	mov	r5,zero
 100099c:	81001704 	addi	r4,r16,92
 10009a0:	1001db40 	call	1001db4 <memset>
 10009a4:	00800044 	movi	r2,1
 10009a8:	84000715 	stw	r16,28(r16)
 10009ac:	85800815 	stw	r22,32(r16)
 10009b0:	85400915 	stw	r21,36(r16)
 10009b4:	85000a15 	stw	r20,40(r16)
 10009b8:	84c00b15 	stw	r19,44(r16)
 10009bc:	90800e15 	stw	r2,56(r18)
 10009c0:	dfc00817 	ldw	ra,32(sp)
 10009c4:	ddc00717 	ldw	r23,28(sp)
 10009c8:	dd800617 	ldw	r22,24(sp)
 10009cc:	dd400517 	ldw	r21,20(sp)
 10009d0:	dd000417 	ldw	r20,16(sp)
 10009d4:	dcc00317 	ldw	r19,12(sp)
 10009d8:	dc800217 	ldw	r18,8(sp)
 10009dc:	dc400117 	ldw	r17,4(sp)
 10009e0:	dc000017 	ldw	r16,0(sp)
 10009e4:	dec00904 	addi	sp,sp,36
 10009e8:	f800283a 	ret

010009ec <__fp_lock>:
 10009ec:	0005883a 	mov	r2,zero
 10009f0:	f800283a 	ret

010009f4 <__sfmoreglue>:
 10009f4:	defffc04 	addi	sp,sp,-16
 10009f8:	dc400115 	stw	r17,4(sp)
 10009fc:	2c7fffc4 	addi	r17,r5,-1
 1000a00:	8c401a24 	muli	r17,r17,104
 1000a04:	dc800215 	stw	r18,8(sp)
 1000a08:	2825883a 	mov	r18,r5
 1000a0c:	89401d04 	addi	r5,r17,116
 1000a10:	dc000015 	stw	r16,0(sp)
 1000a14:	dfc00315 	stw	ra,12(sp)
 1000a18:	10012200 	call	1001220 <_malloc_r>
 1000a1c:	1021883a 	mov	r16,r2
 1000a20:	10000726 	beq	r2,zero,1000a40 <__sfmoreglue+0x4c>
 1000a24:	11000304 	addi	r4,r2,12
 1000a28:	10000015 	stw	zero,0(r2)
 1000a2c:	14800115 	stw	r18,4(r2)
 1000a30:	11000215 	stw	r4,8(r2)
 1000a34:	89801a04 	addi	r6,r17,104
 1000a38:	000b883a 	mov	r5,zero
 1000a3c:	1001db40 	call	1001db4 <memset>
 1000a40:	8005883a 	mov	r2,r16
 1000a44:	dfc00317 	ldw	ra,12(sp)
 1000a48:	dc800217 	ldw	r18,8(sp)
 1000a4c:	dc400117 	ldw	r17,4(sp)
 1000a50:	dc000017 	ldw	r16,0(sp)
 1000a54:	dec00404 	addi	sp,sp,16
 1000a58:	f800283a 	ret

01000a5c <__sfp>:
 1000a5c:	defffb04 	addi	sp,sp,-20
 1000a60:	dc000015 	stw	r16,0(sp)
 1000a64:	04004234 	movhi	r16,264
 1000a68:	84201d04 	addi	r16,r16,-32652
 1000a6c:	dcc00315 	stw	r19,12(sp)
 1000a70:	2027883a 	mov	r19,r4
 1000a74:	81000017 	ldw	r4,0(r16)
 1000a78:	dfc00415 	stw	ra,16(sp)
 1000a7c:	dc800215 	stw	r18,8(sp)
 1000a80:	20800e17 	ldw	r2,56(r4)
 1000a84:	dc400115 	stw	r17,4(sp)
 1000a88:	1000021e 	bne	r2,zero,1000a94 <__sfp+0x38>
 1000a8c:	10008500 	call	1000850 <__sinit.part.1>
 1000a90:	81000017 	ldw	r4,0(r16)
 1000a94:	2480b804 	addi	r18,r4,736
 1000a98:	047fffc4 	movi	r17,-1
 1000a9c:	91000117 	ldw	r4,4(r18)
 1000aa0:	94000217 	ldw	r16,8(r18)
 1000aa4:	213fffc4 	addi	r4,r4,-1
 1000aa8:	20000a16 	blt	r4,zero,1000ad4 <__sfp+0x78>
 1000aac:	8080030f 	ldh	r2,12(r16)
 1000ab0:	10000c26 	beq	r2,zero,1000ae4 <__sfp+0x88>
 1000ab4:	80c01d04 	addi	r3,r16,116
 1000ab8:	00000206 	br	1000ac4 <__sfp+0x68>
 1000abc:	18bfe60f 	ldh	r2,-104(r3)
 1000ac0:	10000826 	beq	r2,zero,1000ae4 <__sfp+0x88>
 1000ac4:	213fffc4 	addi	r4,r4,-1
 1000ac8:	1c3ffd04 	addi	r16,r3,-12
 1000acc:	18c01a04 	addi	r3,r3,104
 1000ad0:	247ffa1e 	bne	r4,r17,1000abc <__alt_mem_TCDM+0xfefdfabc>
 1000ad4:	90800017 	ldw	r2,0(r18)
 1000ad8:	10001d26 	beq	r2,zero,1000b50 <__sfp+0xf4>
 1000adc:	1025883a 	mov	r18,r2
 1000ae0:	003fee06 	br	1000a9c <__alt_mem_TCDM+0xfefdfa9c>
 1000ae4:	00bfffc4 	movi	r2,-1
 1000ae8:	8080038d 	sth	r2,14(r16)
 1000aec:	00800044 	movi	r2,1
 1000af0:	8080030d 	sth	r2,12(r16)
 1000af4:	80001915 	stw	zero,100(r16)
 1000af8:	80000015 	stw	zero,0(r16)
 1000afc:	80000215 	stw	zero,8(r16)
 1000b00:	80000115 	stw	zero,4(r16)
 1000b04:	80000415 	stw	zero,16(r16)
 1000b08:	80000515 	stw	zero,20(r16)
 1000b0c:	80000615 	stw	zero,24(r16)
 1000b10:	01800204 	movi	r6,8
 1000b14:	000b883a 	mov	r5,zero
 1000b18:	81001704 	addi	r4,r16,92
 1000b1c:	1001db40 	call	1001db4 <memset>
 1000b20:	8005883a 	mov	r2,r16
 1000b24:	80000c15 	stw	zero,48(r16)
 1000b28:	80000d15 	stw	zero,52(r16)
 1000b2c:	80001115 	stw	zero,68(r16)
 1000b30:	80001215 	stw	zero,72(r16)
 1000b34:	dfc00417 	ldw	ra,16(sp)
 1000b38:	dcc00317 	ldw	r19,12(sp)
 1000b3c:	dc800217 	ldw	r18,8(sp)
 1000b40:	dc400117 	ldw	r17,4(sp)
 1000b44:	dc000017 	ldw	r16,0(sp)
 1000b48:	dec00504 	addi	sp,sp,20
 1000b4c:	f800283a 	ret
 1000b50:	01400104 	movi	r5,4
 1000b54:	9809883a 	mov	r4,r19
 1000b58:	10009f40 	call	10009f4 <__sfmoreglue>
 1000b5c:	90800015 	stw	r2,0(r18)
 1000b60:	103fde1e 	bne	r2,zero,1000adc <__alt_mem_TCDM+0xfefdfadc>
 1000b64:	00800304 	movi	r2,12
 1000b68:	98800015 	stw	r2,0(r19)
 1000b6c:	0005883a 	mov	r2,zero
 1000b70:	003ff006 	br	1000b34 <__alt_mem_TCDM+0xfefdfb34>

01000b74 <_cleanup>:
 1000b74:	00804234 	movhi	r2,264
 1000b78:	10a01d04 	addi	r2,r2,-32652
 1000b7c:	11000017 	ldw	r4,0(r2)
 1000b80:	01404034 	movhi	r5,256
 1000b84:	2949f604 	addi	r5,r5,10200
 1000b88:	100115c1 	jmpi	100115c <_fwalk_reent>

01000b8c <__sinit>:
 1000b8c:	20800e17 	ldw	r2,56(r4)
 1000b90:	10000126 	beq	r2,zero,1000b98 <__sinit+0xc>
 1000b94:	f800283a 	ret
 1000b98:	10008501 	jmpi	1000850 <__sinit.part.1>

01000b9c <__sfp_lock_acquire>:
 1000b9c:	f800283a 	ret

01000ba0 <__sfp_lock_release>:
 1000ba0:	f800283a 	ret

01000ba4 <__sinit_lock_acquire>:
 1000ba4:	f800283a 	ret

01000ba8 <__sinit_lock_release>:
 1000ba8:	f800283a 	ret

01000bac <__fp_lock_all>:
 1000bac:	00804234 	movhi	r2,264
 1000bb0:	10a01e04 	addi	r2,r2,-32648
 1000bb4:	11000017 	ldw	r4,0(r2)
 1000bb8:	01404034 	movhi	r5,256
 1000bbc:	29427b04 	addi	r5,r5,2540
 1000bc0:	10010981 	jmpi	1001098 <_fwalk>

01000bc4 <__fp_unlock_all>:
 1000bc4:	00804234 	movhi	r2,264
 1000bc8:	10a01e04 	addi	r2,r2,-32648
 1000bcc:	11000017 	ldw	r4,0(r2)
 1000bd0:	01404034 	movhi	r5,256
 1000bd4:	29420f04 	addi	r5,r5,2108
 1000bd8:	10010981 	jmpi	1001098 <_fwalk>

01000bdc <__sfvwrite_r>:
 1000bdc:	30800217 	ldw	r2,8(r6)
 1000be0:	10006726 	beq	r2,zero,1000d80 <__sfvwrite_r+0x1a4>
 1000be4:	28c0030b 	ldhu	r3,12(r5)
 1000be8:	defff404 	addi	sp,sp,-48
 1000bec:	dd400715 	stw	r21,28(sp)
 1000bf0:	dd000615 	stw	r20,24(sp)
 1000bf4:	dc000215 	stw	r16,8(sp)
 1000bf8:	dfc00b15 	stw	ra,44(sp)
 1000bfc:	df000a15 	stw	fp,40(sp)
 1000c00:	ddc00915 	stw	r23,36(sp)
 1000c04:	dd800815 	stw	r22,32(sp)
 1000c08:	dcc00515 	stw	r19,20(sp)
 1000c0c:	dc800415 	stw	r18,16(sp)
 1000c10:	dc400315 	stw	r17,12(sp)
 1000c14:	1880020c 	andi	r2,r3,8
 1000c18:	2821883a 	mov	r16,r5
 1000c1c:	202b883a 	mov	r21,r4
 1000c20:	3029883a 	mov	r20,r6
 1000c24:	10002726 	beq	r2,zero,1000cc4 <__sfvwrite_r+0xe8>
 1000c28:	28800417 	ldw	r2,16(r5)
 1000c2c:	10002526 	beq	r2,zero,1000cc4 <__sfvwrite_r+0xe8>
 1000c30:	1880008c 	andi	r2,r3,2
 1000c34:	a4400017 	ldw	r17,0(r20)
 1000c38:	10002a26 	beq	r2,zero,1000ce4 <__sfvwrite_r+0x108>
 1000c3c:	05a00034 	movhi	r22,32768
 1000c40:	0027883a 	mov	r19,zero
 1000c44:	0025883a 	mov	r18,zero
 1000c48:	b5bf0004 	addi	r22,r22,-1024
 1000c4c:	980d883a 	mov	r6,r19
 1000c50:	a809883a 	mov	r4,r21
 1000c54:	90004626 	beq	r18,zero,1000d70 <__sfvwrite_r+0x194>
 1000c58:	900f883a 	mov	r7,r18
 1000c5c:	b480022e 	bgeu	r22,r18,1000c68 <__sfvwrite_r+0x8c>
 1000c60:	01e00034 	movhi	r7,32768
 1000c64:	39ff0004 	addi	r7,r7,-1024
 1000c68:	80800917 	ldw	r2,36(r16)
 1000c6c:	81400717 	ldw	r5,28(r16)
 1000c70:	103ee83a 	callr	r2
 1000c74:	0080570e 	bge	zero,r2,1000dd4 <__sfvwrite_r+0x1f8>
 1000c78:	a0c00217 	ldw	r3,8(r20)
 1000c7c:	98a7883a 	add	r19,r19,r2
 1000c80:	90a5c83a 	sub	r18,r18,r2
 1000c84:	1885c83a 	sub	r2,r3,r2
 1000c88:	a0800215 	stw	r2,8(r20)
 1000c8c:	103fef1e 	bne	r2,zero,1000c4c <__alt_mem_TCDM+0xfefdfc4c>
 1000c90:	0005883a 	mov	r2,zero
 1000c94:	dfc00b17 	ldw	ra,44(sp)
 1000c98:	df000a17 	ldw	fp,40(sp)
 1000c9c:	ddc00917 	ldw	r23,36(sp)
 1000ca0:	dd800817 	ldw	r22,32(sp)
 1000ca4:	dd400717 	ldw	r21,28(sp)
 1000ca8:	dd000617 	ldw	r20,24(sp)
 1000cac:	dcc00517 	ldw	r19,20(sp)
 1000cb0:	dc800417 	ldw	r18,16(sp)
 1000cb4:	dc400317 	ldw	r17,12(sp)
 1000cb8:	dc000217 	ldw	r16,8(sp)
 1000cbc:	dec00c04 	addi	sp,sp,48
 1000cc0:	f800283a 	ret
 1000cc4:	800b883a 	mov	r5,r16
 1000cc8:	a809883a 	mov	r4,r21
 1000ccc:	10026300 	call	1002630 <__swsetup_r>
 1000cd0:	1000eb1e 	bne	r2,zero,1001080 <__sfvwrite_r+0x4a4>
 1000cd4:	80c0030b 	ldhu	r3,12(r16)
 1000cd8:	a4400017 	ldw	r17,0(r20)
 1000cdc:	1880008c 	andi	r2,r3,2
 1000ce0:	103fd61e 	bne	r2,zero,1000c3c <__alt_mem_TCDM+0xfefdfc3c>
 1000ce4:	1880004c 	andi	r2,r3,1
 1000ce8:	10003f1e 	bne	r2,zero,1000de8 <__sfvwrite_r+0x20c>
 1000cec:	0039883a 	mov	fp,zero
 1000cf0:	0025883a 	mov	r18,zero
 1000cf4:	90001a26 	beq	r18,zero,1000d60 <__sfvwrite_r+0x184>
 1000cf8:	1880800c 	andi	r2,r3,512
 1000cfc:	84c00217 	ldw	r19,8(r16)
 1000d00:	10002126 	beq	r2,zero,1000d88 <__sfvwrite_r+0x1ac>
 1000d04:	982f883a 	mov	r23,r19
 1000d08:	94c09336 	bltu	r18,r19,1000f58 <__sfvwrite_r+0x37c>
 1000d0c:	1881200c 	andi	r2,r3,1152
 1000d10:	10009e1e 	bne	r2,zero,1000f8c <__sfvwrite_r+0x3b0>
 1000d14:	81000017 	ldw	r4,0(r16)
 1000d18:	b80d883a 	mov	r6,r23
 1000d1c:	e00b883a 	mov	r5,fp
 1000d20:	1001c580 	call	1001c58 <memmove>
 1000d24:	80c00217 	ldw	r3,8(r16)
 1000d28:	81000017 	ldw	r4,0(r16)
 1000d2c:	9005883a 	mov	r2,r18
 1000d30:	1ce7c83a 	sub	r19,r3,r19
 1000d34:	25cf883a 	add	r7,r4,r23
 1000d38:	84c00215 	stw	r19,8(r16)
 1000d3c:	81c00015 	stw	r7,0(r16)
 1000d40:	a0c00217 	ldw	r3,8(r20)
 1000d44:	e0b9883a 	add	fp,fp,r2
 1000d48:	90a5c83a 	sub	r18,r18,r2
 1000d4c:	18a7c83a 	sub	r19,r3,r2
 1000d50:	a4c00215 	stw	r19,8(r20)
 1000d54:	983fce26 	beq	r19,zero,1000c90 <__alt_mem_TCDM+0xfefdfc90>
 1000d58:	80c0030b 	ldhu	r3,12(r16)
 1000d5c:	903fe61e 	bne	r18,zero,1000cf8 <__alt_mem_TCDM+0xfefdfcf8>
 1000d60:	8f000017 	ldw	fp,0(r17)
 1000d64:	8c800117 	ldw	r18,4(r17)
 1000d68:	8c400204 	addi	r17,r17,8
 1000d6c:	003fe106 	br	1000cf4 <__alt_mem_TCDM+0xfefdfcf4>
 1000d70:	8cc00017 	ldw	r19,0(r17)
 1000d74:	8c800117 	ldw	r18,4(r17)
 1000d78:	8c400204 	addi	r17,r17,8
 1000d7c:	003fb306 	br	1000c4c <__alt_mem_TCDM+0xfefdfc4c>
 1000d80:	0005883a 	mov	r2,zero
 1000d84:	f800283a 	ret
 1000d88:	81000017 	ldw	r4,0(r16)
 1000d8c:	80800417 	ldw	r2,16(r16)
 1000d90:	11005736 	bltu	r2,r4,1000ef0 <__sfvwrite_r+0x314>
 1000d94:	85c00517 	ldw	r23,20(r16)
 1000d98:	95c05536 	bltu	r18,r23,1000ef0 <__sfvwrite_r+0x314>
 1000d9c:	00a00034 	movhi	r2,32768
 1000da0:	10bfffc4 	addi	r2,r2,-1
 1000da4:	9009883a 	mov	r4,r18
 1000da8:	1480012e 	bgeu	r2,r18,1000db0 <__sfvwrite_r+0x1d4>
 1000dac:	1009883a 	mov	r4,r2
 1000db0:	b80b883a 	mov	r5,r23
 1000db4:	10032e40 	call	10032e4 <__divsi3>
 1000db8:	15cf383a 	mul	r7,r2,r23
 1000dbc:	81400717 	ldw	r5,28(r16)
 1000dc0:	80800917 	ldw	r2,36(r16)
 1000dc4:	e00d883a 	mov	r6,fp
 1000dc8:	a809883a 	mov	r4,r21
 1000dcc:	103ee83a 	callr	r2
 1000dd0:	00bfdb16 	blt	zero,r2,1000d40 <__alt_mem_TCDM+0xfefdfd40>
 1000dd4:	8080030b 	ldhu	r2,12(r16)
 1000dd8:	10801014 	ori	r2,r2,64
 1000ddc:	8080030d 	sth	r2,12(r16)
 1000de0:	00bfffc4 	movi	r2,-1
 1000de4:	003fab06 	br	1000c94 <__alt_mem_TCDM+0xfefdfc94>
 1000de8:	0027883a 	mov	r19,zero
 1000dec:	0011883a 	mov	r8,zero
 1000df0:	0039883a 	mov	fp,zero
 1000df4:	0025883a 	mov	r18,zero
 1000df8:	90001f26 	beq	r18,zero,1000e78 <__sfvwrite_r+0x29c>
 1000dfc:	40005a26 	beq	r8,zero,1000f68 <__sfvwrite_r+0x38c>
 1000e00:	982d883a 	mov	r22,r19
 1000e04:	94c0012e 	bgeu	r18,r19,1000e0c <__sfvwrite_r+0x230>
 1000e08:	902d883a 	mov	r22,r18
 1000e0c:	81000017 	ldw	r4,0(r16)
 1000e10:	80800417 	ldw	r2,16(r16)
 1000e14:	b02f883a 	mov	r23,r22
 1000e18:	81c00517 	ldw	r7,20(r16)
 1000e1c:	1100032e 	bgeu	r2,r4,1000e2c <__sfvwrite_r+0x250>
 1000e20:	80c00217 	ldw	r3,8(r16)
 1000e24:	38c7883a 	add	r3,r7,r3
 1000e28:	1d801816 	blt	r3,r22,1000e8c <__sfvwrite_r+0x2b0>
 1000e2c:	b1c03e16 	blt	r22,r7,1000f28 <__sfvwrite_r+0x34c>
 1000e30:	80800917 	ldw	r2,36(r16)
 1000e34:	81400717 	ldw	r5,28(r16)
 1000e38:	e00d883a 	mov	r6,fp
 1000e3c:	da000115 	stw	r8,4(sp)
 1000e40:	a809883a 	mov	r4,r21
 1000e44:	103ee83a 	callr	r2
 1000e48:	102f883a 	mov	r23,r2
 1000e4c:	da000117 	ldw	r8,4(sp)
 1000e50:	00bfe00e 	bge	zero,r2,1000dd4 <__alt_mem_TCDM+0xfefdfdd4>
 1000e54:	9de7c83a 	sub	r19,r19,r23
 1000e58:	98001f26 	beq	r19,zero,1000ed8 <__sfvwrite_r+0x2fc>
 1000e5c:	a0800217 	ldw	r2,8(r20)
 1000e60:	e5f9883a 	add	fp,fp,r23
 1000e64:	95e5c83a 	sub	r18,r18,r23
 1000e68:	15efc83a 	sub	r23,r2,r23
 1000e6c:	a5c00215 	stw	r23,8(r20)
 1000e70:	b83f8726 	beq	r23,zero,1000c90 <__alt_mem_TCDM+0xfefdfc90>
 1000e74:	903fe11e 	bne	r18,zero,1000dfc <__alt_mem_TCDM+0xfefdfdfc>
 1000e78:	8f000017 	ldw	fp,0(r17)
 1000e7c:	8c800117 	ldw	r18,4(r17)
 1000e80:	0011883a 	mov	r8,zero
 1000e84:	8c400204 	addi	r17,r17,8
 1000e88:	003fdb06 	br	1000df8 <__alt_mem_TCDM+0xfefdfdf8>
 1000e8c:	180d883a 	mov	r6,r3
 1000e90:	e00b883a 	mov	r5,fp
 1000e94:	da000115 	stw	r8,4(sp)
 1000e98:	d8c00015 	stw	r3,0(sp)
 1000e9c:	1001c580 	call	1001c58 <memmove>
 1000ea0:	d8c00017 	ldw	r3,0(sp)
 1000ea4:	80800017 	ldw	r2,0(r16)
 1000ea8:	800b883a 	mov	r5,r16
 1000eac:	a809883a 	mov	r4,r21
 1000eb0:	10c5883a 	add	r2,r2,r3
 1000eb4:	80800015 	stw	r2,0(r16)
 1000eb8:	d8c00015 	stw	r3,0(sp)
 1000ebc:	1002af80 	call	1002af8 <_fflush_r>
 1000ec0:	d8c00017 	ldw	r3,0(sp)
 1000ec4:	da000117 	ldw	r8,4(sp)
 1000ec8:	103fc21e 	bne	r2,zero,1000dd4 <__alt_mem_TCDM+0xfefdfdd4>
 1000ecc:	182f883a 	mov	r23,r3
 1000ed0:	9de7c83a 	sub	r19,r19,r23
 1000ed4:	983fe11e 	bne	r19,zero,1000e5c <__alt_mem_TCDM+0xfefdfe5c>
 1000ed8:	800b883a 	mov	r5,r16
 1000edc:	a809883a 	mov	r4,r21
 1000ee0:	1002af80 	call	1002af8 <_fflush_r>
 1000ee4:	103fbb1e 	bne	r2,zero,1000dd4 <__alt_mem_TCDM+0xfefdfdd4>
 1000ee8:	0011883a 	mov	r8,zero
 1000eec:	003fdb06 	br	1000e5c <__alt_mem_TCDM+0xfefdfe5c>
 1000ef0:	94c0012e 	bgeu	r18,r19,1000ef8 <__sfvwrite_r+0x31c>
 1000ef4:	9027883a 	mov	r19,r18
 1000ef8:	980d883a 	mov	r6,r19
 1000efc:	e00b883a 	mov	r5,fp
 1000f00:	1001c580 	call	1001c58 <memmove>
 1000f04:	80800217 	ldw	r2,8(r16)
 1000f08:	80c00017 	ldw	r3,0(r16)
 1000f0c:	14c5c83a 	sub	r2,r2,r19
 1000f10:	1cc7883a 	add	r3,r3,r19
 1000f14:	80800215 	stw	r2,8(r16)
 1000f18:	80c00015 	stw	r3,0(r16)
 1000f1c:	10004326 	beq	r2,zero,100102c <__sfvwrite_r+0x450>
 1000f20:	9805883a 	mov	r2,r19
 1000f24:	003f8606 	br	1000d40 <__alt_mem_TCDM+0xfefdfd40>
 1000f28:	b00d883a 	mov	r6,r22
 1000f2c:	e00b883a 	mov	r5,fp
 1000f30:	da000115 	stw	r8,4(sp)
 1000f34:	1001c580 	call	1001c58 <memmove>
 1000f38:	80800217 	ldw	r2,8(r16)
 1000f3c:	80c00017 	ldw	r3,0(r16)
 1000f40:	da000117 	ldw	r8,4(sp)
 1000f44:	1585c83a 	sub	r2,r2,r22
 1000f48:	1dad883a 	add	r22,r3,r22
 1000f4c:	80800215 	stw	r2,8(r16)
 1000f50:	85800015 	stw	r22,0(r16)
 1000f54:	003fbf06 	br	1000e54 <__alt_mem_TCDM+0xfefdfe54>
 1000f58:	81000017 	ldw	r4,0(r16)
 1000f5c:	9027883a 	mov	r19,r18
 1000f60:	902f883a 	mov	r23,r18
 1000f64:	003f6c06 	br	1000d18 <__alt_mem_TCDM+0xfefdfd18>
 1000f68:	900d883a 	mov	r6,r18
 1000f6c:	01400284 	movi	r5,10
 1000f70:	e009883a 	mov	r4,fp
 1000f74:	1001a2c0 	call	1001a2c <memchr>
 1000f78:	10003e26 	beq	r2,zero,1001074 <__sfvwrite_r+0x498>
 1000f7c:	10800044 	addi	r2,r2,1
 1000f80:	1727c83a 	sub	r19,r2,fp
 1000f84:	02000044 	movi	r8,1
 1000f88:	003f9d06 	br	1000e00 <__alt_mem_TCDM+0xfefdfe00>
 1000f8c:	80800517 	ldw	r2,20(r16)
 1000f90:	81400417 	ldw	r5,16(r16)
 1000f94:	81c00017 	ldw	r7,0(r16)
 1000f98:	10a7883a 	add	r19,r2,r2
 1000f9c:	9885883a 	add	r2,r19,r2
 1000fa0:	1026d7fa 	srli	r19,r2,31
 1000fa4:	396dc83a 	sub	r22,r7,r5
 1000fa8:	b1000044 	addi	r4,r22,1
 1000fac:	9885883a 	add	r2,r19,r2
 1000fb0:	1027d07a 	srai	r19,r2,1
 1000fb4:	2485883a 	add	r2,r4,r18
 1000fb8:	980d883a 	mov	r6,r19
 1000fbc:	9880022e 	bgeu	r19,r2,1000fc8 <__sfvwrite_r+0x3ec>
 1000fc0:	1027883a 	mov	r19,r2
 1000fc4:	100d883a 	mov	r6,r2
 1000fc8:	18c1000c 	andi	r3,r3,1024
 1000fcc:	18001c26 	beq	r3,zero,1001040 <__sfvwrite_r+0x464>
 1000fd0:	300b883a 	mov	r5,r6
 1000fd4:	a809883a 	mov	r4,r21
 1000fd8:	10012200 	call	1001220 <_malloc_r>
 1000fdc:	102f883a 	mov	r23,r2
 1000fe0:	10002926 	beq	r2,zero,1001088 <__sfvwrite_r+0x4ac>
 1000fe4:	81400417 	ldw	r5,16(r16)
 1000fe8:	b00d883a 	mov	r6,r22
 1000fec:	1009883a 	mov	r4,r2
 1000ff0:	1001b100 	call	1001b10 <memcpy>
 1000ff4:	8080030b 	ldhu	r2,12(r16)
 1000ff8:	00fedfc4 	movi	r3,-1153
 1000ffc:	10c4703a 	and	r2,r2,r3
 1001000:	10802014 	ori	r2,r2,128
 1001004:	8080030d 	sth	r2,12(r16)
 1001008:	bd89883a 	add	r4,r23,r22
 100100c:	9d8fc83a 	sub	r7,r19,r22
 1001010:	85c00415 	stw	r23,16(r16)
 1001014:	84c00515 	stw	r19,20(r16)
 1001018:	81000015 	stw	r4,0(r16)
 100101c:	9027883a 	mov	r19,r18
 1001020:	81c00215 	stw	r7,8(r16)
 1001024:	902f883a 	mov	r23,r18
 1001028:	003f3b06 	br	1000d18 <__alt_mem_TCDM+0xfefdfd18>
 100102c:	800b883a 	mov	r5,r16
 1001030:	a809883a 	mov	r4,r21
 1001034:	1002af80 	call	1002af8 <_fflush_r>
 1001038:	103fb926 	beq	r2,zero,1000f20 <__alt_mem_TCDM+0xfefdff20>
 100103c:	003f6506 	br	1000dd4 <__alt_mem_TCDM+0xfefdfdd4>
 1001040:	a809883a 	mov	r4,r21
 1001044:	1001edc0 	call	1001edc <_realloc_r>
 1001048:	102f883a 	mov	r23,r2
 100104c:	103fee1e 	bne	r2,zero,1001008 <__alt_mem_TCDM+0xfefe0008>
 1001050:	81400417 	ldw	r5,16(r16)
 1001054:	a809883a 	mov	r4,r21
 1001058:	1002ca80 	call	1002ca8 <_free_r>
 100105c:	8080030b 	ldhu	r2,12(r16)
 1001060:	00ffdfc4 	movi	r3,-129
 1001064:	1884703a 	and	r2,r3,r2
 1001068:	00c00304 	movi	r3,12
 100106c:	a8c00015 	stw	r3,0(r21)
 1001070:	003f5906 	br	1000dd8 <__alt_mem_TCDM+0xfefdfdd8>
 1001074:	94c00044 	addi	r19,r18,1
 1001078:	02000044 	movi	r8,1
 100107c:	003f6006 	br	1000e00 <__alt_mem_TCDM+0xfefdfe00>
 1001080:	00bfffc4 	movi	r2,-1
 1001084:	003f0306 	br	1000c94 <__alt_mem_TCDM+0xfefdfc94>
 1001088:	00800304 	movi	r2,12
 100108c:	a8800015 	stw	r2,0(r21)
 1001090:	8080030b 	ldhu	r2,12(r16)
 1001094:	003f5006 	br	1000dd8 <__alt_mem_TCDM+0xfefdfdd8>

01001098 <_fwalk>:
 1001098:	defff704 	addi	sp,sp,-36
 100109c:	dd000415 	stw	r20,16(sp)
 10010a0:	dfc00815 	stw	ra,32(sp)
 10010a4:	ddc00715 	stw	r23,28(sp)
 10010a8:	dd800615 	stw	r22,24(sp)
 10010ac:	dd400515 	stw	r21,20(sp)
 10010b0:	dcc00315 	stw	r19,12(sp)
 10010b4:	dc800215 	stw	r18,8(sp)
 10010b8:	dc400115 	stw	r17,4(sp)
 10010bc:	dc000015 	stw	r16,0(sp)
 10010c0:	2500b804 	addi	r20,r4,736
 10010c4:	a0002326 	beq	r20,zero,1001154 <_fwalk+0xbc>
 10010c8:	282b883a 	mov	r21,r5
 10010cc:	002f883a 	mov	r23,zero
 10010d0:	05800044 	movi	r22,1
 10010d4:	04ffffc4 	movi	r19,-1
 10010d8:	a4400117 	ldw	r17,4(r20)
 10010dc:	a4800217 	ldw	r18,8(r20)
 10010e0:	8c7fffc4 	addi	r17,r17,-1
 10010e4:	88000d16 	blt	r17,zero,100111c <_fwalk+0x84>
 10010e8:	94000304 	addi	r16,r18,12
 10010ec:	94800384 	addi	r18,r18,14
 10010f0:	8080000b 	ldhu	r2,0(r16)
 10010f4:	8c7fffc4 	addi	r17,r17,-1
 10010f8:	813ffd04 	addi	r4,r16,-12
 10010fc:	b080042e 	bgeu	r22,r2,1001110 <_fwalk+0x78>
 1001100:	9080000f 	ldh	r2,0(r18)
 1001104:	14c00226 	beq	r2,r19,1001110 <_fwalk+0x78>
 1001108:	a83ee83a 	callr	r21
 100110c:	b8aeb03a 	or	r23,r23,r2
 1001110:	84001a04 	addi	r16,r16,104
 1001114:	94801a04 	addi	r18,r18,104
 1001118:	8cfff51e 	bne	r17,r19,10010f0 <__alt_mem_TCDM+0xfefe00f0>
 100111c:	a5000017 	ldw	r20,0(r20)
 1001120:	a03fed1e 	bne	r20,zero,10010d8 <__alt_mem_TCDM+0xfefe00d8>
 1001124:	b805883a 	mov	r2,r23
 1001128:	dfc00817 	ldw	ra,32(sp)
 100112c:	ddc00717 	ldw	r23,28(sp)
 1001130:	dd800617 	ldw	r22,24(sp)
 1001134:	dd400517 	ldw	r21,20(sp)
 1001138:	dd000417 	ldw	r20,16(sp)
 100113c:	dcc00317 	ldw	r19,12(sp)
 1001140:	dc800217 	ldw	r18,8(sp)
 1001144:	dc400117 	ldw	r17,4(sp)
 1001148:	dc000017 	ldw	r16,0(sp)
 100114c:	dec00904 	addi	sp,sp,36
 1001150:	f800283a 	ret
 1001154:	002f883a 	mov	r23,zero
 1001158:	003ff206 	br	1001124 <__alt_mem_TCDM+0xfefe0124>

0100115c <_fwalk_reent>:
 100115c:	defff704 	addi	sp,sp,-36
 1001160:	dd000415 	stw	r20,16(sp)
 1001164:	dfc00815 	stw	ra,32(sp)
 1001168:	ddc00715 	stw	r23,28(sp)
 100116c:	dd800615 	stw	r22,24(sp)
 1001170:	dd400515 	stw	r21,20(sp)
 1001174:	dcc00315 	stw	r19,12(sp)
 1001178:	dc800215 	stw	r18,8(sp)
 100117c:	dc400115 	stw	r17,4(sp)
 1001180:	dc000015 	stw	r16,0(sp)
 1001184:	2500b804 	addi	r20,r4,736
 1001188:	a0002326 	beq	r20,zero,1001218 <_fwalk_reent+0xbc>
 100118c:	282b883a 	mov	r21,r5
 1001190:	2027883a 	mov	r19,r4
 1001194:	002f883a 	mov	r23,zero
 1001198:	05800044 	movi	r22,1
 100119c:	04bfffc4 	movi	r18,-1
 10011a0:	a4400117 	ldw	r17,4(r20)
 10011a4:	a4000217 	ldw	r16,8(r20)
 10011a8:	8c7fffc4 	addi	r17,r17,-1
 10011ac:	88000c16 	blt	r17,zero,10011e0 <_fwalk_reent+0x84>
 10011b0:	84000304 	addi	r16,r16,12
 10011b4:	8080000b 	ldhu	r2,0(r16)
 10011b8:	8c7fffc4 	addi	r17,r17,-1
 10011bc:	817ffd04 	addi	r5,r16,-12
 10011c0:	b080052e 	bgeu	r22,r2,10011d8 <_fwalk_reent+0x7c>
 10011c4:	8080008f 	ldh	r2,2(r16)
 10011c8:	9809883a 	mov	r4,r19
 10011cc:	14800226 	beq	r2,r18,10011d8 <_fwalk_reent+0x7c>
 10011d0:	a83ee83a 	callr	r21
 10011d4:	b8aeb03a 	or	r23,r23,r2
 10011d8:	84001a04 	addi	r16,r16,104
 10011dc:	8cbff51e 	bne	r17,r18,10011b4 <__alt_mem_TCDM+0xfefe01b4>
 10011e0:	a5000017 	ldw	r20,0(r20)
 10011e4:	a03fee1e 	bne	r20,zero,10011a0 <__alt_mem_TCDM+0xfefe01a0>
 10011e8:	b805883a 	mov	r2,r23
 10011ec:	dfc00817 	ldw	ra,32(sp)
 10011f0:	ddc00717 	ldw	r23,28(sp)
 10011f4:	dd800617 	ldw	r22,24(sp)
 10011f8:	dd400517 	ldw	r21,20(sp)
 10011fc:	dd000417 	ldw	r20,16(sp)
 1001200:	dcc00317 	ldw	r19,12(sp)
 1001204:	dc800217 	ldw	r18,8(sp)
 1001208:	dc400117 	ldw	r17,4(sp)
 100120c:	dc000017 	ldw	r16,0(sp)
 1001210:	dec00904 	addi	sp,sp,36
 1001214:	f800283a 	ret
 1001218:	002f883a 	mov	r23,zero
 100121c:	003ff206 	br	10011e8 <__alt_mem_TCDM+0xfefe01e8>

01001220 <_malloc_r>:
 1001220:	defff504 	addi	sp,sp,-44
 1001224:	dc800315 	stw	r18,12(sp)
 1001228:	dfc00a15 	stw	ra,40(sp)
 100122c:	df000915 	stw	fp,36(sp)
 1001230:	ddc00815 	stw	r23,32(sp)
 1001234:	dd800715 	stw	r22,28(sp)
 1001238:	dd400615 	stw	r21,24(sp)
 100123c:	dd000515 	stw	r20,20(sp)
 1001240:	dcc00415 	stw	r19,16(sp)
 1001244:	dc400215 	stw	r17,8(sp)
 1001248:	dc000115 	stw	r16,4(sp)
 100124c:	288002c4 	addi	r2,r5,11
 1001250:	00c00584 	movi	r3,22
 1001254:	2025883a 	mov	r18,r4
 1001258:	18807f2e 	bgeu	r3,r2,1001458 <_malloc_r+0x238>
 100125c:	047ffe04 	movi	r17,-8
 1001260:	1462703a 	and	r17,r2,r17
 1001264:	8800a316 	blt	r17,zero,10014f4 <_malloc_r+0x2d4>
 1001268:	8940a236 	bltu	r17,r5,10014f4 <_malloc_r+0x2d4>
 100126c:	1003a140 	call	1003a14 <__malloc_lock>
 1001270:	00807dc4 	movi	r2,503
 1001274:	1441e92e 	bgeu	r2,r17,1001a1c <_malloc_r+0x7fc>
 1001278:	8804d27a 	srli	r2,r17,9
 100127c:	1000a126 	beq	r2,zero,1001504 <_malloc_r+0x2e4>
 1001280:	00c00104 	movi	r3,4
 1001284:	18811e36 	bltu	r3,r2,1001700 <_malloc_r+0x4e0>
 1001288:	8804d1ba 	srli	r2,r17,6
 100128c:	12000e44 	addi	r8,r2,57
 1001290:	11c00e04 	addi	r7,r2,56
 1001294:	4209883a 	add	r4,r8,r8
 1001298:	04c041f4 	movhi	r19,263
 100129c:	2109883a 	add	r4,r4,r4
 10012a0:	9cda9304 	addi	r19,r19,27212
 10012a4:	2109883a 	add	r4,r4,r4
 10012a8:	9909883a 	add	r4,r19,r4
 10012ac:	24000117 	ldw	r16,4(r4)
 10012b0:	213ffe04 	addi	r4,r4,-8
 10012b4:	24009726 	beq	r4,r16,1001514 <_malloc_r+0x2f4>
 10012b8:	80800117 	ldw	r2,4(r16)
 10012bc:	01bfff04 	movi	r6,-4
 10012c0:	014003c4 	movi	r5,15
 10012c4:	1184703a 	and	r2,r2,r6
 10012c8:	1447c83a 	sub	r3,r2,r17
 10012cc:	28c00716 	blt	r5,r3,10012ec <_malloc_r+0xcc>
 10012d0:	1800920e 	bge	r3,zero,100151c <_malloc_r+0x2fc>
 10012d4:	84000317 	ldw	r16,12(r16)
 10012d8:	24008e26 	beq	r4,r16,1001514 <_malloc_r+0x2f4>
 10012dc:	80800117 	ldw	r2,4(r16)
 10012e0:	1184703a 	and	r2,r2,r6
 10012e4:	1447c83a 	sub	r3,r2,r17
 10012e8:	28fff90e 	bge	r5,r3,10012d0 <__alt_mem_TCDM+0xfefe02d0>
 10012ec:	3809883a 	mov	r4,r7
 10012f0:	018041f4 	movhi	r6,263
 10012f4:	9c000417 	ldw	r16,16(r19)
 10012f8:	319a9304 	addi	r6,r6,27212
 10012fc:	32000204 	addi	r8,r6,8
 1001300:	82013426 	beq	r16,r8,10017d4 <_malloc_r+0x5b4>
 1001304:	80c00117 	ldw	r3,4(r16)
 1001308:	00bfff04 	movi	r2,-4
 100130c:	188e703a 	and	r7,r3,r2
 1001310:	3c45c83a 	sub	r2,r7,r17
 1001314:	00c003c4 	movi	r3,15
 1001318:	18811f16 	blt	r3,r2,1001798 <_malloc_r+0x578>
 100131c:	32000515 	stw	r8,20(r6)
 1001320:	32000415 	stw	r8,16(r6)
 1001324:	10007f0e 	bge	r2,zero,1001524 <_malloc_r+0x304>
 1001328:	00807fc4 	movi	r2,511
 100132c:	11c0fd36 	bltu	r2,r7,1001724 <_malloc_r+0x504>
 1001330:	3806d0fa 	srli	r3,r7,3
 1001334:	01c00044 	movi	r7,1
 1001338:	30800117 	ldw	r2,4(r6)
 100133c:	19400044 	addi	r5,r3,1
 1001340:	294b883a 	add	r5,r5,r5
 1001344:	1807d0ba 	srai	r3,r3,2
 1001348:	294b883a 	add	r5,r5,r5
 100134c:	294b883a 	add	r5,r5,r5
 1001350:	298b883a 	add	r5,r5,r6
 1001354:	38c6983a 	sll	r3,r7,r3
 1001358:	29c00017 	ldw	r7,0(r5)
 100135c:	2a7ffe04 	addi	r9,r5,-8
 1001360:	1886b03a 	or	r3,r3,r2
 1001364:	82400315 	stw	r9,12(r16)
 1001368:	81c00215 	stw	r7,8(r16)
 100136c:	30c00115 	stw	r3,4(r6)
 1001370:	2c000015 	stw	r16,0(r5)
 1001374:	3c000315 	stw	r16,12(r7)
 1001378:	2005d0ba 	srai	r2,r4,2
 100137c:	01400044 	movi	r5,1
 1001380:	288a983a 	sll	r5,r5,r2
 1001384:	19406f36 	bltu	r3,r5,1001544 <_malloc_r+0x324>
 1001388:	28c4703a 	and	r2,r5,r3
 100138c:	10000a1e 	bne	r2,zero,10013b8 <_malloc_r+0x198>
 1001390:	00bfff04 	movi	r2,-4
 1001394:	294b883a 	add	r5,r5,r5
 1001398:	2088703a 	and	r4,r4,r2
 100139c:	28c4703a 	and	r2,r5,r3
 10013a0:	21000104 	addi	r4,r4,4
 10013a4:	1000041e 	bne	r2,zero,10013b8 <_malloc_r+0x198>
 10013a8:	294b883a 	add	r5,r5,r5
 10013ac:	28c4703a 	and	r2,r5,r3
 10013b0:	21000104 	addi	r4,r4,4
 10013b4:	103ffc26 	beq	r2,zero,10013a8 <__alt_mem_TCDM+0xfefe03a8>
 10013b8:	02bfff04 	movi	r10,-4
 10013bc:	024003c4 	movi	r9,15
 10013c0:	21800044 	addi	r6,r4,1
 10013c4:	318d883a 	add	r6,r6,r6
 10013c8:	318d883a 	add	r6,r6,r6
 10013cc:	318d883a 	add	r6,r6,r6
 10013d0:	998d883a 	add	r6,r19,r6
 10013d4:	333ffe04 	addi	r12,r6,-8
 10013d8:	2017883a 	mov	r11,r4
 10013dc:	31800104 	addi	r6,r6,4
 10013e0:	34000017 	ldw	r16,0(r6)
 10013e4:	31fffd04 	addi	r7,r6,-12
 10013e8:	81c0041e 	bne	r16,r7,10013fc <_malloc_r+0x1dc>
 10013ec:	0000fb06 	br	10017dc <_malloc_r+0x5bc>
 10013f0:	1801030e 	bge	r3,zero,1001800 <_malloc_r+0x5e0>
 10013f4:	84000317 	ldw	r16,12(r16)
 10013f8:	81c0f826 	beq	r16,r7,10017dc <_malloc_r+0x5bc>
 10013fc:	80800117 	ldw	r2,4(r16)
 1001400:	1284703a 	and	r2,r2,r10
 1001404:	1447c83a 	sub	r3,r2,r17
 1001408:	48fff90e 	bge	r9,r3,10013f0 <__alt_mem_TCDM+0xfefe03f0>
 100140c:	80800317 	ldw	r2,12(r16)
 1001410:	81000217 	ldw	r4,8(r16)
 1001414:	89400054 	ori	r5,r17,1
 1001418:	81400115 	stw	r5,4(r16)
 100141c:	20800315 	stw	r2,12(r4)
 1001420:	11000215 	stw	r4,8(r2)
 1001424:	8463883a 	add	r17,r16,r17
 1001428:	9c400515 	stw	r17,20(r19)
 100142c:	9c400415 	stw	r17,16(r19)
 1001430:	18800054 	ori	r2,r3,1
 1001434:	88800115 	stw	r2,4(r17)
 1001438:	8a000315 	stw	r8,12(r17)
 100143c:	8a000215 	stw	r8,8(r17)
 1001440:	88e3883a 	add	r17,r17,r3
 1001444:	88c00015 	stw	r3,0(r17)
 1001448:	9009883a 	mov	r4,r18
 100144c:	1003a380 	call	1003a38 <__malloc_unlock>
 1001450:	80800204 	addi	r2,r16,8
 1001454:	00001b06 	br	10014c4 <_malloc_r+0x2a4>
 1001458:	04400404 	movi	r17,16
 100145c:	89402536 	bltu	r17,r5,10014f4 <_malloc_r+0x2d4>
 1001460:	1003a140 	call	1003a14 <__malloc_lock>
 1001464:	00800184 	movi	r2,6
 1001468:	01000084 	movi	r4,2
 100146c:	04c041f4 	movhi	r19,263
 1001470:	1085883a 	add	r2,r2,r2
 1001474:	9cda9304 	addi	r19,r19,27212
 1001478:	1085883a 	add	r2,r2,r2
 100147c:	9885883a 	add	r2,r19,r2
 1001480:	14000117 	ldw	r16,4(r2)
 1001484:	10fffe04 	addi	r3,r2,-8
 1001488:	80c0d926 	beq	r16,r3,10017f0 <_malloc_r+0x5d0>
 100148c:	80c00117 	ldw	r3,4(r16)
 1001490:	81000317 	ldw	r4,12(r16)
 1001494:	00bfff04 	movi	r2,-4
 1001498:	1884703a 	and	r2,r3,r2
 100149c:	81400217 	ldw	r5,8(r16)
 10014a0:	8085883a 	add	r2,r16,r2
 10014a4:	10c00117 	ldw	r3,4(r2)
 10014a8:	29000315 	stw	r4,12(r5)
 10014ac:	21400215 	stw	r5,8(r4)
 10014b0:	18c00054 	ori	r3,r3,1
 10014b4:	10c00115 	stw	r3,4(r2)
 10014b8:	9009883a 	mov	r4,r18
 10014bc:	1003a380 	call	1003a38 <__malloc_unlock>
 10014c0:	80800204 	addi	r2,r16,8
 10014c4:	dfc00a17 	ldw	ra,40(sp)
 10014c8:	df000917 	ldw	fp,36(sp)
 10014cc:	ddc00817 	ldw	r23,32(sp)
 10014d0:	dd800717 	ldw	r22,28(sp)
 10014d4:	dd400617 	ldw	r21,24(sp)
 10014d8:	dd000517 	ldw	r20,20(sp)
 10014dc:	dcc00417 	ldw	r19,16(sp)
 10014e0:	dc800317 	ldw	r18,12(sp)
 10014e4:	dc400217 	ldw	r17,8(sp)
 10014e8:	dc000117 	ldw	r16,4(sp)
 10014ec:	dec00b04 	addi	sp,sp,44
 10014f0:	f800283a 	ret
 10014f4:	00800304 	movi	r2,12
 10014f8:	90800015 	stw	r2,0(r18)
 10014fc:	0005883a 	mov	r2,zero
 1001500:	003ff006 	br	10014c4 <__alt_mem_TCDM+0xfefe04c4>
 1001504:	01002004 	movi	r4,128
 1001508:	02001004 	movi	r8,64
 100150c:	01c00fc4 	movi	r7,63
 1001510:	003f6106 	br	1001298 <__alt_mem_TCDM+0xfefe0298>
 1001514:	4009883a 	mov	r4,r8
 1001518:	003f7506 	br	10012f0 <__alt_mem_TCDM+0xfefe02f0>
 100151c:	81000317 	ldw	r4,12(r16)
 1001520:	003fde06 	br	100149c <__alt_mem_TCDM+0xfefe049c>
 1001524:	81c5883a 	add	r2,r16,r7
 1001528:	11400117 	ldw	r5,4(r2)
 100152c:	9009883a 	mov	r4,r18
 1001530:	29400054 	ori	r5,r5,1
 1001534:	11400115 	stw	r5,4(r2)
 1001538:	1003a380 	call	1003a38 <__malloc_unlock>
 100153c:	80800204 	addi	r2,r16,8
 1001540:	003fe006 	br	10014c4 <__alt_mem_TCDM+0xfefe04c4>
 1001544:	9c000217 	ldw	r16,8(r19)
 1001548:	00bfff04 	movi	r2,-4
 100154c:	85800117 	ldw	r22,4(r16)
 1001550:	b0ac703a 	and	r22,r22,r2
 1001554:	b4400336 	bltu	r22,r17,1001564 <_malloc_r+0x344>
 1001558:	b445c83a 	sub	r2,r22,r17
 100155c:	00c003c4 	movi	r3,15
 1001560:	18805d16 	blt	r3,r2,10016d8 <_malloc_r+0x4b8>
 1001564:	05c04234 	movhi	r23,264
 1001568:	00804234 	movhi	r2,264
 100156c:	10a6ce04 	addi	r2,r2,-25800
 1001570:	bde01f04 	addi	r23,r23,-32644
 1001574:	15400017 	ldw	r21,0(r2)
 1001578:	b8c00017 	ldw	r3,0(r23)
 100157c:	00bfffc4 	movi	r2,-1
 1001580:	858d883a 	add	r6,r16,r22
 1001584:	8d6b883a 	add	r21,r17,r21
 1001588:	1880ea26 	beq	r3,r2,1001934 <_malloc_r+0x714>
 100158c:	ad4403c4 	addi	r21,r21,4111
 1001590:	00bc0004 	movi	r2,-4096
 1001594:	a8aa703a 	and	r21,r21,r2
 1001598:	a80b883a 	mov	r5,r21
 100159c:	9009883a 	mov	r4,r18
 10015a0:	d9800015 	stw	r6,0(sp)
 10015a4:	10024400 	call	1002440 <_sbrk_r>
 10015a8:	1029883a 	mov	r20,r2
 10015ac:	00bfffc4 	movi	r2,-1
 10015b0:	d9800017 	ldw	r6,0(sp)
 10015b4:	a080e826 	beq	r20,r2,1001958 <_malloc_r+0x738>
 10015b8:	a180a636 	bltu	r20,r6,1001854 <_malloc_r+0x634>
 10015bc:	07004234 	movhi	fp,264
 10015c0:	e726d704 	addi	fp,fp,-25764
 10015c4:	e0800017 	ldw	r2,0(fp)
 10015c8:	a887883a 	add	r3,r21,r2
 10015cc:	e0c00015 	stw	r3,0(fp)
 10015d0:	3500e626 	beq	r6,r20,100196c <_malloc_r+0x74c>
 10015d4:	b9000017 	ldw	r4,0(r23)
 10015d8:	00bfffc4 	movi	r2,-1
 10015dc:	2080ee26 	beq	r4,r2,1001998 <_malloc_r+0x778>
 10015e0:	a185c83a 	sub	r2,r20,r6
 10015e4:	10c5883a 	add	r2,r2,r3
 10015e8:	e0800015 	stw	r2,0(fp)
 10015ec:	a0c001cc 	andi	r3,r20,7
 10015f0:	1800bc26 	beq	r3,zero,10018e4 <_malloc_r+0x6c4>
 10015f4:	a0e9c83a 	sub	r20,r20,r3
 10015f8:	00840204 	movi	r2,4104
 10015fc:	a5000204 	addi	r20,r20,8
 1001600:	10c7c83a 	sub	r3,r2,r3
 1001604:	a545883a 	add	r2,r20,r21
 1001608:	1083ffcc 	andi	r2,r2,4095
 100160c:	18abc83a 	sub	r21,r3,r2
 1001610:	a80b883a 	mov	r5,r21
 1001614:	9009883a 	mov	r4,r18
 1001618:	10024400 	call	1002440 <_sbrk_r>
 100161c:	00ffffc4 	movi	r3,-1
 1001620:	10c0e126 	beq	r2,r3,10019a8 <_malloc_r+0x788>
 1001624:	1505c83a 	sub	r2,r2,r20
 1001628:	1545883a 	add	r2,r2,r21
 100162c:	10800054 	ori	r2,r2,1
 1001630:	e0c00017 	ldw	r3,0(fp)
 1001634:	9d000215 	stw	r20,8(r19)
 1001638:	a0800115 	stw	r2,4(r20)
 100163c:	a8c7883a 	add	r3,r21,r3
 1001640:	e0c00015 	stw	r3,0(fp)
 1001644:	84c00e26 	beq	r16,r19,1001680 <_malloc_r+0x460>
 1001648:	018003c4 	movi	r6,15
 100164c:	3580a72e 	bgeu	r6,r22,10018ec <_malloc_r+0x6cc>
 1001650:	81400117 	ldw	r5,4(r16)
 1001654:	013ffe04 	movi	r4,-8
 1001658:	b0bffd04 	addi	r2,r22,-12
 100165c:	1104703a 	and	r2,r2,r4
 1001660:	2900004c 	andi	r4,r5,1
 1001664:	2088b03a 	or	r4,r4,r2
 1001668:	81000115 	stw	r4,4(r16)
 100166c:	01400144 	movi	r5,5
 1001670:	8089883a 	add	r4,r16,r2
 1001674:	21400115 	stw	r5,4(r4)
 1001678:	21400215 	stw	r5,8(r4)
 100167c:	3080cd36 	bltu	r6,r2,10019b4 <_malloc_r+0x794>
 1001680:	00804234 	movhi	r2,264
 1001684:	10a6cd04 	addi	r2,r2,-25804
 1001688:	11000017 	ldw	r4,0(r2)
 100168c:	20c0012e 	bgeu	r4,r3,1001694 <_malloc_r+0x474>
 1001690:	10c00015 	stw	r3,0(r2)
 1001694:	00804234 	movhi	r2,264
 1001698:	10a6cc04 	addi	r2,r2,-25808
 100169c:	11000017 	ldw	r4,0(r2)
 10016a0:	9c000217 	ldw	r16,8(r19)
 10016a4:	20c0012e 	bgeu	r4,r3,10016ac <_malloc_r+0x48c>
 10016a8:	10c00015 	stw	r3,0(r2)
 10016ac:	80c00117 	ldw	r3,4(r16)
 10016b0:	00bfff04 	movi	r2,-4
 10016b4:	1886703a 	and	r3,r3,r2
 10016b8:	1c45c83a 	sub	r2,r3,r17
 10016bc:	1c400236 	bltu	r3,r17,10016c8 <_malloc_r+0x4a8>
 10016c0:	00c003c4 	movi	r3,15
 10016c4:	18800416 	blt	r3,r2,10016d8 <_malloc_r+0x4b8>
 10016c8:	9009883a 	mov	r4,r18
 10016cc:	1003a380 	call	1003a38 <__malloc_unlock>
 10016d0:	0005883a 	mov	r2,zero
 10016d4:	003f7b06 	br	10014c4 <__alt_mem_TCDM+0xfefe04c4>
 10016d8:	88c00054 	ori	r3,r17,1
 10016dc:	80c00115 	stw	r3,4(r16)
 10016e0:	8463883a 	add	r17,r16,r17
 10016e4:	10800054 	ori	r2,r2,1
 10016e8:	9c400215 	stw	r17,8(r19)
 10016ec:	88800115 	stw	r2,4(r17)
 10016f0:	9009883a 	mov	r4,r18
 10016f4:	1003a380 	call	1003a38 <__malloc_unlock>
 10016f8:	80800204 	addi	r2,r16,8
 10016fc:	003f7106 	br	10014c4 <__alt_mem_TCDM+0xfefe04c4>
 1001700:	00c00504 	movi	r3,20
 1001704:	18804a2e 	bgeu	r3,r2,1001830 <_malloc_r+0x610>
 1001708:	00c01504 	movi	r3,84
 100170c:	18806e36 	bltu	r3,r2,10018c8 <_malloc_r+0x6a8>
 1001710:	8804d33a 	srli	r2,r17,12
 1001714:	12001bc4 	addi	r8,r2,111
 1001718:	11c01b84 	addi	r7,r2,110
 100171c:	4209883a 	add	r4,r8,r8
 1001720:	003edd06 	br	1001298 <__alt_mem_TCDM+0xfefe0298>
 1001724:	3804d27a 	srli	r2,r7,9
 1001728:	00c00104 	movi	r3,4
 100172c:	1880442e 	bgeu	r3,r2,1001840 <_malloc_r+0x620>
 1001730:	00c00504 	movi	r3,20
 1001734:	18808136 	bltu	r3,r2,100193c <_malloc_r+0x71c>
 1001738:	11401704 	addi	r5,r2,92
 100173c:	10c016c4 	addi	r3,r2,91
 1001740:	294b883a 	add	r5,r5,r5
 1001744:	294b883a 	add	r5,r5,r5
 1001748:	294b883a 	add	r5,r5,r5
 100174c:	994b883a 	add	r5,r19,r5
 1001750:	28800017 	ldw	r2,0(r5)
 1001754:	018041f4 	movhi	r6,263
 1001758:	297ffe04 	addi	r5,r5,-8
 100175c:	319a9304 	addi	r6,r6,27212
 1001760:	28806526 	beq	r5,r2,10018f8 <_malloc_r+0x6d8>
 1001764:	01bfff04 	movi	r6,-4
 1001768:	10c00117 	ldw	r3,4(r2)
 100176c:	1986703a 	and	r3,r3,r6
 1001770:	38c0022e 	bgeu	r7,r3,100177c <_malloc_r+0x55c>
 1001774:	10800217 	ldw	r2,8(r2)
 1001778:	28bffb1e 	bne	r5,r2,1001768 <__alt_mem_TCDM+0xfefe0768>
 100177c:	11400317 	ldw	r5,12(r2)
 1001780:	98c00117 	ldw	r3,4(r19)
 1001784:	81400315 	stw	r5,12(r16)
 1001788:	80800215 	stw	r2,8(r16)
 100178c:	2c000215 	stw	r16,8(r5)
 1001790:	14000315 	stw	r16,12(r2)
 1001794:	003ef806 	br	1001378 <__alt_mem_TCDM+0xfefe0378>
 1001798:	88c00054 	ori	r3,r17,1
 100179c:	80c00115 	stw	r3,4(r16)
 10017a0:	8463883a 	add	r17,r16,r17
 10017a4:	34400515 	stw	r17,20(r6)
 10017a8:	34400415 	stw	r17,16(r6)
 10017ac:	10c00054 	ori	r3,r2,1
 10017b0:	8a000315 	stw	r8,12(r17)
 10017b4:	8a000215 	stw	r8,8(r17)
 10017b8:	88c00115 	stw	r3,4(r17)
 10017bc:	88a3883a 	add	r17,r17,r2
 10017c0:	88800015 	stw	r2,0(r17)
 10017c4:	9009883a 	mov	r4,r18
 10017c8:	1003a380 	call	1003a38 <__malloc_unlock>
 10017cc:	80800204 	addi	r2,r16,8
 10017d0:	003f3c06 	br	10014c4 <__alt_mem_TCDM+0xfefe04c4>
 10017d4:	30c00117 	ldw	r3,4(r6)
 10017d8:	003ee706 	br	1001378 <__alt_mem_TCDM+0xfefe0378>
 10017dc:	5ac00044 	addi	r11,r11,1
 10017e0:	588000cc 	andi	r2,r11,3
 10017e4:	31800204 	addi	r6,r6,8
 10017e8:	103efd1e 	bne	r2,zero,10013e0 <__alt_mem_TCDM+0xfefe03e0>
 10017ec:	00002406 	br	1001880 <_malloc_r+0x660>
 10017f0:	14000317 	ldw	r16,12(r2)
 10017f4:	143f251e 	bne	r2,r16,100148c <__alt_mem_TCDM+0xfefe048c>
 10017f8:	21000084 	addi	r4,r4,2
 10017fc:	003ebc06 	br	10012f0 <__alt_mem_TCDM+0xfefe02f0>
 1001800:	8085883a 	add	r2,r16,r2
 1001804:	10c00117 	ldw	r3,4(r2)
 1001808:	81000317 	ldw	r4,12(r16)
 100180c:	81400217 	ldw	r5,8(r16)
 1001810:	18c00054 	ori	r3,r3,1
 1001814:	10c00115 	stw	r3,4(r2)
 1001818:	29000315 	stw	r4,12(r5)
 100181c:	21400215 	stw	r5,8(r4)
 1001820:	9009883a 	mov	r4,r18
 1001824:	1003a380 	call	1003a38 <__malloc_unlock>
 1001828:	80800204 	addi	r2,r16,8
 100182c:	003f2506 	br	10014c4 <__alt_mem_TCDM+0xfefe04c4>
 1001830:	12001704 	addi	r8,r2,92
 1001834:	11c016c4 	addi	r7,r2,91
 1001838:	4209883a 	add	r4,r8,r8
 100183c:	003e9606 	br	1001298 <__alt_mem_TCDM+0xfefe0298>
 1001840:	3804d1ba 	srli	r2,r7,6
 1001844:	11400e44 	addi	r5,r2,57
 1001848:	10c00e04 	addi	r3,r2,56
 100184c:	294b883a 	add	r5,r5,r5
 1001850:	003fbc06 	br	1001744 <__alt_mem_TCDM+0xfefe0744>
 1001854:	84ff5926 	beq	r16,r19,10015bc <__alt_mem_TCDM+0xfefe05bc>
 1001858:	008041f4 	movhi	r2,263
 100185c:	109a9304 	addi	r2,r2,27212
 1001860:	14000217 	ldw	r16,8(r2)
 1001864:	00bfff04 	movi	r2,-4
 1001868:	80c00117 	ldw	r3,4(r16)
 100186c:	1886703a 	and	r3,r3,r2
 1001870:	003f9106 	br	10016b8 <__alt_mem_TCDM+0xfefe06b8>
 1001874:	60800217 	ldw	r2,8(r12)
 1001878:	213fffc4 	addi	r4,r4,-1
 100187c:	1300651e 	bne	r2,r12,1001a14 <_malloc_r+0x7f4>
 1001880:	208000cc 	andi	r2,r4,3
 1001884:	633ffe04 	addi	r12,r12,-8
 1001888:	103ffa1e 	bne	r2,zero,1001874 <__alt_mem_TCDM+0xfefe0874>
 100188c:	98800117 	ldw	r2,4(r19)
 1001890:	0146303a 	nor	r3,zero,r5
 1001894:	1884703a 	and	r2,r3,r2
 1001898:	98800115 	stw	r2,4(r19)
 100189c:	294b883a 	add	r5,r5,r5
 10018a0:	117f2836 	bltu	r2,r5,1001544 <__alt_mem_TCDM+0xfefe0544>
 10018a4:	283f2726 	beq	r5,zero,1001544 <__alt_mem_TCDM+0xfefe0544>
 10018a8:	2886703a 	and	r3,r5,r2
 10018ac:	5809883a 	mov	r4,r11
 10018b0:	183ec31e 	bne	r3,zero,10013c0 <__alt_mem_TCDM+0xfefe03c0>
 10018b4:	294b883a 	add	r5,r5,r5
 10018b8:	2886703a 	and	r3,r5,r2
 10018bc:	21000104 	addi	r4,r4,4
 10018c0:	183ffc26 	beq	r3,zero,10018b4 <__alt_mem_TCDM+0xfefe08b4>
 10018c4:	003ebe06 	br	10013c0 <__alt_mem_TCDM+0xfefe03c0>
 10018c8:	00c05504 	movi	r3,340
 10018cc:	18801236 	bltu	r3,r2,1001918 <_malloc_r+0x6f8>
 10018d0:	8804d3fa 	srli	r2,r17,15
 10018d4:	12001e04 	addi	r8,r2,120
 10018d8:	11c01dc4 	addi	r7,r2,119
 10018dc:	4209883a 	add	r4,r8,r8
 10018e0:	003e6d06 	br	1001298 <__alt_mem_TCDM+0xfefe0298>
 10018e4:	00c40004 	movi	r3,4096
 10018e8:	003f4606 	br	1001604 <__alt_mem_TCDM+0xfefe0604>
 10018ec:	00800044 	movi	r2,1
 10018f0:	a0800115 	stw	r2,4(r20)
 10018f4:	003f7406 	br	10016c8 <__alt_mem_TCDM+0xfefe06c8>
 10018f8:	1805d0ba 	srai	r2,r3,2
 10018fc:	01c00044 	movi	r7,1
 1001900:	30c00117 	ldw	r3,4(r6)
 1001904:	388e983a 	sll	r7,r7,r2
 1001908:	2805883a 	mov	r2,r5
 100190c:	38c6b03a 	or	r3,r7,r3
 1001910:	30c00115 	stw	r3,4(r6)
 1001914:	003f9b06 	br	1001784 <__alt_mem_TCDM+0xfefe0784>
 1001918:	00c15504 	movi	r3,1364
 100191c:	18801a36 	bltu	r3,r2,1001988 <_malloc_r+0x768>
 1001920:	8804d4ba 	srli	r2,r17,18
 1001924:	12001f44 	addi	r8,r2,125
 1001928:	11c01f04 	addi	r7,r2,124
 100192c:	4209883a 	add	r4,r8,r8
 1001930:	003e5906 	br	1001298 <__alt_mem_TCDM+0xfefe0298>
 1001934:	ad400404 	addi	r21,r21,16
 1001938:	003f1706 	br	1001598 <__alt_mem_TCDM+0xfefe0598>
 100193c:	00c01504 	movi	r3,84
 1001940:	18802336 	bltu	r3,r2,10019d0 <_malloc_r+0x7b0>
 1001944:	3804d33a 	srli	r2,r7,12
 1001948:	11401bc4 	addi	r5,r2,111
 100194c:	10c01b84 	addi	r3,r2,110
 1001950:	294b883a 	add	r5,r5,r5
 1001954:	003f7b06 	br	1001744 <__alt_mem_TCDM+0xfefe0744>
 1001958:	9c000217 	ldw	r16,8(r19)
 100195c:	00bfff04 	movi	r2,-4
 1001960:	80c00117 	ldw	r3,4(r16)
 1001964:	1886703a 	and	r3,r3,r2
 1001968:	003f5306 	br	10016b8 <__alt_mem_TCDM+0xfefe06b8>
 100196c:	3083ffcc 	andi	r2,r6,4095
 1001970:	103f181e 	bne	r2,zero,10015d4 <__alt_mem_TCDM+0xfefe05d4>
 1001974:	99000217 	ldw	r4,8(r19)
 1001978:	b545883a 	add	r2,r22,r21
 100197c:	10800054 	ori	r2,r2,1
 1001980:	20800115 	stw	r2,4(r4)
 1001984:	003f3e06 	br	1001680 <__alt_mem_TCDM+0xfefe0680>
 1001988:	01003f84 	movi	r4,254
 100198c:	02001fc4 	movi	r8,127
 1001990:	01c01f84 	movi	r7,126
 1001994:	003e4006 	br	1001298 <__alt_mem_TCDM+0xfefe0298>
 1001998:	00804234 	movhi	r2,264
 100199c:	10a01f04 	addi	r2,r2,-32644
 10019a0:	15000015 	stw	r20,0(r2)
 10019a4:	003f1106 	br	10015ec <__alt_mem_TCDM+0xfefe05ec>
 10019a8:	00800044 	movi	r2,1
 10019ac:	002b883a 	mov	r21,zero
 10019b0:	003f1f06 	br	1001630 <__alt_mem_TCDM+0xfefe0630>
 10019b4:	81400204 	addi	r5,r16,8
 10019b8:	9009883a 	mov	r4,r18
 10019bc:	1002ca80 	call	1002ca8 <_free_r>
 10019c0:	00804234 	movhi	r2,264
 10019c4:	10a6d704 	addi	r2,r2,-25764
 10019c8:	10c00017 	ldw	r3,0(r2)
 10019cc:	003f2c06 	br	1001680 <__alt_mem_TCDM+0xfefe0680>
 10019d0:	00c05504 	movi	r3,340
 10019d4:	18800536 	bltu	r3,r2,10019ec <_malloc_r+0x7cc>
 10019d8:	3804d3fa 	srli	r2,r7,15
 10019dc:	11401e04 	addi	r5,r2,120
 10019e0:	10c01dc4 	addi	r3,r2,119
 10019e4:	294b883a 	add	r5,r5,r5
 10019e8:	003f5606 	br	1001744 <__alt_mem_TCDM+0xfefe0744>
 10019ec:	00c15504 	movi	r3,1364
 10019f0:	18800536 	bltu	r3,r2,1001a08 <_malloc_r+0x7e8>
 10019f4:	3804d4ba 	srli	r2,r7,18
 10019f8:	11401f44 	addi	r5,r2,125
 10019fc:	10c01f04 	addi	r3,r2,124
 1001a00:	294b883a 	add	r5,r5,r5
 1001a04:	003f4f06 	br	1001744 <__alt_mem_TCDM+0xfefe0744>
 1001a08:	01403f84 	movi	r5,254
 1001a0c:	00c01f84 	movi	r3,126
 1001a10:	003f4c06 	br	1001744 <__alt_mem_TCDM+0xfefe0744>
 1001a14:	98800117 	ldw	r2,4(r19)
 1001a18:	003fa006 	br	100189c <__alt_mem_TCDM+0xfefe089c>
 1001a1c:	8808d0fa 	srli	r4,r17,3
 1001a20:	20800044 	addi	r2,r4,1
 1001a24:	1085883a 	add	r2,r2,r2
 1001a28:	003e9006 	br	100146c <__alt_mem_TCDM+0xfefe046c>

01001a2c <memchr>:
 1001a2c:	208000cc 	andi	r2,r4,3
 1001a30:	280f883a 	mov	r7,r5
 1001a34:	10003426 	beq	r2,zero,1001b08 <memchr+0xdc>
 1001a38:	30bfffc4 	addi	r2,r6,-1
 1001a3c:	30001a26 	beq	r6,zero,1001aa8 <memchr+0x7c>
 1001a40:	20c00003 	ldbu	r3,0(r4)
 1001a44:	29803fcc 	andi	r6,r5,255
 1001a48:	30c0051e 	bne	r6,r3,1001a60 <memchr+0x34>
 1001a4c:	00001806 	br	1001ab0 <memchr+0x84>
 1001a50:	10001526 	beq	r2,zero,1001aa8 <memchr+0x7c>
 1001a54:	20c00003 	ldbu	r3,0(r4)
 1001a58:	10bfffc4 	addi	r2,r2,-1
 1001a5c:	30c01426 	beq	r6,r3,1001ab0 <memchr+0x84>
 1001a60:	21000044 	addi	r4,r4,1
 1001a64:	20c000cc 	andi	r3,r4,3
 1001a68:	183ff91e 	bne	r3,zero,1001a50 <__alt_mem_TCDM+0xfefe0a50>
 1001a6c:	020000c4 	movi	r8,3
 1001a70:	40801136 	bltu	r8,r2,1001ab8 <memchr+0x8c>
 1001a74:	10000c26 	beq	r2,zero,1001aa8 <memchr+0x7c>
 1001a78:	20c00003 	ldbu	r3,0(r4)
 1001a7c:	29403fcc 	andi	r5,r5,255
 1001a80:	28c00b26 	beq	r5,r3,1001ab0 <memchr+0x84>
 1001a84:	20c00044 	addi	r3,r4,1
 1001a88:	39803fcc 	andi	r6,r7,255
 1001a8c:	2089883a 	add	r4,r4,r2
 1001a90:	00000306 	br	1001aa0 <memchr+0x74>
 1001a94:	18c00044 	addi	r3,r3,1
 1001a98:	197fffc3 	ldbu	r5,-1(r3)
 1001a9c:	31400526 	beq	r6,r5,1001ab4 <memchr+0x88>
 1001aa0:	1805883a 	mov	r2,r3
 1001aa4:	20fffb1e 	bne	r4,r3,1001a94 <__alt_mem_TCDM+0xfefe0a94>
 1001aa8:	0005883a 	mov	r2,zero
 1001aac:	f800283a 	ret
 1001ab0:	2005883a 	mov	r2,r4
 1001ab4:	f800283a 	ret
 1001ab8:	28c03fcc 	andi	r3,r5,255
 1001abc:	1812923a 	slli	r9,r3,8
 1001ac0:	02ffbff4 	movhi	r11,65279
 1001ac4:	02a02074 	movhi	r10,32897
 1001ac8:	48d2b03a 	or	r9,r9,r3
 1001acc:	4806943a 	slli	r3,r9,16
 1001ad0:	5affbfc4 	addi	r11,r11,-257
 1001ad4:	52a02004 	addi	r10,r10,-32640
 1001ad8:	48d2b03a 	or	r9,r9,r3
 1001adc:	20c00017 	ldw	r3,0(r4)
 1001ae0:	48c6f03a 	xor	r3,r9,r3
 1001ae4:	1acd883a 	add	r6,r3,r11
 1001ae8:	00c6303a 	nor	r3,zero,r3
 1001aec:	30c6703a 	and	r3,r6,r3
 1001af0:	1a86703a 	and	r3,r3,r10
 1001af4:	183fe01e 	bne	r3,zero,1001a78 <__alt_mem_TCDM+0xfefe0a78>
 1001af8:	10bfff04 	addi	r2,r2,-4
 1001afc:	21000104 	addi	r4,r4,4
 1001b00:	40bff636 	bltu	r8,r2,1001adc <__alt_mem_TCDM+0xfefe0adc>
 1001b04:	003fdb06 	br	1001a74 <__alt_mem_TCDM+0xfefe0a74>
 1001b08:	3005883a 	mov	r2,r6
 1001b0c:	003fd706 	br	1001a6c <__alt_mem_TCDM+0xfefe0a6c>

01001b10 <memcpy>:
 1001b10:	defffd04 	addi	sp,sp,-12
 1001b14:	dfc00215 	stw	ra,8(sp)
 1001b18:	dc400115 	stw	r17,4(sp)
 1001b1c:	dc000015 	stw	r16,0(sp)
 1001b20:	00c003c4 	movi	r3,15
 1001b24:	2005883a 	mov	r2,r4
 1001b28:	1980452e 	bgeu	r3,r6,1001c40 <memcpy+0x130>
 1001b2c:	2906b03a 	or	r3,r5,r4
 1001b30:	18c000cc 	andi	r3,r3,3
 1001b34:	1800441e 	bne	r3,zero,1001c48 <memcpy+0x138>
 1001b38:	347ffc04 	addi	r17,r6,-16
 1001b3c:	8822d13a 	srli	r17,r17,4
 1001b40:	28c00104 	addi	r3,r5,4
 1001b44:	23400104 	addi	r13,r4,4
 1001b48:	8820913a 	slli	r16,r17,4
 1001b4c:	2b000204 	addi	r12,r5,8
 1001b50:	22c00204 	addi	r11,r4,8
 1001b54:	84000504 	addi	r16,r16,20
 1001b58:	2a800304 	addi	r10,r5,12
 1001b5c:	22400304 	addi	r9,r4,12
 1001b60:	2c21883a 	add	r16,r5,r16
 1001b64:	2811883a 	mov	r8,r5
 1001b68:	200f883a 	mov	r7,r4
 1001b6c:	41000017 	ldw	r4,0(r8)
 1001b70:	1fc00017 	ldw	ra,0(r3)
 1001b74:	63c00017 	ldw	r15,0(r12)
 1001b78:	39000015 	stw	r4,0(r7)
 1001b7c:	53800017 	ldw	r14,0(r10)
 1001b80:	6fc00015 	stw	ra,0(r13)
 1001b84:	5bc00015 	stw	r15,0(r11)
 1001b88:	4b800015 	stw	r14,0(r9)
 1001b8c:	18c00404 	addi	r3,r3,16
 1001b90:	39c00404 	addi	r7,r7,16
 1001b94:	42000404 	addi	r8,r8,16
 1001b98:	6b400404 	addi	r13,r13,16
 1001b9c:	63000404 	addi	r12,r12,16
 1001ba0:	5ac00404 	addi	r11,r11,16
 1001ba4:	52800404 	addi	r10,r10,16
 1001ba8:	4a400404 	addi	r9,r9,16
 1001bac:	1c3fef1e 	bne	r3,r16,1001b6c <__alt_mem_TCDM+0xfefe0b6c>
 1001bb0:	89c00044 	addi	r7,r17,1
 1001bb4:	380e913a 	slli	r7,r7,4
 1001bb8:	310003cc 	andi	r4,r6,15
 1001bbc:	02c000c4 	movi	r11,3
 1001bc0:	11c7883a 	add	r3,r2,r7
 1001bc4:	29cb883a 	add	r5,r5,r7
 1001bc8:	5900212e 	bgeu	r11,r4,1001c50 <memcpy+0x140>
 1001bcc:	1813883a 	mov	r9,r3
 1001bd0:	2811883a 	mov	r8,r5
 1001bd4:	200f883a 	mov	r7,r4
 1001bd8:	42800017 	ldw	r10,0(r8)
 1001bdc:	4a400104 	addi	r9,r9,4
 1001be0:	39ffff04 	addi	r7,r7,-4
 1001be4:	4abfff15 	stw	r10,-4(r9)
 1001be8:	42000104 	addi	r8,r8,4
 1001bec:	59fffa36 	bltu	r11,r7,1001bd8 <__alt_mem_TCDM+0xfefe0bd8>
 1001bf0:	213fff04 	addi	r4,r4,-4
 1001bf4:	2008d0ba 	srli	r4,r4,2
 1001bf8:	318000cc 	andi	r6,r6,3
 1001bfc:	21000044 	addi	r4,r4,1
 1001c00:	2109883a 	add	r4,r4,r4
 1001c04:	2109883a 	add	r4,r4,r4
 1001c08:	1907883a 	add	r3,r3,r4
 1001c0c:	290b883a 	add	r5,r5,r4
 1001c10:	30000626 	beq	r6,zero,1001c2c <memcpy+0x11c>
 1001c14:	198d883a 	add	r6,r3,r6
 1001c18:	29c00003 	ldbu	r7,0(r5)
 1001c1c:	18c00044 	addi	r3,r3,1
 1001c20:	29400044 	addi	r5,r5,1
 1001c24:	19ffffc5 	stb	r7,-1(r3)
 1001c28:	19bffb1e 	bne	r3,r6,1001c18 <__alt_mem_TCDM+0xfefe0c18>
 1001c2c:	dfc00217 	ldw	ra,8(sp)
 1001c30:	dc400117 	ldw	r17,4(sp)
 1001c34:	dc000017 	ldw	r16,0(sp)
 1001c38:	dec00304 	addi	sp,sp,12
 1001c3c:	f800283a 	ret
 1001c40:	2007883a 	mov	r3,r4
 1001c44:	003ff206 	br	1001c10 <__alt_mem_TCDM+0xfefe0c10>
 1001c48:	2007883a 	mov	r3,r4
 1001c4c:	003ff106 	br	1001c14 <__alt_mem_TCDM+0xfefe0c14>
 1001c50:	200d883a 	mov	r6,r4
 1001c54:	003fee06 	br	1001c10 <__alt_mem_TCDM+0xfefe0c10>

01001c58 <memmove>:
 1001c58:	2005883a 	mov	r2,r4
 1001c5c:	29000b2e 	bgeu	r5,r4,1001c8c <memmove+0x34>
 1001c60:	298f883a 	add	r7,r5,r6
 1001c64:	21c0092e 	bgeu	r4,r7,1001c8c <memmove+0x34>
 1001c68:	2187883a 	add	r3,r4,r6
 1001c6c:	198bc83a 	sub	r5,r3,r6
 1001c70:	30004826 	beq	r6,zero,1001d94 <memmove+0x13c>
 1001c74:	39ffffc4 	addi	r7,r7,-1
 1001c78:	39000003 	ldbu	r4,0(r7)
 1001c7c:	18ffffc4 	addi	r3,r3,-1
 1001c80:	19000005 	stb	r4,0(r3)
 1001c84:	28fffb1e 	bne	r5,r3,1001c74 <__alt_mem_TCDM+0xfefe0c74>
 1001c88:	f800283a 	ret
 1001c8c:	00c003c4 	movi	r3,15
 1001c90:	1980412e 	bgeu	r3,r6,1001d98 <memmove+0x140>
 1001c94:	2886b03a 	or	r3,r5,r2
 1001c98:	18c000cc 	andi	r3,r3,3
 1001c9c:	1800401e 	bne	r3,zero,1001da0 <memmove+0x148>
 1001ca0:	33fffc04 	addi	r15,r6,-16
 1001ca4:	781ed13a 	srli	r15,r15,4
 1001ca8:	28c00104 	addi	r3,r5,4
 1001cac:	13400104 	addi	r13,r2,4
 1001cb0:	781c913a 	slli	r14,r15,4
 1001cb4:	2b000204 	addi	r12,r5,8
 1001cb8:	12c00204 	addi	r11,r2,8
 1001cbc:	73800504 	addi	r14,r14,20
 1001cc0:	2a800304 	addi	r10,r5,12
 1001cc4:	12400304 	addi	r9,r2,12
 1001cc8:	2b9d883a 	add	r14,r5,r14
 1001ccc:	2811883a 	mov	r8,r5
 1001cd0:	100f883a 	mov	r7,r2
 1001cd4:	41000017 	ldw	r4,0(r8)
 1001cd8:	39c00404 	addi	r7,r7,16
 1001cdc:	18c00404 	addi	r3,r3,16
 1001ce0:	393ffc15 	stw	r4,-16(r7)
 1001ce4:	193ffc17 	ldw	r4,-16(r3)
 1001ce8:	6b400404 	addi	r13,r13,16
 1001cec:	5ac00404 	addi	r11,r11,16
 1001cf0:	693ffc15 	stw	r4,-16(r13)
 1001cf4:	61000017 	ldw	r4,0(r12)
 1001cf8:	4a400404 	addi	r9,r9,16
 1001cfc:	42000404 	addi	r8,r8,16
 1001d00:	593ffc15 	stw	r4,-16(r11)
 1001d04:	51000017 	ldw	r4,0(r10)
 1001d08:	63000404 	addi	r12,r12,16
 1001d0c:	52800404 	addi	r10,r10,16
 1001d10:	493ffc15 	stw	r4,-16(r9)
 1001d14:	1bbfef1e 	bne	r3,r14,1001cd4 <__alt_mem_TCDM+0xfefe0cd4>
 1001d18:	79000044 	addi	r4,r15,1
 1001d1c:	2008913a 	slli	r4,r4,4
 1001d20:	328003cc 	andi	r10,r6,15
 1001d24:	02c000c4 	movi	r11,3
 1001d28:	1107883a 	add	r3,r2,r4
 1001d2c:	290b883a 	add	r5,r5,r4
 1001d30:	5a801e2e 	bgeu	r11,r10,1001dac <memmove+0x154>
 1001d34:	1813883a 	mov	r9,r3
 1001d38:	2811883a 	mov	r8,r5
 1001d3c:	500f883a 	mov	r7,r10
 1001d40:	41000017 	ldw	r4,0(r8)
 1001d44:	4a400104 	addi	r9,r9,4
 1001d48:	39ffff04 	addi	r7,r7,-4
 1001d4c:	493fff15 	stw	r4,-4(r9)
 1001d50:	42000104 	addi	r8,r8,4
 1001d54:	59fffa36 	bltu	r11,r7,1001d40 <__alt_mem_TCDM+0xfefe0d40>
 1001d58:	513fff04 	addi	r4,r10,-4
 1001d5c:	2008d0ba 	srli	r4,r4,2
 1001d60:	318000cc 	andi	r6,r6,3
 1001d64:	21000044 	addi	r4,r4,1
 1001d68:	2109883a 	add	r4,r4,r4
 1001d6c:	2109883a 	add	r4,r4,r4
 1001d70:	1907883a 	add	r3,r3,r4
 1001d74:	290b883a 	add	r5,r5,r4
 1001d78:	30000b26 	beq	r6,zero,1001da8 <memmove+0x150>
 1001d7c:	198d883a 	add	r6,r3,r6
 1001d80:	29c00003 	ldbu	r7,0(r5)
 1001d84:	18c00044 	addi	r3,r3,1
 1001d88:	29400044 	addi	r5,r5,1
 1001d8c:	19ffffc5 	stb	r7,-1(r3)
 1001d90:	19bffb1e 	bne	r3,r6,1001d80 <__alt_mem_TCDM+0xfefe0d80>
 1001d94:	f800283a 	ret
 1001d98:	1007883a 	mov	r3,r2
 1001d9c:	003ff606 	br	1001d78 <__alt_mem_TCDM+0xfefe0d78>
 1001da0:	1007883a 	mov	r3,r2
 1001da4:	003ff506 	br	1001d7c <__alt_mem_TCDM+0xfefe0d7c>
 1001da8:	f800283a 	ret
 1001dac:	500d883a 	mov	r6,r10
 1001db0:	003ff106 	br	1001d78 <__alt_mem_TCDM+0xfefe0d78>

01001db4 <memset>:
 1001db4:	20c000cc 	andi	r3,r4,3
 1001db8:	2005883a 	mov	r2,r4
 1001dbc:	18004426 	beq	r3,zero,1001ed0 <memset+0x11c>
 1001dc0:	31ffffc4 	addi	r7,r6,-1
 1001dc4:	30004026 	beq	r6,zero,1001ec8 <memset+0x114>
 1001dc8:	2813883a 	mov	r9,r5
 1001dcc:	200d883a 	mov	r6,r4
 1001dd0:	2007883a 	mov	r3,r4
 1001dd4:	00000406 	br	1001de8 <memset+0x34>
 1001dd8:	3a3fffc4 	addi	r8,r7,-1
 1001ddc:	31800044 	addi	r6,r6,1
 1001de0:	38003926 	beq	r7,zero,1001ec8 <memset+0x114>
 1001de4:	400f883a 	mov	r7,r8
 1001de8:	18c00044 	addi	r3,r3,1
 1001dec:	32400005 	stb	r9,0(r6)
 1001df0:	1a0000cc 	andi	r8,r3,3
 1001df4:	403ff81e 	bne	r8,zero,1001dd8 <__alt_mem_TCDM+0xfefe0dd8>
 1001df8:	010000c4 	movi	r4,3
 1001dfc:	21c02d2e 	bgeu	r4,r7,1001eb4 <memset+0x100>
 1001e00:	29003fcc 	andi	r4,r5,255
 1001e04:	200c923a 	slli	r6,r4,8
 1001e08:	3108b03a 	or	r4,r6,r4
 1001e0c:	200c943a 	slli	r6,r4,16
 1001e10:	218cb03a 	or	r6,r4,r6
 1001e14:	010003c4 	movi	r4,15
 1001e18:	21c0182e 	bgeu	r4,r7,1001e7c <memset+0xc8>
 1001e1c:	3b3ffc04 	addi	r12,r7,-16
 1001e20:	6018d13a 	srli	r12,r12,4
 1001e24:	1a000104 	addi	r8,r3,4
 1001e28:	1ac00204 	addi	r11,r3,8
 1001e2c:	6008913a 	slli	r4,r12,4
 1001e30:	1a800304 	addi	r10,r3,12
 1001e34:	1813883a 	mov	r9,r3
 1001e38:	21000504 	addi	r4,r4,20
 1001e3c:	1909883a 	add	r4,r3,r4
 1001e40:	49800015 	stw	r6,0(r9)
 1001e44:	41800015 	stw	r6,0(r8)
 1001e48:	59800015 	stw	r6,0(r11)
 1001e4c:	51800015 	stw	r6,0(r10)
 1001e50:	42000404 	addi	r8,r8,16
 1001e54:	4a400404 	addi	r9,r9,16
 1001e58:	5ac00404 	addi	r11,r11,16
 1001e5c:	52800404 	addi	r10,r10,16
 1001e60:	413ff71e 	bne	r8,r4,1001e40 <__alt_mem_TCDM+0xfefe0e40>
 1001e64:	63000044 	addi	r12,r12,1
 1001e68:	6018913a 	slli	r12,r12,4
 1001e6c:	39c003cc 	andi	r7,r7,15
 1001e70:	010000c4 	movi	r4,3
 1001e74:	1b07883a 	add	r3,r3,r12
 1001e78:	21c00e2e 	bgeu	r4,r7,1001eb4 <memset+0x100>
 1001e7c:	1813883a 	mov	r9,r3
 1001e80:	3811883a 	mov	r8,r7
 1001e84:	010000c4 	movi	r4,3
 1001e88:	49800015 	stw	r6,0(r9)
 1001e8c:	423fff04 	addi	r8,r8,-4
 1001e90:	4a400104 	addi	r9,r9,4
 1001e94:	223ffc36 	bltu	r4,r8,1001e88 <__alt_mem_TCDM+0xfefe0e88>
 1001e98:	393fff04 	addi	r4,r7,-4
 1001e9c:	2008d0ba 	srli	r4,r4,2
 1001ea0:	39c000cc 	andi	r7,r7,3
 1001ea4:	21000044 	addi	r4,r4,1
 1001ea8:	2109883a 	add	r4,r4,r4
 1001eac:	2109883a 	add	r4,r4,r4
 1001eb0:	1907883a 	add	r3,r3,r4
 1001eb4:	38000526 	beq	r7,zero,1001ecc <memset+0x118>
 1001eb8:	19cf883a 	add	r7,r3,r7
 1001ebc:	19400005 	stb	r5,0(r3)
 1001ec0:	18c00044 	addi	r3,r3,1
 1001ec4:	38fffd1e 	bne	r7,r3,1001ebc <__alt_mem_TCDM+0xfefe0ebc>
 1001ec8:	f800283a 	ret
 1001ecc:	f800283a 	ret
 1001ed0:	2007883a 	mov	r3,r4
 1001ed4:	300f883a 	mov	r7,r6
 1001ed8:	003fc706 	br	1001df8 <__alt_mem_TCDM+0xfefe0df8>

01001edc <_realloc_r>:
 1001edc:	defff604 	addi	sp,sp,-40
 1001ee0:	dc800215 	stw	r18,8(sp)
 1001ee4:	dfc00915 	stw	ra,36(sp)
 1001ee8:	df000815 	stw	fp,32(sp)
 1001eec:	ddc00715 	stw	r23,28(sp)
 1001ef0:	dd800615 	stw	r22,24(sp)
 1001ef4:	dd400515 	stw	r21,20(sp)
 1001ef8:	dd000415 	stw	r20,16(sp)
 1001efc:	dcc00315 	stw	r19,12(sp)
 1001f00:	dc400115 	stw	r17,4(sp)
 1001f04:	dc000015 	stw	r16,0(sp)
 1001f08:	3025883a 	mov	r18,r6
 1001f0c:	2800b726 	beq	r5,zero,10021ec <_realloc_r+0x310>
 1001f10:	282b883a 	mov	r21,r5
 1001f14:	2029883a 	mov	r20,r4
 1001f18:	1003a140 	call	1003a14 <__malloc_lock>
 1001f1c:	a8bfff17 	ldw	r2,-4(r21)
 1001f20:	043fff04 	movi	r16,-4
 1001f24:	90c002c4 	addi	r3,r18,11
 1001f28:	01000584 	movi	r4,22
 1001f2c:	acfffe04 	addi	r19,r21,-8
 1001f30:	1420703a 	and	r16,r2,r16
 1001f34:	20c0332e 	bgeu	r4,r3,1002004 <_realloc_r+0x128>
 1001f38:	047ffe04 	movi	r17,-8
 1001f3c:	1c62703a 	and	r17,r3,r17
 1001f40:	8807883a 	mov	r3,r17
 1001f44:	88005816 	blt	r17,zero,10020a8 <_realloc_r+0x1cc>
 1001f48:	8c805736 	bltu	r17,r18,10020a8 <_realloc_r+0x1cc>
 1001f4c:	80c0300e 	bge	r16,r3,1002010 <_realloc_r+0x134>
 1001f50:	070041f4 	movhi	fp,263
 1001f54:	e71a9304 	addi	fp,fp,27212
 1001f58:	e1c00217 	ldw	r7,8(fp)
 1001f5c:	9c09883a 	add	r4,r19,r16
 1001f60:	22000117 	ldw	r8,4(r4)
 1001f64:	21c06326 	beq	r4,r7,10020f4 <_realloc_r+0x218>
 1001f68:	017fff84 	movi	r5,-2
 1001f6c:	414a703a 	and	r5,r8,r5
 1001f70:	214b883a 	add	r5,r4,r5
 1001f74:	29800117 	ldw	r6,4(r5)
 1001f78:	3180004c 	andi	r6,r6,1
 1001f7c:	30003f26 	beq	r6,zero,100207c <_realloc_r+0x1a0>
 1001f80:	1080004c 	andi	r2,r2,1
 1001f84:	10008326 	beq	r2,zero,1002194 <_realloc_r+0x2b8>
 1001f88:	900b883a 	mov	r5,r18
 1001f8c:	a009883a 	mov	r4,r20
 1001f90:	10012200 	call	1001220 <_malloc_r>
 1001f94:	1025883a 	mov	r18,r2
 1001f98:	10011e26 	beq	r2,zero,1002414 <_realloc_r+0x538>
 1001f9c:	a93fff17 	ldw	r4,-4(r21)
 1001fa0:	10fffe04 	addi	r3,r2,-8
 1001fa4:	00bfff84 	movi	r2,-2
 1001fa8:	2084703a 	and	r2,r4,r2
 1001fac:	9885883a 	add	r2,r19,r2
 1001fb0:	1880ee26 	beq	r3,r2,100236c <_realloc_r+0x490>
 1001fb4:	81bfff04 	addi	r6,r16,-4
 1001fb8:	00800904 	movi	r2,36
 1001fbc:	1180b836 	bltu	r2,r6,10022a0 <_realloc_r+0x3c4>
 1001fc0:	00c004c4 	movi	r3,19
 1001fc4:	19809636 	bltu	r3,r6,1002220 <_realloc_r+0x344>
 1001fc8:	9005883a 	mov	r2,r18
 1001fcc:	a807883a 	mov	r3,r21
 1001fd0:	19000017 	ldw	r4,0(r3)
 1001fd4:	11000015 	stw	r4,0(r2)
 1001fd8:	19000117 	ldw	r4,4(r3)
 1001fdc:	11000115 	stw	r4,4(r2)
 1001fe0:	18c00217 	ldw	r3,8(r3)
 1001fe4:	10c00215 	stw	r3,8(r2)
 1001fe8:	a80b883a 	mov	r5,r21
 1001fec:	a009883a 	mov	r4,r20
 1001ff0:	1002ca80 	call	1002ca8 <_free_r>
 1001ff4:	a009883a 	mov	r4,r20
 1001ff8:	1003a380 	call	1003a38 <__malloc_unlock>
 1001ffc:	9005883a 	mov	r2,r18
 1002000:	00001206 	br	100204c <_realloc_r+0x170>
 1002004:	00c00404 	movi	r3,16
 1002008:	1823883a 	mov	r17,r3
 100200c:	003fce06 	br	1001f48 <__alt_mem_TCDM+0xfefe0f48>
 1002010:	a825883a 	mov	r18,r21
 1002014:	8445c83a 	sub	r2,r16,r17
 1002018:	00c003c4 	movi	r3,15
 100201c:	18802636 	bltu	r3,r2,10020b8 <_realloc_r+0x1dc>
 1002020:	99800117 	ldw	r6,4(r19)
 1002024:	9c07883a 	add	r3,r19,r16
 1002028:	3180004c 	andi	r6,r6,1
 100202c:	3420b03a 	or	r16,r6,r16
 1002030:	9c000115 	stw	r16,4(r19)
 1002034:	18800117 	ldw	r2,4(r3)
 1002038:	10800054 	ori	r2,r2,1
 100203c:	18800115 	stw	r2,4(r3)
 1002040:	a009883a 	mov	r4,r20
 1002044:	1003a380 	call	1003a38 <__malloc_unlock>
 1002048:	9005883a 	mov	r2,r18
 100204c:	dfc00917 	ldw	ra,36(sp)
 1002050:	df000817 	ldw	fp,32(sp)
 1002054:	ddc00717 	ldw	r23,28(sp)
 1002058:	dd800617 	ldw	r22,24(sp)
 100205c:	dd400517 	ldw	r21,20(sp)
 1002060:	dd000417 	ldw	r20,16(sp)
 1002064:	dcc00317 	ldw	r19,12(sp)
 1002068:	dc800217 	ldw	r18,8(sp)
 100206c:	dc400117 	ldw	r17,4(sp)
 1002070:	dc000017 	ldw	r16,0(sp)
 1002074:	dec00a04 	addi	sp,sp,40
 1002078:	f800283a 	ret
 100207c:	017fff04 	movi	r5,-4
 1002080:	414a703a 	and	r5,r8,r5
 1002084:	814d883a 	add	r6,r16,r5
 1002088:	30c01f16 	blt	r6,r3,1002108 <_realloc_r+0x22c>
 100208c:	20800317 	ldw	r2,12(r4)
 1002090:	20c00217 	ldw	r3,8(r4)
 1002094:	a825883a 	mov	r18,r21
 1002098:	3021883a 	mov	r16,r6
 100209c:	18800315 	stw	r2,12(r3)
 10020a0:	10c00215 	stw	r3,8(r2)
 10020a4:	003fdb06 	br	1002014 <__alt_mem_TCDM+0xfefe1014>
 10020a8:	00800304 	movi	r2,12
 10020ac:	a0800015 	stw	r2,0(r20)
 10020b0:	0005883a 	mov	r2,zero
 10020b4:	003fe506 	br	100204c <__alt_mem_TCDM+0xfefe104c>
 10020b8:	98c00117 	ldw	r3,4(r19)
 10020bc:	9c4b883a 	add	r5,r19,r17
 10020c0:	11000054 	ori	r4,r2,1
 10020c4:	18c0004c 	andi	r3,r3,1
 10020c8:	1c62b03a 	or	r17,r3,r17
 10020cc:	9c400115 	stw	r17,4(r19)
 10020d0:	29000115 	stw	r4,4(r5)
 10020d4:	2885883a 	add	r2,r5,r2
 10020d8:	10c00117 	ldw	r3,4(r2)
 10020dc:	29400204 	addi	r5,r5,8
 10020e0:	a009883a 	mov	r4,r20
 10020e4:	18c00054 	ori	r3,r3,1
 10020e8:	10c00115 	stw	r3,4(r2)
 10020ec:	1002ca80 	call	1002ca8 <_free_r>
 10020f0:	003fd306 	br	1002040 <__alt_mem_TCDM+0xfefe1040>
 10020f4:	017fff04 	movi	r5,-4
 10020f8:	414a703a 	and	r5,r8,r5
 10020fc:	89800404 	addi	r6,r17,16
 1002100:	8151883a 	add	r8,r16,r5
 1002104:	4180590e 	bge	r8,r6,100226c <_realloc_r+0x390>
 1002108:	1080004c 	andi	r2,r2,1
 100210c:	103f9e1e 	bne	r2,zero,1001f88 <__alt_mem_TCDM+0xfefe0f88>
 1002110:	adbffe17 	ldw	r22,-8(r21)
 1002114:	00bfff04 	movi	r2,-4
 1002118:	9dadc83a 	sub	r22,r19,r22
 100211c:	b1800117 	ldw	r6,4(r22)
 1002120:	3084703a 	and	r2,r6,r2
 1002124:	20002026 	beq	r4,zero,10021a8 <_realloc_r+0x2cc>
 1002128:	80af883a 	add	r23,r16,r2
 100212c:	b96f883a 	add	r23,r23,r5
 1002130:	21c05f26 	beq	r4,r7,10022b0 <_realloc_r+0x3d4>
 1002134:	b8c01c16 	blt	r23,r3,10021a8 <_realloc_r+0x2cc>
 1002138:	20800317 	ldw	r2,12(r4)
 100213c:	20c00217 	ldw	r3,8(r4)
 1002140:	81bfff04 	addi	r6,r16,-4
 1002144:	01000904 	movi	r4,36
 1002148:	18800315 	stw	r2,12(r3)
 100214c:	10c00215 	stw	r3,8(r2)
 1002150:	b0c00217 	ldw	r3,8(r22)
 1002154:	b0800317 	ldw	r2,12(r22)
 1002158:	b4800204 	addi	r18,r22,8
 100215c:	18800315 	stw	r2,12(r3)
 1002160:	10c00215 	stw	r3,8(r2)
 1002164:	21801b36 	bltu	r4,r6,10021d4 <_realloc_r+0x2f8>
 1002168:	008004c4 	movi	r2,19
 100216c:	1180352e 	bgeu	r2,r6,1002244 <_realloc_r+0x368>
 1002170:	a8800017 	ldw	r2,0(r21)
 1002174:	b0800215 	stw	r2,8(r22)
 1002178:	a8800117 	ldw	r2,4(r21)
 100217c:	b0800315 	stw	r2,12(r22)
 1002180:	008006c4 	movi	r2,27
 1002184:	11807f36 	bltu	r2,r6,1002384 <_realloc_r+0x4a8>
 1002188:	b0800404 	addi	r2,r22,16
 100218c:	ad400204 	addi	r21,r21,8
 1002190:	00002d06 	br	1002248 <_realloc_r+0x36c>
 1002194:	adbffe17 	ldw	r22,-8(r21)
 1002198:	00bfff04 	movi	r2,-4
 100219c:	9dadc83a 	sub	r22,r19,r22
 10021a0:	b1000117 	ldw	r4,4(r22)
 10021a4:	2084703a 	and	r2,r4,r2
 10021a8:	b03f7726 	beq	r22,zero,1001f88 <__alt_mem_TCDM+0xfefe0f88>
 10021ac:	80af883a 	add	r23,r16,r2
 10021b0:	b8ff7516 	blt	r23,r3,1001f88 <__alt_mem_TCDM+0xfefe0f88>
 10021b4:	b0800317 	ldw	r2,12(r22)
 10021b8:	b0c00217 	ldw	r3,8(r22)
 10021bc:	81bfff04 	addi	r6,r16,-4
 10021c0:	01000904 	movi	r4,36
 10021c4:	18800315 	stw	r2,12(r3)
 10021c8:	10c00215 	stw	r3,8(r2)
 10021cc:	b4800204 	addi	r18,r22,8
 10021d0:	21bfe52e 	bgeu	r4,r6,1002168 <__alt_mem_TCDM+0xfefe1168>
 10021d4:	a80b883a 	mov	r5,r21
 10021d8:	9009883a 	mov	r4,r18
 10021dc:	1001c580 	call	1001c58 <memmove>
 10021e0:	b821883a 	mov	r16,r23
 10021e4:	b027883a 	mov	r19,r22
 10021e8:	003f8a06 	br	1002014 <__alt_mem_TCDM+0xfefe1014>
 10021ec:	300b883a 	mov	r5,r6
 10021f0:	dfc00917 	ldw	ra,36(sp)
 10021f4:	df000817 	ldw	fp,32(sp)
 10021f8:	ddc00717 	ldw	r23,28(sp)
 10021fc:	dd800617 	ldw	r22,24(sp)
 1002200:	dd400517 	ldw	r21,20(sp)
 1002204:	dd000417 	ldw	r20,16(sp)
 1002208:	dcc00317 	ldw	r19,12(sp)
 100220c:	dc800217 	ldw	r18,8(sp)
 1002210:	dc400117 	ldw	r17,4(sp)
 1002214:	dc000017 	ldw	r16,0(sp)
 1002218:	dec00a04 	addi	sp,sp,40
 100221c:	10012201 	jmpi	1001220 <_malloc_r>
 1002220:	a8c00017 	ldw	r3,0(r21)
 1002224:	90c00015 	stw	r3,0(r18)
 1002228:	a8c00117 	ldw	r3,4(r21)
 100222c:	90c00115 	stw	r3,4(r18)
 1002230:	00c006c4 	movi	r3,27
 1002234:	19804536 	bltu	r3,r6,100234c <_realloc_r+0x470>
 1002238:	90800204 	addi	r2,r18,8
 100223c:	a8c00204 	addi	r3,r21,8
 1002240:	003f6306 	br	1001fd0 <__alt_mem_TCDM+0xfefe0fd0>
 1002244:	9005883a 	mov	r2,r18
 1002248:	a8c00017 	ldw	r3,0(r21)
 100224c:	b821883a 	mov	r16,r23
 1002250:	b027883a 	mov	r19,r22
 1002254:	10c00015 	stw	r3,0(r2)
 1002258:	a8c00117 	ldw	r3,4(r21)
 100225c:	10c00115 	stw	r3,4(r2)
 1002260:	a8c00217 	ldw	r3,8(r21)
 1002264:	10c00215 	stw	r3,8(r2)
 1002268:	003f6a06 	br	1002014 <__alt_mem_TCDM+0xfefe1014>
 100226c:	9c67883a 	add	r19,r19,r17
 1002270:	4445c83a 	sub	r2,r8,r17
 1002274:	e4c00215 	stw	r19,8(fp)
 1002278:	10800054 	ori	r2,r2,1
 100227c:	98800115 	stw	r2,4(r19)
 1002280:	a8bfff17 	ldw	r2,-4(r21)
 1002284:	a009883a 	mov	r4,r20
 1002288:	1080004c 	andi	r2,r2,1
 100228c:	1462b03a 	or	r17,r2,r17
 1002290:	ac7fff15 	stw	r17,-4(r21)
 1002294:	1003a380 	call	1003a38 <__malloc_unlock>
 1002298:	a805883a 	mov	r2,r21
 100229c:	003f6b06 	br	100204c <__alt_mem_TCDM+0xfefe104c>
 10022a0:	a80b883a 	mov	r5,r21
 10022a4:	9009883a 	mov	r4,r18
 10022a8:	1001c580 	call	1001c58 <memmove>
 10022ac:	003f4e06 	br	1001fe8 <__alt_mem_TCDM+0xfefe0fe8>
 10022b0:	89000404 	addi	r4,r17,16
 10022b4:	b93fbc16 	blt	r23,r4,10021a8 <__alt_mem_TCDM+0xfefe11a8>
 10022b8:	b0800317 	ldw	r2,12(r22)
 10022bc:	b0c00217 	ldw	r3,8(r22)
 10022c0:	81bfff04 	addi	r6,r16,-4
 10022c4:	01000904 	movi	r4,36
 10022c8:	18800315 	stw	r2,12(r3)
 10022cc:	10c00215 	stw	r3,8(r2)
 10022d0:	b4800204 	addi	r18,r22,8
 10022d4:	21804336 	bltu	r4,r6,10023e4 <_realloc_r+0x508>
 10022d8:	008004c4 	movi	r2,19
 10022dc:	11803f2e 	bgeu	r2,r6,10023dc <_realloc_r+0x500>
 10022e0:	a8800017 	ldw	r2,0(r21)
 10022e4:	b0800215 	stw	r2,8(r22)
 10022e8:	a8800117 	ldw	r2,4(r21)
 10022ec:	b0800315 	stw	r2,12(r22)
 10022f0:	008006c4 	movi	r2,27
 10022f4:	11803f36 	bltu	r2,r6,10023f4 <_realloc_r+0x518>
 10022f8:	b0800404 	addi	r2,r22,16
 10022fc:	ad400204 	addi	r21,r21,8
 1002300:	a8c00017 	ldw	r3,0(r21)
 1002304:	10c00015 	stw	r3,0(r2)
 1002308:	a8c00117 	ldw	r3,4(r21)
 100230c:	10c00115 	stw	r3,4(r2)
 1002310:	a8c00217 	ldw	r3,8(r21)
 1002314:	10c00215 	stw	r3,8(r2)
 1002318:	b447883a 	add	r3,r22,r17
 100231c:	bc45c83a 	sub	r2,r23,r17
 1002320:	e0c00215 	stw	r3,8(fp)
 1002324:	10800054 	ori	r2,r2,1
 1002328:	18800115 	stw	r2,4(r3)
 100232c:	b0800117 	ldw	r2,4(r22)
 1002330:	a009883a 	mov	r4,r20
 1002334:	1080004c 	andi	r2,r2,1
 1002338:	1462b03a 	or	r17,r2,r17
 100233c:	b4400115 	stw	r17,4(r22)
 1002340:	1003a380 	call	1003a38 <__malloc_unlock>
 1002344:	9005883a 	mov	r2,r18
 1002348:	003f4006 	br	100204c <__alt_mem_TCDM+0xfefe104c>
 100234c:	a8c00217 	ldw	r3,8(r21)
 1002350:	90c00215 	stw	r3,8(r18)
 1002354:	a8c00317 	ldw	r3,12(r21)
 1002358:	90c00315 	stw	r3,12(r18)
 100235c:	30801126 	beq	r6,r2,10023a4 <_realloc_r+0x4c8>
 1002360:	90800404 	addi	r2,r18,16
 1002364:	a8c00404 	addi	r3,r21,16
 1002368:	003f1906 	br	1001fd0 <__alt_mem_TCDM+0xfefe0fd0>
 100236c:	90ffff17 	ldw	r3,-4(r18)
 1002370:	00bfff04 	movi	r2,-4
 1002374:	a825883a 	mov	r18,r21
 1002378:	1884703a 	and	r2,r3,r2
 100237c:	80a1883a 	add	r16,r16,r2
 1002380:	003f2406 	br	1002014 <__alt_mem_TCDM+0xfefe1014>
 1002384:	a8800217 	ldw	r2,8(r21)
 1002388:	b0800415 	stw	r2,16(r22)
 100238c:	a8800317 	ldw	r2,12(r21)
 1002390:	b0800515 	stw	r2,20(r22)
 1002394:	31000a26 	beq	r6,r4,10023c0 <_realloc_r+0x4e4>
 1002398:	b0800604 	addi	r2,r22,24
 100239c:	ad400404 	addi	r21,r21,16
 10023a0:	003fa906 	br	1002248 <__alt_mem_TCDM+0xfefe1248>
 10023a4:	a9000417 	ldw	r4,16(r21)
 10023a8:	90800604 	addi	r2,r18,24
 10023ac:	a8c00604 	addi	r3,r21,24
 10023b0:	91000415 	stw	r4,16(r18)
 10023b4:	a9000517 	ldw	r4,20(r21)
 10023b8:	91000515 	stw	r4,20(r18)
 10023bc:	003f0406 	br	1001fd0 <__alt_mem_TCDM+0xfefe0fd0>
 10023c0:	a8c00417 	ldw	r3,16(r21)
 10023c4:	ad400604 	addi	r21,r21,24
 10023c8:	b0800804 	addi	r2,r22,32
 10023cc:	b0c00615 	stw	r3,24(r22)
 10023d0:	a8ffff17 	ldw	r3,-4(r21)
 10023d4:	b0c00715 	stw	r3,28(r22)
 10023d8:	003f9b06 	br	1002248 <__alt_mem_TCDM+0xfefe1248>
 10023dc:	9005883a 	mov	r2,r18
 10023e0:	003fc706 	br	1002300 <__alt_mem_TCDM+0xfefe1300>
 10023e4:	a80b883a 	mov	r5,r21
 10023e8:	9009883a 	mov	r4,r18
 10023ec:	1001c580 	call	1001c58 <memmove>
 10023f0:	003fc906 	br	1002318 <__alt_mem_TCDM+0xfefe1318>
 10023f4:	a8800217 	ldw	r2,8(r21)
 10023f8:	b0800415 	stw	r2,16(r22)
 10023fc:	a8800317 	ldw	r2,12(r21)
 1002400:	b0800515 	stw	r2,20(r22)
 1002404:	31000726 	beq	r6,r4,1002424 <_realloc_r+0x548>
 1002408:	b0800604 	addi	r2,r22,24
 100240c:	ad400404 	addi	r21,r21,16
 1002410:	003fbb06 	br	1002300 <__alt_mem_TCDM+0xfefe1300>
 1002414:	a009883a 	mov	r4,r20
 1002418:	1003a380 	call	1003a38 <__malloc_unlock>
 100241c:	0005883a 	mov	r2,zero
 1002420:	003f0a06 	br	100204c <__alt_mem_TCDM+0xfefe104c>
 1002424:	a8c00417 	ldw	r3,16(r21)
 1002428:	ad400604 	addi	r21,r21,24
 100242c:	b0800804 	addi	r2,r22,32
 1002430:	b0c00615 	stw	r3,24(r22)
 1002434:	a8ffff17 	ldw	r3,-4(r21)
 1002438:	b0c00715 	stw	r3,28(r22)
 100243c:	003fb006 	br	1002300 <__alt_mem_TCDM+0xfefe1300>

01002440 <_sbrk_r>:
 1002440:	defffd04 	addi	sp,sp,-12
 1002444:	dc000015 	stw	r16,0(sp)
 1002448:	04004234 	movhi	r16,264
 100244c:	dc400115 	stw	r17,4(sp)
 1002450:	8426cf04 	addi	r16,r16,-25796
 1002454:	2023883a 	mov	r17,r4
 1002458:	2809883a 	mov	r4,r5
 100245c:	dfc00215 	stw	ra,8(sp)
 1002460:	80000015 	stw	zero,0(r16)
 1002464:	1003bf80 	call	1003bf8 <sbrk>
 1002468:	00ffffc4 	movi	r3,-1
 100246c:	10c00526 	beq	r2,r3,1002484 <_sbrk_r+0x44>
 1002470:	dfc00217 	ldw	ra,8(sp)
 1002474:	dc400117 	ldw	r17,4(sp)
 1002478:	dc000017 	ldw	r16,0(sp)
 100247c:	dec00304 	addi	sp,sp,12
 1002480:	f800283a 	ret
 1002484:	80c00017 	ldw	r3,0(r16)
 1002488:	183ff926 	beq	r3,zero,1002470 <__alt_mem_TCDM+0xfefe1470>
 100248c:	88c00015 	stw	r3,0(r17)
 1002490:	003ff706 	br	1002470 <__alt_mem_TCDM+0xfefe1470>

01002494 <__sread>:
 1002494:	defffe04 	addi	sp,sp,-8
 1002498:	dc000015 	stw	r16,0(sp)
 100249c:	2821883a 	mov	r16,r5
 10024a0:	2940038f 	ldh	r5,14(r5)
 10024a4:	dfc00115 	stw	ra,4(sp)
 10024a8:	10031d40 	call	10031d4 <_read_r>
 10024ac:	10000716 	blt	r2,zero,10024cc <__sread+0x38>
 10024b0:	80c01417 	ldw	r3,80(r16)
 10024b4:	1887883a 	add	r3,r3,r2
 10024b8:	80c01415 	stw	r3,80(r16)
 10024bc:	dfc00117 	ldw	ra,4(sp)
 10024c0:	dc000017 	ldw	r16,0(sp)
 10024c4:	dec00204 	addi	sp,sp,8
 10024c8:	f800283a 	ret
 10024cc:	80c0030b 	ldhu	r3,12(r16)
 10024d0:	18fbffcc 	andi	r3,r3,61439
 10024d4:	80c0030d 	sth	r3,12(r16)
 10024d8:	dfc00117 	ldw	ra,4(sp)
 10024dc:	dc000017 	ldw	r16,0(sp)
 10024e0:	dec00204 	addi	sp,sp,8
 10024e4:	f800283a 	ret

010024e8 <__seofread>:
 10024e8:	0005883a 	mov	r2,zero
 10024ec:	f800283a 	ret

010024f0 <__swrite>:
 10024f0:	2880030b 	ldhu	r2,12(r5)
 10024f4:	defffb04 	addi	sp,sp,-20
 10024f8:	dcc00315 	stw	r19,12(sp)
 10024fc:	dc800215 	stw	r18,8(sp)
 1002500:	dc400115 	stw	r17,4(sp)
 1002504:	dc000015 	stw	r16,0(sp)
 1002508:	dfc00415 	stw	ra,16(sp)
 100250c:	10c0400c 	andi	r3,r2,256
 1002510:	2821883a 	mov	r16,r5
 1002514:	2023883a 	mov	r17,r4
 1002518:	3025883a 	mov	r18,r6
 100251c:	3827883a 	mov	r19,r7
 1002520:	18000526 	beq	r3,zero,1002538 <__swrite+0x48>
 1002524:	2940038f 	ldh	r5,14(r5)
 1002528:	01c00084 	movi	r7,2
 100252c:	000d883a 	mov	r6,zero
 1002530:	1002fb80 	call	1002fb8 <_lseek_r>
 1002534:	8080030b 	ldhu	r2,12(r16)
 1002538:	8140038f 	ldh	r5,14(r16)
 100253c:	10bbffcc 	andi	r2,r2,61439
 1002540:	980f883a 	mov	r7,r19
 1002544:	900d883a 	mov	r6,r18
 1002548:	8809883a 	mov	r4,r17
 100254c:	8080030d 	sth	r2,12(r16)
 1002550:	dfc00417 	ldw	ra,16(sp)
 1002554:	dcc00317 	ldw	r19,12(sp)
 1002558:	dc800217 	ldw	r18,8(sp)
 100255c:	dc400117 	ldw	r17,4(sp)
 1002560:	dc000017 	ldw	r16,0(sp)
 1002564:	dec00504 	addi	sp,sp,20
 1002568:	10025d01 	jmpi	10025d0 <_write_r>

0100256c <__sseek>:
 100256c:	defffe04 	addi	sp,sp,-8
 1002570:	dc000015 	stw	r16,0(sp)
 1002574:	2821883a 	mov	r16,r5
 1002578:	2940038f 	ldh	r5,14(r5)
 100257c:	dfc00115 	stw	ra,4(sp)
 1002580:	1002fb80 	call	1002fb8 <_lseek_r>
 1002584:	00ffffc4 	movi	r3,-1
 1002588:	10c00826 	beq	r2,r3,10025ac <__sseek+0x40>
 100258c:	80c0030b 	ldhu	r3,12(r16)
 1002590:	80801415 	stw	r2,80(r16)
 1002594:	18c40014 	ori	r3,r3,4096
 1002598:	80c0030d 	sth	r3,12(r16)
 100259c:	dfc00117 	ldw	ra,4(sp)
 10025a0:	dc000017 	ldw	r16,0(sp)
 10025a4:	dec00204 	addi	sp,sp,8
 10025a8:	f800283a 	ret
 10025ac:	80c0030b 	ldhu	r3,12(r16)
 10025b0:	18fbffcc 	andi	r3,r3,61439
 10025b4:	80c0030d 	sth	r3,12(r16)
 10025b8:	dfc00117 	ldw	ra,4(sp)
 10025bc:	dc000017 	ldw	r16,0(sp)
 10025c0:	dec00204 	addi	sp,sp,8
 10025c4:	f800283a 	ret

010025c8 <__sclose>:
 10025c8:	2940038f 	ldh	r5,14(r5)
 10025cc:	10027841 	jmpi	1002784 <_close_r>

010025d0 <_write_r>:
 10025d0:	defffd04 	addi	sp,sp,-12
 10025d4:	2805883a 	mov	r2,r5
 10025d8:	dc000015 	stw	r16,0(sp)
 10025dc:	04004234 	movhi	r16,264
 10025e0:	dc400115 	stw	r17,4(sp)
 10025e4:	300b883a 	mov	r5,r6
 10025e8:	8426cf04 	addi	r16,r16,-25796
 10025ec:	2023883a 	mov	r17,r4
 10025f0:	380d883a 	mov	r6,r7
 10025f4:	1009883a 	mov	r4,r2
 10025f8:	dfc00215 	stw	ra,8(sp)
 10025fc:	80000015 	stw	zero,0(r16)
 1002600:	1003d140 	call	1003d14 <write>
 1002604:	00ffffc4 	movi	r3,-1
 1002608:	10c00526 	beq	r2,r3,1002620 <_write_r+0x50>
 100260c:	dfc00217 	ldw	ra,8(sp)
 1002610:	dc400117 	ldw	r17,4(sp)
 1002614:	dc000017 	ldw	r16,0(sp)
 1002618:	dec00304 	addi	sp,sp,12
 100261c:	f800283a 	ret
 1002620:	80c00017 	ldw	r3,0(r16)
 1002624:	183ff926 	beq	r3,zero,100260c <__alt_mem_TCDM+0xfefe160c>
 1002628:	88c00015 	stw	r3,0(r17)
 100262c:	003ff706 	br	100260c <__alt_mem_TCDM+0xfefe160c>

01002630 <__swsetup_r>:
 1002630:	00804234 	movhi	r2,264
 1002634:	defffd04 	addi	sp,sp,-12
 1002638:	10a01e04 	addi	r2,r2,-32648
 100263c:	dc400115 	stw	r17,4(sp)
 1002640:	2023883a 	mov	r17,r4
 1002644:	11000017 	ldw	r4,0(r2)
 1002648:	dc000015 	stw	r16,0(sp)
 100264c:	dfc00215 	stw	ra,8(sp)
 1002650:	2821883a 	mov	r16,r5
 1002654:	20000226 	beq	r4,zero,1002660 <__swsetup_r+0x30>
 1002658:	20800e17 	ldw	r2,56(r4)
 100265c:	10003126 	beq	r2,zero,1002724 <__swsetup_r+0xf4>
 1002660:	8080030b 	ldhu	r2,12(r16)
 1002664:	10c0020c 	andi	r3,r2,8
 1002668:	1009883a 	mov	r4,r2
 100266c:	18000f26 	beq	r3,zero,10026ac <__swsetup_r+0x7c>
 1002670:	80c00417 	ldw	r3,16(r16)
 1002674:	18001526 	beq	r3,zero,10026cc <__swsetup_r+0x9c>
 1002678:	1100004c 	andi	r4,r2,1
 100267c:	20001c1e 	bne	r4,zero,10026f0 <__swsetup_r+0xc0>
 1002680:	1080008c 	andi	r2,r2,2
 1002684:	1000291e 	bne	r2,zero,100272c <__swsetup_r+0xfc>
 1002688:	80800517 	ldw	r2,20(r16)
 100268c:	80800215 	stw	r2,8(r16)
 1002690:	18001c26 	beq	r3,zero,1002704 <__swsetup_r+0xd4>
 1002694:	0005883a 	mov	r2,zero
 1002698:	dfc00217 	ldw	ra,8(sp)
 100269c:	dc400117 	ldw	r17,4(sp)
 10026a0:	dc000017 	ldw	r16,0(sp)
 10026a4:	dec00304 	addi	sp,sp,12
 10026a8:	f800283a 	ret
 10026ac:	2080040c 	andi	r2,r4,16
 10026b0:	10002e26 	beq	r2,zero,100276c <__swsetup_r+0x13c>
 10026b4:	2080010c 	andi	r2,r4,4
 10026b8:	10001e1e 	bne	r2,zero,1002734 <__swsetup_r+0x104>
 10026bc:	80c00417 	ldw	r3,16(r16)
 10026c0:	20800214 	ori	r2,r4,8
 10026c4:	8080030d 	sth	r2,12(r16)
 10026c8:	183feb1e 	bne	r3,zero,1002678 <__alt_mem_TCDM+0xfefe1678>
 10026cc:	1100a00c 	andi	r4,r2,640
 10026d0:	01408004 	movi	r5,512
 10026d4:	217fe826 	beq	r4,r5,1002678 <__alt_mem_TCDM+0xfefe1678>
 10026d8:	800b883a 	mov	r5,r16
 10026dc:	8809883a 	mov	r4,r17
 10026e0:	10030180 	call	1003018 <__smakebuf_r>
 10026e4:	8080030b 	ldhu	r2,12(r16)
 10026e8:	80c00417 	ldw	r3,16(r16)
 10026ec:	003fe206 	br	1002678 <__alt_mem_TCDM+0xfefe1678>
 10026f0:	80800517 	ldw	r2,20(r16)
 10026f4:	80000215 	stw	zero,8(r16)
 10026f8:	0085c83a 	sub	r2,zero,r2
 10026fc:	80800615 	stw	r2,24(r16)
 1002700:	183fe41e 	bne	r3,zero,1002694 <__alt_mem_TCDM+0xfefe1694>
 1002704:	80c0030b 	ldhu	r3,12(r16)
 1002708:	0005883a 	mov	r2,zero
 100270c:	1900200c 	andi	r4,r3,128
 1002710:	203fe126 	beq	r4,zero,1002698 <__alt_mem_TCDM+0xfefe1698>
 1002714:	18c01014 	ori	r3,r3,64
 1002718:	80c0030d 	sth	r3,12(r16)
 100271c:	00bfffc4 	movi	r2,-1
 1002720:	003fdd06 	br	1002698 <__alt_mem_TCDM+0xfefe1698>
 1002724:	1000b8c0 	call	1000b8c <__sinit>
 1002728:	003fcd06 	br	1002660 <__alt_mem_TCDM+0xfefe1660>
 100272c:	0005883a 	mov	r2,zero
 1002730:	003fd606 	br	100268c <__alt_mem_TCDM+0xfefe168c>
 1002734:	81400c17 	ldw	r5,48(r16)
 1002738:	28000626 	beq	r5,zero,1002754 <__swsetup_r+0x124>
 100273c:	80801004 	addi	r2,r16,64
 1002740:	28800326 	beq	r5,r2,1002750 <__swsetup_r+0x120>
 1002744:	8809883a 	mov	r4,r17
 1002748:	1002ca80 	call	1002ca8 <_free_r>
 100274c:	8100030b 	ldhu	r4,12(r16)
 1002750:	80000c15 	stw	zero,48(r16)
 1002754:	80c00417 	ldw	r3,16(r16)
 1002758:	00bff6c4 	movi	r2,-37
 100275c:	1108703a 	and	r4,r2,r4
 1002760:	80000115 	stw	zero,4(r16)
 1002764:	80c00015 	stw	r3,0(r16)
 1002768:	003fd506 	br	10026c0 <__alt_mem_TCDM+0xfefe16c0>
 100276c:	00800244 	movi	r2,9
 1002770:	88800015 	stw	r2,0(r17)
 1002774:	20801014 	ori	r2,r4,64
 1002778:	8080030d 	sth	r2,12(r16)
 100277c:	00bfffc4 	movi	r2,-1
 1002780:	003fc506 	br	1002698 <__alt_mem_TCDM+0xfefe1698>

01002784 <_close_r>:
 1002784:	defffd04 	addi	sp,sp,-12
 1002788:	dc000015 	stw	r16,0(sp)
 100278c:	04004234 	movhi	r16,264
 1002790:	dc400115 	stw	r17,4(sp)
 1002794:	8426cf04 	addi	r16,r16,-25796
 1002798:	2023883a 	mov	r17,r4
 100279c:	2809883a 	mov	r4,r5
 10027a0:	dfc00215 	stw	ra,8(sp)
 10027a4:	80000015 	stw	zero,0(r16)
 10027a8:	10034d40 	call	10034d4 <close>
 10027ac:	00ffffc4 	movi	r3,-1
 10027b0:	10c00526 	beq	r2,r3,10027c8 <_close_r+0x44>
 10027b4:	dfc00217 	ldw	ra,8(sp)
 10027b8:	dc400117 	ldw	r17,4(sp)
 10027bc:	dc000017 	ldw	r16,0(sp)
 10027c0:	dec00304 	addi	sp,sp,12
 10027c4:	f800283a 	ret
 10027c8:	80c00017 	ldw	r3,0(r16)
 10027cc:	183ff926 	beq	r3,zero,10027b4 <__alt_mem_TCDM+0xfefe17b4>
 10027d0:	88c00015 	stw	r3,0(r17)
 10027d4:	003ff706 	br	10027b4 <__alt_mem_TCDM+0xfefe17b4>

010027d8 <_fclose_r>:
 10027d8:	28003926 	beq	r5,zero,10028c0 <_fclose_r+0xe8>
 10027dc:	defffc04 	addi	sp,sp,-16
 10027e0:	dc400115 	stw	r17,4(sp)
 10027e4:	dc000015 	stw	r16,0(sp)
 10027e8:	dfc00315 	stw	ra,12(sp)
 10027ec:	dc800215 	stw	r18,8(sp)
 10027f0:	2023883a 	mov	r17,r4
 10027f4:	2821883a 	mov	r16,r5
 10027f8:	20000226 	beq	r4,zero,1002804 <_fclose_r+0x2c>
 10027fc:	20800e17 	ldw	r2,56(r4)
 1002800:	10002726 	beq	r2,zero,10028a0 <_fclose_r+0xc8>
 1002804:	8080030f 	ldh	r2,12(r16)
 1002808:	1000071e 	bne	r2,zero,1002828 <_fclose_r+0x50>
 100280c:	0005883a 	mov	r2,zero
 1002810:	dfc00317 	ldw	ra,12(sp)
 1002814:	dc800217 	ldw	r18,8(sp)
 1002818:	dc400117 	ldw	r17,4(sp)
 100281c:	dc000017 	ldw	r16,0(sp)
 1002820:	dec00404 	addi	sp,sp,16
 1002824:	f800283a 	ret
 1002828:	800b883a 	mov	r5,r16
 100282c:	8809883a 	mov	r4,r17
 1002830:	10028dc0 	call	10028dc <__sflush_r>
 1002834:	1025883a 	mov	r18,r2
 1002838:	80800b17 	ldw	r2,44(r16)
 100283c:	10000426 	beq	r2,zero,1002850 <_fclose_r+0x78>
 1002840:	81400717 	ldw	r5,28(r16)
 1002844:	8809883a 	mov	r4,r17
 1002848:	103ee83a 	callr	r2
 100284c:	10001616 	blt	r2,zero,10028a8 <_fclose_r+0xd0>
 1002850:	8080030b 	ldhu	r2,12(r16)
 1002854:	1080200c 	andi	r2,r2,128
 1002858:	1000151e 	bne	r2,zero,10028b0 <_fclose_r+0xd8>
 100285c:	81400c17 	ldw	r5,48(r16)
 1002860:	28000526 	beq	r5,zero,1002878 <_fclose_r+0xa0>
 1002864:	80801004 	addi	r2,r16,64
 1002868:	28800226 	beq	r5,r2,1002874 <_fclose_r+0x9c>
 100286c:	8809883a 	mov	r4,r17
 1002870:	1002ca80 	call	1002ca8 <_free_r>
 1002874:	80000c15 	stw	zero,48(r16)
 1002878:	81401117 	ldw	r5,68(r16)
 100287c:	28000326 	beq	r5,zero,100288c <_fclose_r+0xb4>
 1002880:	8809883a 	mov	r4,r17
 1002884:	1002ca80 	call	1002ca8 <_free_r>
 1002888:	80001115 	stw	zero,68(r16)
 100288c:	1000b9c0 	call	1000b9c <__sfp_lock_acquire>
 1002890:	8000030d 	sth	zero,12(r16)
 1002894:	1000ba00 	call	1000ba0 <__sfp_lock_release>
 1002898:	9005883a 	mov	r2,r18
 100289c:	003fdc06 	br	1002810 <__alt_mem_TCDM+0xfefe1810>
 10028a0:	1000b8c0 	call	1000b8c <__sinit>
 10028a4:	003fd706 	br	1002804 <__alt_mem_TCDM+0xfefe1804>
 10028a8:	04bfffc4 	movi	r18,-1
 10028ac:	003fe806 	br	1002850 <__alt_mem_TCDM+0xfefe1850>
 10028b0:	81400417 	ldw	r5,16(r16)
 10028b4:	8809883a 	mov	r4,r17
 10028b8:	1002ca80 	call	1002ca8 <_free_r>
 10028bc:	003fe706 	br	100285c <__alt_mem_TCDM+0xfefe185c>
 10028c0:	0005883a 	mov	r2,zero
 10028c4:	f800283a 	ret

010028c8 <fclose>:
 10028c8:	00804234 	movhi	r2,264
 10028cc:	10a01e04 	addi	r2,r2,-32648
 10028d0:	200b883a 	mov	r5,r4
 10028d4:	11000017 	ldw	r4,0(r2)
 10028d8:	10027d81 	jmpi	10027d8 <_fclose_r>

010028dc <__sflush_r>:
 10028dc:	2880030b 	ldhu	r2,12(r5)
 10028e0:	defffb04 	addi	sp,sp,-20
 10028e4:	dcc00315 	stw	r19,12(sp)
 10028e8:	dc400115 	stw	r17,4(sp)
 10028ec:	dfc00415 	stw	ra,16(sp)
 10028f0:	dc800215 	stw	r18,8(sp)
 10028f4:	dc000015 	stw	r16,0(sp)
 10028f8:	10c0020c 	andi	r3,r2,8
 10028fc:	2823883a 	mov	r17,r5
 1002900:	2027883a 	mov	r19,r4
 1002904:	1800311e 	bne	r3,zero,10029cc <__sflush_r+0xf0>
 1002908:	28c00117 	ldw	r3,4(r5)
 100290c:	10820014 	ori	r2,r2,2048
 1002910:	2880030d 	sth	r2,12(r5)
 1002914:	00c04b0e 	bge	zero,r3,1002a44 <__sflush_r+0x168>
 1002918:	8a000a17 	ldw	r8,40(r17)
 100291c:	40002326 	beq	r8,zero,10029ac <__sflush_r+0xd0>
 1002920:	9c000017 	ldw	r16,0(r19)
 1002924:	10c4000c 	andi	r3,r2,4096
 1002928:	98000015 	stw	zero,0(r19)
 100292c:	18004826 	beq	r3,zero,1002a50 <__sflush_r+0x174>
 1002930:	89801417 	ldw	r6,80(r17)
 1002934:	10c0010c 	andi	r3,r2,4
 1002938:	18000626 	beq	r3,zero,1002954 <__sflush_r+0x78>
 100293c:	88c00117 	ldw	r3,4(r17)
 1002940:	88800c17 	ldw	r2,48(r17)
 1002944:	30cdc83a 	sub	r6,r6,r3
 1002948:	10000226 	beq	r2,zero,1002954 <__sflush_r+0x78>
 100294c:	88800f17 	ldw	r2,60(r17)
 1002950:	308dc83a 	sub	r6,r6,r2
 1002954:	89400717 	ldw	r5,28(r17)
 1002958:	000f883a 	mov	r7,zero
 100295c:	9809883a 	mov	r4,r19
 1002960:	403ee83a 	callr	r8
 1002964:	00ffffc4 	movi	r3,-1
 1002968:	10c04426 	beq	r2,r3,1002a7c <__sflush_r+0x1a0>
 100296c:	88c0030b 	ldhu	r3,12(r17)
 1002970:	89000417 	ldw	r4,16(r17)
 1002974:	88000115 	stw	zero,4(r17)
 1002978:	197dffcc 	andi	r5,r3,63487
 100297c:	8940030d 	sth	r5,12(r17)
 1002980:	89000015 	stw	r4,0(r17)
 1002984:	18c4000c 	andi	r3,r3,4096
 1002988:	18002c1e 	bne	r3,zero,1002a3c <__sflush_r+0x160>
 100298c:	89400c17 	ldw	r5,48(r17)
 1002990:	9c000015 	stw	r16,0(r19)
 1002994:	28000526 	beq	r5,zero,10029ac <__sflush_r+0xd0>
 1002998:	88801004 	addi	r2,r17,64
 100299c:	28800226 	beq	r5,r2,10029a8 <__sflush_r+0xcc>
 10029a0:	9809883a 	mov	r4,r19
 10029a4:	1002ca80 	call	1002ca8 <_free_r>
 10029a8:	88000c15 	stw	zero,48(r17)
 10029ac:	0005883a 	mov	r2,zero
 10029b0:	dfc00417 	ldw	ra,16(sp)
 10029b4:	dcc00317 	ldw	r19,12(sp)
 10029b8:	dc800217 	ldw	r18,8(sp)
 10029bc:	dc400117 	ldw	r17,4(sp)
 10029c0:	dc000017 	ldw	r16,0(sp)
 10029c4:	dec00504 	addi	sp,sp,20
 10029c8:	f800283a 	ret
 10029cc:	2c800417 	ldw	r18,16(r5)
 10029d0:	903ff626 	beq	r18,zero,10029ac <__alt_mem_TCDM+0xfefe19ac>
 10029d4:	2c000017 	ldw	r16,0(r5)
 10029d8:	108000cc 	andi	r2,r2,3
 10029dc:	2c800015 	stw	r18,0(r5)
 10029e0:	84a1c83a 	sub	r16,r16,r18
 10029e4:	1000131e 	bne	r2,zero,1002a34 <__sflush_r+0x158>
 10029e8:	28800517 	ldw	r2,20(r5)
 10029ec:	88800215 	stw	r2,8(r17)
 10029f0:	04000316 	blt	zero,r16,1002a00 <__sflush_r+0x124>
 10029f4:	003fed06 	br	10029ac <__alt_mem_TCDM+0xfefe19ac>
 10029f8:	90a5883a 	add	r18,r18,r2
 10029fc:	043feb0e 	bge	zero,r16,10029ac <__alt_mem_TCDM+0xfefe19ac>
 1002a00:	88800917 	ldw	r2,36(r17)
 1002a04:	89400717 	ldw	r5,28(r17)
 1002a08:	800f883a 	mov	r7,r16
 1002a0c:	900d883a 	mov	r6,r18
 1002a10:	9809883a 	mov	r4,r19
 1002a14:	103ee83a 	callr	r2
 1002a18:	80a1c83a 	sub	r16,r16,r2
 1002a1c:	00bff616 	blt	zero,r2,10029f8 <__alt_mem_TCDM+0xfefe19f8>
 1002a20:	88c0030b 	ldhu	r3,12(r17)
 1002a24:	00bfffc4 	movi	r2,-1
 1002a28:	18c01014 	ori	r3,r3,64
 1002a2c:	88c0030d 	sth	r3,12(r17)
 1002a30:	003fdf06 	br	10029b0 <__alt_mem_TCDM+0xfefe19b0>
 1002a34:	0005883a 	mov	r2,zero
 1002a38:	003fec06 	br	10029ec <__alt_mem_TCDM+0xfefe19ec>
 1002a3c:	88801415 	stw	r2,80(r17)
 1002a40:	003fd206 	br	100298c <__alt_mem_TCDM+0xfefe198c>
 1002a44:	28c00f17 	ldw	r3,60(r5)
 1002a48:	00ffb316 	blt	zero,r3,1002918 <__alt_mem_TCDM+0xfefe1918>
 1002a4c:	003fd706 	br	10029ac <__alt_mem_TCDM+0xfefe19ac>
 1002a50:	89400717 	ldw	r5,28(r17)
 1002a54:	000d883a 	mov	r6,zero
 1002a58:	01c00044 	movi	r7,1
 1002a5c:	9809883a 	mov	r4,r19
 1002a60:	403ee83a 	callr	r8
 1002a64:	100d883a 	mov	r6,r2
 1002a68:	00bfffc4 	movi	r2,-1
 1002a6c:	30801426 	beq	r6,r2,1002ac0 <__sflush_r+0x1e4>
 1002a70:	8880030b 	ldhu	r2,12(r17)
 1002a74:	8a000a17 	ldw	r8,40(r17)
 1002a78:	003fae06 	br	1002934 <__alt_mem_TCDM+0xfefe1934>
 1002a7c:	98c00017 	ldw	r3,0(r19)
 1002a80:	183fba26 	beq	r3,zero,100296c <__alt_mem_TCDM+0xfefe196c>
 1002a84:	01000744 	movi	r4,29
 1002a88:	19000626 	beq	r3,r4,1002aa4 <__sflush_r+0x1c8>
 1002a8c:	01000584 	movi	r4,22
 1002a90:	19000426 	beq	r3,r4,1002aa4 <__sflush_r+0x1c8>
 1002a94:	88c0030b 	ldhu	r3,12(r17)
 1002a98:	18c01014 	ori	r3,r3,64
 1002a9c:	88c0030d 	sth	r3,12(r17)
 1002aa0:	003fc306 	br	10029b0 <__alt_mem_TCDM+0xfefe19b0>
 1002aa4:	8880030b 	ldhu	r2,12(r17)
 1002aa8:	88c00417 	ldw	r3,16(r17)
 1002aac:	88000115 	stw	zero,4(r17)
 1002ab0:	10bdffcc 	andi	r2,r2,63487
 1002ab4:	8880030d 	sth	r2,12(r17)
 1002ab8:	88c00015 	stw	r3,0(r17)
 1002abc:	003fb306 	br	100298c <__alt_mem_TCDM+0xfefe198c>
 1002ac0:	98800017 	ldw	r2,0(r19)
 1002ac4:	103fea26 	beq	r2,zero,1002a70 <__alt_mem_TCDM+0xfefe1a70>
 1002ac8:	00c00744 	movi	r3,29
 1002acc:	10c00226 	beq	r2,r3,1002ad8 <__sflush_r+0x1fc>
 1002ad0:	00c00584 	movi	r3,22
 1002ad4:	10c0031e 	bne	r2,r3,1002ae4 <__sflush_r+0x208>
 1002ad8:	9c000015 	stw	r16,0(r19)
 1002adc:	0005883a 	mov	r2,zero
 1002ae0:	003fb306 	br	10029b0 <__alt_mem_TCDM+0xfefe19b0>
 1002ae4:	88c0030b 	ldhu	r3,12(r17)
 1002ae8:	3005883a 	mov	r2,r6
 1002aec:	18c01014 	ori	r3,r3,64
 1002af0:	88c0030d 	sth	r3,12(r17)
 1002af4:	003fae06 	br	10029b0 <__alt_mem_TCDM+0xfefe19b0>

01002af8 <_fflush_r>:
 1002af8:	defffd04 	addi	sp,sp,-12
 1002afc:	dc000115 	stw	r16,4(sp)
 1002b00:	dfc00215 	stw	ra,8(sp)
 1002b04:	2021883a 	mov	r16,r4
 1002b08:	20000226 	beq	r4,zero,1002b14 <_fflush_r+0x1c>
 1002b0c:	20800e17 	ldw	r2,56(r4)
 1002b10:	10000c26 	beq	r2,zero,1002b44 <_fflush_r+0x4c>
 1002b14:	2880030f 	ldh	r2,12(r5)
 1002b18:	1000051e 	bne	r2,zero,1002b30 <_fflush_r+0x38>
 1002b1c:	0005883a 	mov	r2,zero
 1002b20:	dfc00217 	ldw	ra,8(sp)
 1002b24:	dc000117 	ldw	r16,4(sp)
 1002b28:	dec00304 	addi	sp,sp,12
 1002b2c:	f800283a 	ret
 1002b30:	8009883a 	mov	r4,r16
 1002b34:	dfc00217 	ldw	ra,8(sp)
 1002b38:	dc000117 	ldw	r16,4(sp)
 1002b3c:	dec00304 	addi	sp,sp,12
 1002b40:	10028dc1 	jmpi	10028dc <__sflush_r>
 1002b44:	d9400015 	stw	r5,0(sp)
 1002b48:	1000b8c0 	call	1000b8c <__sinit>
 1002b4c:	d9400017 	ldw	r5,0(sp)
 1002b50:	003ff006 	br	1002b14 <__alt_mem_TCDM+0xfefe1b14>

01002b54 <fflush>:
 1002b54:	20000526 	beq	r4,zero,1002b6c <fflush+0x18>
 1002b58:	00804234 	movhi	r2,264
 1002b5c:	10a01e04 	addi	r2,r2,-32648
 1002b60:	200b883a 	mov	r5,r4
 1002b64:	11000017 	ldw	r4,0(r2)
 1002b68:	1002af81 	jmpi	1002af8 <_fflush_r>
 1002b6c:	00804234 	movhi	r2,264
 1002b70:	10a01d04 	addi	r2,r2,-32652
 1002b74:	11000017 	ldw	r4,0(r2)
 1002b78:	01404034 	movhi	r5,256
 1002b7c:	294abe04 	addi	r5,r5,11000
 1002b80:	100115c1 	jmpi	100115c <_fwalk_reent>

01002b84 <_malloc_trim_r>:
 1002b84:	defffb04 	addi	sp,sp,-20
 1002b88:	dcc00315 	stw	r19,12(sp)
 1002b8c:	04c041f4 	movhi	r19,263
 1002b90:	dc800215 	stw	r18,8(sp)
 1002b94:	dc400115 	stw	r17,4(sp)
 1002b98:	dc000015 	stw	r16,0(sp)
 1002b9c:	dfc00415 	stw	ra,16(sp)
 1002ba0:	2821883a 	mov	r16,r5
 1002ba4:	9cda9304 	addi	r19,r19,27212
 1002ba8:	2025883a 	mov	r18,r4
 1002bac:	1003a140 	call	1003a14 <__malloc_lock>
 1002bb0:	98800217 	ldw	r2,8(r19)
 1002bb4:	14400117 	ldw	r17,4(r2)
 1002bb8:	00bfff04 	movi	r2,-4
 1002bbc:	88a2703a 	and	r17,r17,r2
 1002bc0:	8c21c83a 	sub	r16,r17,r16
 1002bc4:	8403fbc4 	addi	r16,r16,4079
 1002bc8:	8020d33a 	srli	r16,r16,12
 1002bcc:	0083ffc4 	movi	r2,4095
 1002bd0:	843fffc4 	addi	r16,r16,-1
 1002bd4:	8020933a 	slli	r16,r16,12
 1002bd8:	1400060e 	bge	r2,r16,1002bf4 <_malloc_trim_r+0x70>
 1002bdc:	000b883a 	mov	r5,zero
 1002be0:	9009883a 	mov	r4,r18
 1002be4:	10024400 	call	1002440 <_sbrk_r>
 1002be8:	98c00217 	ldw	r3,8(r19)
 1002bec:	1c47883a 	add	r3,r3,r17
 1002bf0:	10c00a26 	beq	r2,r3,1002c1c <_malloc_trim_r+0x98>
 1002bf4:	9009883a 	mov	r4,r18
 1002bf8:	1003a380 	call	1003a38 <__malloc_unlock>
 1002bfc:	0005883a 	mov	r2,zero
 1002c00:	dfc00417 	ldw	ra,16(sp)
 1002c04:	dcc00317 	ldw	r19,12(sp)
 1002c08:	dc800217 	ldw	r18,8(sp)
 1002c0c:	dc400117 	ldw	r17,4(sp)
 1002c10:	dc000017 	ldw	r16,0(sp)
 1002c14:	dec00504 	addi	sp,sp,20
 1002c18:	f800283a 	ret
 1002c1c:	040bc83a 	sub	r5,zero,r16
 1002c20:	9009883a 	mov	r4,r18
 1002c24:	10024400 	call	1002440 <_sbrk_r>
 1002c28:	00ffffc4 	movi	r3,-1
 1002c2c:	10c00d26 	beq	r2,r3,1002c64 <_malloc_trim_r+0xe0>
 1002c30:	00c04234 	movhi	r3,264
 1002c34:	18e6d704 	addi	r3,r3,-25764
 1002c38:	18800017 	ldw	r2,0(r3)
 1002c3c:	99000217 	ldw	r4,8(r19)
 1002c40:	8c23c83a 	sub	r17,r17,r16
 1002c44:	8c400054 	ori	r17,r17,1
 1002c48:	1421c83a 	sub	r16,r2,r16
 1002c4c:	24400115 	stw	r17,4(r4)
 1002c50:	9009883a 	mov	r4,r18
 1002c54:	1c000015 	stw	r16,0(r3)
 1002c58:	1003a380 	call	1003a38 <__malloc_unlock>
 1002c5c:	00800044 	movi	r2,1
 1002c60:	003fe706 	br	1002c00 <__alt_mem_TCDM+0xfefe1c00>
 1002c64:	000b883a 	mov	r5,zero
 1002c68:	9009883a 	mov	r4,r18
 1002c6c:	10024400 	call	1002440 <_sbrk_r>
 1002c70:	99000217 	ldw	r4,8(r19)
 1002c74:	014003c4 	movi	r5,15
 1002c78:	1107c83a 	sub	r3,r2,r4
 1002c7c:	28ffdd0e 	bge	r5,r3,1002bf4 <__alt_mem_TCDM+0xfefe1bf4>
 1002c80:	01404234 	movhi	r5,264
 1002c84:	29601f04 	addi	r5,r5,-32644
 1002c88:	29400017 	ldw	r5,0(r5)
 1002c8c:	18c00054 	ori	r3,r3,1
 1002c90:	20c00115 	stw	r3,4(r4)
 1002c94:	00c04234 	movhi	r3,264
 1002c98:	1145c83a 	sub	r2,r2,r5
 1002c9c:	18e6d704 	addi	r3,r3,-25764
 1002ca0:	18800015 	stw	r2,0(r3)
 1002ca4:	003fd306 	br	1002bf4 <__alt_mem_TCDM+0xfefe1bf4>

01002ca8 <_free_r>:
 1002ca8:	28004126 	beq	r5,zero,1002db0 <_free_r+0x108>
 1002cac:	defffd04 	addi	sp,sp,-12
 1002cb0:	dc400115 	stw	r17,4(sp)
 1002cb4:	dc000015 	stw	r16,0(sp)
 1002cb8:	2023883a 	mov	r17,r4
 1002cbc:	2821883a 	mov	r16,r5
 1002cc0:	dfc00215 	stw	ra,8(sp)
 1002cc4:	1003a140 	call	1003a14 <__malloc_lock>
 1002cc8:	81ffff17 	ldw	r7,-4(r16)
 1002ccc:	00bfff84 	movi	r2,-2
 1002cd0:	010041f4 	movhi	r4,263
 1002cd4:	81bffe04 	addi	r6,r16,-8
 1002cd8:	3884703a 	and	r2,r7,r2
 1002cdc:	211a9304 	addi	r4,r4,27212
 1002ce0:	308b883a 	add	r5,r6,r2
 1002ce4:	2a400117 	ldw	r9,4(r5)
 1002ce8:	22000217 	ldw	r8,8(r4)
 1002cec:	00ffff04 	movi	r3,-4
 1002cf0:	48c6703a 	and	r3,r9,r3
 1002cf4:	2a005726 	beq	r5,r8,1002e54 <_free_r+0x1ac>
 1002cf8:	28c00115 	stw	r3,4(r5)
 1002cfc:	39c0004c 	andi	r7,r7,1
 1002d00:	3800091e 	bne	r7,zero,1002d28 <_free_r+0x80>
 1002d04:	823ffe17 	ldw	r8,-8(r16)
 1002d08:	22400204 	addi	r9,r4,8
 1002d0c:	320dc83a 	sub	r6,r6,r8
 1002d10:	31c00217 	ldw	r7,8(r6)
 1002d14:	1205883a 	add	r2,r2,r8
 1002d18:	3a406526 	beq	r7,r9,1002eb0 <_free_r+0x208>
 1002d1c:	32000317 	ldw	r8,12(r6)
 1002d20:	3a000315 	stw	r8,12(r7)
 1002d24:	41c00215 	stw	r7,8(r8)
 1002d28:	28cf883a 	add	r7,r5,r3
 1002d2c:	39c00117 	ldw	r7,4(r7)
 1002d30:	39c0004c 	andi	r7,r7,1
 1002d34:	38003a26 	beq	r7,zero,1002e20 <_free_r+0x178>
 1002d38:	10c00054 	ori	r3,r2,1
 1002d3c:	30c00115 	stw	r3,4(r6)
 1002d40:	3087883a 	add	r3,r6,r2
 1002d44:	18800015 	stw	r2,0(r3)
 1002d48:	00c07fc4 	movi	r3,511
 1002d4c:	18801936 	bltu	r3,r2,1002db4 <_free_r+0x10c>
 1002d50:	1004d0fa 	srli	r2,r2,3
 1002d54:	01c00044 	movi	r7,1
 1002d58:	21400117 	ldw	r5,4(r4)
 1002d5c:	10c00044 	addi	r3,r2,1
 1002d60:	18c7883a 	add	r3,r3,r3
 1002d64:	1005d0ba 	srai	r2,r2,2
 1002d68:	18c7883a 	add	r3,r3,r3
 1002d6c:	18c7883a 	add	r3,r3,r3
 1002d70:	1907883a 	add	r3,r3,r4
 1002d74:	3884983a 	sll	r2,r7,r2
 1002d78:	19c00017 	ldw	r7,0(r3)
 1002d7c:	1a3ffe04 	addi	r8,r3,-8
 1002d80:	1144b03a 	or	r2,r2,r5
 1002d84:	32000315 	stw	r8,12(r6)
 1002d88:	31c00215 	stw	r7,8(r6)
 1002d8c:	20800115 	stw	r2,4(r4)
 1002d90:	19800015 	stw	r6,0(r3)
 1002d94:	39800315 	stw	r6,12(r7)
 1002d98:	8809883a 	mov	r4,r17
 1002d9c:	dfc00217 	ldw	ra,8(sp)
 1002da0:	dc400117 	ldw	r17,4(sp)
 1002da4:	dc000017 	ldw	r16,0(sp)
 1002da8:	dec00304 	addi	sp,sp,12
 1002dac:	1003a381 	jmpi	1003a38 <__malloc_unlock>
 1002db0:	f800283a 	ret
 1002db4:	100ad27a 	srli	r5,r2,9
 1002db8:	00c00104 	movi	r3,4
 1002dbc:	19404a36 	bltu	r3,r5,1002ee8 <_free_r+0x240>
 1002dc0:	100ad1ba 	srli	r5,r2,6
 1002dc4:	28c00e44 	addi	r3,r5,57
 1002dc8:	18c7883a 	add	r3,r3,r3
 1002dcc:	29400e04 	addi	r5,r5,56
 1002dd0:	18c7883a 	add	r3,r3,r3
 1002dd4:	18c7883a 	add	r3,r3,r3
 1002dd8:	1909883a 	add	r4,r3,r4
 1002ddc:	20c00017 	ldw	r3,0(r4)
 1002de0:	01c041f4 	movhi	r7,263
 1002de4:	213ffe04 	addi	r4,r4,-8
 1002de8:	39da9304 	addi	r7,r7,27212
 1002dec:	20c04426 	beq	r4,r3,1002f00 <_free_r+0x258>
 1002df0:	01ffff04 	movi	r7,-4
 1002df4:	19400117 	ldw	r5,4(r3)
 1002df8:	29ca703a 	and	r5,r5,r7
 1002dfc:	1140022e 	bgeu	r2,r5,1002e08 <_free_r+0x160>
 1002e00:	18c00217 	ldw	r3,8(r3)
 1002e04:	20fffb1e 	bne	r4,r3,1002df4 <__alt_mem_TCDM+0xfefe1df4>
 1002e08:	19000317 	ldw	r4,12(r3)
 1002e0c:	31000315 	stw	r4,12(r6)
 1002e10:	30c00215 	stw	r3,8(r6)
 1002e14:	21800215 	stw	r6,8(r4)
 1002e18:	19800315 	stw	r6,12(r3)
 1002e1c:	003fde06 	br	1002d98 <__alt_mem_TCDM+0xfefe1d98>
 1002e20:	29c00217 	ldw	r7,8(r5)
 1002e24:	10c5883a 	add	r2,r2,r3
 1002e28:	00c041f4 	movhi	r3,263
 1002e2c:	18da9504 	addi	r3,r3,27220
 1002e30:	38c03b26 	beq	r7,r3,1002f20 <_free_r+0x278>
 1002e34:	2a000317 	ldw	r8,12(r5)
 1002e38:	11400054 	ori	r5,r2,1
 1002e3c:	3087883a 	add	r3,r6,r2
 1002e40:	3a000315 	stw	r8,12(r7)
 1002e44:	41c00215 	stw	r7,8(r8)
 1002e48:	31400115 	stw	r5,4(r6)
 1002e4c:	18800015 	stw	r2,0(r3)
 1002e50:	003fbd06 	br	1002d48 <__alt_mem_TCDM+0xfefe1d48>
 1002e54:	39c0004c 	andi	r7,r7,1
 1002e58:	10c5883a 	add	r2,r2,r3
 1002e5c:	3800071e 	bne	r7,zero,1002e7c <_free_r+0x1d4>
 1002e60:	81fffe17 	ldw	r7,-8(r16)
 1002e64:	31cdc83a 	sub	r6,r6,r7
 1002e68:	30c00317 	ldw	r3,12(r6)
 1002e6c:	31400217 	ldw	r5,8(r6)
 1002e70:	11c5883a 	add	r2,r2,r7
 1002e74:	28c00315 	stw	r3,12(r5)
 1002e78:	19400215 	stw	r5,8(r3)
 1002e7c:	10c00054 	ori	r3,r2,1
 1002e80:	30c00115 	stw	r3,4(r6)
 1002e84:	00c04234 	movhi	r3,264
 1002e88:	18e02004 	addi	r3,r3,-32640
 1002e8c:	18c00017 	ldw	r3,0(r3)
 1002e90:	21800215 	stw	r6,8(r4)
 1002e94:	10ffc036 	bltu	r2,r3,1002d98 <__alt_mem_TCDM+0xfefe1d98>
 1002e98:	00804234 	movhi	r2,264
 1002e9c:	10a6ce04 	addi	r2,r2,-25800
 1002ea0:	11400017 	ldw	r5,0(r2)
 1002ea4:	8809883a 	mov	r4,r17
 1002ea8:	1002b840 	call	1002b84 <_malloc_trim_r>
 1002eac:	003fba06 	br	1002d98 <__alt_mem_TCDM+0xfefe1d98>
 1002eb0:	28c9883a 	add	r4,r5,r3
 1002eb4:	21000117 	ldw	r4,4(r4)
 1002eb8:	2100004c 	andi	r4,r4,1
 1002ebc:	2000391e 	bne	r4,zero,1002fa4 <_free_r+0x2fc>
 1002ec0:	29c00217 	ldw	r7,8(r5)
 1002ec4:	29000317 	ldw	r4,12(r5)
 1002ec8:	1885883a 	add	r2,r3,r2
 1002ecc:	10c00054 	ori	r3,r2,1
 1002ed0:	39000315 	stw	r4,12(r7)
 1002ed4:	21c00215 	stw	r7,8(r4)
 1002ed8:	30c00115 	stw	r3,4(r6)
 1002edc:	308d883a 	add	r6,r6,r2
 1002ee0:	30800015 	stw	r2,0(r6)
 1002ee4:	003fac06 	br	1002d98 <__alt_mem_TCDM+0xfefe1d98>
 1002ee8:	00c00504 	movi	r3,20
 1002eec:	19401536 	bltu	r3,r5,1002f44 <_free_r+0x29c>
 1002ef0:	28c01704 	addi	r3,r5,92
 1002ef4:	18c7883a 	add	r3,r3,r3
 1002ef8:	294016c4 	addi	r5,r5,91
 1002efc:	003fb406 	br	1002dd0 <__alt_mem_TCDM+0xfefe1dd0>
 1002f00:	280bd0ba 	srai	r5,r5,2
 1002f04:	00c00044 	movi	r3,1
 1002f08:	38800117 	ldw	r2,4(r7)
 1002f0c:	194a983a 	sll	r5,r3,r5
 1002f10:	2007883a 	mov	r3,r4
 1002f14:	2884b03a 	or	r2,r5,r2
 1002f18:	38800115 	stw	r2,4(r7)
 1002f1c:	003fbb06 	br	1002e0c <__alt_mem_TCDM+0xfefe1e0c>
 1002f20:	21800515 	stw	r6,20(r4)
 1002f24:	21800415 	stw	r6,16(r4)
 1002f28:	10c00054 	ori	r3,r2,1
 1002f2c:	31c00315 	stw	r7,12(r6)
 1002f30:	31c00215 	stw	r7,8(r6)
 1002f34:	30c00115 	stw	r3,4(r6)
 1002f38:	308d883a 	add	r6,r6,r2
 1002f3c:	30800015 	stw	r2,0(r6)
 1002f40:	003f9506 	br	1002d98 <__alt_mem_TCDM+0xfefe1d98>
 1002f44:	00c01504 	movi	r3,84
 1002f48:	19400536 	bltu	r3,r5,1002f60 <_free_r+0x2b8>
 1002f4c:	100ad33a 	srli	r5,r2,12
 1002f50:	28c01bc4 	addi	r3,r5,111
 1002f54:	18c7883a 	add	r3,r3,r3
 1002f58:	29401b84 	addi	r5,r5,110
 1002f5c:	003f9c06 	br	1002dd0 <__alt_mem_TCDM+0xfefe1dd0>
 1002f60:	00c05504 	movi	r3,340
 1002f64:	19400536 	bltu	r3,r5,1002f7c <_free_r+0x2d4>
 1002f68:	100ad3fa 	srli	r5,r2,15
 1002f6c:	28c01e04 	addi	r3,r5,120
 1002f70:	18c7883a 	add	r3,r3,r3
 1002f74:	29401dc4 	addi	r5,r5,119
 1002f78:	003f9506 	br	1002dd0 <__alt_mem_TCDM+0xfefe1dd0>
 1002f7c:	00c15504 	movi	r3,1364
 1002f80:	19400536 	bltu	r3,r5,1002f98 <_free_r+0x2f0>
 1002f84:	100ad4ba 	srli	r5,r2,18
 1002f88:	28c01f44 	addi	r3,r5,125
 1002f8c:	18c7883a 	add	r3,r3,r3
 1002f90:	29401f04 	addi	r5,r5,124
 1002f94:	003f8e06 	br	1002dd0 <__alt_mem_TCDM+0xfefe1dd0>
 1002f98:	00c03f84 	movi	r3,254
 1002f9c:	01401f84 	movi	r5,126
 1002fa0:	003f8b06 	br	1002dd0 <__alt_mem_TCDM+0xfefe1dd0>
 1002fa4:	10c00054 	ori	r3,r2,1
 1002fa8:	30c00115 	stw	r3,4(r6)
 1002fac:	308d883a 	add	r6,r6,r2
 1002fb0:	30800015 	stw	r2,0(r6)
 1002fb4:	003f7806 	br	1002d98 <__alt_mem_TCDM+0xfefe1d98>

01002fb8 <_lseek_r>:
 1002fb8:	defffd04 	addi	sp,sp,-12
 1002fbc:	2805883a 	mov	r2,r5
 1002fc0:	dc000015 	stw	r16,0(sp)
 1002fc4:	04004234 	movhi	r16,264
 1002fc8:	dc400115 	stw	r17,4(sp)
 1002fcc:	300b883a 	mov	r5,r6
 1002fd0:	8426cf04 	addi	r16,r16,-25796
 1002fd4:	2023883a 	mov	r17,r4
 1002fd8:	380d883a 	mov	r6,r7
 1002fdc:	1009883a 	mov	r4,r2
 1002fe0:	dfc00215 	stw	ra,8(sp)
 1002fe4:	80000015 	stw	zero,0(r16)
 1002fe8:	10038c40 	call	10038c4 <lseek>
 1002fec:	00ffffc4 	movi	r3,-1
 1002ff0:	10c00526 	beq	r2,r3,1003008 <_lseek_r+0x50>
 1002ff4:	dfc00217 	ldw	ra,8(sp)
 1002ff8:	dc400117 	ldw	r17,4(sp)
 1002ffc:	dc000017 	ldw	r16,0(sp)
 1003000:	dec00304 	addi	sp,sp,12
 1003004:	f800283a 	ret
 1003008:	80c00017 	ldw	r3,0(r16)
 100300c:	183ff926 	beq	r3,zero,1002ff4 <__alt_mem_TCDM+0xfefe1ff4>
 1003010:	88c00015 	stw	r3,0(r17)
 1003014:	003ff706 	br	1002ff4 <__alt_mem_TCDM+0xfefe1ff4>

01003018 <__smakebuf_r>:
 1003018:	2880030b 	ldhu	r2,12(r5)
 100301c:	10c0008c 	andi	r3,r2,2
 1003020:	1800411e 	bne	r3,zero,1003128 <__smakebuf_r+0x110>
 1003024:	deffec04 	addi	sp,sp,-80
 1003028:	dc000f15 	stw	r16,60(sp)
 100302c:	2821883a 	mov	r16,r5
 1003030:	2940038f 	ldh	r5,14(r5)
 1003034:	dc401015 	stw	r17,64(sp)
 1003038:	dfc01315 	stw	ra,76(sp)
 100303c:	dcc01215 	stw	r19,72(sp)
 1003040:	dc801115 	stw	r18,68(sp)
 1003044:	2023883a 	mov	r17,r4
 1003048:	28001c16 	blt	r5,zero,10030bc <__smakebuf_r+0xa4>
 100304c:	d80d883a 	mov	r6,sp
 1003050:	10032340 	call	1003234 <_fstat_r>
 1003054:	10001816 	blt	r2,zero,10030b8 <__smakebuf_r+0xa0>
 1003058:	d8800117 	ldw	r2,4(sp)
 100305c:	00e00014 	movui	r3,32768
 1003060:	10bc000c 	andi	r2,r2,61440
 1003064:	14c80020 	cmpeqi	r19,r2,8192
 1003068:	10c03726 	beq	r2,r3,1003148 <__smakebuf_r+0x130>
 100306c:	80c0030b 	ldhu	r3,12(r16)
 1003070:	18c20014 	ori	r3,r3,2048
 1003074:	80c0030d 	sth	r3,12(r16)
 1003078:	00c80004 	movi	r3,8192
 100307c:	10c0521e 	bne	r2,r3,10031c8 <__smakebuf_r+0x1b0>
 1003080:	8140038f 	ldh	r5,14(r16)
 1003084:	8809883a 	mov	r4,r17
 1003088:	10032900 	call	1003290 <_isatty_r>
 100308c:	10004c26 	beq	r2,zero,10031c0 <__smakebuf_r+0x1a8>
 1003090:	8080030b 	ldhu	r2,12(r16)
 1003094:	80c010c4 	addi	r3,r16,67
 1003098:	80c00015 	stw	r3,0(r16)
 100309c:	10800054 	ori	r2,r2,1
 10030a0:	8080030d 	sth	r2,12(r16)
 10030a4:	00800044 	movi	r2,1
 10030a8:	80c00415 	stw	r3,16(r16)
 10030ac:	80800515 	stw	r2,20(r16)
 10030b0:	04810004 	movi	r18,1024
 10030b4:	00000706 	br	10030d4 <__smakebuf_r+0xbc>
 10030b8:	8080030b 	ldhu	r2,12(r16)
 10030bc:	10c0200c 	andi	r3,r2,128
 10030c0:	18001f1e 	bne	r3,zero,1003140 <__smakebuf_r+0x128>
 10030c4:	04810004 	movi	r18,1024
 10030c8:	10820014 	ori	r2,r2,2048
 10030cc:	8080030d 	sth	r2,12(r16)
 10030d0:	0027883a 	mov	r19,zero
 10030d4:	900b883a 	mov	r5,r18
 10030d8:	8809883a 	mov	r4,r17
 10030dc:	10012200 	call	1001220 <_malloc_r>
 10030e0:	10002c26 	beq	r2,zero,1003194 <__smakebuf_r+0x17c>
 10030e4:	80c0030b 	ldhu	r3,12(r16)
 10030e8:	01004034 	movhi	r4,256
 10030ec:	21021104 	addi	r4,r4,2116
 10030f0:	89000f15 	stw	r4,60(r17)
 10030f4:	18c02014 	ori	r3,r3,128
 10030f8:	80c0030d 	sth	r3,12(r16)
 10030fc:	80800015 	stw	r2,0(r16)
 1003100:	80800415 	stw	r2,16(r16)
 1003104:	84800515 	stw	r18,20(r16)
 1003108:	98001a1e 	bne	r19,zero,1003174 <__smakebuf_r+0x15c>
 100310c:	dfc01317 	ldw	ra,76(sp)
 1003110:	dcc01217 	ldw	r19,72(sp)
 1003114:	dc801117 	ldw	r18,68(sp)
 1003118:	dc401017 	ldw	r17,64(sp)
 100311c:	dc000f17 	ldw	r16,60(sp)
 1003120:	dec01404 	addi	sp,sp,80
 1003124:	f800283a 	ret
 1003128:	288010c4 	addi	r2,r5,67
 100312c:	28800015 	stw	r2,0(r5)
 1003130:	28800415 	stw	r2,16(r5)
 1003134:	00800044 	movi	r2,1
 1003138:	28800515 	stw	r2,20(r5)
 100313c:	f800283a 	ret
 1003140:	04801004 	movi	r18,64
 1003144:	003fe006 	br	10030c8 <__alt_mem_TCDM+0xfefe20c8>
 1003148:	81000a17 	ldw	r4,40(r16)
 100314c:	00c04034 	movhi	r3,256
 1003150:	18c95b04 	addi	r3,r3,9580
 1003154:	20ffc51e 	bne	r4,r3,100306c <__alt_mem_TCDM+0xfefe206c>
 1003158:	8080030b 	ldhu	r2,12(r16)
 100315c:	04810004 	movi	r18,1024
 1003160:	84801315 	stw	r18,76(r16)
 1003164:	1484b03a 	or	r2,r2,r18
 1003168:	8080030d 	sth	r2,12(r16)
 100316c:	0027883a 	mov	r19,zero
 1003170:	003fd806 	br	10030d4 <__alt_mem_TCDM+0xfefe20d4>
 1003174:	8140038f 	ldh	r5,14(r16)
 1003178:	8809883a 	mov	r4,r17
 100317c:	10032900 	call	1003290 <_isatty_r>
 1003180:	103fe226 	beq	r2,zero,100310c <__alt_mem_TCDM+0xfefe210c>
 1003184:	8080030b 	ldhu	r2,12(r16)
 1003188:	10800054 	ori	r2,r2,1
 100318c:	8080030d 	sth	r2,12(r16)
 1003190:	003fde06 	br	100310c <__alt_mem_TCDM+0xfefe210c>
 1003194:	8080030b 	ldhu	r2,12(r16)
 1003198:	10c0800c 	andi	r3,r2,512
 100319c:	183fdb1e 	bne	r3,zero,100310c <__alt_mem_TCDM+0xfefe210c>
 10031a0:	10800094 	ori	r2,r2,2
 10031a4:	80c010c4 	addi	r3,r16,67
 10031a8:	8080030d 	sth	r2,12(r16)
 10031ac:	00800044 	movi	r2,1
 10031b0:	80c00015 	stw	r3,0(r16)
 10031b4:	80c00415 	stw	r3,16(r16)
 10031b8:	80800515 	stw	r2,20(r16)
 10031bc:	003fd306 	br	100310c <__alt_mem_TCDM+0xfefe210c>
 10031c0:	04810004 	movi	r18,1024
 10031c4:	003fc306 	br	10030d4 <__alt_mem_TCDM+0xfefe20d4>
 10031c8:	0027883a 	mov	r19,zero
 10031cc:	04810004 	movi	r18,1024
 10031d0:	003fc006 	br	10030d4 <__alt_mem_TCDM+0xfefe20d4>

010031d4 <_read_r>:
 10031d4:	defffd04 	addi	sp,sp,-12
 10031d8:	2805883a 	mov	r2,r5
 10031dc:	dc000015 	stw	r16,0(sp)
 10031e0:	04004234 	movhi	r16,264
 10031e4:	dc400115 	stw	r17,4(sp)
 10031e8:	300b883a 	mov	r5,r6
 10031ec:	8426cf04 	addi	r16,r16,-25796
 10031f0:	2023883a 	mov	r17,r4
 10031f4:	380d883a 	mov	r6,r7
 10031f8:	1009883a 	mov	r4,r2
 10031fc:	dfc00215 	stw	ra,8(sp)
 1003200:	80000015 	stw	zero,0(r16)
 1003204:	1003a980 	call	1003a98 <read>
 1003208:	00ffffc4 	movi	r3,-1
 100320c:	10c00526 	beq	r2,r3,1003224 <_read_r+0x50>
 1003210:	dfc00217 	ldw	ra,8(sp)
 1003214:	dc400117 	ldw	r17,4(sp)
 1003218:	dc000017 	ldw	r16,0(sp)
 100321c:	dec00304 	addi	sp,sp,12
 1003220:	f800283a 	ret
 1003224:	80c00017 	ldw	r3,0(r16)
 1003228:	183ff926 	beq	r3,zero,1003210 <__alt_mem_TCDM+0xfefe2210>
 100322c:	88c00015 	stw	r3,0(r17)
 1003230:	003ff706 	br	1003210 <__alt_mem_TCDM+0xfefe2210>

01003234 <_fstat_r>:
 1003234:	defffd04 	addi	sp,sp,-12
 1003238:	2805883a 	mov	r2,r5
 100323c:	dc000015 	stw	r16,0(sp)
 1003240:	04004234 	movhi	r16,264
 1003244:	dc400115 	stw	r17,4(sp)
 1003248:	8426cf04 	addi	r16,r16,-25796
 100324c:	2023883a 	mov	r17,r4
 1003250:	300b883a 	mov	r5,r6
 1003254:	1009883a 	mov	r4,r2
 1003258:	dfc00215 	stw	ra,8(sp)
 100325c:	80000015 	stw	zero,0(r16)
 1003260:	100360c0 	call	100360c <fstat>
 1003264:	00ffffc4 	movi	r3,-1
 1003268:	10c00526 	beq	r2,r3,1003280 <_fstat_r+0x4c>
 100326c:	dfc00217 	ldw	ra,8(sp)
 1003270:	dc400117 	ldw	r17,4(sp)
 1003274:	dc000017 	ldw	r16,0(sp)
 1003278:	dec00304 	addi	sp,sp,12
 100327c:	f800283a 	ret
 1003280:	80c00017 	ldw	r3,0(r16)
 1003284:	183ff926 	beq	r3,zero,100326c <__alt_mem_TCDM+0xfefe226c>
 1003288:	88c00015 	stw	r3,0(r17)
 100328c:	003ff706 	br	100326c <__alt_mem_TCDM+0xfefe226c>

01003290 <_isatty_r>:
 1003290:	defffd04 	addi	sp,sp,-12
 1003294:	dc000015 	stw	r16,0(sp)
 1003298:	04004234 	movhi	r16,264
 100329c:	dc400115 	stw	r17,4(sp)
 10032a0:	8426cf04 	addi	r16,r16,-25796
 10032a4:	2023883a 	mov	r17,r4
 10032a8:	2809883a 	mov	r4,r5
 10032ac:	dfc00215 	stw	ra,8(sp)
 10032b0:	80000015 	stw	zero,0(r16)
 10032b4:	10036f80 	call	10036f8 <isatty>
 10032b8:	00ffffc4 	movi	r3,-1
 10032bc:	10c00526 	beq	r2,r3,10032d4 <_isatty_r+0x44>
 10032c0:	dfc00217 	ldw	ra,8(sp)
 10032c4:	dc400117 	ldw	r17,4(sp)
 10032c8:	dc000017 	ldw	r16,0(sp)
 10032cc:	dec00304 	addi	sp,sp,12
 10032d0:	f800283a 	ret
 10032d4:	80c00017 	ldw	r3,0(r16)
 10032d8:	183ff926 	beq	r3,zero,10032c0 <__alt_mem_TCDM+0xfefe22c0>
 10032dc:	88c00015 	stw	r3,0(r17)
 10032e0:	003ff706 	br	10032c0 <__alt_mem_TCDM+0xfefe22c0>

010032e4 <__divsi3>:
 10032e4:	20001b16 	blt	r4,zero,1003354 <__divsi3+0x70>
 10032e8:	000f883a 	mov	r7,zero
 10032ec:	28001616 	blt	r5,zero,1003348 <__divsi3+0x64>
 10032f0:	200d883a 	mov	r6,r4
 10032f4:	29001a2e 	bgeu	r5,r4,1003360 <__divsi3+0x7c>
 10032f8:	00800804 	movi	r2,32
 10032fc:	00c00044 	movi	r3,1
 1003300:	00000106 	br	1003308 <__divsi3+0x24>
 1003304:	10000d26 	beq	r2,zero,100333c <__divsi3+0x58>
 1003308:	294b883a 	add	r5,r5,r5
 100330c:	10bfffc4 	addi	r2,r2,-1
 1003310:	18c7883a 	add	r3,r3,r3
 1003314:	293ffb36 	bltu	r5,r4,1003304 <__alt_mem_TCDM+0xfefe2304>
 1003318:	0005883a 	mov	r2,zero
 100331c:	18000726 	beq	r3,zero,100333c <__divsi3+0x58>
 1003320:	0005883a 	mov	r2,zero
 1003324:	31400236 	bltu	r6,r5,1003330 <__divsi3+0x4c>
 1003328:	314dc83a 	sub	r6,r6,r5
 100332c:	10c4b03a 	or	r2,r2,r3
 1003330:	1806d07a 	srli	r3,r3,1
 1003334:	280ad07a 	srli	r5,r5,1
 1003338:	183ffa1e 	bne	r3,zero,1003324 <__alt_mem_TCDM+0xfefe2324>
 100333c:	38000126 	beq	r7,zero,1003344 <__divsi3+0x60>
 1003340:	0085c83a 	sub	r2,zero,r2
 1003344:	f800283a 	ret
 1003348:	014bc83a 	sub	r5,zero,r5
 100334c:	39c0005c 	xori	r7,r7,1
 1003350:	003fe706 	br	10032f0 <__alt_mem_TCDM+0xfefe22f0>
 1003354:	0109c83a 	sub	r4,zero,r4
 1003358:	01c00044 	movi	r7,1
 100335c:	003fe306 	br	10032ec <__alt_mem_TCDM+0xfefe22ec>
 1003360:	00c00044 	movi	r3,1
 1003364:	003fee06 	br	1003320 <__alt_mem_TCDM+0xfefe2320>

01003368 <__modsi3>:
 1003368:	20001716 	blt	r4,zero,10033c8 <__modsi3+0x60>
 100336c:	000f883a 	mov	r7,zero
 1003370:	2005883a 	mov	r2,r4
 1003374:	28001216 	blt	r5,zero,10033c0 <__modsi3+0x58>
 1003378:	2900162e 	bgeu	r5,r4,10033d4 <__modsi3+0x6c>
 100337c:	01800804 	movi	r6,32
 1003380:	00c00044 	movi	r3,1
 1003384:	00000106 	br	100338c <__modsi3+0x24>
 1003388:	30000a26 	beq	r6,zero,10033b4 <__modsi3+0x4c>
 100338c:	294b883a 	add	r5,r5,r5
 1003390:	31bfffc4 	addi	r6,r6,-1
 1003394:	18c7883a 	add	r3,r3,r3
 1003398:	293ffb36 	bltu	r5,r4,1003388 <__alt_mem_TCDM+0xfefe2388>
 100339c:	18000526 	beq	r3,zero,10033b4 <__modsi3+0x4c>
 10033a0:	1806d07a 	srli	r3,r3,1
 10033a4:	11400136 	bltu	r2,r5,10033ac <__modsi3+0x44>
 10033a8:	1145c83a 	sub	r2,r2,r5
 10033ac:	280ad07a 	srli	r5,r5,1
 10033b0:	183ffb1e 	bne	r3,zero,10033a0 <__alt_mem_TCDM+0xfefe23a0>
 10033b4:	38000126 	beq	r7,zero,10033bc <__modsi3+0x54>
 10033b8:	0085c83a 	sub	r2,zero,r2
 10033bc:	f800283a 	ret
 10033c0:	014bc83a 	sub	r5,zero,r5
 10033c4:	003fec06 	br	1003378 <__alt_mem_TCDM+0xfefe2378>
 10033c8:	0109c83a 	sub	r4,zero,r4
 10033cc:	01c00044 	movi	r7,1
 10033d0:	003fe706 	br	1003370 <__alt_mem_TCDM+0xfefe2370>
 10033d4:	00c00044 	movi	r3,1
 10033d8:	003ff106 	br	10033a0 <__alt_mem_TCDM+0xfefe23a0>

010033dc <__udivsi3>:
 10033dc:	200d883a 	mov	r6,r4
 10033e0:	2900152e 	bgeu	r5,r4,1003438 <__udivsi3+0x5c>
 10033e4:	28001416 	blt	r5,zero,1003438 <__udivsi3+0x5c>
 10033e8:	00800804 	movi	r2,32
 10033ec:	00c00044 	movi	r3,1
 10033f0:	00000206 	br	10033fc <__udivsi3+0x20>
 10033f4:	10000e26 	beq	r2,zero,1003430 <__udivsi3+0x54>
 10033f8:	28000516 	blt	r5,zero,1003410 <__udivsi3+0x34>
 10033fc:	294b883a 	add	r5,r5,r5
 1003400:	10bfffc4 	addi	r2,r2,-1
 1003404:	18c7883a 	add	r3,r3,r3
 1003408:	293ffa36 	bltu	r5,r4,10033f4 <__alt_mem_TCDM+0xfefe23f4>
 100340c:	18000826 	beq	r3,zero,1003430 <__udivsi3+0x54>
 1003410:	0005883a 	mov	r2,zero
 1003414:	31400236 	bltu	r6,r5,1003420 <__udivsi3+0x44>
 1003418:	314dc83a 	sub	r6,r6,r5
 100341c:	10c4b03a 	or	r2,r2,r3
 1003420:	1806d07a 	srli	r3,r3,1
 1003424:	280ad07a 	srli	r5,r5,1
 1003428:	183ffa1e 	bne	r3,zero,1003414 <__alt_mem_TCDM+0xfefe2414>
 100342c:	f800283a 	ret
 1003430:	0005883a 	mov	r2,zero
 1003434:	f800283a 	ret
 1003438:	00c00044 	movi	r3,1
 100343c:	003ff406 	br	1003410 <__alt_mem_TCDM+0xfefe2410>

01003440 <__umodsi3>:
 1003440:	2005883a 	mov	r2,r4
 1003444:	2900122e 	bgeu	r5,r4,1003490 <__umodsi3+0x50>
 1003448:	28001116 	blt	r5,zero,1003490 <__umodsi3+0x50>
 100344c:	01800804 	movi	r6,32
 1003450:	00c00044 	movi	r3,1
 1003454:	00000206 	br	1003460 <__umodsi3+0x20>
 1003458:	30000c26 	beq	r6,zero,100348c <__umodsi3+0x4c>
 100345c:	28000516 	blt	r5,zero,1003474 <__umodsi3+0x34>
 1003460:	294b883a 	add	r5,r5,r5
 1003464:	31bfffc4 	addi	r6,r6,-1
 1003468:	18c7883a 	add	r3,r3,r3
 100346c:	293ffa36 	bltu	r5,r4,1003458 <__alt_mem_TCDM+0xfefe2458>
 1003470:	18000626 	beq	r3,zero,100348c <__umodsi3+0x4c>
 1003474:	1806d07a 	srli	r3,r3,1
 1003478:	11400136 	bltu	r2,r5,1003480 <__umodsi3+0x40>
 100347c:	1145c83a 	sub	r2,r2,r5
 1003480:	280ad07a 	srli	r5,r5,1
 1003484:	183ffb1e 	bne	r3,zero,1003474 <__alt_mem_TCDM+0xfefe2474>
 1003488:	f800283a 	ret
 100348c:	f800283a 	ret
 1003490:	00c00044 	movi	r3,1
 1003494:	003ff706 	br	1003474 <__alt_mem_TCDM+0xfefe2474>

01003498 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003498:	defffe04 	addi	sp,sp,-8
 100349c:	dfc00115 	stw	ra,4(sp)
 10034a0:	df000015 	stw	fp,0(sp)
 10034a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10034a8:	d0a00f17 	ldw	r2,-32708(gp)
 10034ac:	10000326 	beq	r2,zero,10034bc <alt_get_errno+0x24>
 10034b0:	d0a00f17 	ldw	r2,-32708(gp)
 10034b4:	103ee83a 	callr	r2
 10034b8:	00000106 	br	10034c0 <alt_get_errno+0x28>
 10034bc:	d0a6b804 	addi	r2,gp,-25888
}
 10034c0:	e037883a 	mov	sp,fp
 10034c4:	dfc00117 	ldw	ra,4(sp)
 10034c8:	df000017 	ldw	fp,0(sp)
 10034cc:	dec00204 	addi	sp,sp,8
 10034d0:	f800283a 	ret

010034d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 10034d4:	defffb04 	addi	sp,sp,-20
 10034d8:	dfc00415 	stw	ra,16(sp)
 10034dc:	df000315 	stw	fp,12(sp)
 10034e0:	df000304 	addi	fp,sp,12
 10034e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 10034e8:	e0bfff17 	ldw	r2,-4(fp)
 10034ec:	10000616 	blt	r2,zero,1003508 <close+0x34>
 10034f0:	e0bfff17 	ldw	r2,-4(fp)
 10034f4:	10c00324 	muli	r3,r2,12
 10034f8:	008041f4 	movhi	r2,263
 10034fc:	109b9f04 	addi	r2,r2,28284
 1003500:	1885883a 	add	r2,r3,r2
 1003504:	00000106 	br	100350c <close+0x38>
 1003508:	0005883a 	mov	r2,zero
 100350c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 1003510:	e0bffd17 	ldw	r2,-12(fp)
 1003514:	10001926 	beq	r2,zero,100357c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1003518:	e0bffd17 	ldw	r2,-12(fp)
 100351c:	10800017 	ldw	r2,0(r2)
 1003520:	10800417 	ldw	r2,16(r2)
 1003524:	10000626 	beq	r2,zero,1003540 <close+0x6c>
 1003528:	e0bffd17 	ldw	r2,-12(fp)
 100352c:	10800017 	ldw	r2,0(r2)
 1003530:	10800417 	ldw	r2,16(r2)
 1003534:	e13ffd17 	ldw	r4,-12(fp)
 1003538:	103ee83a 	callr	r2
 100353c:	00000106 	br	1003544 <close+0x70>
 1003540:	0005883a 	mov	r2,zero
 1003544:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1003548:	e13fff17 	ldw	r4,-4(fp)
 100354c:	1003b940 	call	1003b94 <alt_release_fd>
    if (rval < 0)
 1003550:	e0bffe17 	ldw	r2,-8(fp)
 1003554:	1000070e 	bge	r2,zero,1003574 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 1003558:	10034980 	call	1003498 <alt_get_errno>
 100355c:	1007883a 	mov	r3,r2
 1003560:	e0bffe17 	ldw	r2,-8(fp)
 1003564:	0085c83a 	sub	r2,zero,r2
 1003568:	18800015 	stw	r2,0(r3)
      return -1;
 100356c:	00bfffc4 	movi	r2,-1
 1003570:	00000706 	br	1003590 <close+0xbc>
    }
    return 0;
 1003574:	0005883a 	mov	r2,zero
 1003578:	00000506 	br	1003590 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100357c:	10034980 	call	1003498 <alt_get_errno>
 1003580:	1007883a 	mov	r3,r2
 1003584:	00801444 	movi	r2,81
 1003588:	18800015 	stw	r2,0(r3)
    return -1;
 100358c:	00bfffc4 	movi	r2,-1
  }
}
 1003590:	e037883a 	mov	sp,fp
 1003594:	dfc00117 	ldw	ra,4(sp)
 1003598:	df000017 	ldw	fp,0(sp)
 100359c:	dec00204 	addi	sp,sp,8
 10035a0:	f800283a 	ret

010035a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 10035a4:	defffc04 	addi	sp,sp,-16
 10035a8:	df000315 	stw	fp,12(sp)
 10035ac:	df000304 	addi	fp,sp,12
 10035b0:	e13ffd15 	stw	r4,-12(fp)
 10035b4:	e17ffe15 	stw	r5,-8(fp)
 10035b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 10035bc:	e0bfff17 	ldw	r2,-4(fp)
}
 10035c0:	e037883a 	mov	sp,fp
 10035c4:	df000017 	ldw	fp,0(sp)
 10035c8:	dec00104 	addi	sp,sp,4
 10035cc:	f800283a 	ret

010035d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10035d0:	defffe04 	addi	sp,sp,-8
 10035d4:	dfc00115 	stw	ra,4(sp)
 10035d8:	df000015 	stw	fp,0(sp)
 10035dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10035e0:	d0a00f17 	ldw	r2,-32708(gp)
 10035e4:	10000326 	beq	r2,zero,10035f4 <alt_get_errno+0x24>
 10035e8:	d0a00f17 	ldw	r2,-32708(gp)
 10035ec:	103ee83a 	callr	r2
 10035f0:	00000106 	br	10035f8 <alt_get_errno+0x28>
 10035f4:	d0a6b804 	addi	r2,gp,-25888
}
 10035f8:	e037883a 	mov	sp,fp
 10035fc:	dfc00117 	ldw	ra,4(sp)
 1003600:	df000017 	ldw	fp,0(sp)
 1003604:	dec00204 	addi	sp,sp,8
 1003608:	f800283a 	ret

0100360c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100360c:	defffb04 	addi	sp,sp,-20
 1003610:	dfc00415 	stw	ra,16(sp)
 1003614:	df000315 	stw	fp,12(sp)
 1003618:	df000304 	addi	fp,sp,12
 100361c:	e13ffe15 	stw	r4,-8(fp)
 1003620:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003624:	e0bffe17 	ldw	r2,-8(fp)
 1003628:	10000616 	blt	r2,zero,1003644 <fstat+0x38>
 100362c:	e0bffe17 	ldw	r2,-8(fp)
 1003630:	10c00324 	muli	r3,r2,12
 1003634:	008041f4 	movhi	r2,263
 1003638:	109b9f04 	addi	r2,r2,28284
 100363c:	1885883a 	add	r2,r3,r2
 1003640:	00000106 	br	1003648 <fstat+0x3c>
 1003644:	0005883a 	mov	r2,zero
 1003648:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 100364c:	e0bffd17 	ldw	r2,-12(fp)
 1003650:	10001026 	beq	r2,zero,1003694 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1003654:	e0bffd17 	ldw	r2,-12(fp)
 1003658:	10800017 	ldw	r2,0(r2)
 100365c:	10800817 	ldw	r2,32(r2)
 1003660:	10000726 	beq	r2,zero,1003680 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 1003664:	e0bffd17 	ldw	r2,-12(fp)
 1003668:	10800017 	ldw	r2,0(r2)
 100366c:	10800817 	ldw	r2,32(r2)
 1003670:	e17fff17 	ldw	r5,-4(fp)
 1003674:	e13ffd17 	ldw	r4,-12(fp)
 1003678:	103ee83a 	callr	r2
 100367c:	00000a06 	br	10036a8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1003680:	e0bfff17 	ldw	r2,-4(fp)
 1003684:	00c80004 	movi	r3,8192
 1003688:	10c00115 	stw	r3,4(r2)
      return 0;
 100368c:	0005883a 	mov	r2,zero
 1003690:	00000506 	br	10036a8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1003694:	10035d00 	call	10035d0 <alt_get_errno>
 1003698:	1007883a 	mov	r3,r2
 100369c:	00801444 	movi	r2,81
 10036a0:	18800015 	stw	r2,0(r3)
    return -1;
 10036a4:	00bfffc4 	movi	r2,-1
  }
}
 10036a8:	e037883a 	mov	sp,fp
 10036ac:	dfc00117 	ldw	ra,4(sp)
 10036b0:	df000017 	ldw	fp,0(sp)
 10036b4:	dec00204 	addi	sp,sp,8
 10036b8:	f800283a 	ret

010036bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10036bc:	defffe04 	addi	sp,sp,-8
 10036c0:	dfc00115 	stw	ra,4(sp)
 10036c4:	df000015 	stw	fp,0(sp)
 10036c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10036cc:	d0a00f17 	ldw	r2,-32708(gp)
 10036d0:	10000326 	beq	r2,zero,10036e0 <alt_get_errno+0x24>
 10036d4:	d0a00f17 	ldw	r2,-32708(gp)
 10036d8:	103ee83a 	callr	r2
 10036dc:	00000106 	br	10036e4 <alt_get_errno+0x28>
 10036e0:	d0a6b804 	addi	r2,gp,-25888
}
 10036e4:	e037883a 	mov	sp,fp
 10036e8:	dfc00117 	ldw	ra,4(sp)
 10036ec:	df000017 	ldw	fp,0(sp)
 10036f0:	dec00204 	addi	sp,sp,8
 10036f4:	f800283a 	ret

010036f8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 10036f8:	deffed04 	addi	sp,sp,-76
 10036fc:	dfc01215 	stw	ra,72(sp)
 1003700:	df001115 	stw	fp,68(sp)
 1003704:	df001104 	addi	fp,sp,68
 1003708:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100370c:	e0bfff17 	ldw	r2,-4(fp)
 1003710:	10000616 	blt	r2,zero,100372c <isatty+0x34>
 1003714:	e0bfff17 	ldw	r2,-4(fp)
 1003718:	10c00324 	muli	r3,r2,12
 100371c:	008041f4 	movhi	r2,263
 1003720:	109b9f04 	addi	r2,r2,28284
 1003724:	1885883a 	add	r2,r3,r2
 1003728:	00000106 	br	1003730 <isatty+0x38>
 100372c:	0005883a 	mov	r2,zero
 1003730:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 1003734:	e0bfef17 	ldw	r2,-68(fp)
 1003738:	10000e26 	beq	r2,zero,1003774 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100373c:	e0bfef17 	ldw	r2,-68(fp)
 1003740:	10800017 	ldw	r2,0(r2)
 1003744:	10800817 	ldw	r2,32(r2)
 1003748:	1000021e 	bne	r2,zero,1003754 <isatty+0x5c>
    {
      return 1;
 100374c:	00800044 	movi	r2,1
 1003750:	00000d06 	br	1003788 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1003754:	e0bff004 	addi	r2,fp,-64
 1003758:	100b883a 	mov	r5,r2
 100375c:	e13fff17 	ldw	r4,-4(fp)
 1003760:	100360c0 	call	100360c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1003764:	e0bff117 	ldw	r2,-60(fp)
 1003768:	10880020 	cmpeqi	r2,r2,8192
 100376c:	10803fcc 	andi	r2,r2,255
 1003770:	00000506 	br	1003788 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1003774:	10036bc0 	call	10036bc <alt_get_errno>
 1003778:	1007883a 	mov	r3,r2
 100377c:	00801444 	movi	r2,81
 1003780:	18800015 	stw	r2,0(r3)
    return 0;
 1003784:	0005883a 	mov	r2,zero
  }
}
 1003788:	e037883a 	mov	sp,fp
 100378c:	dfc00117 	ldw	ra,4(sp)
 1003790:	df000017 	ldw	fp,0(sp)
 1003794:	dec00204 	addi	sp,sp,8
 1003798:	f800283a 	ret

0100379c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100379c:	defffc04 	addi	sp,sp,-16
 10037a0:	df000315 	stw	fp,12(sp)
 10037a4:	df000304 	addi	fp,sp,12
 10037a8:	e13ffd15 	stw	r4,-12(fp)
 10037ac:	e17ffe15 	stw	r5,-8(fp)
 10037b0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 10037b4:	e0fffe17 	ldw	r3,-8(fp)
 10037b8:	e0bffd17 	ldw	r2,-12(fp)
 10037bc:	18800c26 	beq	r3,r2,10037f0 <alt_load_section+0x54>
  {
    while( to != end )
 10037c0:	00000806 	br	10037e4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 10037c4:	e0bffe17 	ldw	r2,-8(fp)
 10037c8:	10c00104 	addi	r3,r2,4
 10037cc:	e0fffe15 	stw	r3,-8(fp)
 10037d0:	e0fffd17 	ldw	r3,-12(fp)
 10037d4:	19000104 	addi	r4,r3,4
 10037d8:	e13ffd15 	stw	r4,-12(fp)
 10037dc:	18c00017 	ldw	r3,0(r3)
 10037e0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 10037e4:	e0fffe17 	ldw	r3,-8(fp)
 10037e8:	e0bfff17 	ldw	r2,-4(fp)
 10037ec:	18bff51e 	bne	r3,r2,10037c4 <__alt_mem_TCDM+0xfefe27c4>
    {
      *to++ = *from++;
    }
  }
}
 10037f0:	0001883a 	nop
 10037f4:	e037883a 	mov	sp,fp
 10037f8:	df000017 	ldw	fp,0(sp)
 10037fc:	dec00104 	addi	sp,sp,4
 1003800:	f800283a 	ret

01003804 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1003804:	defffe04 	addi	sp,sp,-8
 1003808:	dfc00115 	stw	ra,4(sp)
 100380c:	df000015 	stw	fp,0(sp)
 1003810:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1003814:	01804234 	movhi	r6,264
 1003818:	31a02b04 	addi	r6,r6,-32596
 100381c:	014041f4 	movhi	r5,263
 1003820:	29598a04 	addi	r5,r5,26152
 1003824:	01004234 	movhi	r4,264
 1003828:	21202b04 	addi	r4,r4,-32596
 100382c:	100379c0 	call	100379c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1003830:	018080b4 	movhi	r6,514
 1003834:	31809104 	addi	r6,r6,580
 1003838:	014080b4 	movhi	r5,514
 100383c:	29400804 	addi	r5,r5,32
 1003840:	01004034 	movhi	r4,256
 1003844:	21000804 	addi	r4,r4,32
 1003848:	100379c0 	call	100379c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100384c:	018041f4 	movhi	r6,263
 1003850:	31998a04 	addi	r6,r6,26152
 1003854:	01404034 	movhi	r5,256
 1003858:	29577804 	addi	r5,r5,24032
 100385c:	01004034 	movhi	r4,256
 1003860:	21177804 	addi	r4,r4,24032
 1003864:	100379c0 	call	100379c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1003868:	1004ccc0 	call	1004ccc <alt_dcache_flush_all>
  alt_icache_flush_all();
 100386c:	1004eb40 	call	1004eb4 <alt_icache_flush_all>
}
 1003870:	0001883a 	nop
 1003874:	e037883a 	mov	sp,fp
 1003878:	dfc00117 	ldw	ra,4(sp)
 100387c:	df000017 	ldw	fp,0(sp)
 1003880:	dec00204 	addi	sp,sp,8
 1003884:	f800283a 	ret

01003888 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003888:	defffe04 	addi	sp,sp,-8
 100388c:	dfc00115 	stw	ra,4(sp)
 1003890:	df000015 	stw	fp,0(sp)
 1003894:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1003898:	d0a00f17 	ldw	r2,-32708(gp)
 100389c:	10000326 	beq	r2,zero,10038ac <alt_get_errno+0x24>
 10038a0:	d0a00f17 	ldw	r2,-32708(gp)
 10038a4:	103ee83a 	callr	r2
 10038a8:	00000106 	br	10038b0 <alt_get_errno+0x28>
 10038ac:	d0a6b804 	addi	r2,gp,-25888
}
 10038b0:	e037883a 	mov	sp,fp
 10038b4:	dfc00117 	ldw	ra,4(sp)
 10038b8:	df000017 	ldw	fp,0(sp)
 10038bc:	dec00204 	addi	sp,sp,8
 10038c0:	f800283a 	ret

010038c4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 10038c4:	defff904 	addi	sp,sp,-28
 10038c8:	dfc00615 	stw	ra,24(sp)
 10038cc:	df000515 	stw	fp,20(sp)
 10038d0:	df000504 	addi	fp,sp,20
 10038d4:	e13ffd15 	stw	r4,-12(fp)
 10038d8:	e17ffe15 	stw	r5,-8(fp)
 10038dc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 10038e0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10038e4:	e0bffd17 	ldw	r2,-12(fp)
 10038e8:	10000616 	blt	r2,zero,1003904 <lseek+0x40>
 10038ec:	e0bffd17 	ldw	r2,-12(fp)
 10038f0:	10c00324 	muli	r3,r2,12
 10038f4:	008041f4 	movhi	r2,263
 10038f8:	109b9f04 	addi	r2,r2,28284
 10038fc:	1885883a 	add	r2,r3,r2
 1003900:	00000106 	br	1003908 <lseek+0x44>
 1003904:	0005883a 	mov	r2,zero
 1003908:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 100390c:	e0bffc17 	ldw	r2,-16(fp)
 1003910:	10001026 	beq	r2,zero,1003954 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1003914:	e0bffc17 	ldw	r2,-16(fp)
 1003918:	10800017 	ldw	r2,0(r2)
 100391c:	10800717 	ldw	r2,28(r2)
 1003920:	10000926 	beq	r2,zero,1003948 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1003924:	e0bffc17 	ldw	r2,-16(fp)
 1003928:	10800017 	ldw	r2,0(r2)
 100392c:	10800717 	ldw	r2,28(r2)
 1003930:	e1bfff17 	ldw	r6,-4(fp)
 1003934:	e17ffe17 	ldw	r5,-8(fp)
 1003938:	e13ffc17 	ldw	r4,-16(fp)
 100393c:	103ee83a 	callr	r2
 1003940:	e0bffb15 	stw	r2,-20(fp)
 1003944:	00000506 	br	100395c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1003948:	00bfde84 	movi	r2,-134
 100394c:	e0bffb15 	stw	r2,-20(fp)
 1003950:	00000206 	br	100395c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 1003954:	00bfebc4 	movi	r2,-81
 1003958:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 100395c:	e0bffb17 	ldw	r2,-20(fp)
 1003960:	1000070e 	bge	r2,zero,1003980 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 1003964:	10038880 	call	1003888 <alt_get_errno>
 1003968:	1007883a 	mov	r3,r2
 100396c:	e0bffb17 	ldw	r2,-20(fp)
 1003970:	0085c83a 	sub	r2,zero,r2
 1003974:	18800015 	stw	r2,0(r3)
    rc = -1;
 1003978:	00bfffc4 	movi	r2,-1
 100397c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 1003980:	e0bffb17 	ldw	r2,-20(fp)
}
 1003984:	e037883a 	mov	sp,fp
 1003988:	dfc00117 	ldw	ra,4(sp)
 100398c:	df000017 	ldw	fp,0(sp)
 1003990:	dec00204 	addi	sp,sp,8
 1003994:	f800283a 	ret

01003998 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1003998:	defffd04 	addi	sp,sp,-12
 100399c:	dfc00215 	stw	ra,8(sp)
 10039a0:	df000115 	stw	fp,4(sp)
 10039a4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 10039a8:	0009883a 	mov	r4,zero
 10039ac:	1003e400 	call	1003e40 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 10039b0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 10039b4:	1003e780 	call	1003e78 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 10039b8:	018041f4 	movhi	r6,263
 10039bc:	31998204 	addi	r6,r6,26120
 10039c0:	014041f4 	movhi	r5,263
 10039c4:	29598204 	addi	r5,r5,26120
 10039c8:	010041f4 	movhi	r4,263
 10039cc:	21198204 	addi	r4,r4,26120
 10039d0:	100524c0 	call	100524c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 10039d4:	1004df40 	call	1004df4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 10039d8:	01004034 	movhi	r4,256
 10039dc:	21139504 	addi	r4,r4,20052
 10039e0:	1005a4c0 	call	1005a4c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 10039e4:	d0a6b917 	ldw	r2,-25884(gp)
 10039e8:	d0e6ba17 	ldw	r3,-25880(gp)
 10039ec:	d126bb17 	ldw	r4,-25876(gp)
 10039f0:	200d883a 	mov	r6,r4
 10039f4:	180b883a 	mov	r5,r3
 10039f8:	1009883a 	mov	r4,r2
 10039fc:	10002900 	call	1000290 <main>
 1003a00:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1003a04:	01000044 	movi	r4,1
 1003a08:	10034d40 	call	10034d4 <close>
  exit (result);
 1003a0c:	e13fff17 	ldw	r4,-4(fp)
 1003a10:	1005a600 	call	1005a60 <exit>

01003a14 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1003a14:	defffe04 	addi	sp,sp,-8
 1003a18:	df000115 	stw	fp,4(sp)
 1003a1c:	df000104 	addi	fp,sp,4
 1003a20:	e13fff15 	stw	r4,-4(fp)
}
 1003a24:	0001883a 	nop
 1003a28:	e037883a 	mov	sp,fp
 1003a2c:	df000017 	ldw	fp,0(sp)
 1003a30:	dec00104 	addi	sp,sp,4
 1003a34:	f800283a 	ret

01003a38 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1003a38:	defffe04 	addi	sp,sp,-8
 1003a3c:	df000115 	stw	fp,4(sp)
 1003a40:	df000104 	addi	fp,sp,4
 1003a44:	e13fff15 	stw	r4,-4(fp)
}
 1003a48:	0001883a 	nop
 1003a4c:	e037883a 	mov	sp,fp
 1003a50:	df000017 	ldw	fp,0(sp)
 1003a54:	dec00104 	addi	sp,sp,4
 1003a58:	f800283a 	ret

01003a5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003a5c:	defffe04 	addi	sp,sp,-8
 1003a60:	dfc00115 	stw	ra,4(sp)
 1003a64:	df000015 	stw	fp,0(sp)
 1003a68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1003a6c:	d0a00f17 	ldw	r2,-32708(gp)
 1003a70:	10000326 	beq	r2,zero,1003a80 <alt_get_errno+0x24>
 1003a74:	d0a00f17 	ldw	r2,-32708(gp)
 1003a78:	103ee83a 	callr	r2
 1003a7c:	00000106 	br	1003a84 <alt_get_errno+0x28>
 1003a80:	d0a6b804 	addi	r2,gp,-25888
}
 1003a84:	e037883a 	mov	sp,fp
 1003a88:	dfc00117 	ldw	ra,4(sp)
 1003a8c:	df000017 	ldw	fp,0(sp)
 1003a90:	dec00204 	addi	sp,sp,8
 1003a94:	f800283a 	ret

01003a98 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1003a98:	defff904 	addi	sp,sp,-28
 1003a9c:	dfc00615 	stw	ra,24(sp)
 1003aa0:	df000515 	stw	fp,20(sp)
 1003aa4:	df000504 	addi	fp,sp,20
 1003aa8:	e13ffd15 	stw	r4,-12(fp)
 1003aac:	e17ffe15 	stw	r5,-8(fp)
 1003ab0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003ab4:	e0bffd17 	ldw	r2,-12(fp)
 1003ab8:	10000616 	blt	r2,zero,1003ad4 <read+0x3c>
 1003abc:	e0bffd17 	ldw	r2,-12(fp)
 1003ac0:	10c00324 	muli	r3,r2,12
 1003ac4:	008041f4 	movhi	r2,263
 1003ac8:	109b9f04 	addi	r2,r2,28284
 1003acc:	1885883a 	add	r2,r3,r2
 1003ad0:	00000106 	br	1003ad8 <read+0x40>
 1003ad4:	0005883a 	mov	r2,zero
 1003ad8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1003adc:	e0bffb17 	ldw	r2,-20(fp)
 1003ae0:	10002226 	beq	r2,zero,1003b6c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1003ae4:	e0bffb17 	ldw	r2,-20(fp)
 1003ae8:	10800217 	ldw	r2,8(r2)
 1003aec:	108000cc 	andi	r2,r2,3
 1003af0:	10800060 	cmpeqi	r2,r2,1
 1003af4:	1000181e 	bne	r2,zero,1003b58 <read+0xc0>
        (fd->dev->read))
 1003af8:	e0bffb17 	ldw	r2,-20(fp)
 1003afc:	10800017 	ldw	r2,0(r2)
 1003b00:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1003b04:	10001426 	beq	r2,zero,1003b58 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1003b08:	e0bffb17 	ldw	r2,-20(fp)
 1003b0c:	10800017 	ldw	r2,0(r2)
 1003b10:	10800517 	ldw	r2,20(r2)
 1003b14:	e0ffff17 	ldw	r3,-4(fp)
 1003b18:	180d883a 	mov	r6,r3
 1003b1c:	e17ffe17 	ldw	r5,-8(fp)
 1003b20:	e13ffb17 	ldw	r4,-20(fp)
 1003b24:	103ee83a 	callr	r2
 1003b28:	e0bffc15 	stw	r2,-16(fp)
 1003b2c:	e0bffc17 	ldw	r2,-16(fp)
 1003b30:	1000070e 	bge	r2,zero,1003b50 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 1003b34:	1003a5c0 	call	1003a5c <alt_get_errno>
 1003b38:	1007883a 	mov	r3,r2
 1003b3c:	e0bffc17 	ldw	r2,-16(fp)
 1003b40:	0085c83a 	sub	r2,zero,r2
 1003b44:	18800015 	stw	r2,0(r3)
          return -1;
 1003b48:	00bfffc4 	movi	r2,-1
 1003b4c:	00000c06 	br	1003b80 <read+0xe8>
        }
        return rval;
 1003b50:	e0bffc17 	ldw	r2,-16(fp)
 1003b54:	00000a06 	br	1003b80 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1003b58:	1003a5c0 	call	1003a5c <alt_get_errno>
 1003b5c:	1007883a 	mov	r3,r2
 1003b60:	00800344 	movi	r2,13
 1003b64:	18800015 	stw	r2,0(r3)
 1003b68:	00000406 	br	1003b7c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1003b6c:	1003a5c0 	call	1003a5c <alt_get_errno>
 1003b70:	1007883a 	mov	r3,r2
 1003b74:	00801444 	movi	r2,81
 1003b78:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1003b7c:	00bfffc4 	movi	r2,-1
}
 1003b80:	e037883a 	mov	sp,fp
 1003b84:	dfc00117 	ldw	ra,4(sp)
 1003b88:	df000017 	ldw	fp,0(sp)
 1003b8c:	dec00204 	addi	sp,sp,8
 1003b90:	f800283a 	ret

01003b94 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1003b94:	defffe04 	addi	sp,sp,-8
 1003b98:	df000115 	stw	fp,4(sp)
 1003b9c:	df000104 	addi	fp,sp,4
 1003ba0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1003ba4:	e0bfff17 	ldw	r2,-4(fp)
 1003ba8:	108000d0 	cmplti	r2,r2,3
 1003bac:	10000d1e 	bne	r2,zero,1003be4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1003bb0:	008041f4 	movhi	r2,263
 1003bb4:	109b9f04 	addi	r2,r2,28284
 1003bb8:	e0ffff17 	ldw	r3,-4(fp)
 1003bbc:	18c00324 	muli	r3,r3,12
 1003bc0:	10c5883a 	add	r2,r2,r3
 1003bc4:	10800204 	addi	r2,r2,8
 1003bc8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1003bcc:	008041f4 	movhi	r2,263
 1003bd0:	109b9f04 	addi	r2,r2,28284
 1003bd4:	e0ffff17 	ldw	r3,-4(fp)
 1003bd8:	18c00324 	muli	r3,r3,12
 1003bdc:	10c5883a 	add	r2,r2,r3
 1003be0:	10000015 	stw	zero,0(r2)
  }
}
 1003be4:	0001883a 	nop
 1003be8:	e037883a 	mov	sp,fp
 1003bec:	df000017 	ldw	fp,0(sp)
 1003bf0:	dec00104 	addi	sp,sp,4
 1003bf4:	f800283a 	ret

01003bf8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1003bf8:	defff904 	addi	sp,sp,-28
 1003bfc:	df000615 	stw	fp,24(sp)
 1003c00:	df000604 	addi	fp,sp,24
 1003c04:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1003c08:	0005303a 	rdctl	r2,status
 1003c0c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003c10:	e0fffe17 	ldw	r3,-8(fp)
 1003c14:	00bfff84 	movi	r2,-2
 1003c18:	1884703a 	and	r2,r3,r2
 1003c1c:	1001703a 	wrctl	status,r2
  
  return context;
 1003c20:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1003c24:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1003c28:	d0a01017 	ldw	r2,-32704(gp)
 1003c2c:	10c000c4 	addi	r3,r2,3
 1003c30:	00bfff04 	movi	r2,-4
 1003c34:	1884703a 	and	r2,r3,r2
 1003c38:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1003c3c:	d0e01017 	ldw	r3,-32704(gp)
 1003c40:	e0bfff17 	ldw	r2,-4(fp)
 1003c44:	1887883a 	add	r3,r3,r2
 1003c48:	00808034 	movhi	r2,512
 1003c4c:	10800004 	addi	r2,r2,0
 1003c50:	10c0062e 	bgeu	r2,r3,1003c6c <sbrk+0x74>
 1003c54:	e0bffb17 	ldw	r2,-20(fp)
 1003c58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1003c5c:	e0bffa17 	ldw	r2,-24(fp)
 1003c60:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1003c64:	00bfffc4 	movi	r2,-1
 1003c68:	00000b06 	br	1003c98 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 1003c6c:	d0a01017 	ldw	r2,-32704(gp)
 1003c70:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 1003c74:	d0e01017 	ldw	r3,-32704(gp)
 1003c78:	e0bfff17 	ldw	r2,-4(fp)
 1003c7c:	1885883a 	add	r2,r3,r2
 1003c80:	d0a01015 	stw	r2,-32704(gp)
 1003c84:	e0bffb17 	ldw	r2,-20(fp)
 1003c88:	e0bffc15 	stw	r2,-16(fp)
 1003c8c:	e0bffc17 	ldw	r2,-16(fp)
 1003c90:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1003c94:	e0bffd17 	ldw	r2,-12(fp)
} 
 1003c98:	e037883a 	mov	sp,fp
 1003c9c:	df000017 	ldw	fp,0(sp)
 1003ca0:	dec00104 	addi	sp,sp,4
 1003ca4:	f800283a 	ret

01003ca8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 1003ca8:	defffd04 	addi	sp,sp,-12
 1003cac:	dfc00215 	stw	ra,8(sp)
 1003cb0:	df000115 	stw	fp,4(sp)
 1003cb4:	df000104 	addi	fp,sp,4
 1003cb8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 1003cbc:	e13fff17 	ldw	r4,-4(fp)
 1003cc0:	1004b740 	call	1004b74 <alt_busy_sleep>
}
 1003cc4:	e037883a 	mov	sp,fp
 1003cc8:	dfc00117 	ldw	ra,4(sp)
 1003ccc:	df000017 	ldw	fp,0(sp)
 1003cd0:	dec00204 	addi	sp,sp,8
 1003cd4:	f800283a 	ret

01003cd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003cd8:	defffe04 	addi	sp,sp,-8
 1003cdc:	dfc00115 	stw	ra,4(sp)
 1003ce0:	df000015 	stw	fp,0(sp)
 1003ce4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1003ce8:	d0a00f17 	ldw	r2,-32708(gp)
 1003cec:	10000326 	beq	r2,zero,1003cfc <alt_get_errno+0x24>
 1003cf0:	d0a00f17 	ldw	r2,-32708(gp)
 1003cf4:	103ee83a 	callr	r2
 1003cf8:	00000106 	br	1003d00 <alt_get_errno+0x28>
 1003cfc:	d0a6b804 	addi	r2,gp,-25888
}
 1003d00:	e037883a 	mov	sp,fp
 1003d04:	dfc00117 	ldw	ra,4(sp)
 1003d08:	df000017 	ldw	fp,0(sp)
 1003d0c:	dec00204 	addi	sp,sp,8
 1003d10:	f800283a 	ret

01003d14 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1003d14:	defff904 	addi	sp,sp,-28
 1003d18:	dfc00615 	stw	ra,24(sp)
 1003d1c:	df000515 	stw	fp,20(sp)
 1003d20:	df000504 	addi	fp,sp,20
 1003d24:	e13ffd15 	stw	r4,-12(fp)
 1003d28:	e17ffe15 	stw	r5,-8(fp)
 1003d2c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003d30:	e0bffd17 	ldw	r2,-12(fp)
 1003d34:	10000616 	blt	r2,zero,1003d50 <write+0x3c>
 1003d38:	e0bffd17 	ldw	r2,-12(fp)
 1003d3c:	10c00324 	muli	r3,r2,12
 1003d40:	008041f4 	movhi	r2,263
 1003d44:	109b9f04 	addi	r2,r2,28284
 1003d48:	1885883a 	add	r2,r3,r2
 1003d4c:	00000106 	br	1003d54 <write+0x40>
 1003d50:	0005883a 	mov	r2,zero
 1003d54:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1003d58:	e0bffb17 	ldw	r2,-20(fp)
 1003d5c:	10002126 	beq	r2,zero,1003de4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1003d60:	e0bffb17 	ldw	r2,-20(fp)
 1003d64:	10800217 	ldw	r2,8(r2)
 1003d68:	108000cc 	andi	r2,r2,3
 1003d6c:	10001826 	beq	r2,zero,1003dd0 <write+0xbc>
 1003d70:	e0bffb17 	ldw	r2,-20(fp)
 1003d74:	10800017 	ldw	r2,0(r2)
 1003d78:	10800617 	ldw	r2,24(r2)
 1003d7c:	10001426 	beq	r2,zero,1003dd0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1003d80:	e0bffb17 	ldw	r2,-20(fp)
 1003d84:	10800017 	ldw	r2,0(r2)
 1003d88:	10800617 	ldw	r2,24(r2)
 1003d8c:	e0ffff17 	ldw	r3,-4(fp)
 1003d90:	180d883a 	mov	r6,r3
 1003d94:	e17ffe17 	ldw	r5,-8(fp)
 1003d98:	e13ffb17 	ldw	r4,-20(fp)
 1003d9c:	103ee83a 	callr	r2
 1003da0:	e0bffc15 	stw	r2,-16(fp)
 1003da4:	e0bffc17 	ldw	r2,-16(fp)
 1003da8:	1000070e 	bge	r2,zero,1003dc8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 1003dac:	1003cd80 	call	1003cd8 <alt_get_errno>
 1003db0:	1007883a 	mov	r3,r2
 1003db4:	e0bffc17 	ldw	r2,-16(fp)
 1003db8:	0085c83a 	sub	r2,zero,r2
 1003dbc:	18800015 	stw	r2,0(r3)
        return -1;
 1003dc0:	00bfffc4 	movi	r2,-1
 1003dc4:	00000c06 	br	1003df8 <write+0xe4>
      }
      return rval;
 1003dc8:	e0bffc17 	ldw	r2,-16(fp)
 1003dcc:	00000a06 	br	1003df8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1003dd0:	1003cd80 	call	1003cd8 <alt_get_errno>
 1003dd4:	1007883a 	mov	r3,r2
 1003dd8:	00800344 	movi	r2,13
 1003ddc:	18800015 	stw	r2,0(r3)
 1003de0:	00000406 	br	1003df4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1003de4:	1003cd80 	call	1003cd8 <alt_get_errno>
 1003de8:	1007883a 	mov	r3,r2
 1003dec:	00801444 	movi	r2,81
 1003df0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1003df4:	00bfffc4 	movi	r2,-1
}
 1003df8:	e037883a 	mov	sp,fp
 1003dfc:	dfc00117 	ldw	ra,4(sp)
 1003e00:	df000017 	ldw	fp,0(sp)
 1003e04:	dec00204 	addi	sp,sp,8
 1003e08:	f800283a 	ret

01003e0c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1003e0c:	defffd04 	addi	sp,sp,-12
 1003e10:	dfc00215 	stw	ra,8(sp)
 1003e14:	df000115 	stw	fp,4(sp)
 1003e18:	df000104 	addi	fp,sp,4
 1003e1c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1003e20:	d1600c04 	addi	r5,gp,-32720
 1003e24:	e13fff17 	ldw	r4,-4(fp)
 1003e28:	1004d500 	call	1004d50 <alt_dev_llist_insert>
}
 1003e2c:	e037883a 	mov	sp,fp
 1003e30:	dfc00117 	ldw	ra,4(sp)
 1003e34:	df000017 	ldw	fp,0(sp)
 1003e38:	dec00204 	addi	sp,sp,8
 1003e3c:	f800283a 	ret

01003e40 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1003e40:	defffd04 	addi	sp,sp,-12
 1003e44:	dfc00215 	stw	ra,8(sp)
 1003e48:	df000115 	stw	fp,4(sp)
 1003e4c:	df000104 	addi	fp,sp,4
 1003e50:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
 1003e54:	10056c00 	call	10056c0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1003e58:	00800044 	movi	r2,1
 1003e5c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1003e60:	0001883a 	nop
 1003e64:	e037883a 	mov	sp,fp
 1003e68:	dfc00117 	ldw	ra,4(sp)
 1003e6c:	df000017 	ldw	fp,0(sp)
 1003e70:	dec00204 	addi	sp,sp,8
 1003e74:	f800283a 	ret

01003e78 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1003e78:	defffe04 	addi	sp,sp,-8
 1003e7c:	dfc00115 	stw	ra,4(sp)
 1003e80:	df000015 	stw	fp,0(sp)
 1003e84:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 1003e88:	01c01904 	movi	r7,100
 1003e8c:	01800044 	movi	r6,1
 1003e90:	000b883a 	mov	r5,zero
 1003e94:	010080b4 	movhi	r4,514
 1003e98:	210c2004 	addi	r4,r4,12416
 1003e9c:	10049cc0 	call	10049cc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 1003ea0:	000d883a 	mov	r6,zero
 1003ea4:	000b883a 	mov	r5,zero
 1003ea8:	010041f4 	movhi	r4,263
 1003eac:	211c0904 	addi	r4,r4,28708
 1003eb0:	10040500 	call	1004050 <altera_avalon_jtag_uart_init>
 1003eb4:	010041f4 	movhi	r4,263
 1003eb8:	211bff04 	addi	r4,r4,28668
 1003ebc:	1003e0c0 	call	1003e0c <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 1003ec0:	00c00044 	movi	r3,1
 1003ec4:	008080b4 	movhi	r2,514
 1003ec8:	108c0004 	addi	r2,r2,12288
 1003ecc:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 1003ed0:	0001883a 	nop
}
 1003ed4:	0001883a 	nop
 1003ed8:	e037883a 	mov	sp,fp
 1003edc:	dfc00117 	ldw	ra,4(sp)
 1003ee0:	df000017 	ldw	fp,0(sp)
 1003ee4:	dec00204 	addi	sp,sp,8
 1003ee8:	f800283a 	ret

01003eec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1003eec:	defffa04 	addi	sp,sp,-24
 1003ef0:	dfc00515 	stw	ra,20(sp)
 1003ef4:	df000415 	stw	fp,16(sp)
 1003ef8:	df000404 	addi	fp,sp,16
 1003efc:	e13ffd15 	stw	r4,-12(fp)
 1003f00:	e17ffe15 	stw	r5,-8(fp)
 1003f04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003f08:	e0bffd17 	ldw	r2,-12(fp)
 1003f0c:	10800017 	ldw	r2,0(r2)
 1003f10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1003f14:	e0bffc17 	ldw	r2,-16(fp)
 1003f18:	10c00a04 	addi	r3,r2,40
 1003f1c:	e0bffd17 	ldw	r2,-12(fp)
 1003f20:	10800217 	ldw	r2,8(r2)
 1003f24:	100f883a 	mov	r7,r2
 1003f28:	e1bfff17 	ldw	r6,-4(fp)
 1003f2c:	e17ffe17 	ldw	r5,-8(fp)
 1003f30:	1809883a 	mov	r4,r3
 1003f34:	10045140 	call	1004514 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1003f38:	e037883a 	mov	sp,fp
 1003f3c:	dfc00117 	ldw	ra,4(sp)
 1003f40:	df000017 	ldw	fp,0(sp)
 1003f44:	dec00204 	addi	sp,sp,8
 1003f48:	f800283a 	ret

01003f4c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1003f4c:	defffa04 	addi	sp,sp,-24
 1003f50:	dfc00515 	stw	ra,20(sp)
 1003f54:	df000415 	stw	fp,16(sp)
 1003f58:	df000404 	addi	fp,sp,16
 1003f5c:	e13ffd15 	stw	r4,-12(fp)
 1003f60:	e17ffe15 	stw	r5,-8(fp)
 1003f64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003f68:	e0bffd17 	ldw	r2,-12(fp)
 1003f6c:	10800017 	ldw	r2,0(r2)
 1003f70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1003f74:	e0bffc17 	ldw	r2,-16(fp)
 1003f78:	10c00a04 	addi	r3,r2,40
 1003f7c:	e0bffd17 	ldw	r2,-12(fp)
 1003f80:	10800217 	ldw	r2,8(r2)
 1003f84:	100f883a 	mov	r7,r2
 1003f88:	e1bfff17 	ldw	r6,-4(fp)
 1003f8c:	e17ffe17 	ldw	r5,-8(fp)
 1003f90:	1809883a 	mov	r4,r3
 1003f94:	10047300 	call	1004730 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1003f98:	e037883a 	mov	sp,fp
 1003f9c:	dfc00117 	ldw	ra,4(sp)
 1003fa0:	df000017 	ldw	fp,0(sp)
 1003fa4:	dec00204 	addi	sp,sp,8
 1003fa8:	f800283a 	ret

01003fac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1003fac:	defffc04 	addi	sp,sp,-16
 1003fb0:	dfc00315 	stw	ra,12(sp)
 1003fb4:	df000215 	stw	fp,8(sp)
 1003fb8:	df000204 	addi	fp,sp,8
 1003fbc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003fc0:	e0bfff17 	ldw	r2,-4(fp)
 1003fc4:	10800017 	ldw	r2,0(r2)
 1003fc8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1003fcc:	e0bffe17 	ldw	r2,-8(fp)
 1003fd0:	10c00a04 	addi	r3,r2,40
 1003fd4:	e0bfff17 	ldw	r2,-4(fp)
 1003fd8:	10800217 	ldw	r2,8(r2)
 1003fdc:	100b883a 	mov	r5,r2
 1003fe0:	1809883a 	mov	r4,r3
 1003fe4:	10043bc0 	call	10043bc <altera_avalon_jtag_uart_close>
}
 1003fe8:	e037883a 	mov	sp,fp
 1003fec:	dfc00117 	ldw	ra,4(sp)
 1003ff0:	df000017 	ldw	fp,0(sp)
 1003ff4:	dec00204 	addi	sp,sp,8
 1003ff8:	f800283a 	ret

01003ffc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1003ffc:	defffa04 	addi	sp,sp,-24
 1004000:	dfc00515 	stw	ra,20(sp)
 1004004:	df000415 	stw	fp,16(sp)
 1004008:	df000404 	addi	fp,sp,16
 100400c:	e13ffd15 	stw	r4,-12(fp)
 1004010:	e17ffe15 	stw	r5,-8(fp)
 1004014:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1004018:	e0bffd17 	ldw	r2,-12(fp)
 100401c:	10800017 	ldw	r2,0(r2)
 1004020:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1004024:	e0bffc17 	ldw	r2,-16(fp)
 1004028:	10800a04 	addi	r2,r2,40
 100402c:	e1bfff17 	ldw	r6,-4(fp)
 1004030:	e17ffe17 	ldw	r5,-8(fp)
 1004034:	1009883a 	mov	r4,r2
 1004038:	10044240 	call	1004424 <altera_avalon_jtag_uart_ioctl>
}
 100403c:	e037883a 	mov	sp,fp
 1004040:	dfc00117 	ldw	ra,4(sp)
 1004044:	df000017 	ldw	fp,0(sp)
 1004048:	dec00204 	addi	sp,sp,8
 100404c:	f800283a 	ret

01004050 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1004050:	defffa04 	addi	sp,sp,-24
 1004054:	dfc00515 	stw	ra,20(sp)
 1004058:	df000415 	stw	fp,16(sp)
 100405c:	df000404 	addi	fp,sp,16
 1004060:	e13ffd15 	stw	r4,-12(fp)
 1004064:	e17ffe15 	stw	r5,-8(fp)
 1004068:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100406c:	e0bffd17 	ldw	r2,-12(fp)
 1004070:	00c00044 	movi	r3,1
 1004074:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1004078:	e0bffd17 	ldw	r2,-12(fp)
 100407c:	10800017 	ldw	r2,0(r2)
 1004080:	10800104 	addi	r2,r2,4
 1004084:	1007883a 	mov	r3,r2
 1004088:	e0bffd17 	ldw	r2,-12(fp)
 100408c:	10800817 	ldw	r2,32(r2)
 1004090:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 1004094:	e0bffe17 	ldw	r2,-8(fp)
 1004098:	e0ffff17 	ldw	r3,-4(fp)
 100409c:	d8000015 	stw	zero,0(sp)
 10040a0:	e1fffd17 	ldw	r7,-12(fp)
 10040a4:	01804034 	movhi	r6,256
 10040a8:	31904404 	addi	r6,r6,16656
 10040ac:	180b883a 	mov	r5,r3
 10040b0:	1009883a 	mov	r4,r2
 10040b4:	1004ee80 	call	1004ee8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 10040b8:	e0bffd17 	ldw	r2,-12(fp)
 10040bc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 10040c0:	e0bffd17 	ldw	r2,-12(fp)
 10040c4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 10040c8:	d0e6bd17 	ldw	r3,-25868(gp)
 10040cc:	e1fffd17 	ldw	r7,-12(fp)
 10040d0:	01804034 	movhi	r6,256
 10040d4:	3190c704 	addi	r6,r6,17180
 10040d8:	180b883a 	mov	r5,r3
 10040dc:	1009883a 	mov	r4,r2
 10040e0:	1004a480 	call	1004a48 <alt_alarm_start>
 10040e4:	1000040e 	bge	r2,zero,10040f8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 10040e8:	e0fffd17 	ldw	r3,-12(fp)
 10040ec:	00a00034 	movhi	r2,32768
 10040f0:	10bfffc4 	addi	r2,r2,-1
 10040f4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 10040f8:	0001883a 	nop
 10040fc:	e037883a 	mov	sp,fp
 1004100:	dfc00117 	ldw	ra,4(sp)
 1004104:	df000017 	ldw	fp,0(sp)
 1004108:	dec00204 	addi	sp,sp,8
 100410c:	f800283a 	ret

01004110 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1004110:	defff804 	addi	sp,sp,-32
 1004114:	df000715 	stw	fp,28(sp)
 1004118:	df000704 	addi	fp,sp,28
 100411c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1004120:	e0bfff17 	ldw	r2,-4(fp)
 1004124:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 1004128:	e0bffb17 	ldw	r2,-20(fp)
 100412c:	10800017 	ldw	r2,0(r2)
 1004130:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1004134:	e0bffc17 	ldw	r2,-16(fp)
 1004138:	10800104 	addi	r2,r2,4
 100413c:	10800037 	ldwio	r2,0(r2)
 1004140:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1004144:	e0bffd17 	ldw	r2,-12(fp)
 1004148:	1080c00c 	andi	r2,r2,768
 100414c:	10006d26 	beq	r2,zero,1004304 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1004150:	e0bffd17 	ldw	r2,-12(fp)
 1004154:	1080400c 	andi	r2,r2,256
 1004158:	10003526 	beq	r2,zero,1004230 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100415c:	00800074 	movhi	r2,1
 1004160:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1004164:	e0bffb17 	ldw	r2,-20(fp)
 1004168:	10800a17 	ldw	r2,40(r2)
 100416c:	10800044 	addi	r2,r2,1
 1004170:	1081ffcc 	andi	r2,r2,2047
 1004174:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 1004178:	e0bffb17 	ldw	r2,-20(fp)
 100417c:	10c00b17 	ldw	r3,44(r2)
 1004180:	e0bffe17 	ldw	r2,-8(fp)
 1004184:	18801526 	beq	r3,r2,10041dc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1004188:	e0bffc17 	ldw	r2,-16(fp)
 100418c:	10800037 	ldwio	r2,0(r2)
 1004190:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1004194:	e0bff917 	ldw	r2,-28(fp)
 1004198:	10a0000c 	andi	r2,r2,32768
 100419c:	10001126 	beq	r2,zero,10041e4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 10041a0:	e0bffb17 	ldw	r2,-20(fp)
 10041a4:	10800a17 	ldw	r2,40(r2)
 10041a8:	e0fff917 	ldw	r3,-28(fp)
 10041ac:	1809883a 	mov	r4,r3
 10041b0:	e0fffb17 	ldw	r3,-20(fp)
 10041b4:	1885883a 	add	r2,r3,r2
 10041b8:	10800e04 	addi	r2,r2,56
 10041bc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10041c0:	e0bffb17 	ldw	r2,-20(fp)
 10041c4:	10800a17 	ldw	r2,40(r2)
 10041c8:	10800044 	addi	r2,r2,1
 10041cc:	10c1ffcc 	andi	r3,r2,2047
 10041d0:	e0bffb17 	ldw	r2,-20(fp)
 10041d4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 10041d8:	003fe206 	br	1004164 <__alt_mem_TCDM+0xfefe3164>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 10041dc:	0001883a 	nop
 10041e0:	00000106 	br	10041e8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 10041e4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 10041e8:	e0bff917 	ldw	r2,-28(fp)
 10041ec:	10bfffec 	andhi	r2,r2,65535
 10041f0:	10000f26 	beq	r2,zero,1004230 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10041f4:	e0bffb17 	ldw	r2,-20(fp)
 10041f8:	10c00817 	ldw	r3,32(r2)
 10041fc:	00bfff84 	movi	r2,-2
 1004200:	1886703a 	and	r3,r3,r2
 1004204:	e0bffb17 	ldw	r2,-20(fp)
 1004208:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100420c:	e0bffc17 	ldw	r2,-16(fp)
 1004210:	10800104 	addi	r2,r2,4
 1004214:	1007883a 	mov	r3,r2
 1004218:	e0bffb17 	ldw	r2,-20(fp)
 100421c:	10800817 	ldw	r2,32(r2)
 1004220:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1004224:	e0bffc17 	ldw	r2,-16(fp)
 1004228:	10800104 	addi	r2,r2,4
 100422c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1004230:	e0bffd17 	ldw	r2,-12(fp)
 1004234:	1080800c 	andi	r2,r2,512
 1004238:	103fbe26 	beq	r2,zero,1004134 <__alt_mem_TCDM+0xfefe3134>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100423c:	e0bffd17 	ldw	r2,-12(fp)
 1004240:	1004d43a 	srli	r2,r2,16
 1004244:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1004248:	00001406 	br	100429c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100424c:	e0bffc17 	ldw	r2,-16(fp)
 1004250:	e0fffb17 	ldw	r3,-20(fp)
 1004254:	18c00d17 	ldw	r3,52(r3)
 1004258:	e13ffb17 	ldw	r4,-20(fp)
 100425c:	20c7883a 	add	r3,r4,r3
 1004260:	18c20e04 	addi	r3,r3,2104
 1004264:	18c00003 	ldbu	r3,0(r3)
 1004268:	18c03fcc 	andi	r3,r3,255
 100426c:	18c0201c 	xori	r3,r3,128
 1004270:	18ffe004 	addi	r3,r3,-128
 1004274:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1004278:	e0bffb17 	ldw	r2,-20(fp)
 100427c:	10800d17 	ldw	r2,52(r2)
 1004280:	10800044 	addi	r2,r2,1
 1004284:	10c1ffcc 	andi	r3,r2,2047
 1004288:	e0bffb17 	ldw	r2,-20(fp)
 100428c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1004290:	e0bffa17 	ldw	r2,-24(fp)
 1004294:	10bfffc4 	addi	r2,r2,-1
 1004298:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100429c:	e0bffa17 	ldw	r2,-24(fp)
 10042a0:	10000526 	beq	r2,zero,10042b8 <altera_avalon_jtag_uart_irq+0x1a8>
 10042a4:	e0bffb17 	ldw	r2,-20(fp)
 10042a8:	10c00d17 	ldw	r3,52(r2)
 10042ac:	e0bffb17 	ldw	r2,-20(fp)
 10042b0:	10800c17 	ldw	r2,48(r2)
 10042b4:	18bfe51e 	bne	r3,r2,100424c <__alt_mem_TCDM+0xfefe324c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 10042b8:	e0bffa17 	ldw	r2,-24(fp)
 10042bc:	103f9d26 	beq	r2,zero,1004134 <__alt_mem_TCDM+0xfefe3134>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10042c0:	e0bffb17 	ldw	r2,-20(fp)
 10042c4:	10c00817 	ldw	r3,32(r2)
 10042c8:	00bfff44 	movi	r2,-3
 10042cc:	1886703a 	and	r3,r3,r2
 10042d0:	e0bffb17 	ldw	r2,-20(fp)
 10042d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10042d8:	e0bffb17 	ldw	r2,-20(fp)
 10042dc:	10800017 	ldw	r2,0(r2)
 10042e0:	10800104 	addi	r2,r2,4
 10042e4:	1007883a 	mov	r3,r2
 10042e8:	e0bffb17 	ldw	r2,-20(fp)
 10042ec:	10800817 	ldw	r2,32(r2)
 10042f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10042f4:	e0bffc17 	ldw	r2,-16(fp)
 10042f8:	10800104 	addi	r2,r2,4
 10042fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1004300:	003f8c06 	br	1004134 <__alt_mem_TCDM+0xfefe3134>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 1004304:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 1004308:	0001883a 	nop
 100430c:	e037883a 	mov	sp,fp
 1004310:	df000017 	ldw	fp,0(sp)
 1004314:	dec00104 	addi	sp,sp,4
 1004318:	f800283a 	ret

0100431c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100431c:	defff804 	addi	sp,sp,-32
 1004320:	df000715 	stw	fp,28(sp)
 1004324:	df000704 	addi	fp,sp,28
 1004328:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100432c:	e0bffb17 	ldw	r2,-20(fp)
 1004330:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1004334:	e0bff917 	ldw	r2,-28(fp)
 1004338:	10800017 	ldw	r2,0(r2)
 100433c:	10800104 	addi	r2,r2,4
 1004340:	10800037 	ldwio	r2,0(r2)
 1004344:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1004348:	e0bffa17 	ldw	r2,-24(fp)
 100434c:	1081000c 	andi	r2,r2,1024
 1004350:	10000b26 	beq	r2,zero,1004380 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1004354:	e0bff917 	ldw	r2,-28(fp)
 1004358:	10800017 	ldw	r2,0(r2)
 100435c:	10800104 	addi	r2,r2,4
 1004360:	1007883a 	mov	r3,r2
 1004364:	e0bff917 	ldw	r2,-28(fp)
 1004368:	10800817 	ldw	r2,32(r2)
 100436c:	10810014 	ori	r2,r2,1024
 1004370:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 1004374:	e0bff917 	ldw	r2,-28(fp)
 1004378:	10000915 	stw	zero,36(r2)
 100437c:	00000a06 	br	10043a8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1004380:	e0bff917 	ldw	r2,-28(fp)
 1004384:	10c00917 	ldw	r3,36(r2)
 1004388:	00a00034 	movhi	r2,32768
 100438c:	10bfff04 	addi	r2,r2,-4
 1004390:	10c00536 	bltu	r2,r3,10043a8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 1004394:	e0bff917 	ldw	r2,-28(fp)
 1004398:	10800917 	ldw	r2,36(r2)
 100439c:	10c00044 	addi	r3,r2,1
 10043a0:	e0bff917 	ldw	r2,-28(fp)
 10043a4:	10c00915 	stw	r3,36(r2)
 10043a8:	d0a6bd17 	ldw	r2,-25868(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 10043ac:	e037883a 	mov	sp,fp
 10043b0:	df000017 	ldw	fp,0(sp)
 10043b4:	dec00104 	addi	sp,sp,4
 10043b8:	f800283a 	ret

010043bc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 10043bc:	defffd04 	addi	sp,sp,-12
 10043c0:	df000215 	stw	fp,8(sp)
 10043c4:	df000204 	addi	fp,sp,8
 10043c8:	e13ffe15 	stw	r4,-8(fp)
 10043cc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10043d0:	00000506 	br	10043e8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 10043d4:	e0bfff17 	ldw	r2,-4(fp)
 10043d8:	1090000c 	andi	r2,r2,16384
 10043dc:	10000226 	beq	r2,zero,10043e8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 10043e0:	00bffd44 	movi	r2,-11
 10043e4:	00000b06 	br	1004414 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10043e8:	e0bffe17 	ldw	r2,-8(fp)
 10043ec:	10c00d17 	ldw	r3,52(r2)
 10043f0:	e0bffe17 	ldw	r2,-8(fp)
 10043f4:	10800c17 	ldw	r2,48(r2)
 10043f8:	18800526 	beq	r3,r2,1004410 <altera_avalon_jtag_uart_close+0x54>
 10043fc:	e0bffe17 	ldw	r2,-8(fp)
 1004400:	10c00917 	ldw	r3,36(r2)
 1004404:	e0bffe17 	ldw	r2,-8(fp)
 1004408:	10800117 	ldw	r2,4(r2)
 100440c:	18bff136 	bltu	r3,r2,10043d4 <__alt_mem_TCDM+0xfefe33d4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1004410:	0005883a 	mov	r2,zero
}
 1004414:	e037883a 	mov	sp,fp
 1004418:	df000017 	ldw	fp,0(sp)
 100441c:	dec00104 	addi	sp,sp,4
 1004420:	f800283a 	ret

01004424 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1004424:	defffa04 	addi	sp,sp,-24
 1004428:	df000515 	stw	fp,20(sp)
 100442c:	df000504 	addi	fp,sp,20
 1004430:	e13ffd15 	stw	r4,-12(fp)
 1004434:	e17ffe15 	stw	r5,-8(fp)
 1004438:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 100443c:	00bff9c4 	movi	r2,-25
 1004440:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 1004444:	e0bffe17 	ldw	r2,-8(fp)
 1004448:	10da8060 	cmpeqi	r3,r2,27137
 100444c:	1800031e 	bne	r3,zero,100445c <altera_avalon_jtag_uart_ioctl+0x38>
 1004450:	109a80a0 	cmpeqi	r2,r2,27138
 1004454:	1000181e 	bne	r2,zero,10044b8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 1004458:	00002906 	br	1004500 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100445c:	e0bffd17 	ldw	r2,-12(fp)
 1004460:	10c00117 	ldw	r3,4(r2)
 1004464:	00a00034 	movhi	r2,32768
 1004468:	10bfffc4 	addi	r2,r2,-1
 100446c:	18802126 	beq	r3,r2,10044f4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 1004470:	e0bfff17 	ldw	r2,-4(fp)
 1004474:	10800017 	ldw	r2,0(r2)
 1004478:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100447c:	e0bffc17 	ldw	r2,-16(fp)
 1004480:	10800090 	cmplti	r2,r2,2
 1004484:	1000061e 	bne	r2,zero,10044a0 <altera_avalon_jtag_uart_ioctl+0x7c>
 1004488:	e0fffc17 	ldw	r3,-16(fp)
 100448c:	00a00034 	movhi	r2,32768
 1004490:	10bfffc4 	addi	r2,r2,-1
 1004494:	18800226 	beq	r3,r2,10044a0 <altera_avalon_jtag_uart_ioctl+0x7c>
 1004498:	e0bffc17 	ldw	r2,-16(fp)
 100449c:	00000206 	br	10044a8 <altera_avalon_jtag_uart_ioctl+0x84>
 10044a0:	00a00034 	movhi	r2,32768
 10044a4:	10bfff84 	addi	r2,r2,-2
 10044a8:	e0fffd17 	ldw	r3,-12(fp)
 10044ac:	18800115 	stw	r2,4(r3)
      rc = 0;
 10044b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 10044b4:	00000f06 	br	10044f4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 10044b8:	e0bffd17 	ldw	r2,-12(fp)
 10044bc:	10c00117 	ldw	r3,4(r2)
 10044c0:	00a00034 	movhi	r2,32768
 10044c4:	10bfffc4 	addi	r2,r2,-1
 10044c8:	18800c26 	beq	r3,r2,10044fc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 10044cc:	e0bffd17 	ldw	r2,-12(fp)
 10044d0:	10c00917 	ldw	r3,36(r2)
 10044d4:	e0bffd17 	ldw	r2,-12(fp)
 10044d8:	10800117 	ldw	r2,4(r2)
 10044dc:	1885803a 	cmpltu	r2,r3,r2
 10044e0:	10c03fcc 	andi	r3,r2,255
 10044e4:	e0bfff17 	ldw	r2,-4(fp)
 10044e8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 10044ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 10044f0:	00000206 	br	10044fc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 10044f4:	0001883a 	nop
 10044f8:	00000106 	br	1004500 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 10044fc:	0001883a 	nop

  default:
    break;
  }

  return rc;
 1004500:	e0bffb17 	ldw	r2,-20(fp)
}
 1004504:	e037883a 	mov	sp,fp
 1004508:	df000017 	ldw	fp,0(sp)
 100450c:	dec00104 	addi	sp,sp,4
 1004510:	f800283a 	ret

01004514 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1004514:	defff304 	addi	sp,sp,-52
 1004518:	dfc00c15 	stw	ra,48(sp)
 100451c:	df000b15 	stw	fp,44(sp)
 1004520:	df000b04 	addi	fp,sp,44
 1004524:	e13ffc15 	stw	r4,-16(fp)
 1004528:	e17ffd15 	stw	r5,-12(fp)
 100452c:	e1bffe15 	stw	r6,-8(fp)
 1004530:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 1004534:	e0bffd17 	ldw	r2,-12(fp)
 1004538:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100453c:	00004706 	br	100465c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1004540:	e0bffc17 	ldw	r2,-16(fp)
 1004544:	10800a17 	ldw	r2,40(r2)
 1004548:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100454c:	e0bffc17 	ldw	r2,-16(fp)
 1004550:	10800b17 	ldw	r2,44(r2)
 1004554:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 1004558:	e0fff717 	ldw	r3,-36(fp)
 100455c:	e0bff817 	ldw	r2,-32(fp)
 1004560:	18800536 	bltu	r3,r2,1004578 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1004564:	e0fff717 	ldw	r3,-36(fp)
 1004568:	e0bff817 	ldw	r2,-32(fp)
 100456c:	1885c83a 	sub	r2,r3,r2
 1004570:	e0bff615 	stw	r2,-40(fp)
 1004574:	00000406 	br	1004588 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1004578:	00c20004 	movi	r3,2048
 100457c:	e0bff817 	ldw	r2,-32(fp)
 1004580:	1885c83a 	sub	r2,r3,r2
 1004584:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1004588:	e0bff617 	ldw	r2,-40(fp)
 100458c:	10001e26 	beq	r2,zero,1004608 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 1004590:	e0fffe17 	ldw	r3,-8(fp)
 1004594:	e0bff617 	ldw	r2,-40(fp)
 1004598:	1880022e 	bgeu	r3,r2,10045a4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 100459c:	e0bffe17 	ldw	r2,-8(fp)
 10045a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 10045a4:	e0bffc17 	ldw	r2,-16(fp)
 10045a8:	10c00e04 	addi	r3,r2,56
 10045ac:	e0bff817 	ldw	r2,-32(fp)
 10045b0:	1885883a 	add	r2,r3,r2
 10045b4:	e1bff617 	ldw	r6,-40(fp)
 10045b8:	100b883a 	mov	r5,r2
 10045bc:	e13ff517 	ldw	r4,-44(fp)
 10045c0:	1001b100 	call	1001b10 <memcpy>
      ptr   += n;
 10045c4:	e0fff517 	ldw	r3,-44(fp)
 10045c8:	e0bff617 	ldw	r2,-40(fp)
 10045cc:	1885883a 	add	r2,r3,r2
 10045d0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 10045d4:	e0fffe17 	ldw	r3,-8(fp)
 10045d8:	e0bff617 	ldw	r2,-40(fp)
 10045dc:	1885c83a 	sub	r2,r3,r2
 10045e0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10045e4:	e0fff817 	ldw	r3,-32(fp)
 10045e8:	e0bff617 	ldw	r2,-40(fp)
 10045ec:	1885883a 	add	r2,r3,r2
 10045f0:	10c1ffcc 	andi	r3,r2,2047
 10045f4:	e0bffc17 	ldw	r2,-16(fp)
 10045f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 10045fc:	e0bffe17 	ldw	r2,-8(fp)
 1004600:	00bfcf16 	blt	zero,r2,1004540 <__alt_mem_TCDM+0xfefe3540>
 1004604:	00000106 	br	100460c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 1004608:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 100460c:	e0fff517 	ldw	r3,-44(fp)
 1004610:	e0bffd17 	ldw	r2,-12(fp)
 1004614:	1880141e 	bne	r3,r2,1004668 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1004618:	e0bfff17 	ldw	r2,-4(fp)
 100461c:	1090000c 	andi	r2,r2,16384
 1004620:	1000131e 	bne	r2,zero,1004670 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1004624:	0001883a 	nop
 1004628:	e0bffc17 	ldw	r2,-16(fp)
 100462c:	10c00a17 	ldw	r3,40(r2)
 1004630:	e0bff717 	ldw	r2,-36(fp)
 1004634:	1880051e 	bne	r3,r2,100464c <altera_avalon_jtag_uart_read+0x138>
 1004638:	e0bffc17 	ldw	r2,-16(fp)
 100463c:	10c00917 	ldw	r3,36(r2)
 1004640:	e0bffc17 	ldw	r2,-16(fp)
 1004644:	10800117 	ldw	r2,4(r2)
 1004648:	18bff736 	bltu	r3,r2,1004628 <__alt_mem_TCDM+0xfefe3628>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100464c:	e0bffc17 	ldw	r2,-16(fp)
 1004650:	10c00a17 	ldw	r3,40(r2)
 1004654:	e0bff717 	ldw	r2,-36(fp)
 1004658:	18800726 	beq	r3,r2,1004678 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100465c:	e0bffe17 	ldw	r2,-8(fp)
 1004660:	00bfb716 	blt	zero,r2,1004540 <__alt_mem_TCDM+0xfefe3540>
 1004664:	00000506 	br	100467c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 1004668:	0001883a 	nop
 100466c:	00000306 	br	100467c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 1004670:	0001883a 	nop
 1004674:	00000106 	br	100467c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 1004678:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100467c:	e0fff517 	ldw	r3,-44(fp)
 1004680:	e0bffd17 	ldw	r2,-12(fp)
 1004684:	18801826 	beq	r3,r2,10046e8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004688:	0005303a 	rdctl	r2,status
 100468c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004690:	e0fffb17 	ldw	r3,-20(fp)
 1004694:	00bfff84 	movi	r2,-2
 1004698:	1884703a 	and	r2,r3,r2
 100469c:	1001703a 	wrctl	status,r2
  
  return context;
 10046a0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 10046a4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10046a8:	e0bffc17 	ldw	r2,-16(fp)
 10046ac:	10800817 	ldw	r2,32(r2)
 10046b0:	10c00054 	ori	r3,r2,1
 10046b4:	e0bffc17 	ldw	r2,-16(fp)
 10046b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10046bc:	e0bffc17 	ldw	r2,-16(fp)
 10046c0:	10800017 	ldw	r2,0(r2)
 10046c4:	10800104 	addi	r2,r2,4
 10046c8:	1007883a 	mov	r3,r2
 10046cc:	e0bffc17 	ldw	r2,-16(fp)
 10046d0:	10800817 	ldw	r2,32(r2)
 10046d4:	18800035 	stwio	r2,0(r3)
 10046d8:	e0bffa17 	ldw	r2,-24(fp)
 10046dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10046e0:	e0bff917 	ldw	r2,-28(fp)
 10046e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 10046e8:	e0fff517 	ldw	r3,-44(fp)
 10046ec:	e0bffd17 	ldw	r2,-12(fp)
 10046f0:	18800426 	beq	r3,r2,1004704 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 10046f4:	e0fff517 	ldw	r3,-44(fp)
 10046f8:	e0bffd17 	ldw	r2,-12(fp)
 10046fc:	1885c83a 	sub	r2,r3,r2
 1004700:	00000606 	br	100471c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 1004704:	e0bfff17 	ldw	r2,-4(fp)
 1004708:	1090000c 	andi	r2,r2,16384
 100470c:	10000226 	beq	r2,zero,1004718 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1004710:	00bffd44 	movi	r2,-11
 1004714:	00000106 	br	100471c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 1004718:	00bffec4 	movi	r2,-5
}
 100471c:	e037883a 	mov	sp,fp
 1004720:	dfc00117 	ldw	ra,4(sp)
 1004724:	df000017 	ldw	fp,0(sp)
 1004728:	dec00204 	addi	sp,sp,8
 100472c:	f800283a 	ret

01004730 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1004730:	defff304 	addi	sp,sp,-52
 1004734:	dfc00c15 	stw	ra,48(sp)
 1004738:	df000b15 	stw	fp,44(sp)
 100473c:	df000b04 	addi	fp,sp,44
 1004740:	e13ffc15 	stw	r4,-16(fp)
 1004744:	e17ffd15 	stw	r5,-12(fp)
 1004748:	e1bffe15 	stw	r6,-8(fp)
 100474c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1004750:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1004754:	e0bffd17 	ldw	r2,-12(fp)
 1004758:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100475c:	00003706 	br	100483c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1004760:	e0bffc17 	ldw	r2,-16(fp)
 1004764:	10800c17 	ldw	r2,48(r2)
 1004768:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 100476c:	e0bffc17 	ldw	r2,-16(fp)
 1004770:	10800d17 	ldw	r2,52(r2)
 1004774:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 1004778:	e0fff917 	ldw	r3,-28(fp)
 100477c:	e0bff517 	ldw	r2,-44(fp)
 1004780:	1880062e 	bgeu	r3,r2,100479c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1004784:	e0fff517 	ldw	r3,-44(fp)
 1004788:	e0bff917 	ldw	r2,-28(fp)
 100478c:	1885c83a 	sub	r2,r3,r2
 1004790:	10bfffc4 	addi	r2,r2,-1
 1004794:	e0bff615 	stw	r2,-40(fp)
 1004798:	00000b06 	br	10047c8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 100479c:	e0bff517 	ldw	r2,-44(fp)
 10047a0:	10000526 	beq	r2,zero,10047b8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 10047a4:	00c20004 	movi	r3,2048
 10047a8:	e0bff917 	ldw	r2,-28(fp)
 10047ac:	1885c83a 	sub	r2,r3,r2
 10047b0:	e0bff615 	stw	r2,-40(fp)
 10047b4:	00000406 	br	10047c8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 10047b8:	00c1ffc4 	movi	r3,2047
 10047bc:	e0bff917 	ldw	r2,-28(fp)
 10047c0:	1885c83a 	sub	r2,r3,r2
 10047c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 10047c8:	e0bff617 	ldw	r2,-40(fp)
 10047cc:	10001e26 	beq	r2,zero,1004848 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 10047d0:	e0fffe17 	ldw	r3,-8(fp)
 10047d4:	e0bff617 	ldw	r2,-40(fp)
 10047d8:	1880022e 	bgeu	r3,r2,10047e4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 10047dc:	e0bffe17 	ldw	r2,-8(fp)
 10047e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 10047e4:	e0bffc17 	ldw	r2,-16(fp)
 10047e8:	10c20e04 	addi	r3,r2,2104
 10047ec:	e0bff917 	ldw	r2,-28(fp)
 10047f0:	1885883a 	add	r2,r3,r2
 10047f4:	e1bff617 	ldw	r6,-40(fp)
 10047f8:	e17ffd17 	ldw	r5,-12(fp)
 10047fc:	1009883a 	mov	r4,r2
 1004800:	1001b100 	call	1001b10 <memcpy>
      ptr   += n;
 1004804:	e0fffd17 	ldw	r3,-12(fp)
 1004808:	e0bff617 	ldw	r2,-40(fp)
 100480c:	1885883a 	add	r2,r3,r2
 1004810:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 1004814:	e0fffe17 	ldw	r3,-8(fp)
 1004818:	e0bff617 	ldw	r2,-40(fp)
 100481c:	1885c83a 	sub	r2,r3,r2
 1004820:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1004824:	e0fff917 	ldw	r3,-28(fp)
 1004828:	e0bff617 	ldw	r2,-40(fp)
 100482c:	1885883a 	add	r2,r3,r2
 1004830:	10c1ffcc 	andi	r3,r2,2047
 1004834:	e0bffc17 	ldw	r2,-16(fp)
 1004838:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100483c:	e0bffe17 	ldw	r2,-8(fp)
 1004840:	00bfc716 	blt	zero,r2,1004760 <__alt_mem_TCDM+0xfefe3760>
 1004844:	00000106 	br	100484c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 1004848:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100484c:	0005303a 	rdctl	r2,status
 1004850:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004854:	e0fffb17 	ldw	r3,-20(fp)
 1004858:	00bfff84 	movi	r2,-2
 100485c:	1884703a 	and	r2,r3,r2
 1004860:	1001703a 	wrctl	status,r2
  
  return context;
 1004864:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1004868:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100486c:	e0bffc17 	ldw	r2,-16(fp)
 1004870:	10800817 	ldw	r2,32(r2)
 1004874:	10c00094 	ori	r3,r2,2
 1004878:	e0bffc17 	ldw	r2,-16(fp)
 100487c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1004880:	e0bffc17 	ldw	r2,-16(fp)
 1004884:	10800017 	ldw	r2,0(r2)
 1004888:	10800104 	addi	r2,r2,4
 100488c:	1007883a 	mov	r3,r2
 1004890:	e0bffc17 	ldw	r2,-16(fp)
 1004894:	10800817 	ldw	r2,32(r2)
 1004898:	18800035 	stwio	r2,0(r3)
 100489c:	e0bffa17 	ldw	r2,-24(fp)
 10048a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10048a4:	e0bff817 	ldw	r2,-32(fp)
 10048a8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 10048ac:	e0bffe17 	ldw	r2,-8(fp)
 10048b0:	0080100e 	bge	zero,r2,10048f4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 10048b4:	e0bfff17 	ldw	r2,-4(fp)
 10048b8:	1090000c 	andi	r2,r2,16384
 10048bc:	1000101e 	bne	r2,zero,1004900 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 10048c0:	0001883a 	nop
 10048c4:	e0bffc17 	ldw	r2,-16(fp)
 10048c8:	10c00d17 	ldw	r3,52(r2)
 10048cc:	e0bff517 	ldw	r2,-44(fp)
 10048d0:	1880051e 	bne	r3,r2,10048e8 <altera_avalon_jtag_uart_write+0x1b8>
 10048d4:	e0bffc17 	ldw	r2,-16(fp)
 10048d8:	10c00917 	ldw	r3,36(r2)
 10048dc:	e0bffc17 	ldw	r2,-16(fp)
 10048e0:	10800117 	ldw	r2,4(r2)
 10048e4:	18bff736 	bltu	r3,r2,10048c4 <__alt_mem_TCDM+0xfefe38c4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 10048e8:	e0bffc17 	ldw	r2,-16(fp)
 10048ec:	10800917 	ldw	r2,36(r2)
 10048f0:	1000051e 	bne	r2,zero,1004908 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 10048f4:	e0bffe17 	ldw	r2,-8(fp)
 10048f8:	00bfd016 	blt	zero,r2,100483c <__alt_mem_TCDM+0xfefe383c>
 10048fc:	00000306 	br	100490c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 1004900:	0001883a 	nop
 1004904:	00000106 	br	100490c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 1004908:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100490c:	e0fffd17 	ldw	r3,-12(fp)
 1004910:	e0bff717 	ldw	r2,-36(fp)
 1004914:	18800426 	beq	r3,r2,1004928 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 1004918:	e0fffd17 	ldw	r3,-12(fp)
 100491c:	e0bff717 	ldw	r2,-36(fp)
 1004920:	1885c83a 	sub	r2,r3,r2
 1004924:	00000606 	br	1004940 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 1004928:	e0bfff17 	ldw	r2,-4(fp)
 100492c:	1090000c 	andi	r2,r2,16384
 1004930:	10000226 	beq	r2,zero,100493c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 1004934:	00bffd44 	movi	r2,-11
 1004938:	00000106 	br	1004940 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 100493c:	00bffec4 	movi	r2,-5
}
 1004940:	e037883a 	mov	sp,fp
 1004944:	dfc00117 	ldw	ra,4(sp)
 1004948:	df000017 	ldw	fp,0(sp)
 100494c:	dec00204 	addi	sp,sp,8
 1004950:	f800283a 	ret

01004954 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1004954:	defffa04 	addi	sp,sp,-24
 1004958:	dfc00515 	stw	ra,20(sp)
 100495c:	df000415 	stw	fp,16(sp)
 1004960:	df000404 	addi	fp,sp,16
 1004964:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1004968:	0007883a 	mov	r3,zero
 100496c:	e0bfff17 	ldw	r2,-4(fp)
 1004970:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1004974:	e0bfff17 	ldw	r2,-4(fp)
 1004978:	10800104 	addi	r2,r2,4
 100497c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004980:	0005303a 	rdctl	r2,status
 1004984:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004988:	e0fffd17 	ldw	r3,-12(fp)
 100498c:	00bfff84 	movi	r2,-2
 1004990:	1884703a 	and	r2,r3,r2
 1004994:	1001703a 	wrctl	status,r2
  
  return context;
 1004998:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 100499c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 10049a0:	10055b80 	call	10055b8 <alt_tick>
 10049a4:	e0bffc17 	ldw	r2,-16(fp)
 10049a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10049ac:	e0bffe17 	ldw	r2,-8(fp)
 10049b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 10049b4:	0001883a 	nop
 10049b8:	e037883a 	mov	sp,fp
 10049bc:	dfc00117 	ldw	ra,4(sp)
 10049c0:	df000017 	ldw	fp,0(sp)
 10049c4:	dec00204 	addi	sp,sp,8
 10049c8:	f800283a 	ret

010049cc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 10049cc:	defff804 	addi	sp,sp,-32
 10049d0:	dfc00715 	stw	ra,28(sp)
 10049d4:	df000615 	stw	fp,24(sp)
 10049d8:	df000604 	addi	fp,sp,24
 10049dc:	e13ffc15 	stw	r4,-16(fp)
 10049e0:	e17ffd15 	stw	r5,-12(fp)
 10049e4:	e1bffe15 	stw	r6,-8(fp)
 10049e8:	e1ffff15 	stw	r7,-4(fp)
 10049ec:	e0bfff17 	ldw	r2,-4(fp)
 10049f0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 10049f4:	d0a6bd17 	ldw	r2,-25868(gp)
 10049f8:	1000021e 	bne	r2,zero,1004a04 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 10049fc:	e0bffb17 	ldw	r2,-20(fp)
 1004a00:	d0a6bd15 	stw	r2,-25868(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1004a04:	e0bffc17 	ldw	r2,-16(fp)
 1004a08:	10800104 	addi	r2,r2,4
 1004a0c:	00c001c4 	movi	r3,7
 1004a10:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 1004a14:	d8000015 	stw	zero,0(sp)
 1004a18:	e1fffc17 	ldw	r7,-16(fp)
 1004a1c:	01804034 	movhi	r6,256
 1004a20:	31925504 	addi	r6,r6,18772
 1004a24:	e17ffe17 	ldw	r5,-8(fp)
 1004a28:	e13ffd17 	ldw	r4,-12(fp)
 1004a2c:	1004ee80 	call	1004ee8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 1004a30:	0001883a 	nop
 1004a34:	e037883a 	mov	sp,fp
 1004a38:	dfc00117 	ldw	ra,4(sp)
 1004a3c:	df000017 	ldw	fp,0(sp)
 1004a40:	dec00204 	addi	sp,sp,8
 1004a44:	f800283a 	ret

01004a48 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1004a48:	defff504 	addi	sp,sp,-44
 1004a4c:	df000a15 	stw	fp,40(sp)
 1004a50:	df000a04 	addi	fp,sp,40
 1004a54:	e13ffc15 	stw	r4,-16(fp)
 1004a58:	e17ffd15 	stw	r5,-12(fp)
 1004a5c:	e1bffe15 	stw	r6,-8(fp)
 1004a60:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1004a64:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1004a68:	d0a6bd17 	ldw	r2,-25868(gp)
  
  if (alt_ticks_per_second ())
 1004a6c:	10003c26 	beq	r2,zero,1004b60 <alt_alarm_start+0x118>
  {
    if (alarm)
 1004a70:	e0bffc17 	ldw	r2,-16(fp)
 1004a74:	10003826 	beq	r2,zero,1004b58 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 1004a78:	e0bffc17 	ldw	r2,-16(fp)
 1004a7c:	e0fffe17 	ldw	r3,-8(fp)
 1004a80:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 1004a84:	e0bffc17 	ldw	r2,-16(fp)
 1004a88:	e0ffff17 	ldw	r3,-4(fp)
 1004a8c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004a90:	0005303a 	rdctl	r2,status
 1004a94:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004a98:	e0fff917 	ldw	r3,-28(fp)
 1004a9c:	00bfff84 	movi	r2,-2
 1004aa0:	1884703a 	and	r2,r3,r2
 1004aa4:	1001703a 	wrctl	status,r2
  
  return context;
 1004aa8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 1004aac:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1004ab0:	d0a6be17 	ldw	r2,-25864(gp)
      
      current_nticks = alt_nticks();
 1004ab4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1004ab8:	e0fffd17 	ldw	r3,-12(fp)
 1004abc:	e0bff617 	ldw	r2,-40(fp)
 1004ac0:	1885883a 	add	r2,r3,r2
 1004ac4:	10c00044 	addi	r3,r2,1
 1004ac8:	e0bffc17 	ldw	r2,-16(fp)
 1004acc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1004ad0:	e0bffc17 	ldw	r2,-16(fp)
 1004ad4:	10c00217 	ldw	r3,8(r2)
 1004ad8:	e0bff617 	ldw	r2,-40(fp)
 1004adc:	1880042e 	bgeu	r3,r2,1004af0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 1004ae0:	e0bffc17 	ldw	r2,-16(fp)
 1004ae4:	00c00044 	movi	r3,1
 1004ae8:	10c00405 	stb	r3,16(r2)
 1004aec:	00000206 	br	1004af8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 1004af0:	e0bffc17 	ldw	r2,-16(fp)
 1004af4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1004af8:	e0bffc17 	ldw	r2,-16(fp)
 1004afc:	d0e01204 	addi	r3,gp,-32696
 1004b00:	e0fffa15 	stw	r3,-24(fp)
 1004b04:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1004b08:	e0bffb17 	ldw	r2,-20(fp)
 1004b0c:	e0fffa17 	ldw	r3,-24(fp)
 1004b10:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1004b14:	e0bffa17 	ldw	r2,-24(fp)
 1004b18:	10c00017 	ldw	r3,0(r2)
 1004b1c:	e0bffb17 	ldw	r2,-20(fp)
 1004b20:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1004b24:	e0bffa17 	ldw	r2,-24(fp)
 1004b28:	10800017 	ldw	r2,0(r2)
 1004b2c:	e0fffb17 	ldw	r3,-20(fp)
 1004b30:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1004b34:	e0bffa17 	ldw	r2,-24(fp)
 1004b38:	e0fffb17 	ldw	r3,-20(fp)
 1004b3c:	10c00015 	stw	r3,0(r2)
 1004b40:	e0bff817 	ldw	r2,-32(fp)
 1004b44:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004b48:	e0bff717 	ldw	r2,-36(fp)
 1004b4c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1004b50:	0005883a 	mov	r2,zero
 1004b54:	00000306 	br	1004b64 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 1004b58:	00bffa84 	movi	r2,-22
 1004b5c:	00000106 	br	1004b64 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 1004b60:	00bfde84 	movi	r2,-134
  }
}
 1004b64:	e037883a 	mov	sp,fp
 1004b68:	df000017 	ldw	fp,0(sp)
 1004b6c:	dec00104 	addi	sp,sp,4
 1004b70:	f800283a 	ret

01004b74 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 1004b74:	defffa04 	addi	sp,sp,-24
 1004b78:	dfc00515 	stw	ra,20(sp)
 1004b7c:	df000415 	stw	fp,16(sp)
 1004b80:	df000404 	addi	fp,sp,16
 1004b84:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 1004b88:	008000c4 	movi	r2,3
 1004b8c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 1004b90:	e0fffd17 	ldw	r3,-12(fp)
 1004b94:	008003f4 	movhi	r2,15
 1004b98:	10909004 	addi	r2,r2,16960
 1004b9c:	1885383a 	mul	r2,r3,r2
 1004ba0:	100b883a 	mov	r5,r2
 1004ba4:	0100bef4 	movhi	r4,763
 1004ba8:	213c2004 	addi	r4,r4,-3968
 1004bac:	10033dc0 	call	10033dc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 1004bb0:	100b883a 	mov	r5,r2
 1004bb4:	01200034 	movhi	r4,32768
 1004bb8:	213fffc4 	addi	r4,r4,-1
 1004bbc:	10033dc0 	call	10033dc <__udivsi3>
 1004bc0:	100b883a 	mov	r5,r2
 1004bc4:	e13fff17 	ldw	r4,-4(fp)
 1004bc8:	10033dc0 	call	10033dc <__udivsi3>
 1004bcc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1004bd0:	e0bffe17 	ldw	r2,-8(fp)
 1004bd4:	10002a26 	beq	r2,zero,1004c80 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 1004bd8:	e03ffc15 	stw	zero,-16(fp)
 1004bdc:	00001706 	br	1004c3c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1004be0:	00a00034 	movhi	r2,32768
 1004be4:	10bfffc4 	addi	r2,r2,-1
 1004be8:	10bfffc4 	addi	r2,r2,-1
 1004bec:	103ffe1e 	bne	r2,zero,1004be8 <__alt_mem_TCDM+0xfefe3be8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 1004bf0:	e0fffd17 	ldw	r3,-12(fp)
 1004bf4:	008003f4 	movhi	r2,15
 1004bf8:	10909004 	addi	r2,r2,16960
 1004bfc:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 1004c00:	100b883a 	mov	r5,r2
 1004c04:	0100bef4 	movhi	r4,763
 1004c08:	213c2004 	addi	r4,r4,-3968
 1004c0c:	10033dc0 	call	10033dc <__udivsi3>
 1004c10:	100b883a 	mov	r5,r2
 1004c14:	01200034 	movhi	r4,32768
 1004c18:	213fffc4 	addi	r4,r4,-1
 1004c1c:	10033dc0 	call	10033dc <__udivsi3>
 1004c20:	1007883a 	mov	r3,r2
 1004c24:	e0bfff17 	ldw	r2,-4(fp)
 1004c28:	10c5c83a 	sub	r2,r2,r3
 1004c2c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 1004c30:	e0bffc17 	ldw	r2,-16(fp)
 1004c34:	10800044 	addi	r2,r2,1
 1004c38:	e0bffc15 	stw	r2,-16(fp)
 1004c3c:	e0fffc17 	ldw	r3,-16(fp)
 1004c40:	e0bffe17 	ldw	r2,-8(fp)
 1004c44:	18bfe616 	blt	r3,r2,1004be0 <__alt_mem_TCDM+0xfefe3be0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1004c48:	e0fffd17 	ldw	r3,-12(fp)
 1004c4c:	008003f4 	movhi	r2,15
 1004c50:	10909004 	addi	r2,r2,16960
 1004c54:	1885383a 	mul	r2,r3,r2
 1004c58:	100b883a 	mov	r5,r2
 1004c5c:	0100bef4 	movhi	r4,763
 1004c60:	213c2004 	addi	r4,r4,-3968
 1004c64:	10033dc0 	call	10033dc <__udivsi3>
 1004c68:	1007883a 	mov	r3,r2
 1004c6c:	e0bfff17 	ldw	r2,-4(fp)
 1004c70:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1004c74:	10bfffc4 	addi	r2,r2,-1
 1004c78:	103ffe1e 	bne	r2,zero,1004c74 <__alt_mem_TCDM+0xfefe3c74>
 1004c7c:	00000d06 	br	1004cb4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1004c80:	e0fffd17 	ldw	r3,-12(fp)
 1004c84:	008003f4 	movhi	r2,15
 1004c88:	10909004 	addi	r2,r2,16960
 1004c8c:	1885383a 	mul	r2,r3,r2
 1004c90:	100b883a 	mov	r5,r2
 1004c94:	0100bef4 	movhi	r4,763
 1004c98:	213c2004 	addi	r4,r4,-3968
 1004c9c:	10033dc0 	call	10033dc <__udivsi3>
 1004ca0:	1007883a 	mov	r3,r2
 1004ca4:	e0bfff17 	ldw	r2,-4(fp)
 1004ca8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1004cac:	10bfffc4 	addi	r2,r2,-1
 1004cb0:	00bffe16 	blt	zero,r2,1004cac <__alt_mem_TCDM+0xfefe3cac>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 1004cb4:	0005883a 	mov	r2,zero
}
 1004cb8:	e037883a 	mov	sp,fp
 1004cbc:	dfc00117 	ldw	ra,4(sp)
 1004cc0:	df000017 	ldw	fp,0(sp)
 1004cc4:	dec00204 	addi	sp,sp,8
 1004cc8:	f800283a 	ret

01004ccc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1004ccc:	defffe04 	addi	sp,sp,-8
 1004cd0:	df000115 	stw	fp,4(sp)
 1004cd4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1004cd8:	e03fff15 	stw	zero,-4(fp)
 1004cdc:	00000506 	br	1004cf4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1004ce0:	e0bfff17 	ldw	r2,-4(fp)
 1004ce4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1004ce8:	e0bfff17 	ldw	r2,-4(fp)
 1004cec:	10800804 	addi	r2,r2,32
 1004cf0:	e0bfff15 	stw	r2,-4(fp)
 1004cf4:	e0bfff17 	ldw	r2,-4(fp)
 1004cf8:	10820030 	cmpltui	r2,r2,2048
 1004cfc:	103ff81e 	bne	r2,zero,1004ce0 <__alt_mem_TCDM+0xfefe3ce0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1004d00:	0001883a 	nop
 1004d04:	e037883a 	mov	sp,fp
 1004d08:	df000017 	ldw	fp,0(sp)
 1004d0c:	dec00104 	addi	sp,sp,4
 1004d10:	f800283a 	ret

01004d14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1004d14:	defffe04 	addi	sp,sp,-8
 1004d18:	dfc00115 	stw	ra,4(sp)
 1004d1c:	df000015 	stw	fp,0(sp)
 1004d20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1004d24:	d0a00f17 	ldw	r2,-32708(gp)
 1004d28:	10000326 	beq	r2,zero,1004d38 <alt_get_errno+0x24>
 1004d2c:	d0a00f17 	ldw	r2,-32708(gp)
 1004d30:	103ee83a 	callr	r2
 1004d34:	00000106 	br	1004d3c <alt_get_errno+0x28>
 1004d38:	d0a6b804 	addi	r2,gp,-25888
}
 1004d3c:	e037883a 	mov	sp,fp
 1004d40:	dfc00117 	ldw	ra,4(sp)
 1004d44:	df000017 	ldw	fp,0(sp)
 1004d48:	dec00204 	addi	sp,sp,8
 1004d4c:	f800283a 	ret

01004d50 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1004d50:	defffa04 	addi	sp,sp,-24
 1004d54:	dfc00515 	stw	ra,20(sp)
 1004d58:	df000415 	stw	fp,16(sp)
 1004d5c:	df000404 	addi	fp,sp,16
 1004d60:	e13ffe15 	stw	r4,-8(fp)
 1004d64:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1004d68:	e0bffe17 	ldw	r2,-8(fp)
 1004d6c:	10000326 	beq	r2,zero,1004d7c <alt_dev_llist_insert+0x2c>
 1004d70:	e0bffe17 	ldw	r2,-8(fp)
 1004d74:	10800217 	ldw	r2,8(r2)
 1004d78:	1000061e 	bne	r2,zero,1004d94 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 1004d7c:	1004d140 	call	1004d14 <alt_get_errno>
 1004d80:	1007883a 	mov	r3,r2
 1004d84:	00800584 	movi	r2,22
 1004d88:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1004d8c:	00bffa84 	movi	r2,-22
 1004d90:	00001306 	br	1004de0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1004d94:	e0bffe17 	ldw	r2,-8(fp)
 1004d98:	e0ffff17 	ldw	r3,-4(fp)
 1004d9c:	e0fffc15 	stw	r3,-16(fp)
 1004da0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1004da4:	e0bffd17 	ldw	r2,-12(fp)
 1004da8:	e0fffc17 	ldw	r3,-16(fp)
 1004dac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1004db0:	e0bffc17 	ldw	r2,-16(fp)
 1004db4:	10c00017 	ldw	r3,0(r2)
 1004db8:	e0bffd17 	ldw	r2,-12(fp)
 1004dbc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1004dc0:	e0bffc17 	ldw	r2,-16(fp)
 1004dc4:	10800017 	ldw	r2,0(r2)
 1004dc8:	e0fffd17 	ldw	r3,-12(fp)
 1004dcc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1004dd0:	e0bffc17 	ldw	r2,-16(fp)
 1004dd4:	e0fffd17 	ldw	r3,-12(fp)
 1004dd8:	10c00015 	stw	r3,0(r2)

  return 0;  
 1004ddc:	0005883a 	mov	r2,zero
}
 1004de0:	e037883a 	mov	sp,fp
 1004de4:	dfc00117 	ldw	ra,4(sp)
 1004de8:	df000017 	ldw	fp,0(sp)
 1004dec:	dec00204 	addi	sp,sp,8
 1004df0:	f800283a 	ret

01004df4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1004df4:	defffd04 	addi	sp,sp,-12
 1004df8:	dfc00215 	stw	ra,8(sp)
 1004dfc:	df000115 	stw	fp,4(sp)
 1004e00:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1004e04:	00804034 	movhi	r2,256
 1004e08:	10977704 	addi	r2,r2,24028
 1004e0c:	e0bfff15 	stw	r2,-4(fp)
 1004e10:	00000606 	br	1004e2c <_do_ctors+0x38>
        (*ctor) (); 
 1004e14:	e0bfff17 	ldw	r2,-4(fp)
 1004e18:	10800017 	ldw	r2,0(r2)
 1004e1c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1004e20:	e0bfff17 	ldw	r2,-4(fp)
 1004e24:	10bfff04 	addi	r2,r2,-4
 1004e28:	e0bfff15 	stw	r2,-4(fp)
 1004e2c:	e0ffff17 	ldw	r3,-4(fp)
 1004e30:	00804034 	movhi	r2,256
 1004e34:	10977804 	addi	r2,r2,24032
 1004e38:	18bff62e 	bgeu	r3,r2,1004e14 <__alt_mem_TCDM+0xfefe3e14>
        (*ctor) (); 
}
 1004e3c:	0001883a 	nop
 1004e40:	e037883a 	mov	sp,fp
 1004e44:	dfc00117 	ldw	ra,4(sp)
 1004e48:	df000017 	ldw	fp,0(sp)
 1004e4c:	dec00204 	addi	sp,sp,8
 1004e50:	f800283a 	ret

01004e54 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1004e54:	defffd04 	addi	sp,sp,-12
 1004e58:	dfc00215 	stw	ra,8(sp)
 1004e5c:	df000115 	stw	fp,4(sp)
 1004e60:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1004e64:	00804034 	movhi	r2,256
 1004e68:	10977704 	addi	r2,r2,24028
 1004e6c:	e0bfff15 	stw	r2,-4(fp)
 1004e70:	00000606 	br	1004e8c <_do_dtors+0x38>
        (*dtor) (); 
 1004e74:	e0bfff17 	ldw	r2,-4(fp)
 1004e78:	10800017 	ldw	r2,0(r2)
 1004e7c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1004e80:	e0bfff17 	ldw	r2,-4(fp)
 1004e84:	10bfff04 	addi	r2,r2,-4
 1004e88:	e0bfff15 	stw	r2,-4(fp)
 1004e8c:	e0ffff17 	ldw	r3,-4(fp)
 1004e90:	00804034 	movhi	r2,256
 1004e94:	10977804 	addi	r2,r2,24032
 1004e98:	18bff62e 	bgeu	r3,r2,1004e74 <__alt_mem_TCDM+0xfefe3e74>
        (*dtor) (); 
}
 1004e9c:	0001883a 	nop
 1004ea0:	e037883a 	mov	sp,fp
 1004ea4:	dfc00117 	ldw	ra,4(sp)
 1004ea8:	df000017 	ldw	fp,0(sp)
 1004eac:	dec00204 	addi	sp,sp,8
 1004eb0:	f800283a 	ret

01004eb4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1004eb4:	defffe04 	addi	sp,sp,-8
 1004eb8:	dfc00115 	stw	ra,4(sp)
 1004ebc:	df000015 	stw	fp,0(sp)
 1004ec0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1004ec4:	01440004 	movi	r5,4096
 1004ec8:	0009883a 	mov	r4,zero
 1004ecc:	10059200 	call	1005920 <alt_icache_flush>
#endif
}
 1004ed0:	0001883a 	nop
 1004ed4:	e037883a 	mov	sp,fp
 1004ed8:	dfc00117 	ldw	ra,4(sp)
 1004edc:	df000017 	ldw	fp,0(sp)
 1004ee0:	dec00204 	addi	sp,sp,8
 1004ee4:	f800283a 	ret

01004ee8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1004ee8:	defff904 	addi	sp,sp,-28
 1004eec:	dfc00615 	stw	ra,24(sp)
 1004ef0:	df000515 	stw	fp,20(sp)
 1004ef4:	df000504 	addi	fp,sp,20
 1004ef8:	e13ffc15 	stw	r4,-16(fp)
 1004efc:	e17ffd15 	stw	r5,-12(fp)
 1004f00:	e1bffe15 	stw	r6,-8(fp)
 1004f04:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1004f08:	e0800217 	ldw	r2,8(fp)
 1004f0c:	d8800015 	stw	r2,0(sp)
 1004f10:	e1ffff17 	ldw	r7,-4(fp)
 1004f14:	e1bffe17 	ldw	r6,-8(fp)
 1004f18:	e17ffd17 	ldw	r5,-12(fp)
 1004f1c:	e13ffc17 	ldw	r4,-16(fp)
 1004f20:	10050980 	call	1005098 <alt_iic_isr_register>
}  
 1004f24:	e037883a 	mov	sp,fp
 1004f28:	dfc00117 	ldw	ra,4(sp)
 1004f2c:	df000017 	ldw	fp,0(sp)
 1004f30:	dec00204 	addi	sp,sp,8
 1004f34:	f800283a 	ret

01004f38 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1004f38:	defff904 	addi	sp,sp,-28
 1004f3c:	df000615 	stw	fp,24(sp)
 1004f40:	df000604 	addi	fp,sp,24
 1004f44:	e13ffe15 	stw	r4,-8(fp)
 1004f48:	e17fff15 	stw	r5,-4(fp)
 1004f4c:	e0bfff17 	ldw	r2,-4(fp)
 1004f50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004f54:	0005303a 	rdctl	r2,status
 1004f58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004f5c:	e0fffb17 	ldw	r3,-20(fp)
 1004f60:	00bfff84 	movi	r2,-2
 1004f64:	1884703a 	and	r2,r3,r2
 1004f68:	1001703a 	wrctl	status,r2
  
  return context;
 1004f6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1004f70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 1004f74:	00c00044 	movi	r3,1
 1004f78:	e0bffa17 	ldw	r2,-24(fp)
 1004f7c:	1884983a 	sll	r2,r3,r2
 1004f80:	1007883a 	mov	r3,r2
 1004f84:	d0a6bc17 	ldw	r2,-25872(gp)
 1004f88:	1884b03a 	or	r2,r3,r2
 1004f8c:	d0a6bc15 	stw	r2,-25872(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1004f90:	d0a6bc17 	ldw	r2,-25872(gp)
 1004f94:	100170fa 	wrctl	ienable,r2
 1004f98:	e0bffc17 	ldw	r2,-16(fp)
 1004f9c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004fa0:	e0bffd17 	ldw	r2,-12(fp)
 1004fa4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1004fa8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 1004fac:	0001883a 	nop
}
 1004fb0:	e037883a 	mov	sp,fp
 1004fb4:	df000017 	ldw	fp,0(sp)
 1004fb8:	dec00104 	addi	sp,sp,4
 1004fbc:	f800283a 	ret

01004fc0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1004fc0:	defff904 	addi	sp,sp,-28
 1004fc4:	df000615 	stw	fp,24(sp)
 1004fc8:	df000604 	addi	fp,sp,24
 1004fcc:	e13ffe15 	stw	r4,-8(fp)
 1004fd0:	e17fff15 	stw	r5,-4(fp)
 1004fd4:	e0bfff17 	ldw	r2,-4(fp)
 1004fd8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004fdc:	0005303a 	rdctl	r2,status
 1004fe0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1004fe4:	e0fffb17 	ldw	r3,-20(fp)
 1004fe8:	00bfff84 	movi	r2,-2
 1004fec:	1884703a 	and	r2,r3,r2
 1004ff0:	1001703a 	wrctl	status,r2
  
  return context;
 1004ff4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1004ff8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 1004ffc:	00c00044 	movi	r3,1
 1005000:	e0bffa17 	ldw	r2,-24(fp)
 1005004:	1884983a 	sll	r2,r3,r2
 1005008:	0084303a 	nor	r2,zero,r2
 100500c:	1007883a 	mov	r3,r2
 1005010:	d0a6bc17 	ldw	r2,-25872(gp)
 1005014:	1884703a 	and	r2,r3,r2
 1005018:	d0a6bc15 	stw	r2,-25872(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100501c:	d0a6bc17 	ldw	r2,-25872(gp)
 1005020:	100170fa 	wrctl	ienable,r2
 1005024:	e0bffc17 	ldw	r2,-16(fp)
 1005028:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100502c:	e0bffd17 	ldw	r2,-12(fp)
 1005030:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1005034:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 1005038:	0001883a 	nop
}
 100503c:	e037883a 	mov	sp,fp
 1005040:	df000017 	ldw	fp,0(sp)
 1005044:	dec00104 	addi	sp,sp,4
 1005048:	f800283a 	ret

0100504c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 100504c:	defffc04 	addi	sp,sp,-16
 1005050:	df000315 	stw	fp,12(sp)
 1005054:	df000304 	addi	fp,sp,12
 1005058:	e13ffe15 	stw	r4,-8(fp)
 100505c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1005060:	000530fa 	rdctl	r2,ienable
 1005064:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1005068:	00c00044 	movi	r3,1
 100506c:	e0bfff17 	ldw	r2,-4(fp)
 1005070:	1884983a 	sll	r2,r3,r2
 1005074:	1007883a 	mov	r3,r2
 1005078:	e0bffd17 	ldw	r2,-12(fp)
 100507c:	1884703a 	and	r2,r3,r2
 1005080:	1004c03a 	cmpne	r2,r2,zero
 1005084:	10803fcc 	andi	r2,r2,255
}
 1005088:	e037883a 	mov	sp,fp
 100508c:	df000017 	ldw	fp,0(sp)
 1005090:	dec00104 	addi	sp,sp,4
 1005094:	f800283a 	ret

01005098 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1005098:	defff504 	addi	sp,sp,-44
 100509c:	dfc00a15 	stw	ra,40(sp)
 10050a0:	df000915 	stw	fp,36(sp)
 10050a4:	df000904 	addi	fp,sp,36
 10050a8:	e13ffc15 	stw	r4,-16(fp)
 10050ac:	e17ffd15 	stw	r5,-12(fp)
 10050b0:	e1bffe15 	stw	r6,-8(fp)
 10050b4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 10050b8:	00bffa84 	movi	r2,-22
 10050bc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 10050c0:	e0bffd17 	ldw	r2,-12(fp)
 10050c4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 10050c8:	e0bff817 	ldw	r2,-32(fp)
 10050cc:	10800808 	cmpgei	r2,r2,32
 10050d0:	1000271e 	bne	r2,zero,1005170 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10050d4:	0005303a 	rdctl	r2,status
 10050d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10050dc:	e0fffb17 	ldw	r3,-20(fp)
 10050e0:	00bfff84 	movi	r2,-2
 10050e4:	1884703a 	and	r2,r3,r2
 10050e8:	1001703a 	wrctl	status,r2
  
  return context;
 10050ec:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 10050f0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 10050f4:	00804234 	movhi	r2,264
 10050f8:	10a6e104 	addi	r2,r2,-25724
 10050fc:	e0fff817 	ldw	r3,-32(fp)
 1005100:	180690fa 	slli	r3,r3,3
 1005104:	10c5883a 	add	r2,r2,r3
 1005108:	e0fffe17 	ldw	r3,-8(fp)
 100510c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 1005110:	00804234 	movhi	r2,264
 1005114:	10a6e104 	addi	r2,r2,-25724
 1005118:	e0fff817 	ldw	r3,-32(fp)
 100511c:	180690fa 	slli	r3,r3,3
 1005120:	10c5883a 	add	r2,r2,r3
 1005124:	10800104 	addi	r2,r2,4
 1005128:	e0ffff17 	ldw	r3,-4(fp)
 100512c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1005130:	e0bffe17 	ldw	r2,-8(fp)
 1005134:	10000526 	beq	r2,zero,100514c <alt_iic_isr_register+0xb4>
 1005138:	e0bff817 	ldw	r2,-32(fp)
 100513c:	100b883a 	mov	r5,r2
 1005140:	e13ffc17 	ldw	r4,-16(fp)
 1005144:	1004f380 	call	1004f38 <alt_ic_irq_enable>
 1005148:	00000406 	br	100515c <alt_iic_isr_register+0xc4>
 100514c:	e0bff817 	ldw	r2,-32(fp)
 1005150:	100b883a 	mov	r5,r2
 1005154:	e13ffc17 	ldw	r4,-16(fp)
 1005158:	1004fc00 	call	1004fc0 <alt_ic_irq_disable>
 100515c:	e0bff715 	stw	r2,-36(fp)
 1005160:	e0bffa17 	ldw	r2,-24(fp)
 1005164:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005168:	e0bff917 	ldw	r2,-28(fp)
 100516c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1005170:	e0bff717 	ldw	r2,-36(fp)
}
 1005174:	e037883a 	mov	sp,fp
 1005178:	dfc00117 	ldw	ra,4(sp)
 100517c:	df000017 	ldw	fp,0(sp)
 1005180:	dec00204 	addi	sp,sp,8
 1005184:	f800283a 	ret

01005188 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1005188:	defff904 	addi	sp,sp,-28
 100518c:	dfc00615 	stw	ra,24(sp)
 1005190:	df000515 	stw	fp,20(sp)
 1005194:	df000504 	addi	fp,sp,20
 1005198:	e13ffc15 	stw	r4,-16(fp)
 100519c:	e17ffd15 	stw	r5,-12(fp)
 10051a0:	e1bffe15 	stw	r6,-8(fp)
 10051a4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 10051a8:	e1bfff17 	ldw	r6,-4(fp)
 10051ac:	e17ffe17 	ldw	r5,-8(fp)
 10051b0:	e13ffd17 	ldw	r4,-12(fp)
 10051b4:	10053c80 	call	10053c8 <open>
 10051b8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 10051bc:	e0bffb17 	ldw	r2,-20(fp)
 10051c0:	10001c16 	blt	r2,zero,1005234 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 10051c4:	008041f4 	movhi	r2,263
 10051c8:	109b9f04 	addi	r2,r2,28284
 10051cc:	e0fffb17 	ldw	r3,-20(fp)
 10051d0:	18c00324 	muli	r3,r3,12
 10051d4:	10c5883a 	add	r2,r2,r3
 10051d8:	10c00017 	ldw	r3,0(r2)
 10051dc:	e0bffc17 	ldw	r2,-16(fp)
 10051e0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 10051e4:	008041f4 	movhi	r2,263
 10051e8:	109b9f04 	addi	r2,r2,28284
 10051ec:	e0fffb17 	ldw	r3,-20(fp)
 10051f0:	18c00324 	muli	r3,r3,12
 10051f4:	10c5883a 	add	r2,r2,r3
 10051f8:	10800104 	addi	r2,r2,4
 10051fc:	10c00017 	ldw	r3,0(r2)
 1005200:	e0bffc17 	ldw	r2,-16(fp)
 1005204:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1005208:	008041f4 	movhi	r2,263
 100520c:	109b9f04 	addi	r2,r2,28284
 1005210:	e0fffb17 	ldw	r3,-20(fp)
 1005214:	18c00324 	muli	r3,r3,12
 1005218:	10c5883a 	add	r2,r2,r3
 100521c:	10800204 	addi	r2,r2,8
 1005220:	10c00017 	ldw	r3,0(r2)
 1005224:	e0bffc17 	ldw	r2,-16(fp)
 1005228:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 100522c:	e13ffb17 	ldw	r4,-20(fp)
 1005230:	1003b940 	call	1003b94 <alt_release_fd>
  }
} 
 1005234:	0001883a 	nop
 1005238:	e037883a 	mov	sp,fp
 100523c:	dfc00117 	ldw	ra,4(sp)
 1005240:	df000017 	ldw	fp,0(sp)
 1005244:	dec00204 	addi	sp,sp,8
 1005248:	f800283a 	ret

0100524c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 100524c:	defffb04 	addi	sp,sp,-20
 1005250:	dfc00415 	stw	ra,16(sp)
 1005254:	df000315 	stw	fp,12(sp)
 1005258:	df000304 	addi	fp,sp,12
 100525c:	e13ffd15 	stw	r4,-12(fp)
 1005260:	e17ffe15 	stw	r5,-8(fp)
 1005264:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1005268:	01c07fc4 	movi	r7,511
 100526c:	01800044 	movi	r6,1
 1005270:	e17ffd17 	ldw	r5,-12(fp)
 1005274:	010041f4 	movhi	r4,263
 1005278:	211ba204 	addi	r4,r4,28296
 100527c:	10051880 	call	1005188 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1005280:	01c07fc4 	movi	r7,511
 1005284:	000d883a 	mov	r6,zero
 1005288:	e17ffe17 	ldw	r5,-8(fp)
 100528c:	010041f4 	movhi	r4,263
 1005290:	211b9f04 	addi	r4,r4,28284
 1005294:	10051880 	call	1005188 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1005298:	01c07fc4 	movi	r7,511
 100529c:	01800044 	movi	r6,1
 10052a0:	e17fff17 	ldw	r5,-4(fp)
 10052a4:	010041f4 	movhi	r4,263
 10052a8:	211ba504 	addi	r4,r4,28308
 10052ac:	10051880 	call	1005188 <alt_open_fd>
}  
 10052b0:	0001883a 	nop
 10052b4:	e037883a 	mov	sp,fp
 10052b8:	dfc00117 	ldw	ra,4(sp)
 10052bc:	df000017 	ldw	fp,0(sp)
 10052c0:	dec00204 	addi	sp,sp,8
 10052c4:	f800283a 	ret

010052c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10052c8:	defffe04 	addi	sp,sp,-8
 10052cc:	dfc00115 	stw	ra,4(sp)
 10052d0:	df000015 	stw	fp,0(sp)
 10052d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10052d8:	d0a00f17 	ldw	r2,-32708(gp)
 10052dc:	10000326 	beq	r2,zero,10052ec <alt_get_errno+0x24>
 10052e0:	d0a00f17 	ldw	r2,-32708(gp)
 10052e4:	103ee83a 	callr	r2
 10052e8:	00000106 	br	10052f0 <alt_get_errno+0x28>
 10052ec:	d0a6b804 	addi	r2,gp,-25888
}
 10052f0:	e037883a 	mov	sp,fp
 10052f4:	dfc00117 	ldw	ra,4(sp)
 10052f8:	df000017 	ldw	fp,0(sp)
 10052fc:	dec00204 	addi	sp,sp,8
 1005300:	f800283a 	ret

01005304 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1005304:	defffd04 	addi	sp,sp,-12
 1005308:	df000215 	stw	fp,8(sp)
 100530c:	df000204 	addi	fp,sp,8
 1005310:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1005314:	e0bfff17 	ldw	r2,-4(fp)
 1005318:	10800217 	ldw	r2,8(r2)
 100531c:	10d00034 	orhi	r3,r2,16384
 1005320:	e0bfff17 	ldw	r2,-4(fp)
 1005324:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1005328:	e03ffe15 	stw	zero,-8(fp)
 100532c:	00001d06 	br	10053a4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1005330:	008041f4 	movhi	r2,263
 1005334:	109b9f04 	addi	r2,r2,28284
 1005338:	e0fffe17 	ldw	r3,-8(fp)
 100533c:	18c00324 	muli	r3,r3,12
 1005340:	10c5883a 	add	r2,r2,r3
 1005344:	10c00017 	ldw	r3,0(r2)
 1005348:	e0bfff17 	ldw	r2,-4(fp)
 100534c:	10800017 	ldw	r2,0(r2)
 1005350:	1880111e 	bne	r3,r2,1005398 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1005354:	008041f4 	movhi	r2,263
 1005358:	109b9f04 	addi	r2,r2,28284
 100535c:	e0fffe17 	ldw	r3,-8(fp)
 1005360:	18c00324 	muli	r3,r3,12
 1005364:	10c5883a 	add	r2,r2,r3
 1005368:	10800204 	addi	r2,r2,8
 100536c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1005370:	1000090e 	bge	r2,zero,1005398 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 1005374:	e0bffe17 	ldw	r2,-8(fp)
 1005378:	10c00324 	muli	r3,r2,12
 100537c:	008041f4 	movhi	r2,263
 1005380:	109b9f04 	addi	r2,r2,28284
 1005384:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1005388:	e0bfff17 	ldw	r2,-4(fp)
 100538c:	18800226 	beq	r3,r2,1005398 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1005390:	00bffcc4 	movi	r2,-13
 1005394:	00000806 	br	10053b8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1005398:	e0bffe17 	ldw	r2,-8(fp)
 100539c:	10800044 	addi	r2,r2,1
 10053a0:	e0bffe15 	stw	r2,-8(fp)
 10053a4:	d0a00e17 	ldw	r2,-32712(gp)
 10053a8:	1007883a 	mov	r3,r2
 10053ac:	e0bffe17 	ldw	r2,-8(fp)
 10053b0:	18bfdf2e 	bgeu	r3,r2,1005330 <__alt_mem_TCDM+0xfefe4330>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 10053b4:	0005883a 	mov	r2,zero
}
 10053b8:	e037883a 	mov	sp,fp
 10053bc:	df000017 	ldw	fp,0(sp)
 10053c0:	dec00104 	addi	sp,sp,4
 10053c4:	f800283a 	ret

010053c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 10053c8:	defff604 	addi	sp,sp,-40
 10053cc:	dfc00915 	stw	ra,36(sp)
 10053d0:	df000815 	stw	fp,32(sp)
 10053d4:	df000804 	addi	fp,sp,32
 10053d8:	e13ffd15 	stw	r4,-12(fp)
 10053dc:	e17ffe15 	stw	r5,-8(fp)
 10053e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 10053e4:	00bfffc4 	movi	r2,-1
 10053e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 10053ec:	00bffb44 	movi	r2,-19
 10053f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 10053f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 10053f8:	d1600c04 	addi	r5,gp,-32720
 10053fc:	e13ffd17 	ldw	r4,-12(fp)
 1005400:	10056e40 	call	10056e4 <alt_find_dev>
 1005404:	e0bff815 	stw	r2,-32(fp)
 1005408:	e0bff817 	ldw	r2,-32(fp)
 100540c:	1000051e 	bne	r2,zero,1005424 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1005410:	e13ffd17 	ldw	r4,-12(fp)
 1005414:	10057740 	call	1005774 <alt_find_file>
 1005418:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 100541c:	00800044 	movi	r2,1
 1005420:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1005424:	e0bff817 	ldw	r2,-32(fp)
 1005428:	10002926 	beq	r2,zero,10054d0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100542c:	e13ff817 	ldw	r4,-32(fp)
 1005430:	100587c0 	call	100587c <alt_get_fd>
 1005434:	e0bff915 	stw	r2,-28(fp)
 1005438:	e0bff917 	ldw	r2,-28(fp)
 100543c:	1000030e 	bge	r2,zero,100544c <open+0x84>
    {
      status = index;
 1005440:	e0bff917 	ldw	r2,-28(fp)
 1005444:	e0bffa15 	stw	r2,-24(fp)
 1005448:	00002306 	br	10054d8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 100544c:	e0bff917 	ldw	r2,-28(fp)
 1005450:	10c00324 	muli	r3,r2,12
 1005454:	008041f4 	movhi	r2,263
 1005458:	109b9f04 	addi	r2,r2,28284
 100545c:	1885883a 	add	r2,r3,r2
 1005460:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1005464:	e0fffe17 	ldw	r3,-8(fp)
 1005468:	00900034 	movhi	r2,16384
 100546c:	10bfffc4 	addi	r2,r2,-1
 1005470:	1886703a 	and	r3,r3,r2
 1005474:	e0bffc17 	ldw	r2,-16(fp)
 1005478:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100547c:	e0bffb17 	ldw	r2,-20(fp)
 1005480:	1000051e 	bne	r2,zero,1005498 <open+0xd0>
 1005484:	e13ffc17 	ldw	r4,-16(fp)
 1005488:	10053040 	call	1005304 <alt_file_locked>
 100548c:	e0bffa15 	stw	r2,-24(fp)
 1005490:	e0bffa17 	ldw	r2,-24(fp)
 1005494:	10001016 	blt	r2,zero,10054d8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1005498:	e0bff817 	ldw	r2,-32(fp)
 100549c:	10800317 	ldw	r2,12(r2)
 10054a0:	10000826 	beq	r2,zero,10054c4 <open+0xfc>
 10054a4:	e0bff817 	ldw	r2,-32(fp)
 10054a8:	10800317 	ldw	r2,12(r2)
 10054ac:	e1ffff17 	ldw	r7,-4(fp)
 10054b0:	e1bffe17 	ldw	r6,-8(fp)
 10054b4:	e17ffd17 	ldw	r5,-12(fp)
 10054b8:	e13ffc17 	ldw	r4,-16(fp)
 10054bc:	103ee83a 	callr	r2
 10054c0:	00000106 	br	10054c8 <open+0x100>
 10054c4:	0005883a 	mov	r2,zero
 10054c8:	e0bffa15 	stw	r2,-24(fp)
 10054cc:	00000206 	br	10054d8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 10054d0:	00bffb44 	movi	r2,-19
 10054d4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 10054d8:	e0bffa17 	ldw	r2,-24(fp)
 10054dc:	1000090e 	bge	r2,zero,1005504 <open+0x13c>
  {
    alt_release_fd (index);  
 10054e0:	e13ff917 	ldw	r4,-28(fp)
 10054e4:	1003b940 	call	1003b94 <alt_release_fd>
    ALT_ERRNO = -status;
 10054e8:	10052c80 	call	10052c8 <alt_get_errno>
 10054ec:	1007883a 	mov	r3,r2
 10054f0:	e0bffa17 	ldw	r2,-24(fp)
 10054f4:	0085c83a 	sub	r2,zero,r2
 10054f8:	18800015 	stw	r2,0(r3)
    return -1;
 10054fc:	00bfffc4 	movi	r2,-1
 1005500:	00000106 	br	1005508 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 1005504:	e0bff917 	ldw	r2,-28(fp)
}
 1005508:	e037883a 	mov	sp,fp
 100550c:	dfc00117 	ldw	ra,4(sp)
 1005510:	df000017 	ldw	fp,0(sp)
 1005514:	dec00204 	addi	sp,sp,8
 1005518:	f800283a 	ret

0100551c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100551c:	defffa04 	addi	sp,sp,-24
 1005520:	df000515 	stw	fp,20(sp)
 1005524:	df000504 	addi	fp,sp,20
 1005528:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100552c:	0005303a 	rdctl	r2,status
 1005530:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1005534:	e0fffc17 	ldw	r3,-16(fp)
 1005538:	00bfff84 	movi	r2,-2
 100553c:	1884703a 	and	r2,r3,r2
 1005540:	1001703a 	wrctl	status,r2
  
  return context;
 1005544:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1005548:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 100554c:	e0bfff17 	ldw	r2,-4(fp)
 1005550:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1005554:	e0bffd17 	ldw	r2,-12(fp)
 1005558:	10800017 	ldw	r2,0(r2)
 100555c:	e0fffd17 	ldw	r3,-12(fp)
 1005560:	18c00117 	ldw	r3,4(r3)
 1005564:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 1005568:	e0bffd17 	ldw	r2,-12(fp)
 100556c:	10800117 	ldw	r2,4(r2)
 1005570:	e0fffd17 	ldw	r3,-12(fp)
 1005574:	18c00017 	ldw	r3,0(r3)
 1005578:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100557c:	e0bffd17 	ldw	r2,-12(fp)
 1005580:	e0fffd17 	ldw	r3,-12(fp)
 1005584:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 1005588:	e0bffd17 	ldw	r2,-12(fp)
 100558c:	e0fffd17 	ldw	r3,-12(fp)
 1005590:	10c00015 	stw	r3,0(r2)
 1005594:	e0bffb17 	ldw	r2,-20(fp)
 1005598:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100559c:	e0bffe17 	ldw	r2,-8(fp)
 10055a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 10055a4:	0001883a 	nop
 10055a8:	e037883a 	mov	sp,fp
 10055ac:	df000017 	ldw	fp,0(sp)
 10055b0:	dec00104 	addi	sp,sp,4
 10055b4:	f800283a 	ret

010055b8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 10055b8:	defffb04 	addi	sp,sp,-20
 10055bc:	dfc00415 	stw	ra,16(sp)
 10055c0:	df000315 	stw	fp,12(sp)
 10055c4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 10055c8:	d0a01217 	ldw	r2,-32696(gp)
 10055cc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 10055d0:	d0a6be17 	ldw	r2,-25864(gp)
 10055d4:	10800044 	addi	r2,r2,1
 10055d8:	d0a6be15 	stw	r2,-25864(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10055dc:	00002e06 	br	1005698 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 10055e0:	e0bffd17 	ldw	r2,-12(fp)
 10055e4:	10800017 	ldw	r2,0(r2)
 10055e8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 10055ec:	e0bffd17 	ldw	r2,-12(fp)
 10055f0:	10800403 	ldbu	r2,16(r2)
 10055f4:	10803fcc 	andi	r2,r2,255
 10055f8:	10000426 	beq	r2,zero,100560c <alt_tick+0x54>
 10055fc:	d0a6be17 	ldw	r2,-25864(gp)
 1005600:	1000021e 	bne	r2,zero,100560c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 1005604:	e0bffd17 	ldw	r2,-12(fp)
 1005608:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100560c:	e0bffd17 	ldw	r2,-12(fp)
 1005610:	10800217 	ldw	r2,8(r2)
 1005614:	d0e6be17 	ldw	r3,-25864(gp)
 1005618:	18801d36 	bltu	r3,r2,1005690 <alt_tick+0xd8>
 100561c:	e0bffd17 	ldw	r2,-12(fp)
 1005620:	10800403 	ldbu	r2,16(r2)
 1005624:	10803fcc 	andi	r2,r2,255
 1005628:	1000191e 	bne	r2,zero,1005690 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 100562c:	e0bffd17 	ldw	r2,-12(fp)
 1005630:	10800317 	ldw	r2,12(r2)
 1005634:	e0fffd17 	ldw	r3,-12(fp)
 1005638:	18c00517 	ldw	r3,20(r3)
 100563c:	1809883a 	mov	r4,r3
 1005640:	103ee83a 	callr	r2
 1005644:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1005648:	e0bfff17 	ldw	r2,-4(fp)
 100564c:	1000031e 	bne	r2,zero,100565c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 1005650:	e13ffd17 	ldw	r4,-12(fp)
 1005654:	100551c0 	call	100551c <alt_alarm_stop>
 1005658:	00000d06 	br	1005690 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 100565c:	e0bffd17 	ldw	r2,-12(fp)
 1005660:	10c00217 	ldw	r3,8(r2)
 1005664:	e0bfff17 	ldw	r2,-4(fp)
 1005668:	1887883a 	add	r3,r3,r2
 100566c:	e0bffd17 	ldw	r2,-12(fp)
 1005670:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1005674:	e0bffd17 	ldw	r2,-12(fp)
 1005678:	10c00217 	ldw	r3,8(r2)
 100567c:	d0a6be17 	ldw	r2,-25864(gp)
 1005680:	1880032e 	bgeu	r3,r2,1005690 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 1005684:	e0bffd17 	ldw	r2,-12(fp)
 1005688:	00c00044 	movi	r3,1
 100568c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 1005690:	e0bffe17 	ldw	r2,-8(fp)
 1005694:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1005698:	e0fffd17 	ldw	r3,-12(fp)
 100569c:	d0a01204 	addi	r2,gp,-32696
 10056a0:	18bfcf1e 	bne	r3,r2,10055e0 <__alt_mem_TCDM+0xfefe45e0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 10056a4:	0001883a 	nop
}
 10056a8:	0001883a 	nop
 10056ac:	e037883a 	mov	sp,fp
 10056b0:	dfc00117 	ldw	ra,4(sp)
 10056b4:	df000017 	ldw	fp,0(sp)
 10056b8:	dec00204 	addi	sp,sp,8
 10056bc:	f800283a 	ret

010056c0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 10056c0:	deffff04 	addi	sp,sp,-4
 10056c4:	df000015 	stw	fp,0(sp)
 10056c8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 10056cc:	000170fa 	wrctl	ienable,zero
}
 10056d0:	0001883a 	nop
 10056d4:	e037883a 	mov	sp,fp
 10056d8:	df000017 	ldw	fp,0(sp)
 10056dc:	dec00104 	addi	sp,sp,4
 10056e0:	f800283a 	ret

010056e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 10056e4:	defffa04 	addi	sp,sp,-24
 10056e8:	dfc00515 	stw	ra,20(sp)
 10056ec:	df000415 	stw	fp,16(sp)
 10056f0:	df000404 	addi	fp,sp,16
 10056f4:	e13ffe15 	stw	r4,-8(fp)
 10056f8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 10056fc:	e0bfff17 	ldw	r2,-4(fp)
 1005700:	10800017 	ldw	r2,0(r2)
 1005704:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1005708:	e13ffe17 	ldw	r4,-8(fp)
 100570c:	10007a40 	call	10007a4 <strlen>
 1005710:	10800044 	addi	r2,r2,1
 1005714:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1005718:	00000d06 	br	1005750 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 100571c:	e0bffc17 	ldw	r2,-16(fp)
 1005720:	10800217 	ldw	r2,8(r2)
 1005724:	e0fffd17 	ldw	r3,-12(fp)
 1005728:	180d883a 	mov	r6,r3
 100572c:	e17ffe17 	ldw	r5,-8(fp)
 1005730:	1009883a 	mov	r4,r2
 1005734:	1005a980 	call	1005a98 <memcmp>
 1005738:	1000021e 	bne	r2,zero,1005744 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 100573c:	e0bffc17 	ldw	r2,-16(fp)
 1005740:	00000706 	br	1005760 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1005744:	e0bffc17 	ldw	r2,-16(fp)
 1005748:	10800017 	ldw	r2,0(r2)
 100574c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1005750:	e0fffc17 	ldw	r3,-16(fp)
 1005754:	e0bfff17 	ldw	r2,-4(fp)
 1005758:	18bff01e 	bne	r3,r2,100571c <__alt_mem_TCDM+0xfefe471c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 100575c:	0005883a 	mov	r2,zero
}
 1005760:	e037883a 	mov	sp,fp
 1005764:	dfc00117 	ldw	ra,4(sp)
 1005768:	df000017 	ldw	fp,0(sp)
 100576c:	dec00204 	addi	sp,sp,8
 1005770:	f800283a 	ret

01005774 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1005774:	defffb04 	addi	sp,sp,-20
 1005778:	dfc00415 	stw	ra,16(sp)
 100577c:	df000315 	stw	fp,12(sp)
 1005780:	df000304 	addi	fp,sp,12
 1005784:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1005788:	d0a00a17 	ldw	r2,-32728(gp)
 100578c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1005790:	00003106 	br	1005858 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 1005794:	e0bffd17 	ldw	r2,-12(fp)
 1005798:	10800217 	ldw	r2,8(r2)
 100579c:	1009883a 	mov	r4,r2
 10057a0:	10007a40 	call	10007a4 <strlen>
 10057a4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 10057a8:	e0bffd17 	ldw	r2,-12(fp)
 10057ac:	10c00217 	ldw	r3,8(r2)
 10057b0:	e0bffe17 	ldw	r2,-8(fp)
 10057b4:	10bfffc4 	addi	r2,r2,-1
 10057b8:	1885883a 	add	r2,r3,r2
 10057bc:	10800003 	ldbu	r2,0(r2)
 10057c0:	10803fcc 	andi	r2,r2,255
 10057c4:	1080201c 	xori	r2,r2,128
 10057c8:	10bfe004 	addi	r2,r2,-128
 10057cc:	10800bd8 	cmpnei	r2,r2,47
 10057d0:	1000031e 	bne	r2,zero,10057e0 <alt_find_file+0x6c>
    {
      len -= 1;
 10057d4:	e0bffe17 	ldw	r2,-8(fp)
 10057d8:	10bfffc4 	addi	r2,r2,-1
 10057dc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10057e0:	e0bffe17 	ldw	r2,-8(fp)
 10057e4:	e0ffff17 	ldw	r3,-4(fp)
 10057e8:	1885883a 	add	r2,r3,r2
 10057ec:	10800003 	ldbu	r2,0(r2)
 10057f0:	10803fcc 	andi	r2,r2,255
 10057f4:	1080201c 	xori	r2,r2,128
 10057f8:	10bfe004 	addi	r2,r2,-128
 10057fc:	10800be0 	cmpeqi	r2,r2,47
 1005800:	1000081e 	bne	r2,zero,1005824 <alt_find_file+0xb0>
 1005804:	e0bffe17 	ldw	r2,-8(fp)
 1005808:	e0ffff17 	ldw	r3,-4(fp)
 100580c:	1885883a 	add	r2,r3,r2
 1005810:	10800003 	ldbu	r2,0(r2)
 1005814:	10803fcc 	andi	r2,r2,255
 1005818:	1080201c 	xori	r2,r2,128
 100581c:	10bfe004 	addi	r2,r2,-128
 1005820:	10000a1e 	bne	r2,zero,100584c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 1005824:	e0bffd17 	ldw	r2,-12(fp)
 1005828:	10800217 	ldw	r2,8(r2)
 100582c:	e0fffe17 	ldw	r3,-8(fp)
 1005830:	180d883a 	mov	r6,r3
 1005834:	e17fff17 	ldw	r5,-4(fp)
 1005838:	1009883a 	mov	r4,r2
 100583c:	1005a980 	call	1005a98 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1005840:	1000021e 	bne	r2,zero,100584c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1005844:	e0bffd17 	ldw	r2,-12(fp)
 1005848:	00000706 	br	1005868 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 100584c:	e0bffd17 	ldw	r2,-12(fp)
 1005850:	10800017 	ldw	r2,0(r2)
 1005854:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1005858:	e0fffd17 	ldw	r3,-12(fp)
 100585c:	d0a00a04 	addi	r2,gp,-32728
 1005860:	18bfcc1e 	bne	r3,r2,1005794 <__alt_mem_TCDM+0xfefe4794>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1005864:	0005883a 	mov	r2,zero
}
 1005868:	e037883a 	mov	sp,fp
 100586c:	dfc00117 	ldw	ra,4(sp)
 1005870:	df000017 	ldw	fp,0(sp)
 1005874:	dec00204 	addi	sp,sp,8
 1005878:	f800283a 	ret

0100587c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 100587c:	defffc04 	addi	sp,sp,-16
 1005880:	df000315 	stw	fp,12(sp)
 1005884:	df000304 	addi	fp,sp,12
 1005888:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 100588c:	00bffa04 	movi	r2,-24
 1005890:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1005894:	e03ffd15 	stw	zero,-12(fp)
 1005898:	00001906 	br	1005900 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 100589c:	008041f4 	movhi	r2,263
 10058a0:	109b9f04 	addi	r2,r2,28284
 10058a4:	e0fffd17 	ldw	r3,-12(fp)
 10058a8:	18c00324 	muli	r3,r3,12
 10058ac:	10c5883a 	add	r2,r2,r3
 10058b0:	10800017 	ldw	r2,0(r2)
 10058b4:	10000f1e 	bne	r2,zero,10058f4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 10058b8:	008041f4 	movhi	r2,263
 10058bc:	109b9f04 	addi	r2,r2,28284
 10058c0:	e0fffd17 	ldw	r3,-12(fp)
 10058c4:	18c00324 	muli	r3,r3,12
 10058c8:	10c5883a 	add	r2,r2,r3
 10058cc:	e0ffff17 	ldw	r3,-4(fp)
 10058d0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 10058d4:	d0e00e17 	ldw	r3,-32712(gp)
 10058d8:	e0bffd17 	ldw	r2,-12(fp)
 10058dc:	1880020e 	bge	r3,r2,10058e8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 10058e0:	e0bffd17 	ldw	r2,-12(fp)
 10058e4:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
 10058e8:	e0bffd17 	ldw	r2,-12(fp)
 10058ec:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 10058f0:	00000606 	br	100590c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10058f4:	e0bffd17 	ldw	r2,-12(fp)
 10058f8:	10800044 	addi	r2,r2,1
 10058fc:	e0bffd15 	stw	r2,-12(fp)
 1005900:	e0bffd17 	ldw	r2,-12(fp)
 1005904:	10800810 	cmplti	r2,r2,32
 1005908:	103fe41e 	bne	r2,zero,100589c <__alt_mem_TCDM+0xfefe489c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 100590c:	e0bffe17 	ldw	r2,-8(fp)
}
 1005910:	e037883a 	mov	sp,fp
 1005914:	df000017 	ldw	fp,0(sp)
 1005918:	dec00104 	addi	sp,sp,4
 100591c:	f800283a 	ret

01005920 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1005920:	defffb04 	addi	sp,sp,-20
 1005924:	df000415 	stw	fp,16(sp)
 1005928:	df000404 	addi	fp,sp,16
 100592c:	e13ffe15 	stw	r4,-8(fp)
 1005930:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1005934:	e0bfff17 	ldw	r2,-4(fp)
 1005938:	10840070 	cmpltui	r2,r2,4097
 100593c:	1000021e 	bne	r2,zero,1005948 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1005940:	00840004 	movi	r2,4096
 1005944:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1005948:	e0fffe17 	ldw	r3,-8(fp)
 100594c:	e0bfff17 	ldw	r2,-4(fp)
 1005950:	1885883a 	add	r2,r3,r2
 1005954:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1005958:	e0bffe17 	ldw	r2,-8(fp)
 100595c:	e0bffc15 	stw	r2,-16(fp)
 1005960:	00000506 	br	1005978 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1005964:	e0bffc17 	ldw	r2,-16(fp)
 1005968:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100596c:	e0bffc17 	ldw	r2,-16(fp)
 1005970:	10800804 	addi	r2,r2,32
 1005974:	e0bffc15 	stw	r2,-16(fp)
 1005978:	e0fffc17 	ldw	r3,-16(fp)
 100597c:	e0bffd17 	ldw	r2,-12(fp)
 1005980:	18bff836 	bltu	r3,r2,1005964 <__alt_mem_TCDM+0xfefe4964>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1005984:	e0bffe17 	ldw	r2,-8(fp)
 1005988:	108007cc 	andi	r2,r2,31
 100598c:	10000226 	beq	r2,zero,1005998 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1005990:	e0bffc17 	ldw	r2,-16(fp)
 1005994:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 1005998:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 100599c:	0001883a 	nop
 10059a0:	e037883a 	mov	sp,fp
 10059a4:	df000017 	ldw	fp,0(sp)
 10059a8:	dec00104 	addi	sp,sp,4
 10059ac:	f800283a 	ret

010059b0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 10059b0:	defffe04 	addi	sp,sp,-8
 10059b4:	df000115 	stw	fp,4(sp)
 10059b8:	df000104 	addi	fp,sp,4
 10059bc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 10059c0:	e0bfff17 	ldw	r2,-4(fp)
 10059c4:	10bffe84 	addi	r2,r2,-6
 10059c8:	10c00428 	cmpgeui	r3,r2,16
 10059cc:	18001a1e 	bne	r3,zero,1005a38 <alt_exception_cause_generated_bad_addr+0x88>
 10059d0:	100690ba 	slli	r3,r2,2
 10059d4:	00804034 	movhi	r2,256
 10059d8:	10967a04 	addi	r2,r2,23016
 10059dc:	1885883a 	add	r2,r3,r2
 10059e0:	10800017 	ldw	r2,0(r2)
 10059e4:	1000683a 	jmp	r2
 10059e8:	01005a28 	cmpgeui	r4,zero,360
 10059ec:	01005a28 	cmpgeui	r4,zero,360
 10059f0:	01005a38 	rdprs	r4,zero,360
 10059f4:	01005a38 	rdprs	r4,zero,360
 10059f8:	01005a38 	rdprs	r4,zero,360
 10059fc:	01005a28 	cmpgeui	r4,zero,360
 1005a00:	01005a30 	cmpltui	r4,zero,360
 1005a04:	01005a38 	rdprs	r4,zero,360
 1005a08:	01005a28 	cmpgeui	r4,zero,360
 1005a0c:	01005a28 	cmpgeui	r4,zero,360
 1005a10:	01005a38 	rdprs	r4,zero,360
 1005a14:	01005a28 	cmpgeui	r4,zero,360
 1005a18:	01005a30 	cmpltui	r4,zero,360
 1005a1c:	01005a38 	rdprs	r4,zero,360
 1005a20:	01005a38 	rdprs	r4,zero,360
 1005a24:	01005a28 	cmpgeui	r4,zero,360
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 1005a28:	00800044 	movi	r2,1
 1005a2c:	00000306 	br	1005a3c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 1005a30:	0005883a 	mov	r2,zero
 1005a34:	00000106 	br	1005a3c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 1005a38:	0005883a 	mov	r2,zero
  }
}
 1005a3c:	e037883a 	mov	sp,fp
 1005a40:	df000017 	ldw	fp,0(sp)
 1005a44:	dec00104 	addi	sp,sp,4
 1005a48:	f800283a 	ret

01005a4c <atexit>:
 1005a4c:	200b883a 	mov	r5,r4
 1005a50:	000f883a 	mov	r7,zero
 1005a54:	000d883a 	mov	r6,zero
 1005a58:	0009883a 	mov	r4,zero
 1005a5c:	1005b141 	jmpi	1005b14 <__register_exitproc>

01005a60 <exit>:
 1005a60:	defffe04 	addi	sp,sp,-8
 1005a64:	000b883a 	mov	r5,zero
 1005a68:	dc000015 	stw	r16,0(sp)
 1005a6c:	dfc00115 	stw	ra,4(sp)
 1005a70:	2021883a 	mov	r16,r4
 1005a74:	1005c2c0 	call	1005c2c <__call_exitprocs>
 1005a78:	00804234 	movhi	r2,264
 1005a7c:	10a01d04 	addi	r2,r2,-32652
 1005a80:	11000017 	ldw	r4,0(r2)
 1005a84:	20800f17 	ldw	r2,60(r4)
 1005a88:	10000126 	beq	r2,zero,1005a90 <exit+0x30>
 1005a8c:	103ee83a 	callr	r2
 1005a90:	8009883a 	mov	r4,r16
 1005a94:	1005dac0 	call	1005dac <_exit>

01005a98 <memcmp>:
 1005a98:	01c000c4 	movi	r7,3
 1005a9c:	3980192e 	bgeu	r7,r6,1005b04 <memcmp+0x6c>
 1005aa0:	2144b03a 	or	r2,r4,r5
 1005aa4:	11c4703a 	and	r2,r2,r7
 1005aa8:	10000f26 	beq	r2,zero,1005ae8 <memcmp+0x50>
 1005aac:	20800003 	ldbu	r2,0(r4)
 1005ab0:	28c00003 	ldbu	r3,0(r5)
 1005ab4:	10c0151e 	bne	r2,r3,1005b0c <memcmp+0x74>
 1005ab8:	31bfff84 	addi	r6,r6,-2
 1005abc:	01ffffc4 	movi	r7,-1
 1005ac0:	00000406 	br	1005ad4 <memcmp+0x3c>
 1005ac4:	20800003 	ldbu	r2,0(r4)
 1005ac8:	28c00003 	ldbu	r3,0(r5)
 1005acc:	31bfffc4 	addi	r6,r6,-1
 1005ad0:	10c00e1e 	bne	r2,r3,1005b0c <memcmp+0x74>
 1005ad4:	21000044 	addi	r4,r4,1
 1005ad8:	29400044 	addi	r5,r5,1
 1005adc:	31fff91e 	bne	r6,r7,1005ac4 <__alt_mem_TCDM+0xfefe4ac4>
 1005ae0:	0005883a 	mov	r2,zero
 1005ae4:	f800283a 	ret
 1005ae8:	20c00017 	ldw	r3,0(r4)
 1005aec:	28800017 	ldw	r2,0(r5)
 1005af0:	18bfee1e 	bne	r3,r2,1005aac <__alt_mem_TCDM+0xfefe4aac>
 1005af4:	31bfff04 	addi	r6,r6,-4
 1005af8:	21000104 	addi	r4,r4,4
 1005afc:	29400104 	addi	r5,r5,4
 1005b00:	39bff936 	bltu	r7,r6,1005ae8 <__alt_mem_TCDM+0xfefe4ae8>
 1005b04:	303fe91e 	bne	r6,zero,1005aac <__alt_mem_TCDM+0xfefe4aac>
 1005b08:	003ff506 	br	1005ae0 <__alt_mem_TCDM+0xfefe4ae0>
 1005b0c:	10c5c83a 	sub	r2,r2,r3
 1005b10:	f800283a 	ret

01005b14 <__register_exitproc>:
 1005b14:	defffa04 	addi	sp,sp,-24
 1005b18:	dc000315 	stw	r16,12(sp)
 1005b1c:	04004234 	movhi	r16,264
 1005b20:	84201d04 	addi	r16,r16,-32652
 1005b24:	80c00017 	ldw	r3,0(r16)
 1005b28:	dc400415 	stw	r17,16(sp)
 1005b2c:	dfc00515 	stw	ra,20(sp)
 1005b30:	18805217 	ldw	r2,328(r3)
 1005b34:	2023883a 	mov	r17,r4
 1005b38:	10003726 	beq	r2,zero,1005c18 <__register_exitproc+0x104>
 1005b3c:	10c00117 	ldw	r3,4(r2)
 1005b40:	010007c4 	movi	r4,31
 1005b44:	20c00e16 	blt	r4,r3,1005b80 <__register_exitproc+0x6c>
 1005b48:	1a000044 	addi	r8,r3,1
 1005b4c:	8800221e 	bne	r17,zero,1005bd8 <__register_exitproc+0xc4>
 1005b50:	18c00084 	addi	r3,r3,2
 1005b54:	18c7883a 	add	r3,r3,r3
 1005b58:	18c7883a 	add	r3,r3,r3
 1005b5c:	12000115 	stw	r8,4(r2)
 1005b60:	10c7883a 	add	r3,r2,r3
 1005b64:	19400015 	stw	r5,0(r3)
 1005b68:	0005883a 	mov	r2,zero
 1005b6c:	dfc00517 	ldw	ra,20(sp)
 1005b70:	dc400417 	ldw	r17,16(sp)
 1005b74:	dc000317 	ldw	r16,12(sp)
 1005b78:	dec00604 	addi	sp,sp,24
 1005b7c:	f800283a 	ret
 1005b80:	00800034 	movhi	r2,0
 1005b84:	10800004 	addi	r2,r2,0
 1005b88:	10002626 	beq	r2,zero,1005c24 <__register_exitproc+0x110>
 1005b8c:	01006404 	movi	r4,400
 1005b90:	d9400015 	stw	r5,0(sp)
 1005b94:	d9800115 	stw	r6,4(sp)
 1005b98:	d9c00215 	stw	r7,8(sp)
 1005b9c:	00000000 	call	0 <__reset-0x1000000>
 1005ba0:	d9400017 	ldw	r5,0(sp)
 1005ba4:	d9800117 	ldw	r6,4(sp)
 1005ba8:	d9c00217 	ldw	r7,8(sp)
 1005bac:	10001d26 	beq	r2,zero,1005c24 <__register_exitproc+0x110>
 1005bb0:	81000017 	ldw	r4,0(r16)
 1005bb4:	10000115 	stw	zero,4(r2)
 1005bb8:	02000044 	movi	r8,1
 1005bbc:	22405217 	ldw	r9,328(r4)
 1005bc0:	0007883a 	mov	r3,zero
 1005bc4:	12400015 	stw	r9,0(r2)
 1005bc8:	20805215 	stw	r2,328(r4)
 1005bcc:	10006215 	stw	zero,392(r2)
 1005bd0:	10006315 	stw	zero,396(r2)
 1005bd4:	883fde26 	beq	r17,zero,1005b50 <__alt_mem_TCDM+0xfefe4b50>
 1005bd8:	18c9883a 	add	r4,r3,r3
 1005bdc:	2109883a 	add	r4,r4,r4
 1005be0:	1109883a 	add	r4,r2,r4
 1005be4:	21802215 	stw	r6,136(r4)
 1005be8:	01800044 	movi	r6,1
 1005bec:	12406217 	ldw	r9,392(r2)
 1005bf0:	30cc983a 	sll	r6,r6,r3
 1005bf4:	4992b03a 	or	r9,r9,r6
 1005bf8:	12406215 	stw	r9,392(r2)
 1005bfc:	21c04215 	stw	r7,264(r4)
 1005c00:	01000084 	movi	r4,2
 1005c04:	893fd21e 	bne	r17,r4,1005b50 <__alt_mem_TCDM+0xfefe4b50>
 1005c08:	11006317 	ldw	r4,396(r2)
 1005c0c:	218cb03a 	or	r6,r4,r6
 1005c10:	11806315 	stw	r6,396(r2)
 1005c14:	003fce06 	br	1005b50 <__alt_mem_TCDM+0xfefe4b50>
 1005c18:	18805304 	addi	r2,r3,332
 1005c1c:	18805215 	stw	r2,328(r3)
 1005c20:	003fc606 	br	1005b3c <__alt_mem_TCDM+0xfefe4b3c>
 1005c24:	00bfffc4 	movi	r2,-1
 1005c28:	003fd006 	br	1005b6c <__alt_mem_TCDM+0xfefe4b6c>

01005c2c <__call_exitprocs>:
 1005c2c:	defff504 	addi	sp,sp,-44
 1005c30:	df000915 	stw	fp,36(sp)
 1005c34:	dd400615 	stw	r21,24(sp)
 1005c38:	dc800315 	stw	r18,12(sp)
 1005c3c:	dfc00a15 	stw	ra,40(sp)
 1005c40:	ddc00815 	stw	r23,32(sp)
 1005c44:	dd800715 	stw	r22,28(sp)
 1005c48:	dd000515 	stw	r20,20(sp)
 1005c4c:	dcc00415 	stw	r19,16(sp)
 1005c50:	dc400215 	stw	r17,8(sp)
 1005c54:	dc000115 	stw	r16,4(sp)
 1005c58:	d9000015 	stw	r4,0(sp)
 1005c5c:	2839883a 	mov	fp,r5
 1005c60:	04800044 	movi	r18,1
 1005c64:	057fffc4 	movi	r21,-1
 1005c68:	00804234 	movhi	r2,264
 1005c6c:	10a01d04 	addi	r2,r2,-32652
 1005c70:	12000017 	ldw	r8,0(r2)
 1005c74:	45005217 	ldw	r20,328(r8)
 1005c78:	44c05204 	addi	r19,r8,328
 1005c7c:	a0001c26 	beq	r20,zero,1005cf0 <__call_exitprocs+0xc4>
 1005c80:	a0800117 	ldw	r2,4(r20)
 1005c84:	15ffffc4 	addi	r23,r2,-1
 1005c88:	b8000d16 	blt	r23,zero,1005cc0 <__call_exitprocs+0x94>
 1005c8c:	14000044 	addi	r16,r2,1
 1005c90:	8421883a 	add	r16,r16,r16
 1005c94:	8421883a 	add	r16,r16,r16
 1005c98:	84402004 	addi	r17,r16,128
 1005c9c:	a463883a 	add	r17,r20,r17
 1005ca0:	a421883a 	add	r16,r20,r16
 1005ca4:	e0001e26 	beq	fp,zero,1005d20 <__call_exitprocs+0xf4>
 1005ca8:	80804017 	ldw	r2,256(r16)
 1005cac:	e0801c26 	beq	fp,r2,1005d20 <__call_exitprocs+0xf4>
 1005cb0:	bdffffc4 	addi	r23,r23,-1
 1005cb4:	843fff04 	addi	r16,r16,-4
 1005cb8:	8c7fff04 	addi	r17,r17,-4
 1005cbc:	bd7ff91e 	bne	r23,r21,1005ca4 <__alt_mem_TCDM+0xfefe4ca4>
 1005cc0:	00800034 	movhi	r2,0
 1005cc4:	10800004 	addi	r2,r2,0
 1005cc8:	10000926 	beq	r2,zero,1005cf0 <__call_exitprocs+0xc4>
 1005ccc:	a0800117 	ldw	r2,4(r20)
 1005cd0:	1000301e 	bne	r2,zero,1005d94 <__call_exitprocs+0x168>
 1005cd4:	a0800017 	ldw	r2,0(r20)
 1005cd8:	10003226 	beq	r2,zero,1005da4 <__call_exitprocs+0x178>
 1005cdc:	a009883a 	mov	r4,r20
 1005ce0:	98800015 	stw	r2,0(r19)
 1005ce4:	00000000 	call	0 <__reset-0x1000000>
 1005ce8:	9d000017 	ldw	r20,0(r19)
 1005cec:	a03fe41e 	bne	r20,zero,1005c80 <__alt_mem_TCDM+0xfefe4c80>
 1005cf0:	dfc00a17 	ldw	ra,40(sp)
 1005cf4:	df000917 	ldw	fp,36(sp)
 1005cf8:	ddc00817 	ldw	r23,32(sp)
 1005cfc:	dd800717 	ldw	r22,28(sp)
 1005d00:	dd400617 	ldw	r21,24(sp)
 1005d04:	dd000517 	ldw	r20,20(sp)
 1005d08:	dcc00417 	ldw	r19,16(sp)
 1005d0c:	dc800317 	ldw	r18,12(sp)
 1005d10:	dc400217 	ldw	r17,8(sp)
 1005d14:	dc000117 	ldw	r16,4(sp)
 1005d18:	dec00b04 	addi	sp,sp,44
 1005d1c:	f800283a 	ret
 1005d20:	a0800117 	ldw	r2,4(r20)
 1005d24:	80c00017 	ldw	r3,0(r16)
 1005d28:	10bfffc4 	addi	r2,r2,-1
 1005d2c:	15c01426 	beq	r2,r23,1005d80 <__call_exitprocs+0x154>
 1005d30:	80000015 	stw	zero,0(r16)
 1005d34:	183fde26 	beq	r3,zero,1005cb0 <__alt_mem_TCDM+0xfefe4cb0>
 1005d38:	95c8983a 	sll	r4,r18,r23
 1005d3c:	a0806217 	ldw	r2,392(r20)
 1005d40:	a5800117 	ldw	r22,4(r20)
 1005d44:	2084703a 	and	r2,r4,r2
 1005d48:	10000b26 	beq	r2,zero,1005d78 <__call_exitprocs+0x14c>
 1005d4c:	a0806317 	ldw	r2,396(r20)
 1005d50:	2088703a 	and	r4,r4,r2
 1005d54:	20000c1e 	bne	r4,zero,1005d88 <__call_exitprocs+0x15c>
 1005d58:	89400017 	ldw	r5,0(r17)
 1005d5c:	d9000017 	ldw	r4,0(sp)
 1005d60:	183ee83a 	callr	r3
 1005d64:	a0800117 	ldw	r2,4(r20)
 1005d68:	15bfbf1e 	bne	r2,r22,1005c68 <__alt_mem_TCDM+0xfefe4c68>
 1005d6c:	98800017 	ldw	r2,0(r19)
 1005d70:	153fcf26 	beq	r2,r20,1005cb0 <__alt_mem_TCDM+0xfefe4cb0>
 1005d74:	003fbc06 	br	1005c68 <__alt_mem_TCDM+0xfefe4c68>
 1005d78:	183ee83a 	callr	r3
 1005d7c:	003ff906 	br	1005d64 <__alt_mem_TCDM+0xfefe4d64>
 1005d80:	a5c00115 	stw	r23,4(r20)
 1005d84:	003feb06 	br	1005d34 <__alt_mem_TCDM+0xfefe4d34>
 1005d88:	89000017 	ldw	r4,0(r17)
 1005d8c:	183ee83a 	callr	r3
 1005d90:	003ff406 	br	1005d64 <__alt_mem_TCDM+0xfefe4d64>
 1005d94:	a0800017 	ldw	r2,0(r20)
 1005d98:	a027883a 	mov	r19,r20
 1005d9c:	1029883a 	mov	r20,r2
 1005da0:	003fb606 	br	1005c7c <__alt_mem_TCDM+0xfefe4c7c>
 1005da4:	0005883a 	mov	r2,zero
 1005da8:	003ffb06 	br	1005d98 <__alt_mem_TCDM+0xfefe4d98>

01005dac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1005dac:	defffd04 	addi	sp,sp,-12
 1005db0:	df000215 	stw	fp,8(sp)
 1005db4:	df000204 	addi	fp,sp,8
 1005db8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 1005dbc:	0001883a 	nop
 1005dc0:	e0bfff17 	ldw	r2,-4(fp)
 1005dc4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 1005dc8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1005dcc:	10000226 	beq	r2,zero,1005dd8 <_exit+0x2c>
    ALT_SIM_FAIL();
 1005dd0:	002af070 	cmpltui	zero,zero,43969
 1005dd4:	00000106 	br	1005ddc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 1005dd8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1005ddc:	003fff06 	br	1005ddc <__alt_mem_TCDM+0xfefe4ddc>
