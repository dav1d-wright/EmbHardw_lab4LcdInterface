// systemFile.v

// Generated using ACDS version 17.0 595

`timescale 1 ps / 1 ps
module systemFile (
		output wire        altpll_0_c2_clk,            //     altpll_0_c2.clk
		output wire        altpll_1_c0_clk,            //     altpll_1_c0.clk
		input  wire        clk_clk,                    //             clk.clk
		output wire        lcd_conduit_end_cs_n,       // lcd_conduit_end.cs_n
		inout  wire [15:0] lcd_conduit_end_data,       //                .data
		output wire        lcd_conduit_end_data_cmd_n, //                .data_cmd_n
		output wire        lcd_conduit_end_mode,       //                .mode
		output wire        lcd_conduit_end_rd_n,       //                .rd_n
		output wire        lcd_conduit_end_wr_n,       //                .wr_n
		output wire        lcd_conduit_end_lcdreset_n, //                .lcdreset_n
		input  wire        reset_reset_n,              //           reset.reset_n
		output wire [11:0] sdram_ctrl_wire_addr,       // sdram_ctrl_wire.addr
		output wire [1:0]  sdram_ctrl_wire_ba,         //                .ba
		output wire        sdram_ctrl_wire_cas_n,      //                .cas_n
		output wire        sdram_ctrl_wire_cke,        //                .cke
		output wire        sdram_ctrl_wire_cs_n,       //                .cs_n
		inout  wire [15:0] sdram_ctrl_wire_dq,         //                .dq
		output wire [1:0]  sdram_ctrl_wire_dqm,        //                .dqm
		output wire        sdram_ctrl_wire_ras_n,      //                .ras_n
		output wire        sdram_ctrl_wire_we_n        //                .we_n
	);

	wire         altpll_0_c0_clk;                                                     // altpll_0:c0 -> [CPU:clk, LCD:Clk_CI, SDRAM_ctrl:clk, TCDM:clk, TCIM:clk, TCIM:clk2, altpll_signalTap:clk, irq_mapper:clk, jtag_uart:clk, mm_interconnect_0:altpll_0_c0_clk, mm_interconnect_1:altpll_0_c0_clk, mm_interconnect_2:altpll_0_c0_clk, performance_counter_0:clk, rst_controller:clk, sysid:clock, timer_0:clk]
	wire  [31:0] cpu_data_master_readdata;                                            // mm_interconnect_0:CPU_data_master_readdata -> CPU:d_readdata
	wire         cpu_data_master_waitrequest;                                         // mm_interconnect_0:CPU_data_master_waitrequest -> CPU:d_waitrequest
	wire         cpu_data_master_debugaccess;                                         // CPU:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:CPU_data_master_debugaccess
	wire  [25:0] cpu_data_master_address;                                             // CPU:d_address -> mm_interconnect_0:CPU_data_master_address
	wire   [3:0] cpu_data_master_byteenable;                                          // CPU:d_byteenable -> mm_interconnect_0:CPU_data_master_byteenable
	wire         cpu_data_master_read;                                                // CPU:d_read -> mm_interconnect_0:CPU_data_master_read
	wire         cpu_data_master_readdatavalid;                                       // mm_interconnect_0:CPU_data_master_readdatavalid -> CPU:d_readdatavalid
	wire         cpu_data_master_write;                                               // CPU:d_write -> mm_interconnect_0:CPU_data_master_write
	wire  [31:0] cpu_data_master_writedata;                                           // CPU:d_writedata -> mm_interconnect_0:CPU_data_master_writedata
	wire  [31:0] cpu_instruction_master_readdata;                                     // mm_interconnect_0:CPU_instruction_master_readdata -> CPU:i_readdata
	wire         cpu_instruction_master_waitrequest;                                  // mm_interconnect_0:CPU_instruction_master_waitrequest -> CPU:i_waitrequest
	wire  [25:0] cpu_instruction_master_address;                                      // CPU:i_address -> mm_interconnect_0:CPU_instruction_master_address
	wire         cpu_instruction_master_read;                                         // CPU:i_read -> mm_interconnect_0:CPU_instruction_master_read
	wire         cpu_instruction_master_readdatavalid;                                // mm_interconnect_0:CPU_instruction_master_readdatavalid -> CPU:i_readdatavalid
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect;            // mm_interconnect_0:jtag_uart_avalon_jtag_slave_chipselect -> jtag_uart:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata;              // jtag_uart:av_readdata -> mm_interconnect_0:jtag_uart_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest;           // jtag_uart:av_waitrequest -> mm_interconnect_0:jtag_uart_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_address;               // mm_interconnect_0:jtag_uart_avalon_jtag_slave_address -> jtag_uart:av_address
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_read;                  // mm_interconnect_0:jtag_uart_avalon_jtag_slave_read -> jtag_uart:av_read_n
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_write;                 // mm_interconnect_0:jtag_uart_avalon_jtag_slave_write -> jtag_uart:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata;             // mm_interconnect_0:jtag_uart_avalon_jtag_slave_writedata -> jtag_uart:av_writedata
	wire         mm_interconnect_0_lcd_avalon_slave_beginbursttransfer;               // mm_interconnect_0:LCD_avalon_slave_beginbursttransfer -> LCD:BeginBurstTransfer_SI
	wire  [15:0] mm_interconnect_0_lcd_avalon_slave_readdata;                         // LCD:ReadData_DO -> mm_interconnect_0:LCD_avalon_slave_readdata
	wire         mm_interconnect_0_lcd_avalon_slave_waitrequest;                      // LCD:WaitReq_SO -> mm_interconnect_0:LCD_avalon_slave_waitrequest
	wire   [2:0] mm_interconnect_0_lcd_avalon_slave_address;                          // mm_interconnect_0:LCD_avalon_slave_address -> LCD:Address_DI
	wire         mm_interconnect_0_lcd_avalon_slave_read;                             // mm_interconnect_0:LCD_avalon_slave_read -> LCD:Read_SI
	wire   [1:0] mm_interconnect_0_lcd_avalon_slave_byteenable;                       // mm_interconnect_0:LCD_avalon_slave_byteenable -> LCD:ByteEnable_DI
	wire         mm_interconnect_0_lcd_avalon_slave_readdatavalid;                    // LCD:ReadDataValid_SO -> mm_interconnect_0:LCD_avalon_slave_readdatavalid
	wire         mm_interconnect_0_lcd_avalon_slave_write;                            // mm_interconnect_0:LCD_avalon_slave_write -> LCD:Write_SI
	wire  [15:0] mm_interconnect_0_lcd_avalon_slave_writedata;                        // mm_interconnect_0:LCD_avalon_slave_writedata -> LCD:WriteData_DI
	wire   [7:0] mm_interconnect_0_lcd_avalon_slave_burstcount;                       // mm_interconnect_0:LCD_avalon_slave_burstcount -> LCD:BurstCount_DI
	wire  [31:0] mm_interconnect_0_sysid_control_slave_readdata;                      // sysid:readdata -> mm_interconnect_0:sysid_control_slave_readdata
	wire   [0:0] mm_interconnect_0_sysid_control_slave_address;                       // mm_interconnect_0:sysid_control_slave_address -> sysid:address
	wire  [31:0] mm_interconnect_0_performance_counter_0_control_slave_readdata;      // performance_counter_0:readdata -> mm_interconnect_0:performance_counter_0_control_slave_readdata
	wire   [4:0] mm_interconnect_0_performance_counter_0_control_slave_address;       // mm_interconnect_0:performance_counter_0_control_slave_address -> performance_counter_0:address
	wire         mm_interconnect_0_performance_counter_0_control_slave_begintransfer; // mm_interconnect_0:performance_counter_0_control_slave_begintransfer -> performance_counter_0:begintransfer
	wire         mm_interconnect_0_performance_counter_0_control_slave_write;         // mm_interconnect_0:performance_counter_0_control_slave_write -> performance_counter_0:write
	wire  [31:0] mm_interconnect_0_performance_counter_0_control_slave_writedata;     // mm_interconnect_0:performance_counter_0_control_slave_writedata -> performance_counter_0:writedata
	wire  [31:0] mm_interconnect_0_cpu_debug_mem_slave_readdata;                      // CPU:debug_mem_slave_readdata -> mm_interconnect_0:CPU_debug_mem_slave_readdata
	wire         mm_interconnect_0_cpu_debug_mem_slave_waitrequest;                   // CPU:debug_mem_slave_waitrequest -> mm_interconnect_0:CPU_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_cpu_debug_mem_slave_debugaccess;                   // mm_interconnect_0:CPU_debug_mem_slave_debugaccess -> CPU:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_cpu_debug_mem_slave_address;                       // mm_interconnect_0:CPU_debug_mem_slave_address -> CPU:debug_mem_slave_address
	wire         mm_interconnect_0_cpu_debug_mem_slave_read;                          // mm_interconnect_0:CPU_debug_mem_slave_read -> CPU:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_cpu_debug_mem_slave_byteenable;                    // mm_interconnect_0:CPU_debug_mem_slave_byteenable -> CPU:debug_mem_slave_byteenable
	wire         mm_interconnect_0_cpu_debug_mem_slave_write;                         // mm_interconnect_0:CPU_debug_mem_slave_write -> CPU:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_cpu_debug_mem_slave_writedata;                     // mm_interconnect_0:CPU_debug_mem_slave_writedata -> CPU:debug_mem_slave_writedata
	wire  [31:0] mm_interconnect_0_altpll_0_pll_slave_readdata;                       // altpll_0:readdata -> mm_interconnect_0:altpll_0_pll_slave_readdata
	wire   [1:0] mm_interconnect_0_altpll_0_pll_slave_address;                        // mm_interconnect_0:altpll_0_pll_slave_address -> altpll_0:address
	wire         mm_interconnect_0_altpll_0_pll_slave_read;                           // mm_interconnect_0:altpll_0_pll_slave_read -> altpll_0:read
	wire         mm_interconnect_0_altpll_0_pll_slave_write;                          // mm_interconnect_0:altpll_0_pll_slave_write -> altpll_0:write
	wire  [31:0] mm_interconnect_0_altpll_0_pll_slave_writedata;                      // mm_interconnect_0:altpll_0_pll_slave_writedata -> altpll_0:writedata
	wire  [31:0] mm_interconnect_0_altpll_signaltap_pll_slave_readdata;               // altpll_signalTap:readdata -> mm_interconnect_0:altpll_signalTap_pll_slave_readdata
	wire   [1:0] mm_interconnect_0_altpll_signaltap_pll_slave_address;                // mm_interconnect_0:altpll_signalTap_pll_slave_address -> altpll_signalTap:address
	wire         mm_interconnect_0_altpll_signaltap_pll_slave_read;                   // mm_interconnect_0:altpll_signalTap_pll_slave_read -> altpll_signalTap:read
	wire         mm_interconnect_0_altpll_signaltap_pll_slave_write;                  // mm_interconnect_0:altpll_signalTap_pll_slave_write -> altpll_signalTap:write
	wire  [31:0] mm_interconnect_0_altpll_signaltap_pll_slave_writedata;              // mm_interconnect_0:altpll_signalTap_pll_slave_writedata -> altpll_signalTap:writedata
	wire         mm_interconnect_0_sdram_ctrl_s1_chipselect;                          // mm_interconnect_0:SDRAM_ctrl_s1_chipselect -> SDRAM_ctrl:az_cs
	wire  [15:0] mm_interconnect_0_sdram_ctrl_s1_readdata;                            // SDRAM_ctrl:za_data -> mm_interconnect_0:SDRAM_ctrl_s1_readdata
	wire         mm_interconnect_0_sdram_ctrl_s1_waitrequest;                         // SDRAM_ctrl:za_waitrequest -> mm_interconnect_0:SDRAM_ctrl_s1_waitrequest
	wire  [22:0] mm_interconnect_0_sdram_ctrl_s1_address;                             // mm_interconnect_0:SDRAM_ctrl_s1_address -> SDRAM_ctrl:az_addr
	wire         mm_interconnect_0_sdram_ctrl_s1_read;                                // mm_interconnect_0:SDRAM_ctrl_s1_read -> SDRAM_ctrl:az_rd_n
	wire   [1:0] mm_interconnect_0_sdram_ctrl_s1_byteenable;                          // mm_interconnect_0:SDRAM_ctrl_s1_byteenable -> SDRAM_ctrl:az_be_n
	wire         mm_interconnect_0_sdram_ctrl_s1_readdatavalid;                       // SDRAM_ctrl:za_valid -> mm_interconnect_0:SDRAM_ctrl_s1_readdatavalid
	wire         mm_interconnect_0_sdram_ctrl_s1_write;                               // mm_interconnect_0:SDRAM_ctrl_s1_write -> SDRAM_ctrl:az_wr_n
	wire  [15:0] mm_interconnect_0_sdram_ctrl_s1_writedata;                           // mm_interconnect_0:SDRAM_ctrl_s1_writedata -> SDRAM_ctrl:az_data
	wire         mm_interconnect_0_timer_0_s1_chipselect;                             // mm_interconnect_0:timer_0_s1_chipselect -> timer_0:chipselect
	wire  [15:0] mm_interconnect_0_timer_0_s1_readdata;                               // timer_0:readdata -> mm_interconnect_0:timer_0_s1_readdata
	wire   [2:0] mm_interconnect_0_timer_0_s1_address;                                // mm_interconnect_0:timer_0_s1_address -> timer_0:address
	wire         mm_interconnect_0_timer_0_s1_write;                                  // mm_interconnect_0:timer_0_s1_write -> timer_0:write_n
	wire  [15:0] mm_interconnect_0_timer_0_s1_writedata;                              // mm_interconnect_0:timer_0_s1_writedata -> timer_0:writedata
	wire         mm_interconnect_0_tcim_s2_chipselect;                                // mm_interconnect_0:TCIM_s2_chipselect -> TCIM:chipselect2
	wire  [31:0] mm_interconnect_0_tcim_s2_readdata;                                  // TCIM:readdata2 -> mm_interconnect_0:TCIM_s2_readdata
	wire   [9:0] mm_interconnect_0_tcim_s2_address;                                   // mm_interconnect_0:TCIM_s2_address -> TCIM:address2
	wire   [3:0] mm_interconnect_0_tcim_s2_byteenable;                                // mm_interconnect_0:TCIM_s2_byteenable -> TCIM:byteenable2
	wire         mm_interconnect_0_tcim_s2_write;                                     // mm_interconnect_0:TCIM_s2_write -> TCIM:write2
	wire  [31:0] mm_interconnect_0_tcim_s2_writedata;                                 // mm_interconnect_0:TCIM_s2_writedata -> TCIM:writedata2
	wire         mm_interconnect_0_tcim_s2_clken;                                     // mm_interconnect_0:TCIM_s2_clken -> TCIM:clken2
	wire  [31:0] cpu_tightly_coupled_data_master_0_readdata;                          // mm_interconnect_1:CPU_tightly_coupled_data_master_0_readdata -> CPU:dtcm0_readdata
	wire  [25:0] cpu_tightly_coupled_data_master_0_address;                           // CPU:dtcm0_address -> mm_interconnect_1:CPU_tightly_coupled_data_master_0_address
	wire         cpu_tightly_coupled_data_master_0_read;                              // CPU:dtcm0_read -> mm_interconnect_1:CPU_tightly_coupled_data_master_0_read
	wire   [3:0] cpu_tightly_coupled_data_master_0_byteenable;                        // CPU:dtcm0_byteenable -> mm_interconnect_1:CPU_tightly_coupled_data_master_0_byteenable
	wire         cpu_tightly_coupled_data_master_0_write;                             // CPU:dtcm0_write -> mm_interconnect_1:CPU_tightly_coupled_data_master_0_write
	wire  [31:0] cpu_tightly_coupled_data_master_0_writedata;                         // CPU:dtcm0_writedata -> mm_interconnect_1:CPU_tightly_coupled_data_master_0_writedata
	wire         cpu_tightly_coupled_data_master_0_clken;                             // CPU:dtcm0_clken -> mm_interconnect_1:CPU_tightly_coupled_data_master_0_clken
	wire         mm_interconnect_1_tcdm_s1_chipselect;                                // mm_interconnect_1:TCDM_s1_chipselect -> TCDM:chipselect
	wire  [31:0] mm_interconnect_1_tcdm_s1_readdata;                                  // TCDM:readdata -> mm_interconnect_1:TCDM_s1_readdata
	wire   [9:0] mm_interconnect_1_tcdm_s1_address;                                   // mm_interconnect_1:TCDM_s1_address -> TCDM:address
	wire   [3:0] mm_interconnect_1_tcdm_s1_byteenable;                                // mm_interconnect_1:TCDM_s1_byteenable -> TCDM:byteenable
	wire         mm_interconnect_1_tcdm_s1_write;                                     // mm_interconnect_1:TCDM_s1_write -> TCDM:write
	wire  [31:0] mm_interconnect_1_tcdm_s1_writedata;                                 // mm_interconnect_1:TCDM_s1_writedata -> TCDM:writedata
	wire         mm_interconnect_1_tcdm_s1_clken;                                     // mm_interconnect_1:TCDM_s1_clken -> TCDM:clken
	wire  [31:0] cpu_tightly_coupled_instruction_master_0_readdata;                   // mm_interconnect_2:CPU_tightly_coupled_instruction_master_0_readdata -> CPU:itcm0_readdata
	wire  [25:0] cpu_tightly_coupled_instruction_master_0_address;                    // CPU:itcm0_address -> mm_interconnect_2:CPU_tightly_coupled_instruction_master_0_address
	wire         cpu_tightly_coupled_instruction_master_0_read;                       // CPU:itcm0_read -> mm_interconnect_2:CPU_tightly_coupled_instruction_master_0_read
	wire         cpu_tightly_coupled_instruction_master_0_clken;                      // CPU:itcm0_clken -> mm_interconnect_2:CPU_tightly_coupled_instruction_master_0_clken
	wire         mm_interconnect_2_tcim_s1_chipselect;                                // mm_interconnect_2:TCIM_s1_chipselect -> TCIM:chipselect
	wire  [31:0] mm_interconnect_2_tcim_s1_readdata;                                  // TCIM:readdata -> mm_interconnect_2:TCIM_s1_readdata
	wire   [9:0] mm_interconnect_2_tcim_s1_address;                                   // mm_interconnect_2:TCIM_s1_address -> TCIM:address
	wire   [3:0] mm_interconnect_2_tcim_s1_byteenable;                                // mm_interconnect_2:TCIM_s1_byteenable -> TCIM:byteenable
	wire         mm_interconnect_2_tcim_s1_write;                                     // mm_interconnect_2:TCIM_s1_write -> TCIM:write
	wire  [31:0] mm_interconnect_2_tcim_s1_writedata;                                 // mm_interconnect_2:TCIM_s1_writedata -> TCIM:writedata
	wire         mm_interconnect_2_tcim_s1_clken;                                     // mm_interconnect_2:TCIM_s1_clken -> TCIM:clken
	wire         irq_mapper_receiver0_irq;                                            // jtag_uart:av_irq -> irq_mapper:receiver0_irq
	wire         irq_mapper_receiver1_irq;                                            // timer_0:irq -> irq_mapper:receiver1_irq
	wire  [31:0] cpu_irq_irq;                                                         // irq_mapper:sender_irq -> CPU:irq
	wire         rst_controller_reset_out_reset;                                      // rst_controller:reset_out -> [CPU:reset_n, LCD:Reset_NRI, SDRAM_ctrl:reset_n, TCDM:reset, TCIM:reset, TCIM:reset2, altpll_signalTap:reset, irq_mapper:reset, jtag_uart:rst_n, mm_interconnect_0:CPU_reset_reset_bridge_in_reset_reset, mm_interconnect_1:CPU_reset_reset_bridge_in_reset_reset, mm_interconnect_2:CPU_reset_reset_bridge_in_reset_reset, performance_counter_0:reset_n, rst_translator:in_reset, sysid:reset_n, timer_0:reset_n]
	wire         rst_controller_reset_out_reset_req;                                  // rst_controller:reset_req -> [CPU:reset_req, TCDM:reset_req, TCIM:reset_req, TCIM:reset_req2, rst_translator:reset_req_in]
	wire         cpu_debug_reset_request_reset;                                       // CPU:debug_reset_request -> [rst_controller:reset_in1, rst_controller_001:reset_in1]
	wire         rst_controller_001_reset_out_reset;                                  // rst_controller_001:reset_out -> [altpll_0:reset, mm_interconnect_0:altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset]

	systemFile_CPU cpu (
		.clk                                 (altpll_0_c0_clk),                                   //                                  clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                   //                                reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                //                                     .reset_req
		.d_address                           (cpu_data_master_address),                           //                          data_master.address
		.d_byteenable                        (cpu_data_master_byteenable),                        //                                     .byteenable
		.d_read                              (cpu_data_master_read),                              //                                     .read
		.d_readdata                          (cpu_data_master_readdata),                          //                                     .readdata
		.d_waitrequest                       (cpu_data_master_waitrequest),                       //                                     .waitrequest
		.d_write                             (cpu_data_master_write),                             //                                     .write
		.d_writedata                         (cpu_data_master_writedata),                         //                                     .writedata
		.d_readdatavalid                     (cpu_data_master_readdatavalid),                     //                                     .readdatavalid
		.debug_mem_slave_debugaccess_to_roms (cpu_data_master_debugaccess),                       //                                     .debugaccess
		.i_address                           (cpu_instruction_master_address),                    //                   instruction_master.address
		.i_read                              (cpu_instruction_master_read),                       //                                     .read
		.i_readdata                          (cpu_instruction_master_readdata),                   //                                     .readdata
		.i_waitrequest                       (cpu_instruction_master_waitrequest),                //                                     .waitrequest
		.i_readdatavalid                     (cpu_instruction_master_readdatavalid),              //                                     .readdatavalid
		.dtcm0_readdata                      (cpu_tightly_coupled_data_master_0_readdata),        //        tightly_coupled_data_master_0.readdata
		.dtcm0_address                       (cpu_tightly_coupled_data_master_0_address),         //                                     .address
		.dtcm0_read                          (cpu_tightly_coupled_data_master_0_read),            //                                     .read
		.dtcm0_clken                         (cpu_tightly_coupled_data_master_0_clken),           //                                     .clken
		.dtcm0_write                         (cpu_tightly_coupled_data_master_0_write),           //                                     .write
		.dtcm0_writedata                     (cpu_tightly_coupled_data_master_0_writedata),       //                                     .writedata
		.dtcm0_byteenable                    (cpu_tightly_coupled_data_master_0_byteenable),      //                                     .byteenable
		.itcm0_readdata                      (cpu_tightly_coupled_instruction_master_0_readdata), // tightly_coupled_instruction_master_0.readdata
		.itcm0_address                       (cpu_tightly_coupled_instruction_master_0_address),  //                                     .address
		.itcm0_read                          (cpu_tightly_coupled_instruction_master_0_read),     //                                     .read
		.itcm0_clken                         (cpu_tightly_coupled_instruction_master_0_clken),    //                                     .clken
		.irq                                 (cpu_irq_irq),                                       //                                  irq.irq
		.debug_reset_request                 (cpu_debug_reset_request_reset),                     //                  debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_cpu_debug_mem_slave_address),     //                      debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_cpu_debug_mem_slave_byteenable),  //                                     .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_cpu_debug_mem_slave_debugaccess), //                                     .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_cpu_debug_mem_slave_read),        //                                     .read
		.debug_mem_slave_readdata            (mm_interconnect_0_cpu_debug_mem_slave_readdata),    //                                     .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_cpu_debug_mem_slave_waitrequest), //                                     .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_cpu_debug_mem_slave_write),       //                                     .write
		.debug_mem_slave_writedata           (mm_interconnect_0_cpu_debug_mem_slave_writedata),   //                                     .writedata
		.dummy_ci_port                       ()                                                   //            custom_instruction_master.readra
	);

	LcdDriver lcd (
		.WaitReq_SO            (mm_interconnect_0_lcd_avalon_slave_waitrequest),        // avalon_slave.waitrequest
		.Address_DI            (mm_interconnect_0_lcd_avalon_slave_address),            //             .address
		.BurstCount_DI         (mm_interconnect_0_lcd_avalon_slave_burstcount),         //             .burstcount
		.ByteEnable_DI         (mm_interconnect_0_lcd_avalon_slave_byteenable),         //             .byteenable
		.WriteData_DI          (mm_interconnect_0_lcd_avalon_slave_writedata),          //             .writedata
		.ReadData_DO           (mm_interconnect_0_lcd_avalon_slave_readdata),           //             .readdata
		.Read_SI               (mm_interconnect_0_lcd_avalon_slave_read),               //             .read
		.Write_SI              (mm_interconnect_0_lcd_avalon_slave_write),              //             .write
		.ReadDataValid_SO      (mm_interconnect_0_lcd_avalon_slave_readdatavalid),      //             .readdatavalid
		.BeginBurstTransfer_SI (mm_interconnect_0_lcd_avalon_slave_beginbursttransfer), //             .beginbursttransfer
		.Clk_CI                (altpll_0_c0_clk),                                       //   clock_sink.clk
		.Reset_NRI             (~rst_controller_reset_out_reset),                       //   reset_sink.reset_n
		.Cs_NSO                (lcd_conduit_end_cs_n),                                  //  conduit_end.cs_n
		.DB_DIO                (lcd_conduit_end_data),                                  //             .data
		.DC_NSO                (lcd_conduit_end_data_cmd_n),                            //             .data_cmd_n
		.IM0_SO                (lcd_conduit_end_mode),                                  //             .mode
		.Rd_NSO                (lcd_conduit_end_rd_n),                                  //             .rd_n
		.Wr_NSO                (lcd_conduit_end_wr_n),                                  //             .wr_n
		.LcdReset_NRO          (lcd_conduit_end_lcdreset_n)                             //             .lcdreset_n
	);

	systemFile_SDRAM_ctrl sdram_ctrl (
		.clk            (altpll_0_c0_clk),                               //   clk.clk
		.reset_n        (~rst_controller_reset_out_reset),               // reset.reset_n
		.az_addr        (mm_interconnect_0_sdram_ctrl_s1_address),       //    s1.address
		.az_be_n        (~mm_interconnect_0_sdram_ctrl_s1_byteenable),   //      .byteenable_n
		.az_cs          (mm_interconnect_0_sdram_ctrl_s1_chipselect),    //      .chipselect
		.az_data        (mm_interconnect_0_sdram_ctrl_s1_writedata),     //      .writedata
		.az_rd_n        (~mm_interconnect_0_sdram_ctrl_s1_read),         //      .read_n
		.az_wr_n        (~mm_interconnect_0_sdram_ctrl_s1_write),        //      .write_n
		.za_data        (mm_interconnect_0_sdram_ctrl_s1_readdata),      //      .readdata
		.za_valid       (mm_interconnect_0_sdram_ctrl_s1_readdatavalid), //      .readdatavalid
		.za_waitrequest (mm_interconnect_0_sdram_ctrl_s1_waitrequest),   //      .waitrequest
		.zs_addr        (sdram_ctrl_wire_addr),                          //  wire.export
		.zs_ba          (sdram_ctrl_wire_ba),                            //      .export
		.zs_cas_n       (sdram_ctrl_wire_cas_n),                         //      .export
		.zs_cke         (sdram_ctrl_wire_cke),                           //      .export
		.zs_cs_n        (sdram_ctrl_wire_cs_n),                          //      .export
		.zs_dq          (sdram_ctrl_wire_dq),                            //      .export
		.zs_dqm         (sdram_ctrl_wire_dqm),                           //      .export
		.zs_ras_n       (sdram_ctrl_wire_ras_n),                         //      .export
		.zs_we_n        (sdram_ctrl_wire_we_n)                           //      .export
	);

	systemFile_TCDM tcdm (
		.clk        (altpll_0_c0_clk),                      //   clk1.clk
		.address    (mm_interconnect_1_tcdm_s1_address),    //     s1.address
		.clken      (mm_interconnect_1_tcdm_s1_clken),      //       .clken
		.chipselect (mm_interconnect_1_tcdm_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_1_tcdm_s1_write),      //       .write
		.readdata   (mm_interconnect_1_tcdm_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_1_tcdm_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_1_tcdm_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),       // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req),   //       .reset_req
		.freeze     (1'b0)                                  // (terminated)
	);

	systemFile_TCIM tcim (
		.clk         (altpll_0_c0_clk),                      //   clk1.clk
		.address     (mm_interconnect_2_tcim_s1_address),    //     s1.address
		.clken       (mm_interconnect_2_tcim_s1_clken),      //       .clken
		.chipselect  (mm_interconnect_2_tcim_s1_chipselect), //       .chipselect
		.write       (mm_interconnect_2_tcim_s1_write),      //       .write
		.readdata    (mm_interconnect_2_tcim_s1_readdata),   //       .readdata
		.writedata   (mm_interconnect_2_tcim_s1_writedata),  //       .writedata
		.byteenable  (mm_interconnect_2_tcim_s1_byteenable), //       .byteenable
		.reset       (rst_controller_reset_out_reset),       // reset1.reset
		.reset_req   (rst_controller_reset_out_reset_req),   //       .reset_req
		.address2    (mm_interconnect_0_tcim_s2_address),    //     s2.address
		.chipselect2 (mm_interconnect_0_tcim_s2_chipselect), //       .chipselect
		.clken2      (mm_interconnect_0_tcim_s2_clken),      //       .clken
		.write2      (mm_interconnect_0_tcim_s2_write),      //       .write
		.readdata2   (mm_interconnect_0_tcim_s2_readdata),   //       .readdata
		.writedata2  (mm_interconnect_0_tcim_s2_writedata),  //       .writedata
		.byteenable2 (mm_interconnect_0_tcim_s2_byteenable), //       .byteenable
		.clk2        (altpll_0_c0_clk),                      //   clk2.clk
		.reset2      (rst_controller_reset_out_reset),       // reset2.reset
		.reset_req2  (rst_controller_reset_out_reset_req),   //       .reset_req
		.freeze      (1'b0)                                  // (terminated)
	);

	systemFile_altpll_0 altpll_0 (
		.clk                (clk_clk),                                        //       inclk_interface.clk
		.reset              (rst_controller_001_reset_out_reset),             // inclk_interface_reset.reset
		.read               (mm_interconnect_0_altpll_0_pll_slave_read),      //             pll_slave.read
		.write              (mm_interconnect_0_altpll_0_pll_slave_write),     //                      .write
		.address            (mm_interconnect_0_altpll_0_pll_slave_address),   //                      .address
		.readdata           (mm_interconnect_0_altpll_0_pll_slave_readdata),  //                      .readdata
		.writedata          (mm_interconnect_0_altpll_0_pll_slave_writedata), //                      .writedata
		.c0                 (altpll_0_c0_clk),                                //                    c0.clk
		.c2                 (altpll_0_c2_clk),                                //                    c2.clk
		.scandone           (),                                               //           (terminated)
		.scandataout        (),                                               //           (terminated)
		.areset             (1'b0),                                           //           (terminated)
		.locked             (),                                               //           (terminated)
		.phasedone          (),                                               //           (terminated)
		.phasecounterselect (4'b0000),                                        //           (terminated)
		.phaseupdown        (1'b0),                                           //           (terminated)
		.phasestep          (1'b0),                                           //           (terminated)
		.scanclk            (1'b0),                                           //           (terminated)
		.scanclkena         (1'b0),                                           //           (terminated)
		.scandata           (1'b0),                                           //           (terminated)
		.configupdate       (1'b0)                                            //           (terminated)
	);

	systemFile_altpll_signalTap altpll_signaltap (
		.clk                (altpll_0_c0_clk),                                        //       inclk_interface.clk
		.reset              (rst_controller_reset_out_reset),                         // inclk_interface_reset.reset
		.read               (mm_interconnect_0_altpll_signaltap_pll_slave_read),      //             pll_slave.read
		.write              (mm_interconnect_0_altpll_signaltap_pll_slave_write),     //                      .write
		.address            (mm_interconnect_0_altpll_signaltap_pll_slave_address),   //                      .address
		.readdata           (mm_interconnect_0_altpll_signaltap_pll_slave_readdata),  //                      .readdata
		.writedata          (mm_interconnect_0_altpll_signaltap_pll_slave_writedata), //                      .writedata
		.c0                 (altpll_1_c0_clk),                                        //                    c0.clk
		.scandone           (),                                                       //           (terminated)
		.scandataout        (),                                                       //           (terminated)
		.areset             (1'b0),                                                   //           (terminated)
		.locked             (),                                                       //           (terminated)
		.phasedone          (),                                                       //           (terminated)
		.phasecounterselect (4'b0000),                                                //           (terminated)
		.phaseupdown        (1'b0),                                                   //           (terminated)
		.phasestep          (1'b0),                                                   //           (terminated)
		.scanclk            (1'b0),                                                   //           (terminated)
		.scanclkena         (1'b0),                                                   //           (terminated)
		.scandata           (1'b0),                                                   //           (terminated)
		.configupdate       (1'b0)                                                    //           (terminated)
	);

	systemFile_jtag_uart jtag_uart (
		.clk            (altpll_0_c0_clk),                                           //               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                           //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_receiver0_irq)                                   //               irq.irq
	);

	systemFile_performance_counter_0 performance_counter_0 (
		.clk           (altpll_0_c0_clk),                                                     //           clk.clk
		.reset_n       (~rst_controller_reset_out_reset),                                     //         reset.reset_n
		.address       (mm_interconnect_0_performance_counter_0_control_slave_address),       // control_slave.address
		.begintransfer (mm_interconnect_0_performance_counter_0_control_slave_begintransfer), //              .begintransfer
		.readdata      (mm_interconnect_0_performance_counter_0_control_slave_readdata),      //              .readdata
		.write         (mm_interconnect_0_performance_counter_0_control_slave_write),         //              .write
		.writedata     (mm_interconnect_0_performance_counter_0_control_slave_writedata)      //              .writedata
	);

	systemFile_sysid sysid (
		.clock    (altpll_0_c0_clk),                                //           clk.clk
		.reset_n  (~rst_controller_reset_out_reset),                //         reset.reset_n
		.readdata (mm_interconnect_0_sysid_control_slave_readdata), // control_slave.readdata
		.address  (mm_interconnect_0_sysid_control_slave_address)   //              .address
	);

	systemFile_timer_0 timer_0 (
		.clk        (altpll_0_c0_clk),                         //   clk.clk
		.reset_n    (~rst_controller_reset_out_reset),         // reset.reset_n
		.address    (mm_interconnect_0_timer_0_s1_address),    //    s1.address
		.writedata  (mm_interconnect_0_timer_0_s1_writedata),  //      .writedata
		.readdata   (mm_interconnect_0_timer_0_s1_readdata),   //      .readdata
		.chipselect (mm_interconnect_0_timer_0_s1_chipselect), //      .chipselect
		.write_n    (~mm_interconnect_0_timer_0_s1_write),     //      .write_n
		.irq        (irq_mapper_receiver1_irq)                 //   irq.irq
	);

	systemFile_mm_interconnect_0 mm_interconnect_0 (
		.altpll_0_c0_clk                                            (altpll_0_c0_clk),                                                     //                                          altpll_0_c0.clk
		.clk_0_clk_clk                                              (clk_clk),                                                             //                                            clk_0_clk.clk
		.altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                                  // altpll_0_inclk_interface_reset_reset_bridge_in_reset.reset
		.CPU_reset_reset_bridge_in_reset_reset                      (rst_controller_reset_out_reset),                                      //                      CPU_reset_reset_bridge_in_reset.reset
		.CPU_data_master_address                                    (cpu_data_master_address),                                             //                                      CPU_data_master.address
		.CPU_data_master_waitrequest                                (cpu_data_master_waitrequest),                                         //                                                     .waitrequest
		.CPU_data_master_byteenable                                 (cpu_data_master_byteenable),                                          //                                                     .byteenable
		.CPU_data_master_read                                       (cpu_data_master_read),                                                //                                                     .read
		.CPU_data_master_readdata                                   (cpu_data_master_readdata),                                            //                                                     .readdata
		.CPU_data_master_readdatavalid                              (cpu_data_master_readdatavalid),                                       //                                                     .readdatavalid
		.CPU_data_master_write                                      (cpu_data_master_write),                                               //                                                     .write
		.CPU_data_master_writedata                                  (cpu_data_master_writedata),                                           //                                                     .writedata
		.CPU_data_master_debugaccess                                (cpu_data_master_debugaccess),                                         //                                                     .debugaccess
		.CPU_instruction_master_address                             (cpu_instruction_master_address),                                      //                               CPU_instruction_master.address
		.CPU_instruction_master_waitrequest                         (cpu_instruction_master_waitrequest),                                  //                                                     .waitrequest
		.CPU_instruction_master_read                                (cpu_instruction_master_read),                                         //                                                     .read
		.CPU_instruction_master_readdata                            (cpu_instruction_master_readdata),                                     //                                                     .readdata
		.CPU_instruction_master_readdatavalid                       (cpu_instruction_master_readdatavalid),                                //                                                     .readdatavalid
		.altpll_0_pll_slave_address                                 (mm_interconnect_0_altpll_0_pll_slave_address),                        //                                   altpll_0_pll_slave.address
		.altpll_0_pll_slave_write                                   (mm_interconnect_0_altpll_0_pll_slave_write),                          //                                                     .write
		.altpll_0_pll_slave_read                                    (mm_interconnect_0_altpll_0_pll_slave_read),                           //                                                     .read
		.altpll_0_pll_slave_readdata                                (mm_interconnect_0_altpll_0_pll_slave_readdata),                       //                                                     .readdata
		.altpll_0_pll_slave_writedata                               (mm_interconnect_0_altpll_0_pll_slave_writedata),                      //                                                     .writedata
		.altpll_signalTap_pll_slave_address                         (mm_interconnect_0_altpll_signaltap_pll_slave_address),                //                           altpll_signalTap_pll_slave.address
		.altpll_signalTap_pll_slave_write                           (mm_interconnect_0_altpll_signaltap_pll_slave_write),                  //                                                     .write
		.altpll_signalTap_pll_slave_read                            (mm_interconnect_0_altpll_signaltap_pll_slave_read),                   //                                                     .read
		.altpll_signalTap_pll_slave_readdata                        (mm_interconnect_0_altpll_signaltap_pll_slave_readdata),               //                                                     .readdata
		.altpll_signalTap_pll_slave_writedata                       (mm_interconnect_0_altpll_signaltap_pll_slave_writedata),              //                                                     .writedata
		.CPU_debug_mem_slave_address                                (mm_interconnect_0_cpu_debug_mem_slave_address),                       //                                  CPU_debug_mem_slave.address
		.CPU_debug_mem_slave_write                                  (mm_interconnect_0_cpu_debug_mem_slave_write),                         //                                                     .write
		.CPU_debug_mem_slave_read                                   (mm_interconnect_0_cpu_debug_mem_slave_read),                          //                                                     .read
		.CPU_debug_mem_slave_readdata                               (mm_interconnect_0_cpu_debug_mem_slave_readdata),                      //                                                     .readdata
		.CPU_debug_mem_slave_writedata                              (mm_interconnect_0_cpu_debug_mem_slave_writedata),                     //                                                     .writedata
		.CPU_debug_mem_slave_byteenable                             (mm_interconnect_0_cpu_debug_mem_slave_byteenable),                    //                                                     .byteenable
		.CPU_debug_mem_slave_waitrequest                            (mm_interconnect_0_cpu_debug_mem_slave_waitrequest),                   //                                                     .waitrequest
		.CPU_debug_mem_slave_debugaccess                            (mm_interconnect_0_cpu_debug_mem_slave_debugaccess),                   //                                                     .debugaccess
		.jtag_uart_avalon_jtag_slave_address                        (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),               //                          jtag_uart_avalon_jtag_slave.address
		.jtag_uart_avalon_jtag_slave_write                          (mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),                 //                                                     .write
		.jtag_uart_avalon_jtag_slave_read                           (mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),                  //                                                     .read
		.jtag_uart_avalon_jtag_slave_readdata                       (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),              //                                                     .readdata
		.jtag_uart_avalon_jtag_slave_writedata                      (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),             //                                                     .writedata
		.jtag_uart_avalon_jtag_slave_waitrequest                    (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest),           //                                                     .waitrequest
		.jtag_uart_avalon_jtag_slave_chipselect                     (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),            //                                                     .chipselect
		.LCD_avalon_slave_address                                   (mm_interconnect_0_lcd_avalon_slave_address),                          //                                     LCD_avalon_slave.address
		.LCD_avalon_slave_write                                     (mm_interconnect_0_lcd_avalon_slave_write),                            //                                                     .write
		.LCD_avalon_slave_read                                      (mm_interconnect_0_lcd_avalon_slave_read),                             //                                                     .read
		.LCD_avalon_slave_readdata                                  (mm_interconnect_0_lcd_avalon_slave_readdata),                         //                                                     .readdata
		.LCD_avalon_slave_writedata                                 (mm_interconnect_0_lcd_avalon_slave_writedata),                        //                                                     .writedata
		.LCD_avalon_slave_beginbursttransfer                        (mm_interconnect_0_lcd_avalon_slave_beginbursttransfer),               //                                                     .beginbursttransfer
		.LCD_avalon_slave_burstcount                                (mm_interconnect_0_lcd_avalon_slave_burstcount),                       //                                                     .burstcount
		.LCD_avalon_slave_byteenable                                (mm_interconnect_0_lcd_avalon_slave_byteenable),                       //                                                     .byteenable
		.LCD_avalon_slave_readdatavalid                             (mm_interconnect_0_lcd_avalon_slave_readdatavalid),                    //                                                     .readdatavalid
		.LCD_avalon_slave_waitrequest                               (mm_interconnect_0_lcd_avalon_slave_waitrequest),                      //                                                     .waitrequest
		.performance_counter_0_control_slave_address                (mm_interconnect_0_performance_counter_0_control_slave_address),       //                  performance_counter_0_control_slave.address
		.performance_counter_0_control_slave_write                  (mm_interconnect_0_performance_counter_0_control_slave_write),         //                                                     .write
		.performance_counter_0_control_slave_readdata               (mm_interconnect_0_performance_counter_0_control_slave_readdata),      //                                                     .readdata
		.performance_counter_0_control_slave_writedata              (mm_interconnect_0_performance_counter_0_control_slave_writedata),     //                                                     .writedata
		.performance_counter_0_control_slave_begintransfer          (mm_interconnect_0_performance_counter_0_control_slave_begintransfer), //                                                     .begintransfer
		.SDRAM_ctrl_s1_address                                      (mm_interconnect_0_sdram_ctrl_s1_address),                             //                                        SDRAM_ctrl_s1.address
		.SDRAM_ctrl_s1_write                                        (mm_interconnect_0_sdram_ctrl_s1_write),                               //                                                     .write
		.SDRAM_ctrl_s1_read                                         (mm_interconnect_0_sdram_ctrl_s1_read),                                //                                                     .read
		.SDRAM_ctrl_s1_readdata                                     (mm_interconnect_0_sdram_ctrl_s1_readdata),                            //                                                     .readdata
		.SDRAM_ctrl_s1_writedata                                    (mm_interconnect_0_sdram_ctrl_s1_writedata),                           //                                                     .writedata
		.SDRAM_ctrl_s1_byteenable                                   (mm_interconnect_0_sdram_ctrl_s1_byteenable),                          //                                                     .byteenable
		.SDRAM_ctrl_s1_readdatavalid                                (mm_interconnect_0_sdram_ctrl_s1_readdatavalid),                       //                                                     .readdatavalid
		.SDRAM_ctrl_s1_waitrequest                                  (mm_interconnect_0_sdram_ctrl_s1_waitrequest),                         //                                                     .waitrequest
		.SDRAM_ctrl_s1_chipselect                                   (mm_interconnect_0_sdram_ctrl_s1_chipselect),                          //                                                     .chipselect
		.sysid_control_slave_address                                (mm_interconnect_0_sysid_control_slave_address),                       //                                  sysid_control_slave.address
		.sysid_control_slave_readdata                               (mm_interconnect_0_sysid_control_slave_readdata),                      //                                                     .readdata
		.TCIM_s2_address                                            (mm_interconnect_0_tcim_s2_address),                                   //                                              TCIM_s2.address
		.TCIM_s2_write                                              (mm_interconnect_0_tcim_s2_write),                                     //                                                     .write
		.TCIM_s2_readdata                                           (mm_interconnect_0_tcim_s2_readdata),                                  //                                                     .readdata
		.TCIM_s2_writedata                                          (mm_interconnect_0_tcim_s2_writedata),                                 //                                                     .writedata
		.TCIM_s2_byteenable                                         (mm_interconnect_0_tcim_s2_byteenable),                                //                                                     .byteenable
		.TCIM_s2_chipselect                                         (mm_interconnect_0_tcim_s2_chipselect),                                //                                                     .chipselect
		.TCIM_s2_clken                                              (mm_interconnect_0_tcim_s2_clken),                                     //                                                     .clken
		.timer_0_s1_address                                         (mm_interconnect_0_timer_0_s1_address),                                //                                           timer_0_s1.address
		.timer_0_s1_write                                           (mm_interconnect_0_timer_0_s1_write),                                  //                                                     .write
		.timer_0_s1_readdata                                        (mm_interconnect_0_timer_0_s1_readdata),                               //                                                     .readdata
		.timer_0_s1_writedata                                       (mm_interconnect_0_timer_0_s1_writedata),                              //                                                     .writedata
		.timer_0_s1_chipselect                                      (mm_interconnect_0_timer_0_s1_chipselect)                              //                                                     .chipselect
	);

	systemFile_mm_interconnect_1 mm_interconnect_1 (
		.altpll_0_c0_clk                              (altpll_0_c0_clk),                              //                       altpll_0_c0.clk
		.CPU_reset_reset_bridge_in_reset_reset        (rst_controller_reset_out_reset),               //   CPU_reset_reset_bridge_in_reset.reset
		.CPU_tightly_coupled_data_master_0_address    (cpu_tightly_coupled_data_master_0_address),    // CPU_tightly_coupled_data_master_0.address
		.CPU_tightly_coupled_data_master_0_byteenable (cpu_tightly_coupled_data_master_0_byteenable), //                                  .byteenable
		.CPU_tightly_coupled_data_master_0_read       (cpu_tightly_coupled_data_master_0_read),       //                                  .read
		.CPU_tightly_coupled_data_master_0_readdata   (cpu_tightly_coupled_data_master_0_readdata),   //                                  .readdata
		.CPU_tightly_coupled_data_master_0_write      (cpu_tightly_coupled_data_master_0_write),      //                                  .write
		.CPU_tightly_coupled_data_master_0_writedata  (cpu_tightly_coupled_data_master_0_writedata),  //                                  .writedata
		.CPU_tightly_coupled_data_master_0_clken      (cpu_tightly_coupled_data_master_0_clken),      //                                  .clken
		.TCDM_s1_address                              (mm_interconnect_1_tcdm_s1_address),            //                           TCDM_s1.address
		.TCDM_s1_write                                (mm_interconnect_1_tcdm_s1_write),              //                                  .write
		.TCDM_s1_readdata                             (mm_interconnect_1_tcdm_s1_readdata),           //                                  .readdata
		.TCDM_s1_writedata                            (mm_interconnect_1_tcdm_s1_writedata),          //                                  .writedata
		.TCDM_s1_byteenable                           (mm_interconnect_1_tcdm_s1_byteenable),         //                                  .byteenable
		.TCDM_s1_chipselect                           (mm_interconnect_1_tcdm_s1_chipselect),         //                                  .chipselect
		.TCDM_s1_clken                                (mm_interconnect_1_tcdm_s1_clken)               //                                  .clken
	);

	systemFile_mm_interconnect_2 mm_interconnect_2 (
		.altpll_0_c0_clk                                   (altpll_0_c0_clk),                                   //                              altpll_0_c0.clk
		.CPU_reset_reset_bridge_in_reset_reset             (rst_controller_reset_out_reset),                    //          CPU_reset_reset_bridge_in_reset.reset
		.CPU_tightly_coupled_instruction_master_0_address  (cpu_tightly_coupled_instruction_master_0_address),  // CPU_tightly_coupled_instruction_master_0.address
		.CPU_tightly_coupled_instruction_master_0_read     (cpu_tightly_coupled_instruction_master_0_read),     //                                         .read
		.CPU_tightly_coupled_instruction_master_0_readdata (cpu_tightly_coupled_instruction_master_0_readdata), //                                         .readdata
		.CPU_tightly_coupled_instruction_master_0_clken    (cpu_tightly_coupled_instruction_master_0_clken),    //                                         .clken
		.TCIM_s1_address                                   (mm_interconnect_2_tcim_s1_address),                 //                                  TCIM_s1.address
		.TCIM_s1_write                                     (mm_interconnect_2_tcim_s1_write),                   //                                         .write
		.TCIM_s1_readdata                                  (mm_interconnect_2_tcim_s1_readdata),                //                                         .readdata
		.TCIM_s1_writedata                                 (mm_interconnect_2_tcim_s1_writedata),               //                                         .writedata
		.TCIM_s1_byteenable                                (mm_interconnect_2_tcim_s1_byteenable),              //                                         .byteenable
		.TCIM_s1_chipselect                                (mm_interconnect_2_tcim_s1_chipselect),              //                                         .chipselect
		.TCIM_s1_clken                                     (mm_interconnect_2_tcim_s1_clken)                    //                                         .clken
	);

	systemFile_irq_mapper irq_mapper (
		.clk           (altpll_0_c0_clk),                //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       // receiver1.irq
		.sender_irq    (cpu_irq_irq)                     //    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.reset_in1      (cpu_debug_reset_request_reset),      // reset_in1.reset
		.clk            (altpll_0_c0_clk),                    //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.reset_in1      (cpu_debug_reset_request_reset),      // reset_in1.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
