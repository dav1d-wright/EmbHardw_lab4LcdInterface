
lab3ParPortAndTimers.elf:     file format elf32-littlenios2
lab3ParPortAndTimers.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01000304

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x01000020 align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags r-x
    LOAD off    0x00001304 vaddr 0x01000304 paddr 0x01000304 align 2**12
         filesz 0x0000fe44 memsz 0x0000fe44 flags r-x
    LOAD off    0x00011148 vaddr 0x01010148 paddr 0x01011c34 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00013720 vaddr 0x01013720 paddr 0x01013720 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000002e4  02000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f90c  01000304  01000304  00001304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000538  0100fc10  0100fc10  00010c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  01010148  01011c34  00011148  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  01013720  01013720  00013720  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM_ctrl   00000000  01013880  01013880  00012c34  2**0
                  CONTENTS
  7 .TCIM         00000000  02000304  02000304  00012c34  2**0
                  CONTENTS
  8 .TCDM         00000000  02001000  02001000  00012c34  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00012c34  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000f40  00000000  00000000  00012c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00023d5f  00000000  00000000  00013b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000941d  00000000  00000000  000378f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b876  00000000  00000000  00040d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002244  00000000  00000000  0004c58c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003a2a  00000000  00000000  0004e7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000178a8  00000000  00000000  000521fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000030  00000000  00000000  00069aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000018d8  00000000  00000000  00069ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0006e736  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  0006e739  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0006e73c  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0006e73d  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0006e73e  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0006e742  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0006e746  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  0006e74a  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  0006e753  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  0006e75c  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 0000000a  00000000  00000000  0006e765  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 00000061  00000000  00000000  0006e76f  2**0
                  CONTENTS, READONLY
 31 .jdi          00003fa7  00000000  00000000  0006e7d0  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     000685aa  00000000  00000000  00072777  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
01000304 l    d  .text	00000000 .text
0100fc10 l    d  .rodata	00000000 .rodata
01010148 l    d  .rwdata	00000000 .rwdata
01013720 l    d  .bss	00000000 .bss
01013880 l    d  .SDRAM_ctrl	00000000 .SDRAM_ctrl
02000304 l    d  .TCIM	00000000 .TCIM
02001000 l    d  .TCDM	00000000 .TCDM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab3ParPortAndTimers_bsp//obj/HAL/src/crt0.o
0100034c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
020000fc l     F .exceptions	000000c0 handle_timerIRQ
010004f0 l     F .text	00000040 initPioLeds
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0100fd96 l     O .rodata	00000010 zeroes.4404
0100291c l     F .text	000000bc __sbprintf
0100fda6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01002b2c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0100465c l     F .text	00000008 __fp_unlock
01004670 l     F .text	0000019c __sinit.part.1
0100480c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01010148 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0101058c l     O .rwdata	00000020 lc_ctype_charset
0101056c l     O .rwdata	00000020 lc_message_charset
010105ac l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0100fdd8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
01007c08 l     F .text	000000fc __sprint_r.part.0
0100ff0c l     O .rodata	00000010 blanks.4348
0100fefc l     O .rodata	00000010 zeroes.4349
01009194 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0100ce50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100cf5c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100cf88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0100d1f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100d2d4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100d3c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100d594 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01011c28 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0100d7e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0100d914 l     F .text	00000034 alt_dev_reg
01010b94 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100dc18 l     F .text	0000020c altera_avalon_jtag_uart_irq
0100de24 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0100e5ec l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0100ead4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0100ef48 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0100f088 l     F .text	0000003c alt_get_errno
0100f0c4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
01013754 g     O .bss	00000004 alt_instruction_exception_handler
0100724c g     F .text	00000074 _mprec_log10
01007338 g     F .text	0000008c __any_on
01009730 g     F .text	00000054 _isatty_r
0100fde4 g     O .rodata	00000028 __mprec_tinytens
0100d4d0 g     F .text	0000007c alt_main
0100059c g     F .text	000000c0 _puts_r
01013780 g     O .bss	00000100 alt_irq
01009784 g     F .text	00000060 _lseek_r
01011c34 g       *ABS*	00000000 __flash_rwdata_start
0100b97c g     F .text	00000088 .hidden __eqdf2
01013880 g       *ABS*	00000000 __alt_heap_start
01000560 g     F .text	0000003c printf
0100999c g     F .text	0000009c _wcrtomb_r
01007ac8 g     F .text	0000005c __sseek
010049ac g     F .text	00000010 __sinit
0100e5c8 g     F .text	00000024 alt_get_cpu_freq
01009844 g     F .text	00000140 __swbuf_r
01005474 g     F .text	0000007c _setlocale_r
01004814 g     F .text	00000068 __sfmoreglue
0100d570 g     F .text	00000024 __malloc_unlock
01006144 g     F .text	0000015c memmove
0100e6e0 g     F .text	00000280 perf_print_formatted_report
01004994 g     F .text	00000018 _cleanup
010063c8 g     F .text	000000a8 _Balloc
0100ba04 g     F .text	000000dc .hidden __gtdf2
0100f480 g     F .text	00000024 altera_nios2_gen2_irq_init
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
010096d4 g     F .text	0000005c _fstat_r
01013738 g     O .bss	00000004 errno
01007a44 g     F .text	00000008 __seofread
01013744 g     O .bss	00000004 alt_argv
01019bf4 g       *ABS*	00000000 _gp
01010a14 g     O .rwdata	00000180 alt_fd_list
0100f4a4 g     F .text	00000090 alt_find_dev
01005ffc g     F .text	00000148 memcpy
01004664 g     F .text	0000000c _cleanup_r
0100cc68 g     F .text	000000dc .hidden __floatsidf
0100f00c g     F .text	0000007c alt_io_redirect
0100bae0 g     F .text	000000f4 .hidden __ltdf2
0100fc10 g       *ABS*	00000000 __DTOR_END__
0100065c g     F .text	00000014 puts
0100f770 g     F .text	0000009c alt_exception_cause_generated_bad_addr
01007928 g     F .text	00000074 __fpclassifyd
010071a8 g     F .text	000000a4 __ratio
01009178 g     F .text	0000001c __vfiprintf_internal
0100e01c g     F .text	0000021c altera_avalon_jtag_uart_read
01000530 g     F .text	00000030 _printf_r
0100a72c g     F .text	00000064 .hidden __udivsi3
0100d230 g     F .text	000000a4 isatty
01000000 g       *ABS*	00000000 __alt_mem_SDRAM_ctrl
0100fe34 g     O .rodata	000000c8 __mprec_tens
010054f0 g     F .text	0000000c __locale_charset
0100f6e0 g     F .text	00000090 alt_icache_flush
01013734 g     O .bss	00000004 __malloc_top_pad
0100e564 g     F .text	00000040 perf_get_num_starts
01011bfc g     O .rwdata	00000004 __mb_cur_max
01005520 g     F .text	0000000c _localeconv_r
010067d4 g     F .text	0000003c __i2b
01004e30 g     F .text	000004bc __sfvwrite_r
0100799c g     F .text	00000054 _sbrk_r
010097e4 g     F .text	00000060 _read_r
01011c1c g     O .rwdata	00000004 alt_max_fd
010093c8 g     F .text	000000f0 _fclose_r
0100462c g     F .text	00000030 fflush
01013730 g     O .bss	00000004 __malloc_max_sbrked_mem
0100d074 g     F .text	00000180 alt_irq_register
0100a7e8 g     F .text	000008ac .hidden __adddf3
01006f50 g     F .text	0000010c __b2d
0100a0fc g     F .text	00000538 .hidden __umoddi3
0100d3fc g     F .text	000000d4 lseek
01011bf4 g     O .rwdata	00000004 _global_impure_ptr
010073c4 g     F .text	00000564 _realloc_r
01013880 g       *ABS*	00000000 __bss_end
0100ee58 g     F .text	000000f0 alt_iic_isr_register
0100f378 g     F .text	00000108 alt_tick
01009b84 g     F .text	00000578 .hidden __udivdi3
01009630 g     F .text	00000024 _fputwc_r
0100fe0c g     O .rodata	00000028 __mprec_bigtens
010065b8 g     F .text	00000104 __s2b
0100cd44 g     F .text	000000a8 .hidden __floatunsidf
01006c90 g     F .text	00000060 __mcmp
010049cc g     F .text	00000018 __fp_lock_all
0100ee0c g     F .text	0000004c alt_ic_irq_enabled
0100f2dc g     F .text	0000009c alt_alarm_stop
0101373c g     O .bss	00000004 alt_irq_active
020001bc g     F .exceptions	000000d4 alt_irq_handler
010109ec g     O .rwdata	00000028 alt_dev_null
0100ea8c g     F .text	00000048 alt_dcache_flush_all
010066bc g     F .text	00000068 __hi0bits
0100cbe8 g     F .text	00000080 .hidden __fixdfsi
01011c34 g       *ABS*	00000000 __ram_rwdata_end
01011c14 g     O .rwdata	00000008 alt_dev_list
0100d81c g     F .text	000000f8 write
01010148 g       *ABS*	00000000 __ram_rodata_end
0100cfc4 g     F .text	000000b0 fstat
0100bae0 g     F .text	000000f4 .hidden __ledf2
01006a08 g     F .text	00000140 __pow5mult
01007d1c g     F .text	0000145c ___vfiprintf_internal_r
01013728 g     O .bss	00000004 __nlocale_changed
0100a790 g     F .text	00000058 .hidden __umodsi3
01013880 g       *ABS*	00000000 end
0100db58 g     F .text	000000c0 altera_avalon_jtag_uart_init
02000290 g     F .exceptions	00000074 alt_instruction_exception_entry
0100fc10 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0100e664 g     F .text	0000007c alt_avalon_timer_sc_init
0100cdec g     F .text	00000064 .hidden __clzsi2
0100e238 g     F .text	00000224 altera_avalon_jtag_uart_write
010049bc g     F .text	00000004 __sfp_lock_acquire
01005f18 g     F .text	000000e4 memchr
01000708 g     F .text	000021f8 ___vfprintf_internal_r
01004b20 g     F .text	00000310 _free_r
010054fc g     F .text	00000010 __locale_mb_cur_max
0100f9ec g     F .text	00000180 __call_exitprocs
01013724 g     O .bss	00000004 __mlocale_changed
01011c00 g     O .rwdata	00000004 __malloc_sbrk_base
01000304 g     F .text	0000004c _start
0101374c g     O .bss	00000004 _alt_tick_rate
0100fb6c g     F .text	00000070 .hidden __floatundidf
01006b48 g     F .text	00000148 __lshift
01013750 g     O .bss	00000004 _alt_nticks
0100d5d0 g     F .text	000000fc read
0100d980 g     F .text	00000074 alt_sys_init
0100f8d4 g     F .text	00000118 __register_exitproc
01006810 g     F .text	000001f8 __multiply
0100dec4 g     F .text	00000068 altera_avalon_jtag_uart_close
01010148 g       *ABS*	00000000 __ram_rwdata_start
0100fc10 g       *ABS*	00000000 __ram_rodata_start
01013758 g     O .bss	00000028 __malloc_current_mallinfo
0100705c g     F .text	0000014c __d2b
0100d9f4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0100f63c g     F .text	000000a4 alt_get_fd
010092b0 g     F .text	00000054 _close_r
0100e45c g     F .text	000000bc perf_get_section_time
0100f858 g     F .text	0000007c memcmp
0100dab4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
01013880 g       *ABS*	00000000 __alt_stack_base
0100db04 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
010029d8 g     F .text	00000154 __swsetup_r
0100b094 g     F .text	000008e8 .hidden __divdf3
0100487c g     F .text	00000118 __sfp
010072c0 g     F .text	00000078 __copybits
0100e518 g     F .text	0000004c perf_get_total_time
010105e4 g     O .rwdata	00000408 __malloc_av_
010049c8 g     F .text	00000004 __sinit_lock_release
0100bbd4 g     F .text	00000718 .hidden __muldf3
010079f0 g     F .text	00000054 __sread
0100f534 g     F .text	00000108 alt_find_file
0100eb10 g     F .text	000000a4 alt_dev_llist_insert
0100d54c g     F .text	00000024 __malloc_lock
0100d730 g     F .text	000000b0 sbrk
010045d0 g     F .text	0000005c _fflush_r
01009304 g     F .text	000000c4 _calloc_r
01013720 g       *ABS*	00000000 __bss_start
010062a0 g     F .text	00000128 memset
01000350 g     F .text	000001a0 main
01013748 g     O .bss	00000004 alt_envp
0101372c g     O .bss	00000004 __malloc_max_total_mem
0100da54 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01009984 g     F .text	00000018 __swbuf
01007b24 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
010094b8 g     F .text	00000014 fclose
01002d2c g     F .text	00001688 _dtoa_r
0100570c g     F .text	0000080c _malloc_r
01009af8 g     F .text	00000030 __ascii_wctomb
01011c20 g     O .rwdata	00000004 alt_errno
010052ec g     F .text	000000c4 _fwalk
0100a634 g     F .text	00000084 .hidden __divsi3
010049fc g     F .text	00000124 _malloc_trim_r
0100fc10 g       *ABS*	00000000 __CTOR_END__
01007b2c g     F .text	000000dc strcmp
0100fc10 g       *ABS*	00000000 __flash_rodata_start
0100fc10 g       *ABS*	00000000 __DTOR_LIST__
0100b97c g     F .text	00000088 .hidden __nedf2
0100d948 g     F .text	00000038 alt_irq_init
0100d6cc g     F .text	00000064 alt_release_fd
0100ff1c g     O .rodata	00000100 .hidden __clz_tab
01013720 g     O .bss	00000004 _PathLocale
0100f80c g     F .text	00000014 atexit
01009250 g     F .text	00000060 _write_r
0100552c g     F .text	00000018 setlocale
01011bf8 g     O .rwdata	00000004 _impure_ptr
01013740 g     O .bss	00000004 alt_argc
010043b4 g     F .text	0000021c __sflush_r
0100ec14 g     F .text	00000060 _do_dtors
01005518 g     F .text	00000008 __locale_cjk_lang
02000020 g       .exceptions	00000000 alt_irq_entry
01006eec g     F .text	00000064 __ulp
010049e4 g     F .text	00000018 __fp_unlock_all
01011c0c g     O .rwdata	00000008 alt_fs_list
02000020 g       *ABS*	00000000 __ram_exceptions_start
01005544 g     F .text	0000000c localeconv
0100eca8 g     F .text	00000050 alt_ic_isr_register
01011c34 g       *ABS*	00000000 _edata
02001000 g       *ABS*	00000000 __alt_mem_TCDM
01013880 g       *ABS*	00000000 _end
010094cc g     F .text	00000164 __fputwc
02000304 g       *ABS*	00000000 __ram_exceptions_end
0100df2c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0100ed80 g     F .text	0000008c alt_ic_irq_disable
01007a4c g     F .text	0000007c __swrite
01011c04 g     O .rwdata	00000004 __malloc_trim_threshold
0100e5a4 g     F .text	00000024 alt_get_performance_counter_base
0100550c g     F .text	0000000c __locale_msgcharset
0100f820 g     F .text	00000038 exit
010053b0 g     F .text	000000c4 _fwalk_reent
01006cf0 g     F .text	000001fc __mdiff
0100a6b8 g     F .text	00000074 .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
010049c0 g     F .text	00000004 __sfp_lock_release
0100fbdc g     F .text	00000034 _exit
02000000 g       *ABS*	00000000 __alt_mem_TCIM
0100e960 g     F .text	0000012c alt_alarm_start
01005550 g     F .text	000001bc __smakebuf_r
01000670 g     F .text	00000098 strlen
0100f188 g     F .text	00000154 open
0100ba04 g     F .text	000000dc .hidden __gedf2
01011c08 g     O .rwdata	00000004 __wctomb
01007d04 g     F .text	00000018 __sprint_r
0100ec74 g     F .text	00000034 alt_icache_flush_all
01011c24 g     O .rwdata	00000004 alt_priority_mask
0100ecf8 g     F .text	00000088 alt_ic_irq_enable
01002900 g     F .text	0000001c __vfprintf_internal
01009b28 g     F .text	0000005c _wctomb_r
0100c2ec g     F .text	000008fc .hidden __subdf3
01006724 g     F .text	000000b0 __lo0bits
01011c2c g     O .rwdata	00000008 alt_alarm_list
0100ebb4 g     F .text	00000060 _do_ctors
01009a38 g     F .text	000000c0 wcrtomb
0100ce8c g     F .text	000000d0 close
0100d33c g     F .text	00000084 alt_load
01009654 g     F .text	00000080 fputwc
010049c4 g     F .text	00000004 __sinit_lock_acquire
01006498 g     F .text	00000120 __multadd
01006470 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__alt_mem_TCDM+0xfefff004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	0840c114 	ori	at,at,772
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__reset-0x1000000>

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20001bc0 	call	20001bc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20002900 	call	2000290 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <handle_timerIRQ>:
	perf_print_formatted_report(PERFORMANCE_COUNTER_0_BASE, alt_get_cpu_freq(),
			1, "ISR");
	return 0;
}

static void handle_timerIRQ(void* context, alt_u32 id) {
 20000fc:	defffb04 	addi	sp,sp,-20
 2000100:	dfc00415 	stw	ra,16(sp)
 2000104:	df000315 	stw	fp,12(sp)
 2000108:	df000304 	addi	fp,sp,12
 200010c:	e13ffe15 	stw	r4,-8(fp)
 2000110:	e17fff15 	stw	r5,-4(fp)
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, PERFORMANCE_COUNTER_SEG_ISR);
 2000114:	0007883a 	mov	r3,zero
 2000118:	00808034 	movhi	r2,512
 200011c:	108c0504 	addi	r2,r2,12308
 2000120:	10c00035 	stwio	r3,0(r2)

	Counter* data_ptr = (Counter*) context;
 2000124:	e0bffe17 	ldw	r2,-8(fp)
 2000128:	e0bffd15 	stw	r2,-12(fp)

	(data_ptr->value)++;
 200012c:	e0bffd17 	ldw	r2,-12(fp)
 2000130:	10800017 	ldw	r2,0(r2)
 2000134:	10c00044 	addi	r3,r2,1
 2000138:	e0bffd17 	ldw	r2,-12(fp)
 200013c:	10c00015 	stw	r3,0(r2)
	data_ptr->isNew = true;
 2000140:	e0bffd17 	ldw	r2,-12(fp)
 2000144:	00c00044 	movi	r3,1
 2000148:	10c00105 	stb	r3,4(r2)

	IOWR_8DIRECT(MYPIO_LEDS_BASE, 0x02U, data_ptr->value);
 200014c:	e0bffd17 	ldw	r2,-12(fp)
 2000150:	10800017 	ldw	r2,0(r2)
 2000154:	1007883a 	mov	r3,r2
 2000158:	00808034 	movhi	r2,512
 200015c:	108c2e84 	addi	r2,r2,12474
 2000160:	10c00025 	stbio	r3,0(r2)
	printf("New pin value: %d\r\n", IORD_8DIRECT(MYPIO_LEDS_BASE, 0x001));
 2000164:	00808034 	movhi	r2,512
 2000168:	108c2e44 	addi	r2,r2,12473
 200016c:	10800023 	ldbuio	r2,0(r2)
 2000170:	10803fcc 	andi	r2,r2,255
 2000174:	100b883a 	mov	r5,r2
 2000178:	01004074 	movhi	r4,257
 200017c:	213f0404 	addi	r4,r4,-1008
 2000180:	10005600 	call	1000560 <printf>
	IOWR_16DIRECT(TIMER_0_BASE, ALTERA_AVALON_TIMER_STATUS_REG, CLEAR_IRQ);
 2000184:	0007883a 	mov	r3,zero
 2000188:	00808034 	movhi	r2,512
 200018c:	108c2004 	addi	r2,r2,12416
 2000190:	10c0002d 	sthio	r3,0(r2)
	PERF_END(PERFORMANCE_COUNTER_0_BASE, PERFORMANCE_COUNTER_SEG_ISR);
 2000194:	0007883a 	mov	r3,zero
 2000198:	00808034 	movhi	r2,512
 200019c:	108c0404 	addi	r2,r2,12304
 20001a0:	10c00035 	stwio	r3,0(r2)
}
 20001a4:	0001883a 	nop
 20001a8:	e037883a 	mov	sp,fp
 20001ac:	dfc00117 	ldw	ra,4(sp)
 20001b0:	df000017 	ldw	fp,0(sp)
 20001b4:	dec00204 	addi	sp,sp,8
 20001b8:	f800283a 	ret

020001bc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20001bc:	defff904 	addi	sp,sp,-28
 20001c0:	dfc00615 	stw	ra,24(sp)
 20001c4:	df000515 	stw	fp,20(sp)
 20001c8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 20001cc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20001d0:	0005313a 	rdctl	r2,ipending
 20001d4:	e0bffe15 	stw	r2,-8(fp)

  return active;
 20001d8:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 20001dc:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 20001e0:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 20001e4:	00800044 	movi	r2,1
 20001e8:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 20001ec:	e0fffb17 	ldw	r3,-20(fp)
 20001f0:	e0bffc17 	ldw	r2,-16(fp)
 20001f4:	1884703a 	and	r2,r3,r2
 20001f8:	10001426 	beq	r2,zero,200024c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 20001fc:	00804074 	movhi	r2,257
 2000200:	108de004 	addi	r2,r2,14208
 2000204:	e0fffd17 	ldw	r3,-12(fp)
 2000208:	180690fa 	slli	r3,r3,3
 200020c:	10c5883a 	add	r2,r2,r3
 2000210:	10c00017 	ldw	r3,0(r2)
 2000214:	00804074 	movhi	r2,257
 2000218:	108de004 	addi	r2,r2,14208
 200021c:	e13ffd17 	ldw	r4,-12(fp)
 2000220:	200890fa 	slli	r4,r4,3
 2000224:	1105883a 	add	r2,r2,r4
 2000228:	10800104 	addi	r2,r2,4
 200022c:	10800017 	ldw	r2,0(r2)
 2000230:	1009883a 	mov	r4,r2
 2000234:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000238:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200023c:	0005313a 	rdctl	r2,ipending
 2000240:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000244:	e0bfff17 	ldw	r2,-4(fp)
 2000248:	00000706 	br	2000268 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200024c:	e0bffc17 	ldw	r2,-16(fp)
 2000250:	1085883a 	add	r2,r2,r2
 2000254:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000258:	e0bffd17 	ldw	r2,-12(fp)
 200025c:	10800044 	addi	r2,r2,1
 2000260:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 2000264:	003fe106 	br	20001ec <__alt_mem_TCDM+0xfffff1ec>

    active = alt_irq_pending ();
 2000268:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 200026c:	e0bffb17 	ldw	r2,-20(fp)
 2000270:	103fdb1e 	bne	r2,zero,20001e0 <__alt_mem_TCDM+0xfffff1e0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 2000274:	0001883a 	nop
}
 2000278:	0001883a 	nop
 200027c:	e037883a 	mov	sp,fp
 2000280:	dfc00117 	ldw	ra,4(sp)
 2000284:	df000017 	ldw	fp,0(sp)
 2000288:	dec00204 	addi	sp,sp,8
 200028c:	f800283a 	ret

02000290 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 2000290:	defffb04 	addi	sp,sp,-20
 2000294:	dfc00415 	stw	ra,16(sp)
 2000298:	df000315 	stw	fp,12(sp)
 200029c:	df000304 	addi	fp,sp,12
 20002a0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 20002a4:	000531fa 	rdctl	r2,exception
 20002a8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 20002ac:	e0bffd17 	ldw	r2,-12(fp)
 20002b0:	10801f0c 	andi	r2,r2,124
 20002b4:	1004d0ba 	srli	r2,r2,2
 20002b8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 20002bc:	0005333a 	rdctl	r2,badaddr
 20002c0:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 20002c4:	d0a6d817 	ldw	r2,-25760(gp)
 20002c8:	10000726 	beq	r2,zero,20002e8 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20002cc:	d0a6d817 	ldw	r2,-25760(gp)
 20002d0:	e0fffd17 	ldw	r3,-12(fp)
 20002d4:	e1bffe17 	ldw	r6,-8(fp)
 20002d8:	e17fff17 	ldw	r5,-4(fp)
 20002dc:	1809883a 	mov	r4,r3
 20002e0:	103ee83a 	callr	r2
 20002e4:	00000206 	br	20002f0 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 20002e8:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 20002ec:	0005883a 	mov	r2,zero
}
 20002f0:	e037883a 	mov	sp,fp
 20002f4:	dfc00117 	ldw	ra,4(sp)
 20002f8:	df000017 	ldw	fp,0(sp)
 20002fc:	dec00204 	addi	sp,sp,8
 2000300:	f800283a 	ret

Disassembly of section .text:

01000304 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 1000304:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 1000308:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 100030c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 1000310:	00bffd16 	blt	zero,r2,1000308 <__alt_mem_TCDM+0xfefff308>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1000314:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 1000318:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 100031c:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 1000320:	d6a6fd14 	ori	gp,gp,39924
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1000324:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 1000328:	108dc814 	ori	r2,r2,14112

    movhi r3, %hi(__bss_end)
 100032c:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 1000330:	18ce2014 	ori	r3,r3,14464

    beq r2, r3, 1f
 1000334:	10c00326 	beq	r2,r3,1000344 <_start+0x40>

0:
    stw zero, (r2)
 1000338:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 100033c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1000340:	10fffd36 	bltu	r2,r3,1000338 <__alt_mem_TCDM+0xfefff338>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1000344:	100d33c0 	call	100d33c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1000348:	100d4d00 	call	100d4d0 <alt_main>

0100034c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 100034c:	003fff06 	br	100034c <__alt_mem_TCDM+0xfefff34c>

01000350 <main>:

__attribute__((section(".exceptions")))static void handle_timerIRQ(
		void* context, alt_u32 id);
static void initPioLeds(void);

int main(void) {
 1000350:	defff904 	addi	sp,sp,-28
 1000354:	dfc00615 	stw	ra,24(sp)
 1000358:	df000515 	stw	fp,20(sp)
 100035c:	df000504 	addi	fp,sp,20
	Counter downTimer = { .value = 0, .isNew = false };
 1000360:	e03ffe15 	stw	zero,-8(fp)
 1000364:	e03fff05 	stb	zero,-4(fp)

	alt_irq_context statusISR;

	puts("Reset performance counter");
 1000368:	01004074 	movhi	r4,257
 100036c:	213f0904 	addi	r4,r4,-988
 1000370:	100065c0 	call	100065c <puts>
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
 1000374:	00c00044 	movi	r3,1
 1000378:	00808034 	movhi	r2,512
 100037c:	108c0004 	addi	r2,r2,12288
 1000380:	10c00035 	stwio	r3,0(r2)

	puts("IRQs disabled.");
 1000384:	01004074 	movhi	r4,257
 1000388:	213f1004 	addi	r4,r4,-960
 100038c:	100065c0 	call	100065c <puts>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1000390:	0005303a 	rdctl	r2,status
 1000394:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1000398:	e0fffc17 	ldw	r3,-16(fp)
 100039c:	00bfff84 	movi	r2,-2
 10003a0:	1884703a 	and	r2,r3,r2
 10003a4:	1001703a 	wrctl	status,r2
  
  return context;
 10003a8:	e0bffc17 	ldw	r2,-16(fp)
	statusISR = alt_irq_disable_all();
 10003ac:	e0bffb15 	stw	r2,-20(fp)

	puts("Register timer IRQ handler...");
 10003b0:	01004074 	movhi	r4,257
 10003b4:	213f1404 	addi	r4,r4,-944
 10003b8:	100065c0 	call	100065c <puts>
	alt_irq_register(TIMER_0_IRQ, &downTimer, (alt_isr_func) handle_timerIRQ);
 10003bc:	e0bffe04 	addi	r2,fp,-8
 10003c0:	01808034 	movhi	r6,512
 10003c4:	31803f04 	addi	r6,r6,252
 10003c8:	100b883a 	mov	r5,r2
 10003cc:	01000044 	movi	r4,1
 10003d0:	100d0740 	call	100d074 <alt_irq_register>

	puts("Clear pending timer IRQs...");
 10003d4:	01004074 	movhi	r4,257
 10003d8:	213f1c04 	addi	r4,r4,-912
 10003dc:	100065c0 	call	100065c <puts>
	IOWR_16DIRECT(TIMER_0_BASE, ALTERA_AVALON_TIMER_STATUS_REG, CLEAR_IRQ);
 10003e0:	0007883a 	mov	r3,zero
 10003e4:	00808034 	movhi	r2,512
 10003e8:	108c2004 	addi	r2,r2,12416
 10003ec:	10c0002d 	sthio	r3,0(r2)

	puts("Init PIO LEDs");
 10003f0:	01004074 	movhi	r4,257
 10003f4:	213f2304 	addi	r4,r4,-884
 10003f8:	100065c0 	call	100065c <puts>
	initPioLeds();
 10003fc:	10004f00 	call	10004f0 <initPioLeds>

	puts("Configure timer...");
 1000400:	01004074 	movhi	r4,257
 1000404:	213f2704 	addi	r4,r4,-868
 1000408:	100065c0 	call	100065c <puts>
	IOWR_16DIRECT(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_REG,
 100040c:	00c001c4 	movi	r3,7
 1000410:	00808034 	movhi	r2,512
 1000414:	108c2044 	addi	r2,r2,12417
 1000418:	10c0002d 	sthio	r3,0(r2)
			ALTERA_AVALON_TIMER_CONTROL_ITO_MSK
					| ALTERA_AVALON_TIMER_CONTROL_CONT_MSK
					| ALTERA_AVALON_TIMER_CONTROL_START_MSK);

	puts("Timer initialised and started!");
 100041c:	01004074 	movhi	r4,257
 1000420:	213f2c04 	addi	r4,r4,-848
 1000424:	100065c0 	call	100065c <puts>

	puts("Start measuring with performance counter");
 1000428:	01004074 	movhi	r4,257
 100042c:	213f3404 	addi	r4,r4,-816
 1000430:	100065c0 	call	100065c <puts>
	PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
 1000434:	0007883a 	mov	r3,zero
 1000438:	00808034 	movhi	r2,512
 100043c:	108c0104 	addi	r2,r2,12292
 1000440:	10c00035 	stwio	r3,0(r2)

	puts("Enable all IRQs");
 1000444:	01004074 	movhi	r4,257
 1000448:	213f3f04 	addi	r4,r4,-772
 100044c:	100065c0 	call	100065c <puts>
 1000450:	e0bffb17 	ldw	r2,-20(fp)
 1000454:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1000458:	e0bffd17 	ldw	r2,-12(fp)
 100045c:	1001703a 	wrctl	status,r2
	alt_irq_enable_all(statusISR);

	while (downTimer.value < COUNT_MAX) {
 1000460:	00000b06 	br	1000490 <main+0x140>
		if (downTimer.isNew) {
 1000464:	e0bfff03 	ldbu	r2,-4(fp)
 1000468:	10803fcc 	andi	r2,r2,255
 100046c:	10000726 	beq	r2,zero,100048c <main+0x13c>
			printf("New counter value: %lu\n", (alt_u32) downTimer.value);
 1000470:	e0bffe17 	ldw	r2,-8(fp)
 1000474:	100b883a 	mov	r5,r2
 1000478:	01004074 	movhi	r4,257
 100047c:	213f4304 	addi	r4,r4,-756
 1000480:	10005600 	call	1000560 <printf>
			downTimer.isNew = false;
 1000484:	e03fff05 	stb	zero,-4(fp)
 1000488:	00000106 	br	1000490 <main+0x140>
		} else {
			asm volatile("nop");
 100048c:	0001883a 	nop
	PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);

	puts("Enable all IRQs");
	alt_irq_enable_all(statusISR);

	while (downTimer.value < COUNT_MAX) {
 1000490:	e0bffe17 	ldw	r2,-8(fp)
 1000494:	1080fa30 	cmpltui	r2,r2,1000
 1000498:	103ff21e 	bne	r2,zero,1000464 <__alt_mem_TCDM+0xfefff464>
		} else {
			asm volatile("nop");
		}
	}

	puts("Stop measuring with performance counter");
 100049c:	01004074 	movhi	r4,257
 10004a0:	213f4904 	addi	r4,r4,-732
 10004a4:	100065c0 	call	100065c <puts>
	PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
 10004a8:	0007883a 	mov	r3,zero
 10004ac:	00808034 	movhi	r2,512
 10004b0:	108c0004 	addi	r2,r2,12288
 10004b4:	10c00035 	stwio	r3,0(r2)
	perf_print_formatted_report(PERFORMANCE_COUNTER_0_BASE, alt_get_cpu_freq(),
 10004b8:	100e5c80 	call	100e5c8 <alt_get_cpu_freq>
 10004bc:	01c04074 	movhi	r7,257
 10004c0:	39ff5304 	addi	r7,r7,-692
 10004c4:	01800044 	movi	r6,1
 10004c8:	100b883a 	mov	r5,r2
 10004cc:	01008034 	movhi	r4,512
 10004d0:	210c0004 	addi	r4,r4,12288
 10004d4:	100e6e00 	call	100e6e0 <perf_print_formatted_report>
			1, "ISR");
	return 0;
 10004d8:	0005883a 	mov	r2,zero
}
 10004dc:	e037883a 	mov	sp,fp
 10004e0:	dfc00117 	ldw	ra,4(sp)
 10004e4:	df000017 	ldw	fp,0(sp)
 10004e8:	dec00204 	addi	sp,sp,8
 10004ec:	f800283a 	ret

010004f0 <initPioLeds>:
	IOWR_16DIRECT(TIMER_0_BASE, ALTERA_AVALON_TIMER_STATUS_REG, CLEAR_IRQ);
	PERF_END(PERFORMANCE_COUNTER_0_BASE, PERFORMANCE_COUNTER_SEG_ISR);
}

static void initPioLeds(void)
{
 10004f0:	deffff04 	addi	sp,sp,-4
 10004f4:	df000015 	stw	fp,0(sp)
 10004f8:	d839883a 	mov	fp,sp
	// Configure all pins as outputs
	IOWR_8DIRECT(MYPIO_LEDS_BASE, 0, 0xFFU);
 10004fc:	00ffffc4 	movi	r3,-1
 1000500:	00808034 	movhi	r2,512
 1000504:	108c2e04 	addi	r2,r2,12472
 1000508:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(MYPIO_LEDS_BASE, 0x02U, 0x00U);
 100050c:	0007883a 	mov	r3,zero
 1000510:	00808034 	movhi	r2,512
 1000514:	108c2e84 	addi	r2,r2,12474
 1000518:	10c00025 	stbio	r3,0(r2)

}
 100051c:	0001883a 	nop
 1000520:	e037883a 	mov	sp,fp
 1000524:	df000017 	ldw	fp,0(sp)
 1000528:	dec00104 	addi	sp,sp,4
 100052c:	f800283a 	ret

01000530 <_printf_r>:
 1000530:	defffd04 	addi	sp,sp,-12
 1000534:	2805883a 	mov	r2,r5
 1000538:	dfc00015 	stw	ra,0(sp)
 100053c:	d9800115 	stw	r6,4(sp)
 1000540:	d9c00215 	stw	r7,8(sp)
 1000544:	21400217 	ldw	r5,8(r4)
 1000548:	d9c00104 	addi	r7,sp,4
 100054c:	100d883a 	mov	r6,r2
 1000550:	10007080 	call	1000708 <___vfprintf_internal_r>
 1000554:	dfc00017 	ldw	ra,0(sp)
 1000558:	dec00304 	addi	sp,sp,12
 100055c:	f800283a 	ret

01000560 <printf>:
 1000560:	defffc04 	addi	sp,sp,-16
 1000564:	dfc00015 	stw	ra,0(sp)
 1000568:	d9400115 	stw	r5,4(sp)
 100056c:	d9800215 	stw	r6,8(sp)
 1000570:	d9c00315 	stw	r7,12(sp)
 1000574:	00804074 	movhi	r2,257
 1000578:	1086fe04 	addi	r2,r2,7160
 100057c:	10800017 	ldw	r2,0(r2)
 1000580:	200b883a 	mov	r5,r4
 1000584:	d9800104 	addi	r6,sp,4
 1000588:	11000217 	ldw	r4,8(r2)
 100058c:	10029000 	call	1002900 <__vfprintf_internal>
 1000590:	dfc00017 	ldw	ra,0(sp)
 1000594:	dec00404 	addi	sp,sp,16
 1000598:	f800283a 	ret

0100059c <_puts_r>:
 100059c:	defff604 	addi	sp,sp,-40
 10005a0:	dc000715 	stw	r16,28(sp)
 10005a4:	2021883a 	mov	r16,r4
 10005a8:	2809883a 	mov	r4,r5
 10005ac:	dc400815 	stw	r17,32(sp)
 10005b0:	dfc00915 	stw	ra,36(sp)
 10005b4:	2823883a 	mov	r17,r5
 10005b8:	10006700 	call	1000670 <strlen>
 10005bc:	10c00044 	addi	r3,r2,1
 10005c0:	d8800115 	stw	r2,4(sp)
 10005c4:	00804074 	movhi	r2,257
 10005c8:	10bf5404 	addi	r2,r2,-688
 10005cc:	d8800215 	stw	r2,8(sp)
 10005d0:	00800044 	movi	r2,1
 10005d4:	d8800315 	stw	r2,12(sp)
 10005d8:	00800084 	movi	r2,2
 10005dc:	dc400015 	stw	r17,0(sp)
 10005e0:	d8c00615 	stw	r3,24(sp)
 10005e4:	dec00415 	stw	sp,16(sp)
 10005e8:	d8800515 	stw	r2,20(sp)
 10005ec:	80000226 	beq	r16,zero,10005f8 <_puts_r+0x5c>
 10005f0:	80800e17 	ldw	r2,56(r16)
 10005f4:	10001426 	beq	r2,zero,1000648 <_puts_r+0xac>
 10005f8:	81400217 	ldw	r5,8(r16)
 10005fc:	2880030b 	ldhu	r2,12(r5)
 1000600:	10c8000c 	andi	r3,r2,8192
 1000604:	1800061e 	bne	r3,zero,1000620 <_puts_r+0x84>
 1000608:	29001917 	ldw	r4,100(r5)
 100060c:	00f7ffc4 	movi	r3,-8193
 1000610:	10880014 	ori	r2,r2,8192
 1000614:	20c6703a 	and	r3,r4,r3
 1000618:	2880030d 	sth	r2,12(r5)
 100061c:	28c01915 	stw	r3,100(r5)
 1000620:	d9800404 	addi	r6,sp,16
 1000624:	8009883a 	mov	r4,r16
 1000628:	1004e300 	call	1004e30 <__sfvwrite_r>
 100062c:	1000091e 	bne	r2,zero,1000654 <_puts_r+0xb8>
 1000630:	00800284 	movi	r2,10
 1000634:	dfc00917 	ldw	ra,36(sp)
 1000638:	dc400817 	ldw	r17,32(sp)
 100063c:	dc000717 	ldw	r16,28(sp)
 1000640:	dec00a04 	addi	sp,sp,40
 1000644:	f800283a 	ret
 1000648:	8009883a 	mov	r4,r16
 100064c:	10049ac0 	call	10049ac <__sinit>
 1000650:	003fe906 	br	10005f8 <__alt_mem_TCDM+0xfefff5f8>
 1000654:	00bfffc4 	movi	r2,-1
 1000658:	003ff606 	br	1000634 <__alt_mem_TCDM+0xfefff634>

0100065c <puts>:
 100065c:	00804074 	movhi	r2,257
 1000660:	1086fe04 	addi	r2,r2,7160
 1000664:	200b883a 	mov	r5,r4
 1000668:	11000017 	ldw	r4,0(r2)
 100066c:	100059c1 	jmpi	100059c <_puts_r>

01000670 <strlen>:
 1000670:	208000cc 	andi	r2,r4,3
 1000674:	10002026 	beq	r2,zero,10006f8 <strlen+0x88>
 1000678:	20800007 	ldb	r2,0(r4)
 100067c:	10002026 	beq	r2,zero,1000700 <strlen+0x90>
 1000680:	2005883a 	mov	r2,r4
 1000684:	00000206 	br	1000690 <strlen+0x20>
 1000688:	10c00007 	ldb	r3,0(r2)
 100068c:	18001826 	beq	r3,zero,10006f0 <strlen+0x80>
 1000690:	10800044 	addi	r2,r2,1
 1000694:	10c000cc 	andi	r3,r2,3
 1000698:	183ffb1e 	bne	r3,zero,1000688 <__alt_mem_TCDM+0xfefff688>
 100069c:	10c00017 	ldw	r3,0(r2)
 10006a0:	01ffbff4 	movhi	r7,65279
 10006a4:	39ffbfc4 	addi	r7,r7,-257
 10006a8:	00ca303a 	nor	r5,zero,r3
 10006ac:	01a02074 	movhi	r6,32897
 10006b0:	19c7883a 	add	r3,r3,r7
 10006b4:	31a02004 	addi	r6,r6,-32640
 10006b8:	1946703a 	and	r3,r3,r5
 10006bc:	1986703a 	and	r3,r3,r6
 10006c0:	1800091e 	bne	r3,zero,10006e8 <strlen+0x78>
 10006c4:	10800104 	addi	r2,r2,4
 10006c8:	10c00017 	ldw	r3,0(r2)
 10006cc:	19cb883a 	add	r5,r3,r7
 10006d0:	00c6303a 	nor	r3,zero,r3
 10006d4:	28c6703a 	and	r3,r5,r3
 10006d8:	1986703a 	and	r3,r3,r6
 10006dc:	183ff926 	beq	r3,zero,10006c4 <__alt_mem_TCDM+0xfefff6c4>
 10006e0:	00000106 	br	10006e8 <strlen+0x78>
 10006e4:	10800044 	addi	r2,r2,1
 10006e8:	10c00007 	ldb	r3,0(r2)
 10006ec:	183ffd1e 	bne	r3,zero,10006e4 <__alt_mem_TCDM+0xfefff6e4>
 10006f0:	1105c83a 	sub	r2,r2,r4
 10006f4:	f800283a 	ret
 10006f8:	2005883a 	mov	r2,r4
 10006fc:	003fe706 	br	100069c <__alt_mem_TCDM+0xfefff69c>
 1000700:	0005883a 	mov	r2,zero
 1000704:	f800283a 	ret

01000708 <___vfprintf_internal_r>:
 1000708:	deffb804 	addi	sp,sp,-288
 100070c:	dfc04715 	stw	ra,284(sp)
 1000710:	ddc04515 	stw	r23,276(sp)
 1000714:	dd404315 	stw	r21,268(sp)
 1000718:	d9002c15 	stw	r4,176(sp)
 100071c:	282f883a 	mov	r23,r5
 1000720:	302b883a 	mov	r21,r6
 1000724:	d9c02d15 	stw	r7,180(sp)
 1000728:	df004615 	stw	fp,280(sp)
 100072c:	dd804415 	stw	r22,272(sp)
 1000730:	dd004215 	stw	r20,264(sp)
 1000734:	dcc04115 	stw	r19,260(sp)
 1000738:	dc804015 	stw	r18,256(sp)
 100073c:	dc403f15 	stw	r17,252(sp)
 1000740:	dc003e15 	stw	r16,248(sp)
 1000744:	10055200 	call	1005520 <_localeconv_r>
 1000748:	10800017 	ldw	r2,0(r2)
 100074c:	1009883a 	mov	r4,r2
 1000750:	d8803415 	stw	r2,208(sp)
 1000754:	10006700 	call	1000670 <strlen>
 1000758:	d8803715 	stw	r2,220(sp)
 100075c:	d8802c17 	ldw	r2,176(sp)
 1000760:	10000226 	beq	r2,zero,100076c <___vfprintf_internal_r+0x64>
 1000764:	10800e17 	ldw	r2,56(r2)
 1000768:	1000f926 	beq	r2,zero,1000b50 <___vfprintf_internal_r+0x448>
 100076c:	b880030b 	ldhu	r2,12(r23)
 1000770:	10c8000c 	andi	r3,r2,8192
 1000774:	1800061e 	bne	r3,zero,1000790 <___vfprintf_internal_r+0x88>
 1000778:	b9001917 	ldw	r4,100(r23)
 100077c:	00f7ffc4 	movi	r3,-8193
 1000780:	10880014 	ori	r2,r2,8192
 1000784:	20c6703a 	and	r3,r4,r3
 1000788:	b880030d 	sth	r2,12(r23)
 100078c:	b8c01915 	stw	r3,100(r23)
 1000790:	10c0020c 	andi	r3,r2,8
 1000794:	1800c126 	beq	r3,zero,1000a9c <___vfprintf_internal_r+0x394>
 1000798:	b8c00417 	ldw	r3,16(r23)
 100079c:	1800bf26 	beq	r3,zero,1000a9c <___vfprintf_internal_r+0x394>
 10007a0:	1080068c 	andi	r2,r2,26
 10007a4:	00c00284 	movi	r3,10
 10007a8:	10c0c426 	beq	r2,r3,1000abc <___vfprintf_internal_r+0x3b4>
 10007ac:	d8c00404 	addi	r3,sp,16
 10007b0:	05004074 	movhi	r20,257
 10007b4:	d9001e04 	addi	r4,sp,120
 10007b8:	a53f6584 	addi	r20,r20,-618
 10007bc:	d8c01e15 	stw	r3,120(sp)
 10007c0:	d8002015 	stw	zero,128(sp)
 10007c4:	d8001f15 	stw	zero,124(sp)
 10007c8:	d8003315 	stw	zero,204(sp)
 10007cc:	d8003615 	stw	zero,216(sp)
 10007d0:	d8003815 	stw	zero,224(sp)
 10007d4:	1811883a 	mov	r8,r3
 10007d8:	d8003915 	stw	zero,228(sp)
 10007dc:	d8003a15 	stw	zero,232(sp)
 10007e0:	d8002f15 	stw	zero,188(sp)
 10007e4:	d9002815 	stw	r4,160(sp)
 10007e8:	a8800007 	ldb	r2,0(r21)
 10007ec:	10027b26 	beq	r2,zero,10011dc <___vfprintf_internal_r+0xad4>
 10007f0:	00c00944 	movi	r3,37
 10007f4:	a821883a 	mov	r16,r21
 10007f8:	10c0021e 	bne	r2,r3,1000804 <___vfprintf_internal_r+0xfc>
 10007fc:	00001406 	br	1000850 <___vfprintf_internal_r+0x148>
 1000800:	10c00326 	beq	r2,r3,1000810 <___vfprintf_internal_r+0x108>
 1000804:	84000044 	addi	r16,r16,1
 1000808:	80800007 	ldb	r2,0(r16)
 100080c:	103ffc1e 	bne	r2,zero,1000800 <__alt_mem_TCDM+0xfefff800>
 1000810:	8563c83a 	sub	r17,r16,r21
 1000814:	88000e26 	beq	r17,zero,1000850 <___vfprintf_internal_r+0x148>
 1000818:	d8c02017 	ldw	r3,128(sp)
 100081c:	d8801f17 	ldw	r2,124(sp)
 1000820:	45400015 	stw	r21,0(r8)
 1000824:	1c47883a 	add	r3,r3,r17
 1000828:	10800044 	addi	r2,r2,1
 100082c:	d8c02015 	stw	r3,128(sp)
 1000830:	44400115 	stw	r17,4(r8)
 1000834:	d8801f15 	stw	r2,124(sp)
 1000838:	00c001c4 	movi	r3,7
 100083c:	1880a716 	blt	r3,r2,1000adc <___vfprintf_internal_r+0x3d4>
 1000840:	42000204 	addi	r8,r8,8
 1000844:	d9402f17 	ldw	r5,188(sp)
 1000848:	2c4b883a 	add	r5,r5,r17
 100084c:	d9402f15 	stw	r5,188(sp)
 1000850:	80800007 	ldb	r2,0(r16)
 1000854:	1000a826 	beq	r2,zero,1000af8 <___vfprintf_internal_r+0x3f0>
 1000858:	84400047 	ldb	r17,1(r16)
 100085c:	00bfffc4 	movi	r2,-1
 1000860:	85400044 	addi	r21,r16,1
 1000864:	d8002785 	stb	zero,158(sp)
 1000868:	0007883a 	mov	r3,zero
 100086c:	000f883a 	mov	r7,zero
 1000870:	d8802915 	stw	r2,164(sp)
 1000874:	d8003115 	stw	zero,196(sp)
 1000878:	0025883a 	mov	r18,zero
 100087c:	01401604 	movi	r5,88
 1000880:	01800244 	movi	r6,9
 1000884:	02800a84 	movi	r10,42
 1000888:	02401b04 	movi	r9,108
 100088c:	ad400044 	addi	r21,r21,1
 1000890:	88bff804 	addi	r2,r17,-32
 1000894:	28830436 	bltu	r5,r2,10014a8 <___vfprintf_internal_r+0xda0>
 1000898:	100490ba 	slli	r2,r2,2
 100089c:	01004034 	movhi	r4,256
 10008a0:	21022c04 	addi	r4,r4,2224
 10008a4:	1105883a 	add	r2,r2,r4
 10008a8:	10800017 	ldw	r2,0(r2)
 10008ac:	1000683a 	jmp	r2
 10008b0:	010013c8 	cmpgei	r4,zero,79
 10008b4:	010014a8 	cmpgeui	r4,zero,82
 10008b8:	010014a8 	cmpgeui	r4,zero,82
 10008bc:	010013e8 	cmpgeui	r4,zero,79
 10008c0:	010014a8 	cmpgeui	r4,zero,82
 10008c4:	010014a8 	cmpgeui	r4,zero,82
 10008c8:	010014a8 	cmpgeui	r4,zero,82
 10008cc:	010014a8 	cmpgeui	r4,zero,82
 10008d0:	010014a8 	cmpgeui	r4,zero,82
 10008d4:	010014a8 	cmpgeui	r4,zero,82
 10008d8:	01000b5c 	xori	r4,zero,45
 10008dc:	01001304 	movi	r4,76
 10008e0:	010014a8 	cmpgeui	r4,zero,82
 10008e4:	01000a24 	muli	r4,zero,40
 10008e8:	01000b84 	movi	r4,46
 10008ec:	010014a8 	cmpgeui	r4,zero,82
 10008f0:	01000bc4 	movi	r4,47
 10008f4:	01000bd0 	cmplti	r4,zero,47
 10008f8:	01000bd0 	cmplti	r4,zero,47
 10008fc:	01000bd0 	cmplti	r4,zero,47
 1000900:	01000bd0 	cmplti	r4,zero,47
 1000904:	01000bd0 	cmplti	r4,zero,47
 1000908:	01000bd0 	cmplti	r4,zero,47
 100090c:	01000bd0 	cmplti	r4,zero,47
 1000910:	01000bd0 	cmplti	r4,zero,47
 1000914:	01000bd0 	cmplti	r4,zero,47
 1000918:	010014a8 	cmpgeui	r4,zero,82
 100091c:	010014a8 	cmpgeui	r4,zero,82
 1000920:	010014a8 	cmpgeui	r4,zero,82
 1000924:	010014a8 	cmpgeui	r4,zero,82
 1000928:	010014a8 	cmpgeui	r4,zero,82
 100092c:	010014a8 	cmpgeui	r4,zero,82
 1000930:	010014a8 	cmpgeui	r4,zero,82
 1000934:	010014a8 	cmpgeui	r4,zero,82
 1000938:	010014a8 	cmpgeui	r4,zero,82
 100093c:	010014a8 	cmpgeui	r4,zero,82
 1000940:	01000c04 	movi	r4,48
 1000944:	01000cc0 	call	1000cc <__reset-0xefff34>
 1000948:	010014a8 	cmpgeui	r4,zero,82
 100094c:	01000cc0 	call	1000cc <__reset-0xefff34>
 1000950:	010014a8 	cmpgeui	r4,zero,82
 1000954:	010014a8 	cmpgeui	r4,zero,82
 1000958:	010014a8 	cmpgeui	r4,zero,82
 100095c:	010014a8 	cmpgeui	r4,zero,82
 1000960:	01000d60 	cmpeqi	r4,zero,53
 1000964:	010014a8 	cmpgeui	r4,zero,82
 1000968:	010014a8 	cmpgeui	r4,zero,82
 100096c:	01000d6c 	andhi	r4,zero,53
 1000970:	010014a8 	cmpgeui	r4,zero,82
 1000974:	010014a8 	cmpgeui	r4,zero,82
 1000978:	010014a8 	cmpgeui	r4,zero,82
 100097c:	010014a8 	cmpgeui	r4,zero,82
 1000980:	010014a8 	cmpgeui	r4,zero,82
 1000984:	010011e4 	muli	r4,zero,71
 1000988:	010014a8 	cmpgeui	r4,zero,82
 100098c:	010014a8 	cmpgeui	r4,zero,82
 1000990:	01001244 	movi	r4,73
 1000994:	010014a8 	cmpgeui	r4,zero,82
 1000998:	010014a8 	cmpgeui	r4,zero,82
 100099c:	010014a8 	cmpgeui	r4,zero,82
 10009a0:	010014a8 	cmpgeui	r4,zero,82
 10009a4:	010014a8 	cmpgeui	r4,zero,82
 10009a8:	010014a8 	cmpgeui	r4,zero,82
 10009ac:	010014a8 	cmpgeui	r4,zero,82
 10009b0:	010014a8 	cmpgeui	r4,zero,82
 10009b4:	010014a8 	cmpgeui	r4,zero,82
 10009b8:	010014a8 	cmpgeui	r4,zero,82
 10009bc:	01001454 	movui	r4,81
 10009c0:	010013f4 	movhi	r4,79
 10009c4:	01000cc0 	call	1000cc <__reset-0xefff34>
 10009c8:	01000cc0 	call	1000cc <__reset-0xefff34>
 10009cc:	01000cc0 	call	1000cc <__reset-0xefff34>
 10009d0:	01001404 	movi	r4,80
 10009d4:	010013f4 	movhi	r4,79
 10009d8:	010014a8 	cmpgeui	r4,zero,82
 10009dc:	010014a8 	cmpgeui	r4,zero,82
 10009e0:	01001410 	cmplti	r4,zero,80
 10009e4:	010014a8 	cmpgeui	r4,zero,82
 10009e8:	01001420 	cmpeqi	r4,zero,80
 10009ec:	010012f4 	movhi	r4,75
 10009f0:	01000a30 	cmpltui	r4,zero,40
 10009f4:	01001314 	movui	r4,76
 10009f8:	010014a8 	cmpgeui	r4,zero,82
 10009fc:	01001320 	cmpeqi	r4,zero,76
 1000a00:	010014a8 	cmpgeui	r4,zero,82
 1000a04:	0100137c 	xorhi	r4,zero,77
 1000a08:	010014a8 	cmpgeui	r4,zero,82
 1000a0c:	010014a8 	cmpgeui	r4,zero,82
 1000a10:	0100138c 	andi	r4,zero,78
 1000a14:	d9003117 	ldw	r4,196(sp)
 1000a18:	d8802d15 	stw	r2,180(sp)
 1000a1c:	0109c83a 	sub	r4,zero,r4
 1000a20:	d9003115 	stw	r4,196(sp)
 1000a24:	94800114 	ori	r18,r18,4
 1000a28:	ac400007 	ldb	r17,0(r21)
 1000a2c:	003f9706 	br	100088c <__alt_mem_TCDM+0xfefff88c>
 1000a30:	00800c04 	movi	r2,48
 1000a34:	d9002d17 	ldw	r4,180(sp)
 1000a38:	d9402917 	ldw	r5,164(sp)
 1000a3c:	d8802705 	stb	r2,156(sp)
 1000a40:	00801e04 	movi	r2,120
 1000a44:	d8802745 	stb	r2,157(sp)
 1000a48:	d8002785 	stb	zero,158(sp)
 1000a4c:	20c00104 	addi	r3,r4,4
 1000a50:	24c00017 	ldw	r19,0(r4)
 1000a54:	002d883a 	mov	r22,zero
 1000a58:	90800094 	ori	r2,r18,2
 1000a5c:	28029a16 	blt	r5,zero,10014c8 <___vfprintf_internal_r+0xdc0>
 1000a60:	00bfdfc4 	movi	r2,-129
 1000a64:	90a4703a 	and	r18,r18,r2
 1000a68:	d8c02d15 	stw	r3,180(sp)
 1000a6c:	94800094 	ori	r18,r18,2
 1000a70:	9802871e 	bne	r19,zero,1001490 <___vfprintf_internal_r+0xd88>
 1000a74:	00804074 	movhi	r2,257
 1000a78:	10bf5e04 	addi	r2,r2,-648
 1000a7c:	d8803915 	stw	r2,228(sp)
 1000a80:	04401e04 	movi	r17,120
 1000a84:	d8802917 	ldw	r2,164(sp)
 1000a88:	0039883a 	mov	fp,zero
 1000a8c:	1001e926 	beq	r2,zero,1001234 <___vfprintf_internal_r+0xb2c>
 1000a90:	0027883a 	mov	r19,zero
 1000a94:	002d883a 	mov	r22,zero
 1000a98:	00020506 	br	10012b0 <___vfprintf_internal_r+0xba8>
 1000a9c:	d9002c17 	ldw	r4,176(sp)
 1000aa0:	b80b883a 	mov	r5,r23
 1000aa4:	10029d80 	call	10029d8 <__swsetup_r>
 1000aa8:	1005ac1e 	bne	r2,zero,100215c <___vfprintf_internal_r+0x1a54>
 1000aac:	b880030b 	ldhu	r2,12(r23)
 1000ab0:	00c00284 	movi	r3,10
 1000ab4:	1080068c 	andi	r2,r2,26
 1000ab8:	10ff3c1e 	bne	r2,r3,10007ac <__alt_mem_TCDM+0xfefff7ac>
 1000abc:	b880038f 	ldh	r2,14(r23)
 1000ac0:	103f3a16 	blt	r2,zero,10007ac <__alt_mem_TCDM+0xfefff7ac>
 1000ac4:	d9c02d17 	ldw	r7,180(sp)
 1000ac8:	d9002c17 	ldw	r4,176(sp)
 1000acc:	a80d883a 	mov	r6,r21
 1000ad0:	b80b883a 	mov	r5,r23
 1000ad4:	100291c0 	call	100291c <__sbprintf>
 1000ad8:	00001106 	br	1000b20 <___vfprintf_internal_r+0x418>
 1000adc:	d9002c17 	ldw	r4,176(sp)
 1000ae0:	d9801e04 	addi	r6,sp,120
 1000ae4:	b80b883a 	mov	r5,r23
 1000ae8:	1007d040 	call	1007d04 <__sprint_r>
 1000aec:	1000081e 	bne	r2,zero,1000b10 <___vfprintf_internal_r+0x408>
 1000af0:	da000404 	addi	r8,sp,16
 1000af4:	003f5306 	br	1000844 <__alt_mem_TCDM+0xfefff844>
 1000af8:	d8802017 	ldw	r2,128(sp)
 1000afc:	10000426 	beq	r2,zero,1000b10 <___vfprintf_internal_r+0x408>
 1000b00:	d9002c17 	ldw	r4,176(sp)
 1000b04:	d9801e04 	addi	r6,sp,120
 1000b08:	b80b883a 	mov	r5,r23
 1000b0c:	1007d040 	call	1007d04 <__sprint_r>
 1000b10:	b880030b 	ldhu	r2,12(r23)
 1000b14:	1080100c 	andi	r2,r2,64
 1000b18:	1005901e 	bne	r2,zero,100215c <___vfprintf_internal_r+0x1a54>
 1000b1c:	d8802f17 	ldw	r2,188(sp)
 1000b20:	dfc04717 	ldw	ra,284(sp)
 1000b24:	df004617 	ldw	fp,280(sp)
 1000b28:	ddc04517 	ldw	r23,276(sp)
 1000b2c:	dd804417 	ldw	r22,272(sp)
 1000b30:	dd404317 	ldw	r21,268(sp)
 1000b34:	dd004217 	ldw	r20,264(sp)
 1000b38:	dcc04117 	ldw	r19,260(sp)
 1000b3c:	dc804017 	ldw	r18,256(sp)
 1000b40:	dc403f17 	ldw	r17,252(sp)
 1000b44:	dc003e17 	ldw	r16,248(sp)
 1000b48:	dec04804 	addi	sp,sp,288
 1000b4c:	f800283a 	ret
 1000b50:	d9002c17 	ldw	r4,176(sp)
 1000b54:	10049ac0 	call	10049ac <__sinit>
 1000b58:	003f0406 	br	100076c <__alt_mem_TCDM+0xfefff76c>
 1000b5c:	d8802d17 	ldw	r2,180(sp)
 1000b60:	d9002d17 	ldw	r4,180(sp)
 1000b64:	10800017 	ldw	r2,0(r2)
 1000b68:	d8803115 	stw	r2,196(sp)
 1000b6c:	20800104 	addi	r2,r4,4
 1000b70:	d9003117 	ldw	r4,196(sp)
 1000b74:	203fa716 	blt	r4,zero,1000a14 <__alt_mem_TCDM+0xfefffa14>
 1000b78:	d8802d15 	stw	r2,180(sp)
 1000b7c:	ac400007 	ldb	r17,0(r21)
 1000b80:	003f4206 	br	100088c <__alt_mem_TCDM+0xfefff88c>
 1000b84:	ac400007 	ldb	r17,0(r21)
 1000b88:	aac00044 	addi	r11,r21,1
 1000b8c:	8a872826 	beq	r17,r10,1002830 <___vfprintf_internal_r+0x2128>
 1000b90:	88bff404 	addi	r2,r17,-48
 1000b94:	0009883a 	mov	r4,zero
 1000b98:	30867d36 	bltu	r6,r2,1002590 <___vfprintf_internal_r+0x1e88>
 1000b9c:	5c400007 	ldb	r17,0(r11)
 1000ba0:	210002a4 	muli	r4,r4,10
 1000ba4:	5d400044 	addi	r21,r11,1
 1000ba8:	a817883a 	mov	r11,r21
 1000bac:	2089883a 	add	r4,r4,r2
 1000bb0:	88bff404 	addi	r2,r17,-48
 1000bb4:	30bff92e 	bgeu	r6,r2,1000b9c <__alt_mem_TCDM+0xfefffb9c>
 1000bb8:	2005c916 	blt	r4,zero,10022e0 <___vfprintf_internal_r+0x1bd8>
 1000bbc:	d9002915 	stw	r4,164(sp)
 1000bc0:	003f3306 	br	1000890 <__alt_mem_TCDM+0xfefff890>
 1000bc4:	94802014 	ori	r18,r18,128
 1000bc8:	ac400007 	ldb	r17,0(r21)
 1000bcc:	003f2f06 	br	100088c <__alt_mem_TCDM+0xfefff88c>
 1000bd0:	a809883a 	mov	r4,r21
 1000bd4:	d8003115 	stw	zero,196(sp)
 1000bd8:	88bff404 	addi	r2,r17,-48
 1000bdc:	0017883a 	mov	r11,zero
 1000be0:	24400007 	ldb	r17,0(r4)
 1000be4:	5ac002a4 	muli	r11,r11,10
 1000be8:	ad400044 	addi	r21,r21,1
 1000bec:	a809883a 	mov	r4,r21
 1000bf0:	12d7883a 	add	r11,r2,r11
 1000bf4:	88bff404 	addi	r2,r17,-48
 1000bf8:	30bff92e 	bgeu	r6,r2,1000be0 <__alt_mem_TCDM+0xfefffbe0>
 1000bfc:	dac03115 	stw	r11,196(sp)
 1000c00:	003f2306 	br	1000890 <__alt_mem_TCDM+0xfefff890>
 1000c04:	18c03fcc 	andi	r3,r3,255
 1000c08:	18072b1e 	bne	r3,zero,10028b8 <___vfprintf_internal_r+0x21b0>
 1000c0c:	94800414 	ori	r18,r18,16
 1000c10:	9080080c 	andi	r2,r18,32
 1000c14:	10037b26 	beq	r2,zero,1001a04 <___vfprintf_internal_r+0x12fc>
 1000c18:	d9402d17 	ldw	r5,180(sp)
 1000c1c:	28800117 	ldw	r2,4(r5)
 1000c20:	2cc00017 	ldw	r19,0(r5)
 1000c24:	29400204 	addi	r5,r5,8
 1000c28:	d9402d15 	stw	r5,180(sp)
 1000c2c:	102d883a 	mov	r22,r2
 1000c30:	10044b16 	blt	r2,zero,1001d60 <___vfprintf_internal_r+0x1658>
 1000c34:	d9402917 	ldw	r5,164(sp)
 1000c38:	df002783 	ldbu	fp,158(sp)
 1000c3c:	2803bc16 	blt	r5,zero,1001b30 <___vfprintf_internal_r+0x1428>
 1000c40:	00ffdfc4 	movi	r3,-129
 1000c44:	9d84b03a 	or	r2,r19,r22
 1000c48:	90e4703a 	and	r18,r18,r3
 1000c4c:	10017726 	beq	r2,zero,100122c <___vfprintf_internal_r+0xb24>
 1000c50:	b0038326 	beq	r22,zero,1001a60 <___vfprintf_internal_r+0x1358>
 1000c54:	dc402a15 	stw	r17,168(sp)
 1000c58:	dc001e04 	addi	r16,sp,120
 1000c5c:	b023883a 	mov	r17,r22
 1000c60:	402d883a 	mov	r22,r8
 1000c64:	9809883a 	mov	r4,r19
 1000c68:	880b883a 	mov	r5,r17
 1000c6c:	01800284 	movi	r6,10
 1000c70:	000f883a 	mov	r7,zero
 1000c74:	100a0fc0 	call	100a0fc <__umoddi3>
 1000c78:	10800c04 	addi	r2,r2,48
 1000c7c:	843fffc4 	addi	r16,r16,-1
 1000c80:	9809883a 	mov	r4,r19
 1000c84:	880b883a 	mov	r5,r17
 1000c88:	80800005 	stb	r2,0(r16)
 1000c8c:	01800284 	movi	r6,10
 1000c90:	000f883a 	mov	r7,zero
 1000c94:	1009b840 	call	1009b84 <__udivdi3>
 1000c98:	1027883a 	mov	r19,r2
 1000c9c:	10c4b03a 	or	r2,r2,r3
 1000ca0:	1823883a 	mov	r17,r3
 1000ca4:	103fef1e 	bne	r2,zero,1000c64 <__alt_mem_TCDM+0xfefffc64>
 1000ca8:	d8c02817 	ldw	r3,160(sp)
 1000cac:	dc402a17 	ldw	r17,168(sp)
 1000cb0:	b011883a 	mov	r8,r22
 1000cb4:	1c07c83a 	sub	r3,r3,r16
 1000cb8:	d8c02e15 	stw	r3,184(sp)
 1000cbc:	00005906 	br	1000e24 <___vfprintf_internal_r+0x71c>
 1000cc0:	18c03fcc 	andi	r3,r3,255
 1000cc4:	1806fa1e 	bne	r3,zero,10028b0 <___vfprintf_internal_r+0x21a8>
 1000cc8:	9080020c 	andi	r2,r18,8
 1000ccc:	10048a26 	beq	r2,zero,1001ef8 <___vfprintf_internal_r+0x17f0>
 1000cd0:	d8c02d17 	ldw	r3,180(sp)
 1000cd4:	d9002d17 	ldw	r4,180(sp)
 1000cd8:	d9402d17 	ldw	r5,180(sp)
 1000cdc:	18c00017 	ldw	r3,0(r3)
 1000ce0:	21000117 	ldw	r4,4(r4)
 1000ce4:	29400204 	addi	r5,r5,8
 1000ce8:	d8c03615 	stw	r3,216(sp)
 1000cec:	d9003815 	stw	r4,224(sp)
 1000cf0:	d9402d15 	stw	r5,180(sp)
 1000cf4:	d9003617 	ldw	r4,216(sp)
 1000cf8:	d9403817 	ldw	r5,224(sp)
 1000cfc:	da003d15 	stw	r8,244(sp)
 1000d00:	04000044 	movi	r16,1
 1000d04:	10079280 	call	1007928 <__fpclassifyd>
 1000d08:	da003d17 	ldw	r8,244(sp)
 1000d0c:	14041f1e 	bne	r2,r16,1001d8c <___vfprintf_internal_r+0x1684>
 1000d10:	d9003617 	ldw	r4,216(sp)
 1000d14:	d9403817 	ldw	r5,224(sp)
 1000d18:	000d883a 	mov	r6,zero
 1000d1c:	000f883a 	mov	r7,zero
 1000d20:	100bae00 	call	100bae0 <__ledf2>
 1000d24:	da003d17 	ldw	r8,244(sp)
 1000d28:	1005be16 	blt	r2,zero,1002424 <___vfprintf_internal_r+0x1d1c>
 1000d2c:	df002783 	ldbu	fp,158(sp)
 1000d30:	008011c4 	movi	r2,71
 1000d34:	1445330e 	bge	r2,r17,1002204 <___vfprintf_internal_r+0x1afc>
 1000d38:	04004074 	movhi	r16,257
 1000d3c:	843f5604 	addi	r16,r16,-680
 1000d40:	00c000c4 	movi	r3,3
 1000d44:	00bfdfc4 	movi	r2,-129
 1000d48:	d8c02a15 	stw	r3,168(sp)
 1000d4c:	90a4703a 	and	r18,r18,r2
 1000d50:	d8c02e15 	stw	r3,184(sp)
 1000d54:	d8002915 	stw	zero,164(sp)
 1000d58:	d8003215 	stw	zero,200(sp)
 1000d5c:	00003706 	br	1000e3c <___vfprintf_internal_r+0x734>
 1000d60:	94800214 	ori	r18,r18,8
 1000d64:	ac400007 	ldb	r17,0(r21)
 1000d68:	003ec806 	br	100088c <__alt_mem_TCDM+0xfefff88c>
 1000d6c:	18c03fcc 	andi	r3,r3,255
 1000d70:	1806db1e 	bne	r3,zero,10028e0 <___vfprintf_internal_r+0x21d8>
 1000d74:	94800414 	ori	r18,r18,16
 1000d78:	9080080c 	andi	r2,r18,32
 1000d7c:	1002d826 	beq	r2,zero,10018e0 <___vfprintf_internal_r+0x11d8>
 1000d80:	d9402d17 	ldw	r5,180(sp)
 1000d84:	d8c02917 	ldw	r3,164(sp)
 1000d88:	d8002785 	stb	zero,158(sp)
 1000d8c:	28800204 	addi	r2,r5,8
 1000d90:	2cc00017 	ldw	r19,0(r5)
 1000d94:	2d800117 	ldw	r22,4(r5)
 1000d98:	18048f16 	blt	r3,zero,1001fd8 <___vfprintf_internal_r+0x18d0>
 1000d9c:	013fdfc4 	movi	r4,-129
 1000da0:	9d86b03a 	or	r3,r19,r22
 1000da4:	d8802d15 	stw	r2,180(sp)
 1000da8:	9124703a 	and	r18,r18,r4
 1000dac:	1802d91e 	bne	r3,zero,1001914 <___vfprintf_internal_r+0x120c>
 1000db0:	d8c02917 	ldw	r3,164(sp)
 1000db4:	0039883a 	mov	fp,zero
 1000db8:	1805c326 	beq	r3,zero,10024c8 <___vfprintf_internal_r+0x1dc0>
 1000dbc:	0027883a 	mov	r19,zero
 1000dc0:	002d883a 	mov	r22,zero
 1000dc4:	dc001e04 	addi	r16,sp,120
 1000dc8:	9806d0fa 	srli	r3,r19,3
 1000dcc:	b008977a 	slli	r4,r22,29
 1000dd0:	b02cd0fa 	srli	r22,r22,3
 1000dd4:	9cc001cc 	andi	r19,r19,7
 1000dd8:	98800c04 	addi	r2,r19,48
 1000ddc:	843fffc4 	addi	r16,r16,-1
 1000de0:	20e6b03a 	or	r19,r4,r3
 1000de4:	80800005 	stb	r2,0(r16)
 1000de8:	9d86b03a 	or	r3,r19,r22
 1000dec:	183ff61e 	bne	r3,zero,1000dc8 <__alt_mem_TCDM+0xfefffdc8>
 1000df0:	90c0004c 	andi	r3,r18,1
 1000df4:	18013b26 	beq	r3,zero,10012e4 <___vfprintf_internal_r+0xbdc>
 1000df8:	10803fcc 	andi	r2,r2,255
 1000dfc:	1080201c 	xori	r2,r2,128
 1000e00:	10bfe004 	addi	r2,r2,-128
 1000e04:	00c00c04 	movi	r3,48
 1000e08:	10c13626 	beq	r2,r3,10012e4 <___vfprintf_internal_r+0xbdc>
 1000e0c:	80ffffc5 	stb	r3,-1(r16)
 1000e10:	d8c02817 	ldw	r3,160(sp)
 1000e14:	80bfffc4 	addi	r2,r16,-1
 1000e18:	1021883a 	mov	r16,r2
 1000e1c:	1887c83a 	sub	r3,r3,r2
 1000e20:	d8c02e15 	stw	r3,184(sp)
 1000e24:	d8802e17 	ldw	r2,184(sp)
 1000e28:	d9002917 	ldw	r4,164(sp)
 1000e2c:	1100010e 	bge	r2,r4,1000e34 <___vfprintf_internal_r+0x72c>
 1000e30:	2005883a 	mov	r2,r4
 1000e34:	d8802a15 	stw	r2,168(sp)
 1000e38:	d8003215 	stw	zero,200(sp)
 1000e3c:	e7003fcc 	andi	fp,fp,255
 1000e40:	e700201c 	xori	fp,fp,128
 1000e44:	e73fe004 	addi	fp,fp,-128
 1000e48:	e0000326 	beq	fp,zero,1000e58 <___vfprintf_internal_r+0x750>
 1000e4c:	d8c02a17 	ldw	r3,168(sp)
 1000e50:	18c00044 	addi	r3,r3,1
 1000e54:	d8c02a15 	stw	r3,168(sp)
 1000e58:	90c0008c 	andi	r3,r18,2
 1000e5c:	d8c02b15 	stw	r3,172(sp)
 1000e60:	18000326 	beq	r3,zero,1000e70 <___vfprintf_internal_r+0x768>
 1000e64:	d8c02a17 	ldw	r3,168(sp)
 1000e68:	18c00084 	addi	r3,r3,2
 1000e6c:	d8c02a15 	stw	r3,168(sp)
 1000e70:	90c0210c 	andi	r3,r18,132
 1000e74:	d8c03015 	stw	r3,192(sp)
 1000e78:	1801a31e 	bne	r3,zero,1001508 <___vfprintf_internal_r+0xe00>
 1000e7c:	d9003117 	ldw	r4,196(sp)
 1000e80:	d8c02a17 	ldw	r3,168(sp)
 1000e84:	20e7c83a 	sub	r19,r4,r3
 1000e88:	04c19f0e 	bge	zero,r19,1001508 <___vfprintf_internal_r+0xe00>
 1000e8c:	02400404 	movi	r9,16
 1000e90:	d8c02017 	ldw	r3,128(sp)
 1000e94:	d8801f17 	ldw	r2,124(sp)
 1000e98:	4cc50d0e 	bge	r9,r19,10022d0 <___vfprintf_internal_r+0x1bc8>
 1000e9c:	01404074 	movhi	r5,257
 1000ea0:	297f6984 	addi	r5,r5,-602
 1000ea4:	dc403b15 	stw	r17,236(sp)
 1000ea8:	d9403515 	stw	r5,212(sp)
 1000eac:	9823883a 	mov	r17,r19
 1000eb0:	482d883a 	mov	r22,r9
 1000eb4:	9027883a 	mov	r19,r18
 1000eb8:	070001c4 	movi	fp,7
 1000ebc:	8025883a 	mov	r18,r16
 1000ec0:	dc002c17 	ldw	r16,176(sp)
 1000ec4:	00000306 	br	1000ed4 <___vfprintf_internal_r+0x7cc>
 1000ec8:	8c7ffc04 	addi	r17,r17,-16
 1000ecc:	42000204 	addi	r8,r8,8
 1000ed0:	b440130e 	bge	r22,r17,1000f20 <___vfprintf_internal_r+0x818>
 1000ed4:	01004074 	movhi	r4,257
 1000ed8:	18c00404 	addi	r3,r3,16
 1000edc:	10800044 	addi	r2,r2,1
 1000ee0:	213f6984 	addi	r4,r4,-602
 1000ee4:	41000015 	stw	r4,0(r8)
 1000ee8:	45800115 	stw	r22,4(r8)
 1000eec:	d8c02015 	stw	r3,128(sp)
 1000ef0:	d8801f15 	stw	r2,124(sp)
 1000ef4:	e0bff40e 	bge	fp,r2,1000ec8 <__alt_mem_TCDM+0xfefffec8>
 1000ef8:	d9801e04 	addi	r6,sp,120
 1000efc:	b80b883a 	mov	r5,r23
 1000f00:	8009883a 	mov	r4,r16
 1000f04:	1007d040 	call	1007d04 <__sprint_r>
 1000f08:	103f011e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 1000f0c:	8c7ffc04 	addi	r17,r17,-16
 1000f10:	d8c02017 	ldw	r3,128(sp)
 1000f14:	d8801f17 	ldw	r2,124(sp)
 1000f18:	da000404 	addi	r8,sp,16
 1000f1c:	b47fed16 	blt	r22,r17,1000ed4 <__alt_mem_TCDM+0xfefffed4>
 1000f20:	9021883a 	mov	r16,r18
 1000f24:	9825883a 	mov	r18,r19
 1000f28:	8827883a 	mov	r19,r17
 1000f2c:	dc403b17 	ldw	r17,236(sp)
 1000f30:	d9403517 	ldw	r5,212(sp)
 1000f34:	98c7883a 	add	r3,r19,r3
 1000f38:	10800044 	addi	r2,r2,1
 1000f3c:	41400015 	stw	r5,0(r8)
 1000f40:	44c00115 	stw	r19,4(r8)
 1000f44:	d8c02015 	stw	r3,128(sp)
 1000f48:	d8801f15 	stw	r2,124(sp)
 1000f4c:	010001c4 	movi	r4,7
 1000f50:	2082a316 	blt	r4,r2,10019e0 <___vfprintf_internal_r+0x12d8>
 1000f54:	df002787 	ldb	fp,158(sp)
 1000f58:	42000204 	addi	r8,r8,8
 1000f5c:	e0000c26 	beq	fp,zero,1000f90 <___vfprintf_internal_r+0x888>
 1000f60:	d8801f17 	ldw	r2,124(sp)
 1000f64:	d9002784 	addi	r4,sp,158
 1000f68:	18c00044 	addi	r3,r3,1
 1000f6c:	10800044 	addi	r2,r2,1
 1000f70:	41000015 	stw	r4,0(r8)
 1000f74:	01000044 	movi	r4,1
 1000f78:	41000115 	stw	r4,4(r8)
 1000f7c:	d8c02015 	stw	r3,128(sp)
 1000f80:	d8801f15 	stw	r2,124(sp)
 1000f84:	010001c4 	movi	r4,7
 1000f88:	20823c16 	blt	r4,r2,100187c <___vfprintf_internal_r+0x1174>
 1000f8c:	42000204 	addi	r8,r8,8
 1000f90:	d8802b17 	ldw	r2,172(sp)
 1000f94:	10000c26 	beq	r2,zero,1000fc8 <___vfprintf_internal_r+0x8c0>
 1000f98:	d8801f17 	ldw	r2,124(sp)
 1000f9c:	d9002704 	addi	r4,sp,156
 1000fa0:	18c00084 	addi	r3,r3,2
 1000fa4:	10800044 	addi	r2,r2,1
 1000fa8:	41000015 	stw	r4,0(r8)
 1000fac:	01000084 	movi	r4,2
 1000fb0:	41000115 	stw	r4,4(r8)
 1000fb4:	d8c02015 	stw	r3,128(sp)
 1000fb8:	d8801f15 	stw	r2,124(sp)
 1000fbc:	010001c4 	movi	r4,7
 1000fc0:	20823616 	blt	r4,r2,100189c <___vfprintf_internal_r+0x1194>
 1000fc4:	42000204 	addi	r8,r8,8
 1000fc8:	d9003017 	ldw	r4,192(sp)
 1000fcc:	00802004 	movi	r2,128
 1000fd0:	20819926 	beq	r4,r2,1001638 <___vfprintf_internal_r+0xf30>
 1000fd4:	d9402917 	ldw	r5,164(sp)
 1000fd8:	d8802e17 	ldw	r2,184(sp)
 1000fdc:	28adc83a 	sub	r22,r5,r2
 1000fe0:	0580310e 	bge	zero,r22,10010a8 <___vfprintf_internal_r+0x9a0>
 1000fe4:	07000404 	movi	fp,16
 1000fe8:	d8801f17 	ldw	r2,124(sp)
 1000fec:	e584140e 	bge	fp,r22,1002040 <___vfprintf_internal_r+0x1938>
 1000ff0:	01404074 	movhi	r5,257
 1000ff4:	297f6584 	addi	r5,r5,-618
 1000ff8:	dc402915 	stw	r17,164(sp)
 1000ffc:	d9402b15 	stw	r5,172(sp)
 1001000:	b023883a 	mov	r17,r22
 1001004:	04c001c4 	movi	r19,7
 1001008:	a82d883a 	mov	r22,r21
 100100c:	902b883a 	mov	r21,r18
 1001010:	8025883a 	mov	r18,r16
 1001014:	dc002c17 	ldw	r16,176(sp)
 1001018:	00000306 	br	1001028 <___vfprintf_internal_r+0x920>
 100101c:	8c7ffc04 	addi	r17,r17,-16
 1001020:	42000204 	addi	r8,r8,8
 1001024:	e440110e 	bge	fp,r17,100106c <___vfprintf_internal_r+0x964>
 1001028:	18c00404 	addi	r3,r3,16
 100102c:	10800044 	addi	r2,r2,1
 1001030:	45000015 	stw	r20,0(r8)
 1001034:	47000115 	stw	fp,4(r8)
 1001038:	d8c02015 	stw	r3,128(sp)
 100103c:	d8801f15 	stw	r2,124(sp)
 1001040:	98bff60e 	bge	r19,r2,100101c <__alt_mem_TCDM+0xff00001c>
 1001044:	d9801e04 	addi	r6,sp,120
 1001048:	b80b883a 	mov	r5,r23
 100104c:	8009883a 	mov	r4,r16
 1001050:	1007d040 	call	1007d04 <__sprint_r>
 1001054:	103eae1e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 1001058:	8c7ffc04 	addi	r17,r17,-16
 100105c:	d8c02017 	ldw	r3,128(sp)
 1001060:	d8801f17 	ldw	r2,124(sp)
 1001064:	da000404 	addi	r8,sp,16
 1001068:	e47fef16 	blt	fp,r17,1001028 <__alt_mem_TCDM+0xff000028>
 100106c:	9021883a 	mov	r16,r18
 1001070:	a825883a 	mov	r18,r21
 1001074:	b02b883a 	mov	r21,r22
 1001078:	882d883a 	mov	r22,r17
 100107c:	dc402917 	ldw	r17,164(sp)
 1001080:	d9002b17 	ldw	r4,172(sp)
 1001084:	1d87883a 	add	r3,r3,r22
 1001088:	10800044 	addi	r2,r2,1
 100108c:	41000015 	stw	r4,0(r8)
 1001090:	45800115 	stw	r22,4(r8)
 1001094:	d8c02015 	stw	r3,128(sp)
 1001098:	d8801f15 	stw	r2,124(sp)
 100109c:	010001c4 	movi	r4,7
 10010a0:	2081ee16 	blt	r4,r2,100185c <___vfprintf_internal_r+0x1154>
 10010a4:	42000204 	addi	r8,r8,8
 10010a8:	9080400c 	andi	r2,r18,256
 10010ac:	1001181e 	bne	r2,zero,1001510 <___vfprintf_internal_r+0xe08>
 10010b0:	d9402e17 	ldw	r5,184(sp)
 10010b4:	d8801f17 	ldw	r2,124(sp)
 10010b8:	44000015 	stw	r16,0(r8)
 10010bc:	1947883a 	add	r3,r3,r5
 10010c0:	10800044 	addi	r2,r2,1
 10010c4:	41400115 	stw	r5,4(r8)
 10010c8:	d8c02015 	stw	r3,128(sp)
 10010cc:	d8801f15 	stw	r2,124(sp)
 10010d0:	010001c4 	movi	r4,7
 10010d4:	2081d316 	blt	r4,r2,1001824 <___vfprintf_internal_r+0x111c>
 10010d8:	42000204 	addi	r8,r8,8
 10010dc:	9480010c 	andi	r18,r18,4
 10010e0:	90003226 	beq	r18,zero,10011ac <___vfprintf_internal_r+0xaa4>
 10010e4:	d9403117 	ldw	r5,196(sp)
 10010e8:	d8802a17 	ldw	r2,168(sp)
 10010ec:	28a1c83a 	sub	r16,r5,r2
 10010f0:	04002e0e 	bge	zero,r16,10011ac <___vfprintf_internal_r+0xaa4>
 10010f4:	04400404 	movi	r17,16
 10010f8:	d8801f17 	ldw	r2,124(sp)
 10010fc:	8c04a20e 	bge	r17,r16,1002388 <___vfprintf_internal_r+0x1c80>
 1001100:	01404074 	movhi	r5,257
 1001104:	297f6984 	addi	r5,r5,-602
 1001108:	d9403515 	stw	r5,212(sp)
 100110c:	048001c4 	movi	r18,7
 1001110:	dcc02c17 	ldw	r19,176(sp)
 1001114:	00000306 	br	1001124 <___vfprintf_internal_r+0xa1c>
 1001118:	843ffc04 	addi	r16,r16,-16
 100111c:	42000204 	addi	r8,r8,8
 1001120:	8c00130e 	bge	r17,r16,1001170 <___vfprintf_internal_r+0xa68>
 1001124:	01004074 	movhi	r4,257
 1001128:	18c00404 	addi	r3,r3,16
 100112c:	10800044 	addi	r2,r2,1
 1001130:	213f6984 	addi	r4,r4,-602
 1001134:	41000015 	stw	r4,0(r8)
 1001138:	44400115 	stw	r17,4(r8)
 100113c:	d8c02015 	stw	r3,128(sp)
 1001140:	d8801f15 	stw	r2,124(sp)
 1001144:	90bff40e 	bge	r18,r2,1001118 <__alt_mem_TCDM+0xff000118>
 1001148:	d9801e04 	addi	r6,sp,120
 100114c:	b80b883a 	mov	r5,r23
 1001150:	9809883a 	mov	r4,r19
 1001154:	1007d040 	call	1007d04 <__sprint_r>
 1001158:	103e6d1e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 100115c:	843ffc04 	addi	r16,r16,-16
 1001160:	d8c02017 	ldw	r3,128(sp)
 1001164:	d8801f17 	ldw	r2,124(sp)
 1001168:	da000404 	addi	r8,sp,16
 100116c:	8c3fed16 	blt	r17,r16,1001124 <__alt_mem_TCDM+0xff000124>
 1001170:	d9403517 	ldw	r5,212(sp)
 1001174:	1c07883a 	add	r3,r3,r16
 1001178:	10800044 	addi	r2,r2,1
 100117c:	41400015 	stw	r5,0(r8)
 1001180:	44000115 	stw	r16,4(r8)
 1001184:	d8c02015 	stw	r3,128(sp)
 1001188:	d8801f15 	stw	r2,124(sp)
 100118c:	010001c4 	movi	r4,7
 1001190:	2080060e 	bge	r4,r2,10011ac <___vfprintf_internal_r+0xaa4>
 1001194:	d9002c17 	ldw	r4,176(sp)
 1001198:	d9801e04 	addi	r6,sp,120
 100119c:	b80b883a 	mov	r5,r23
 10011a0:	1007d040 	call	1007d04 <__sprint_r>
 10011a4:	103e5a1e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 10011a8:	d8c02017 	ldw	r3,128(sp)
 10011ac:	d8803117 	ldw	r2,196(sp)
 10011b0:	d9002a17 	ldw	r4,168(sp)
 10011b4:	1100010e 	bge	r2,r4,10011bc <___vfprintf_internal_r+0xab4>
 10011b8:	2005883a 	mov	r2,r4
 10011bc:	d9402f17 	ldw	r5,188(sp)
 10011c0:	288b883a 	add	r5,r5,r2
 10011c4:	d9402f15 	stw	r5,188(sp)
 10011c8:	18019e1e 	bne	r3,zero,1001844 <___vfprintf_internal_r+0x113c>
 10011cc:	a8800007 	ldb	r2,0(r21)
 10011d0:	d8001f15 	stw	zero,124(sp)
 10011d4:	da000404 	addi	r8,sp,16
 10011d8:	103d851e 	bne	r2,zero,10007f0 <__alt_mem_TCDM+0xfefff7f0>
 10011dc:	a821883a 	mov	r16,r21
 10011e0:	003d9b06 	br	1000850 <__alt_mem_TCDM+0xfefff850>
 10011e4:	18c03fcc 	andi	r3,r3,255
 10011e8:	1805c11e 	bne	r3,zero,10028f0 <___vfprintf_internal_r+0x21e8>
 10011ec:	94800414 	ori	r18,r18,16
 10011f0:	9080080c 	andi	r2,r18,32
 10011f4:	10020c26 	beq	r2,zero,1001a28 <___vfprintf_internal_r+0x1320>
 10011f8:	d8802d17 	ldw	r2,180(sp)
 10011fc:	d9002917 	ldw	r4,164(sp)
 1001200:	d8002785 	stb	zero,158(sp)
 1001204:	10c00204 	addi	r3,r2,8
 1001208:	14c00017 	ldw	r19,0(r2)
 100120c:	15800117 	ldw	r22,4(r2)
 1001210:	20040f16 	blt	r4,zero,1002250 <___vfprintf_internal_r+0x1b48>
 1001214:	013fdfc4 	movi	r4,-129
 1001218:	9d84b03a 	or	r2,r19,r22
 100121c:	d8c02d15 	stw	r3,180(sp)
 1001220:	9124703a 	and	r18,r18,r4
 1001224:	0039883a 	mov	fp,zero
 1001228:	103e891e 	bne	r2,zero,1000c50 <__alt_mem_TCDM+0xfefffc50>
 100122c:	d9002917 	ldw	r4,164(sp)
 1001230:	2002c11e 	bne	r4,zero,1001d38 <___vfprintf_internal_r+0x1630>
 1001234:	d8002915 	stw	zero,164(sp)
 1001238:	d8002e15 	stw	zero,184(sp)
 100123c:	dc001e04 	addi	r16,sp,120
 1001240:	003ef806 	br	1000e24 <__alt_mem_TCDM+0xfefffe24>
 1001244:	18c03fcc 	andi	r3,r3,255
 1001248:	18059d1e 	bne	r3,zero,10028c0 <___vfprintf_internal_r+0x21b8>
 100124c:	01404074 	movhi	r5,257
 1001250:	297f5904 	addi	r5,r5,-668
 1001254:	d9403915 	stw	r5,228(sp)
 1001258:	9080080c 	andi	r2,r18,32
 100125c:	10005226 	beq	r2,zero,10013a8 <___vfprintf_internal_r+0xca0>
 1001260:	d8802d17 	ldw	r2,180(sp)
 1001264:	14c00017 	ldw	r19,0(r2)
 1001268:	15800117 	ldw	r22,4(r2)
 100126c:	10800204 	addi	r2,r2,8
 1001270:	d8802d15 	stw	r2,180(sp)
 1001274:	9080004c 	andi	r2,r18,1
 1001278:	10019026 	beq	r2,zero,10018bc <___vfprintf_internal_r+0x11b4>
 100127c:	9d84b03a 	or	r2,r19,r22
 1001280:	10036926 	beq	r2,zero,1002028 <___vfprintf_internal_r+0x1920>
 1001284:	d8c02917 	ldw	r3,164(sp)
 1001288:	00800c04 	movi	r2,48
 100128c:	d8802705 	stb	r2,156(sp)
 1001290:	dc402745 	stb	r17,157(sp)
 1001294:	d8002785 	stb	zero,158(sp)
 1001298:	90800094 	ori	r2,r18,2
 100129c:	18045d16 	blt	r3,zero,1002414 <___vfprintf_internal_r+0x1d0c>
 10012a0:	00bfdfc4 	movi	r2,-129
 10012a4:	90a4703a 	and	r18,r18,r2
 10012a8:	94800094 	ori	r18,r18,2
 10012ac:	0039883a 	mov	fp,zero
 10012b0:	d9003917 	ldw	r4,228(sp)
 10012b4:	dc001e04 	addi	r16,sp,120
 10012b8:	988003cc 	andi	r2,r19,15
 10012bc:	b006973a 	slli	r3,r22,28
 10012c0:	2085883a 	add	r2,r4,r2
 10012c4:	9826d13a 	srli	r19,r19,4
 10012c8:	10800003 	ldbu	r2,0(r2)
 10012cc:	b02cd13a 	srli	r22,r22,4
 10012d0:	843fffc4 	addi	r16,r16,-1
 10012d4:	1ce6b03a 	or	r19,r3,r19
 10012d8:	80800005 	stb	r2,0(r16)
 10012dc:	9d84b03a 	or	r2,r19,r22
 10012e0:	103ff51e 	bne	r2,zero,10012b8 <__alt_mem_TCDM+0xff0002b8>
 10012e4:	d8c02817 	ldw	r3,160(sp)
 10012e8:	1c07c83a 	sub	r3,r3,r16
 10012ec:	d8c02e15 	stw	r3,184(sp)
 10012f0:	003ecc06 	br	1000e24 <__alt_mem_TCDM+0xfefffe24>
 10012f4:	18c03fcc 	andi	r3,r3,255
 10012f8:	183e9f26 	beq	r3,zero,1000d78 <__alt_mem_TCDM+0xfefffd78>
 10012fc:	d9c02785 	stb	r7,158(sp)
 1001300:	003e9d06 	br	1000d78 <__alt_mem_TCDM+0xfefffd78>
 1001304:	00c00044 	movi	r3,1
 1001308:	01c00ac4 	movi	r7,43
 100130c:	ac400007 	ldb	r17,0(r21)
 1001310:	003d5e06 	br	100088c <__alt_mem_TCDM+0xfefff88c>
 1001314:	94800814 	ori	r18,r18,32
 1001318:	ac400007 	ldb	r17,0(r21)
 100131c:	003d5b06 	br	100088c <__alt_mem_TCDM+0xfefff88c>
 1001320:	d8c02d17 	ldw	r3,180(sp)
 1001324:	d8002785 	stb	zero,158(sp)
 1001328:	1c000017 	ldw	r16,0(r3)
 100132c:	1cc00104 	addi	r19,r3,4
 1001330:	80041926 	beq	r16,zero,1002398 <___vfprintf_internal_r+0x1c90>
 1001334:	d9002917 	ldw	r4,164(sp)
 1001338:	2003d016 	blt	r4,zero,100227c <___vfprintf_internal_r+0x1b74>
 100133c:	200d883a 	mov	r6,r4
 1001340:	000b883a 	mov	r5,zero
 1001344:	8009883a 	mov	r4,r16
 1001348:	da003d15 	stw	r8,244(sp)
 100134c:	1005f180 	call	1005f18 <memchr>
 1001350:	da003d17 	ldw	r8,244(sp)
 1001354:	10045426 	beq	r2,zero,10024a8 <___vfprintf_internal_r+0x1da0>
 1001358:	1405c83a 	sub	r2,r2,r16
 100135c:	d8802e15 	stw	r2,184(sp)
 1001360:	1003cc16 	blt	r2,zero,1002294 <___vfprintf_internal_r+0x1b8c>
 1001364:	df002783 	ldbu	fp,158(sp)
 1001368:	d8802a15 	stw	r2,168(sp)
 100136c:	dcc02d15 	stw	r19,180(sp)
 1001370:	d8002915 	stw	zero,164(sp)
 1001374:	d8003215 	stw	zero,200(sp)
 1001378:	003eb006 	br	1000e3c <__alt_mem_TCDM+0xfefffe3c>
 100137c:	18c03fcc 	andi	r3,r3,255
 1001380:	183f9b26 	beq	r3,zero,10011f0 <__alt_mem_TCDM+0xff0001f0>
 1001384:	d9c02785 	stb	r7,158(sp)
 1001388:	003f9906 	br	10011f0 <__alt_mem_TCDM+0xff0001f0>
 100138c:	18c03fcc 	andi	r3,r3,255
 1001390:	1805551e 	bne	r3,zero,10028e8 <___vfprintf_internal_r+0x21e0>
 1001394:	01404074 	movhi	r5,257
 1001398:	297f5e04 	addi	r5,r5,-648
 100139c:	d9403915 	stw	r5,228(sp)
 10013a0:	9080080c 	andi	r2,r18,32
 10013a4:	103fae1e 	bne	r2,zero,1001260 <__alt_mem_TCDM+0xff000260>
 10013a8:	9080040c 	andi	r2,r18,16
 10013ac:	1002de26 	beq	r2,zero,1001f28 <___vfprintf_internal_r+0x1820>
 10013b0:	d8c02d17 	ldw	r3,180(sp)
 10013b4:	002d883a 	mov	r22,zero
 10013b8:	1cc00017 	ldw	r19,0(r3)
 10013bc:	18c00104 	addi	r3,r3,4
 10013c0:	d8c02d15 	stw	r3,180(sp)
 10013c4:	003fab06 	br	1001274 <__alt_mem_TCDM+0xff000274>
 10013c8:	38803fcc 	andi	r2,r7,255
 10013cc:	1080201c 	xori	r2,r2,128
 10013d0:	10bfe004 	addi	r2,r2,-128
 10013d4:	1002d21e 	bne	r2,zero,1001f20 <___vfprintf_internal_r+0x1818>
 10013d8:	00c00044 	movi	r3,1
 10013dc:	01c00804 	movi	r7,32
 10013e0:	ac400007 	ldb	r17,0(r21)
 10013e4:	003d2906 	br	100088c <__alt_mem_TCDM+0xfefff88c>
 10013e8:	94800054 	ori	r18,r18,1
 10013ec:	ac400007 	ldb	r17,0(r21)
 10013f0:	003d2606 	br	100088c <__alt_mem_TCDM+0xfefff88c>
 10013f4:	18c03fcc 	andi	r3,r3,255
 10013f8:	183e0526 	beq	r3,zero,1000c10 <__alt_mem_TCDM+0xfefffc10>
 10013fc:	d9c02785 	stb	r7,158(sp)
 1001400:	003e0306 	br	1000c10 <__alt_mem_TCDM+0xfefffc10>
 1001404:	94801014 	ori	r18,r18,64
 1001408:	ac400007 	ldb	r17,0(r21)
 100140c:	003d1f06 	br	100088c <__alt_mem_TCDM+0xfefff88c>
 1001410:	ac400007 	ldb	r17,0(r21)
 1001414:	8a438726 	beq	r17,r9,1002234 <___vfprintf_internal_r+0x1b2c>
 1001418:	94800414 	ori	r18,r18,16
 100141c:	003d1b06 	br	100088c <__alt_mem_TCDM+0xfefff88c>
 1001420:	18c03fcc 	andi	r3,r3,255
 1001424:	1805341e 	bne	r3,zero,10028f8 <___vfprintf_internal_r+0x21f0>
 1001428:	9080080c 	andi	r2,r18,32
 100142c:	1002cd26 	beq	r2,zero,1001f64 <___vfprintf_internal_r+0x185c>
 1001430:	d9402d17 	ldw	r5,180(sp)
 1001434:	d9002f17 	ldw	r4,188(sp)
 1001438:	28800017 	ldw	r2,0(r5)
 100143c:	2007d7fa 	srai	r3,r4,31
 1001440:	29400104 	addi	r5,r5,4
 1001444:	d9402d15 	stw	r5,180(sp)
 1001448:	11000015 	stw	r4,0(r2)
 100144c:	10c00115 	stw	r3,4(r2)
 1001450:	003ce506 	br	10007e8 <__alt_mem_TCDM+0xfefff7e8>
 1001454:	d8c02d17 	ldw	r3,180(sp)
 1001458:	d9002d17 	ldw	r4,180(sp)
 100145c:	d8002785 	stb	zero,158(sp)
 1001460:	18800017 	ldw	r2,0(r3)
 1001464:	21000104 	addi	r4,r4,4
 1001468:	00c00044 	movi	r3,1
 100146c:	d8c02a15 	stw	r3,168(sp)
 1001470:	d8801405 	stb	r2,80(sp)
 1001474:	d9002d15 	stw	r4,180(sp)
 1001478:	d8c02e15 	stw	r3,184(sp)
 100147c:	d8002915 	stw	zero,164(sp)
 1001480:	d8003215 	stw	zero,200(sp)
 1001484:	dc001404 	addi	r16,sp,80
 1001488:	0039883a 	mov	fp,zero
 100148c:	003e7206 	br	1000e58 <__alt_mem_TCDM+0xfefffe58>
 1001490:	01004074 	movhi	r4,257
 1001494:	213f5e04 	addi	r4,r4,-648
 1001498:	0039883a 	mov	fp,zero
 100149c:	d9003915 	stw	r4,228(sp)
 10014a0:	04401e04 	movi	r17,120
 10014a4:	003f8206 	br	10012b0 <__alt_mem_TCDM+0xff0002b0>
 10014a8:	18c03fcc 	andi	r3,r3,255
 10014ac:	1805061e 	bne	r3,zero,10028c8 <___vfprintf_internal_r+0x21c0>
 10014b0:	883d9126 	beq	r17,zero,1000af8 <__alt_mem_TCDM+0xfefffaf8>
 10014b4:	00c00044 	movi	r3,1
 10014b8:	d8c02a15 	stw	r3,168(sp)
 10014bc:	dc401405 	stb	r17,80(sp)
 10014c0:	d8002785 	stb	zero,158(sp)
 10014c4:	003fec06 	br	1001478 <__alt_mem_TCDM+0xff000478>
 10014c8:	01404074 	movhi	r5,257
 10014cc:	297f5e04 	addi	r5,r5,-648
 10014d0:	d9403915 	stw	r5,228(sp)
 10014d4:	d8c02d15 	stw	r3,180(sp)
 10014d8:	1025883a 	mov	r18,r2
 10014dc:	04401e04 	movi	r17,120
 10014e0:	9d84b03a 	or	r2,r19,r22
 10014e4:	1000fc1e 	bne	r2,zero,10018d8 <___vfprintf_internal_r+0x11d0>
 10014e8:	0039883a 	mov	fp,zero
 10014ec:	00800084 	movi	r2,2
 10014f0:	10803fcc 	andi	r2,r2,255
 10014f4:	00c00044 	movi	r3,1
 10014f8:	10c20f26 	beq	r2,r3,1001d38 <___vfprintf_internal_r+0x1630>
 10014fc:	00c00084 	movi	r3,2
 1001500:	10fd6326 	beq	r2,r3,1000a90 <__alt_mem_TCDM+0xfefffa90>
 1001504:	003e2d06 	br	1000dbc <__alt_mem_TCDM+0xfefffdbc>
 1001508:	d8c02017 	ldw	r3,128(sp)
 100150c:	003e9306 	br	1000f5c <__alt_mem_TCDM+0xfeffff5c>
 1001510:	00801944 	movi	r2,101
 1001514:	14407e0e 	bge	r2,r17,1001710 <___vfprintf_internal_r+0x1008>
 1001518:	d9003617 	ldw	r4,216(sp)
 100151c:	d9403817 	ldw	r5,224(sp)
 1001520:	000d883a 	mov	r6,zero
 1001524:	000f883a 	mov	r7,zero
 1001528:	d8c03c15 	stw	r3,240(sp)
 100152c:	da003d15 	stw	r8,244(sp)
 1001530:	100b97c0 	call	100b97c <__eqdf2>
 1001534:	d8c03c17 	ldw	r3,240(sp)
 1001538:	da003d17 	ldw	r8,244(sp)
 100153c:	1000f71e 	bne	r2,zero,100191c <___vfprintf_internal_r+0x1214>
 1001540:	d8801f17 	ldw	r2,124(sp)
 1001544:	01004074 	movhi	r4,257
 1001548:	213f6504 	addi	r4,r4,-620
 100154c:	18c00044 	addi	r3,r3,1
 1001550:	10800044 	addi	r2,r2,1
 1001554:	41000015 	stw	r4,0(r8)
 1001558:	01000044 	movi	r4,1
 100155c:	41000115 	stw	r4,4(r8)
 1001560:	d8c02015 	stw	r3,128(sp)
 1001564:	d8801f15 	stw	r2,124(sp)
 1001568:	010001c4 	movi	r4,7
 100156c:	2082b816 	blt	r4,r2,1002050 <___vfprintf_internal_r+0x1948>
 1001570:	42000204 	addi	r8,r8,8
 1001574:	d8802617 	ldw	r2,152(sp)
 1001578:	d9403317 	ldw	r5,204(sp)
 100157c:	11400216 	blt	r2,r5,1001588 <___vfprintf_internal_r+0xe80>
 1001580:	9080004c 	andi	r2,r18,1
 1001584:	103ed526 	beq	r2,zero,10010dc <__alt_mem_TCDM+0xff0000dc>
 1001588:	d8803717 	ldw	r2,220(sp)
 100158c:	d9003417 	ldw	r4,208(sp)
 1001590:	d9403717 	ldw	r5,220(sp)
 1001594:	1887883a 	add	r3,r3,r2
 1001598:	d8801f17 	ldw	r2,124(sp)
 100159c:	41000015 	stw	r4,0(r8)
 10015a0:	41400115 	stw	r5,4(r8)
 10015a4:	10800044 	addi	r2,r2,1
 10015a8:	d8c02015 	stw	r3,128(sp)
 10015ac:	d8801f15 	stw	r2,124(sp)
 10015b0:	010001c4 	movi	r4,7
 10015b4:	20832916 	blt	r4,r2,100225c <___vfprintf_internal_r+0x1b54>
 10015b8:	42000204 	addi	r8,r8,8
 10015bc:	d8803317 	ldw	r2,204(sp)
 10015c0:	143fffc4 	addi	r16,r2,-1
 10015c4:	043ec50e 	bge	zero,r16,10010dc <__alt_mem_TCDM+0xff0000dc>
 10015c8:	04400404 	movi	r17,16
 10015cc:	d8801f17 	ldw	r2,124(sp)
 10015d0:	8c00880e 	bge	r17,r16,10017f4 <___vfprintf_internal_r+0x10ec>
 10015d4:	01404074 	movhi	r5,257
 10015d8:	297f6584 	addi	r5,r5,-618
 10015dc:	d9402b15 	stw	r5,172(sp)
 10015e0:	058001c4 	movi	r22,7
 10015e4:	dcc02c17 	ldw	r19,176(sp)
 10015e8:	00000306 	br	10015f8 <___vfprintf_internal_r+0xef0>
 10015ec:	42000204 	addi	r8,r8,8
 10015f0:	843ffc04 	addi	r16,r16,-16
 10015f4:	8c00820e 	bge	r17,r16,1001800 <___vfprintf_internal_r+0x10f8>
 10015f8:	18c00404 	addi	r3,r3,16
 10015fc:	10800044 	addi	r2,r2,1
 1001600:	45000015 	stw	r20,0(r8)
 1001604:	44400115 	stw	r17,4(r8)
 1001608:	d8c02015 	stw	r3,128(sp)
 100160c:	d8801f15 	stw	r2,124(sp)
 1001610:	b0bff60e 	bge	r22,r2,10015ec <__alt_mem_TCDM+0xff0005ec>
 1001614:	d9801e04 	addi	r6,sp,120
 1001618:	b80b883a 	mov	r5,r23
 100161c:	9809883a 	mov	r4,r19
 1001620:	1007d040 	call	1007d04 <__sprint_r>
 1001624:	103d3a1e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 1001628:	d8c02017 	ldw	r3,128(sp)
 100162c:	d8801f17 	ldw	r2,124(sp)
 1001630:	da000404 	addi	r8,sp,16
 1001634:	003fee06 	br	10015f0 <__alt_mem_TCDM+0xff0005f0>
 1001638:	d9403117 	ldw	r5,196(sp)
 100163c:	d8802a17 	ldw	r2,168(sp)
 1001640:	28adc83a 	sub	r22,r5,r2
 1001644:	05be630e 	bge	zero,r22,1000fd4 <__alt_mem_TCDM+0xfeffffd4>
 1001648:	07000404 	movi	fp,16
 100164c:	d8801f17 	ldw	r2,124(sp)
 1001650:	e5838f0e 	bge	fp,r22,1002490 <___vfprintf_internal_r+0x1d88>
 1001654:	01404074 	movhi	r5,257
 1001658:	297f6584 	addi	r5,r5,-618
 100165c:	dc403015 	stw	r17,192(sp)
 1001660:	d9402b15 	stw	r5,172(sp)
 1001664:	b023883a 	mov	r17,r22
 1001668:	04c001c4 	movi	r19,7
 100166c:	a82d883a 	mov	r22,r21
 1001670:	902b883a 	mov	r21,r18
 1001674:	8025883a 	mov	r18,r16
 1001678:	dc002c17 	ldw	r16,176(sp)
 100167c:	00000306 	br	100168c <___vfprintf_internal_r+0xf84>
 1001680:	8c7ffc04 	addi	r17,r17,-16
 1001684:	42000204 	addi	r8,r8,8
 1001688:	e440110e 	bge	fp,r17,10016d0 <___vfprintf_internal_r+0xfc8>
 100168c:	18c00404 	addi	r3,r3,16
 1001690:	10800044 	addi	r2,r2,1
 1001694:	45000015 	stw	r20,0(r8)
 1001698:	47000115 	stw	fp,4(r8)
 100169c:	d8c02015 	stw	r3,128(sp)
 10016a0:	d8801f15 	stw	r2,124(sp)
 10016a4:	98bff60e 	bge	r19,r2,1001680 <__alt_mem_TCDM+0xff000680>
 10016a8:	d9801e04 	addi	r6,sp,120
 10016ac:	b80b883a 	mov	r5,r23
 10016b0:	8009883a 	mov	r4,r16
 10016b4:	1007d040 	call	1007d04 <__sprint_r>
 10016b8:	103d151e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 10016bc:	8c7ffc04 	addi	r17,r17,-16
 10016c0:	d8c02017 	ldw	r3,128(sp)
 10016c4:	d8801f17 	ldw	r2,124(sp)
 10016c8:	da000404 	addi	r8,sp,16
 10016cc:	e47fef16 	blt	fp,r17,100168c <__alt_mem_TCDM+0xff00068c>
 10016d0:	9021883a 	mov	r16,r18
 10016d4:	a825883a 	mov	r18,r21
 10016d8:	b02b883a 	mov	r21,r22
 10016dc:	882d883a 	mov	r22,r17
 10016e0:	dc403017 	ldw	r17,192(sp)
 10016e4:	d9002b17 	ldw	r4,172(sp)
 10016e8:	1d87883a 	add	r3,r3,r22
 10016ec:	10800044 	addi	r2,r2,1
 10016f0:	41000015 	stw	r4,0(r8)
 10016f4:	45800115 	stw	r22,4(r8)
 10016f8:	d8c02015 	stw	r3,128(sp)
 10016fc:	d8801f15 	stw	r2,124(sp)
 1001700:	010001c4 	movi	r4,7
 1001704:	20818e16 	blt	r4,r2,1001d40 <___vfprintf_internal_r+0x1638>
 1001708:	42000204 	addi	r8,r8,8
 100170c:	003e3106 	br	1000fd4 <__alt_mem_TCDM+0xfeffffd4>
 1001710:	d9403317 	ldw	r5,204(sp)
 1001714:	00800044 	movi	r2,1
 1001718:	18c00044 	addi	r3,r3,1
 100171c:	1141530e 	bge	r2,r5,1001c6c <___vfprintf_internal_r+0x1564>
 1001720:	dc401f17 	ldw	r17,124(sp)
 1001724:	00800044 	movi	r2,1
 1001728:	40800115 	stw	r2,4(r8)
 100172c:	8c400044 	addi	r17,r17,1
 1001730:	44000015 	stw	r16,0(r8)
 1001734:	d8c02015 	stw	r3,128(sp)
 1001738:	dc401f15 	stw	r17,124(sp)
 100173c:	008001c4 	movi	r2,7
 1001740:	14416b16 	blt	r2,r17,1001cf0 <___vfprintf_internal_r+0x15e8>
 1001744:	42000204 	addi	r8,r8,8
 1001748:	d8803717 	ldw	r2,220(sp)
 100174c:	d9003417 	ldw	r4,208(sp)
 1001750:	8c400044 	addi	r17,r17,1
 1001754:	10c7883a 	add	r3,r2,r3
 1001758:	40800115 	stw	r2,4(r8)
 100175c:	41000015 	stw	r4,0(r8)
 1001760:	d8c02015 	stw	r3,128(sp)
 1001764:	dc401f15 	stw	r17,124(sp)
 1001768:	008001c4 	movi	r2,7
 100176c:	14416916 	blt	r2,r17,1001d14 <___vfprintf_internal_r+0x160c>
 1001770:	45800204 	addi	r22,r8,8
 1001774:	d9003617 	ldw	r4,216(sp)
 1001778:	d9403817 	ldw	r5,224(sp)
 100177c:	000d883a 	mov	r6,zero
 1001780:	000f883a 	mov	r7,zero
 1001784:	d8c03c15 	stw	r3,240(sp)
 1001788:	100b97c0 	call	100b97c <__eqdf2>
 100178c:	d8c03c17 	ldw	r3,240(sp)
 1001790:	1000bc26 	beq	r2,zero,1001a84 <___vfprintf_internal_r+0x137c>
 1001794:	d9403317 	ldw	r5,204(sp)
 1001798:	84000044 	addi	r16,r16,1
 100179c:	8c400044 	addi	r17,r17,1
 10017a0:	28bfffc4 	addi	r2,r5,-1
 10017a4:	1887883a 	add	r3,r3,r2
 10017a8:	b0800115 	stw	r2,4(r22)
 10017ac:	b4000015 	stw	r16,0(r22)
 10017b0:	d8c02015 	stw	r3,128(sp)
 10017b4:	dc401f15 	stw	r17,124(sp)
 10017b8:	008001c4 	movi	r2,7
 10017bc:	14414316 	blt	r2,r17,1001ccc <___vfprintf_internal_r+0x15c4>
 10017c0:	b5800204 	addi	r22,r22,8
 10017c4:	d9003a17 	ldw	r4,232(sp)
 10017c8:	df0022c4 	addi	fp,sp,139
 10017cc:	8c400044 	addi	r17,r17,1
 10017d0:	20c7883a 	add	r3,r4,r3
 10017d4:	b7000015 	stw	fp,0(r22)
 10017d8:	b1000115 	stw	r4,4(r22)
 10017dc:	d8c02015 	stw	r3,128(sp)
 10017e0:	dc401f15 	stw	r17,124(sp)
 10017e4:	008001c4 	movi	r2,7
 10017e8:	14400e16 	blt	r2,r17,1001824 <___vfprintf_internal_r+0x111c>
 10017ec:	b2000204 	addi	r8,r22,8
 10017f0:	003e3a06 	br	10010dc <__alt_mem_TCDM+0xff0000dc>
 10017f4:	01004074 	movhi	r4,257
 10017f8:	213f6584 	addi	r4,r4,-618
 10017fc:	d9002b15 	stw	r4,172(sp)
 1001800:	d9002b17 	ldw	r4,172(sp)
 1001804:	1c07883a 	add	r3,r3,r16
 1001808:	44000115 	stw	r16,4(r8)
 100180c:	41000015 	stw	r4,0(r8)
 1001810:	10800044 	addi	r2,r2,1
 1001814:	d8c02015 	stw	r3,128(sp)
 1001818:	d8801f15 	stw	r2,124(sp)
 100181c:	010001c4 	movi	r4,7
 1001820:	20be2d0e 	bge	r4,r2,10010d8 <__alt_mem_TCDM+0xff0000d8>
 1001824:	d9002c17 	ldw	r4,176(sp)
 1001828:	d9801e04 	addi	r6,sp,120
 100182c:	b80b883a 	mov	r5,r23
 1001830:	1007d040 	call	1007d04 <__sprint_r>
 1001834:	103cb61e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 1001838:	d8c02017 	ldw	r3,128(sp)
 100183c:	da000404 	addi	r8,sp,16
 1001840:	003e2606 	br	10010dc <__alt_mem_TCDM+0xff0000dc>
 1001844:	d9002c17 	ldw	r4,176(sp)
 1001848:	d9801e04 	addi	r6,sp,120
 100184c:	b80b883a 	mov	r5,r23
 1001850:	1007d040 	call	1007d04 <__sprint_r>
 1001854:	103e5d26 	beq	r2,zero,10011cc <__alt_mem_TCDM+0xff0001cc>
 1001858:	003cad06 	br	1000b10 <__alt_mem_TCDM+0xfefffb10>
 100185c:	d9002c17 	ldw	r4,176(sp)
 1001860:	d9801e04 	addi	r6,sp,120
 1001864:	b80b883a 	mov	r5,r23
 1001868:	1007d040 	call	1007d04 <__sprint_r>
 100186c:	103ca81e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 1001870:	d8c02017 	ldw	r3,128(sp)
 1001874:	da000404 	addi	r8,sp,16
 1001878:	003e0b06 	br	10010a8 <__alt_mem_TCDM+0xff0000a8>
 100187c:	d9002c17 	ldw	r4,176(sp)
 1001880:	d9801e04 	addi	r6,sp,120
 1001884:	b80b883a 	mov	r5,r23
 1001888:	1007d040 	call	1007d04 <__sprint_r>
 100188c:	103ca01e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 1001890:	d8c02017 	ldw	r3,128(sp)
 1001894:	da000404 	addi	r8,sp,16
 1001898:	003dbd06 	br	1000f90 <__alt_mem_TCDM+0xfeffff90>
 100189c:	d9002c17 	ldw	r4,176(sp)
 10018a0:	d9801e04 	addi	r6,sp,120
 10018a4:	b80b883a 	mov	r5,r23
 10018a8:	1007d040 	call	1007d04 <__sprint_r>
 10018ac:	103c981e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 10018b0:	d8c02017 	ldw	r3,128(sp)
 10018b4:	da000404 	addi	r8,sp,16
 10018b8:	003dc306 	br	1000fc8 <__alt_mem_TCDM+0xfeffffc8>
 10018bc:	d8802917 	ldw	r2,164(sp)
 10018c0:	d8002785 	stb	zero,158(sp)
 10018c4:	103f0616 	blt	r2,zero,10014e0 <__alt_mem_TCDM+0xff0004e0>
 10018c8:	00ffdfc4 	movi	r3,-129
 10018cc:	9d84b03a 	or	r2,r19,r22
 10018d0:	90e4703a 	and	r18,r18,r3
 10018d4:	103c6b26 	beq	r2,zero,1000a84 <__alt_mem_TCDM+0xfefffa84>
 10018d8:	0039883a 	mov	fp,zero
 10018dc:	003e7406 	br	10012b0 <__alt_mem_TCDM+0xff0002b0>
 10018e0:	9080040c 	andi	r2,r18,16
 10018e4:	1001b326 	beq	r2,zero,1001fb4 <___vfprintf_internal_r+0x18ac>
 10018e8:	d9002d17 	ldw	r4,180(sp)
 10018ec:	d9402917 	ldw	r5,164(sp)
 10018f0:	d8002785 	stb	zero,158(sp)
 10018f4:	20800104 	addi	r2,r4,4
 10018f8:	24c00017 	ldw	r19,0(r4)
 10018fc:	002d883a 	mov	r22,zero
 1001900:	2801b516 	blt	r5,zero,1001fd8 <___vfprintf_internal_r+0x18d0>
 1001904:	00ffdfc4 	movi	r3,-129
 1001908:	d8802d15 	stw	r2,180(sp)
 100190c:	90e4703a 	and	r18,r18,r3
 1001910:	983d2726 	beq	r19,zero,1000db0 <__alt_mem_TCDM+0xfefffdb0>
 1001914:	0039883a 	mov	fp,zero
 1001918:	003d2a06 	br	1000dc4 <__alt_mem_TCDM+0xfefffdc4>
 100191c:	dc402617 	ldw	r17,152(sp)
 1001920:	0441d30e 	bge	zero,r17,1002070 <___vfprintf_internal_r+0x1968>
 1001924:	dc403217 	ldw	r17,200(sp)
 1001928:	d8803317 	ldw	r2,204(sp)
 100192c:	1440010e 	bge	r2,r17,1001934 <___vfprintf_internal_r+0x122c>
 1001930:	1023883a 	mov	r17,r2
 1001934:	04400a0e 	bge	zero,r17,1001960 <___vfprintf_internal_r+0x1258>
 1001938:	d8801f17 	ldw	r2,124(sp)
 100193c:	1c47883a 	add	r3,r3,r17
 1001940:	44000015 	stw	r16,0(r8)
 1001944:	10800044 	addi	r2,r2,1
 1001948:	44400115 	stw	r17,4(r8)
 100194c:	d8c02015 	stw	r3,128(sp)
 1001950:	d8801f15 	stw	r2,124(sp)
 1001954:	010001c4 	movi	r4,7
 1001958:	20826516 	blt	r4,r2,10022f0 <___vfprintf_internal_r+0x1be8>
 100195c:	42000204 	addi	r8,r8,8
 1001960:	88026116 	blt	r17,zero,10022e8 <___vfprintf_internal_r+0x1be0>
 1001964:	d9003217 	ldw	r4,200(sp)
 1001968:	2463c83a 	sub	r17,r4,r17
 100196c:	04407b0e 	bge	zero,r17,1001b5c <___vfprintf_internal_r+0x1454>
 1001970:	05800404 	movi	r22,16
 1001974:	d8801f17 	ldw	r2,124(sp)
 1001978:	b4419d0e 	bge	r22,r17,1001ff0 <___vfprintf_internal_r+0x18e8>
 100197c:	01004074 	movhi	r4,257
 1001980:	213f6584 	addi	r4,r4,-618
 1001984:	d9002b15 	stw	r4,172(sp)
 1001988:	070001c4 	movi	fp,7
 100198c:	dcc02c17 	ldw	r19,176(sp)
 1001990:	00000306 	br	10019a0 <___vfprintf_internal_r+0x1298>
 1001994:	42000204 	addi	r8,r8,8
 1001998:	8c7ffc04 	addi	r17,r17,-16
 100199c:	b441970e 	bge	r22,r17,1001ffc <___vfprintf_internal_r+0x18f4>
 10019a0:	18c00404 	addi	r3,r3,16
 10019a4:	10800044 	addi	r2,r2,1
 10019a8:	45000015 	stw	r20,0(r8)
 10019ac:	45800115 	stw	r22,4(r8)
 10019b0:	d8c02015 	stw	r3,128(sp)
 10019b4:	d8801f15 	stw	r2,124(sp)
 10019b8:	e0bff60e 	bge	fp,r2,1001994 <__alt_mem_TCDM+0xff000994>
 10019bc:	d9801e04 	addi	r6,sp,120
 10019c0:	b80b883a 	mov	r5,r23
 10019c4:	9809883a 	mov	r4,r19
 10019c8:	1007d040 	call	1007d04 <__sprint_r>
 10019cc:	103c501e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 10019d0:	d8c02017 	ldw	r3,128(sp)
 10019d4:	d8801f17 	ldw	r2,124(sp)
 10019d8:	da000404 	addi	r8,sp,16
 10019dc:	003fee06 	br	1001998 <__alt_mem_TCDM+0xff000998>
 10019e0:	d9002c17 	ldw	r4,176(sp)
 10019e4:	d9801e04 	addi	r6,sp,120
 10019e8:	b80b883a 	mov	r5,r23
 10019ec:	1007d040 	call	1007d04 <__sprint_r>
 10019f0:	103c471e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 10019f4:	d8c02017 	ldw	r3,128(sp)
 10019f8:	df002787 	ldb	fp,158(sp)
 10019fc:	da000404 	addi	r8,sp,16
 1001a00:	003d5606 	br	1000f5c <__alt_mem_TCDM+0xfeffff5c>
 1001a04:	9080040c 	andi	r2,r18,16
 1001a08:	10016126 	beq	r2,zero,1001f90 <___vfprintf_internal_r+0x1888>
 1001a0c:	d8802d17 	ldw	r2,180(sp)
 1001a10:	14c00017 	ldw	r19,0(r2)
 1001a14:	10800104 	addi	r2,r2,4
 1001a18:	d8802d15 	stw	r2,180(sp)
 1001a1c:	982dd7fa 	srai	r22,r19,31
 1001a20:	b005883a 	mov	r2,r22
 1001a24:	003c8206 	br	1000c30 <__alt_mem_TCDM+0xfefffc30>
 1001a28:	9080040c 	andi	r2,r18,16
 1001a2c:	10003526 	beq	r2,zero,1001b04 <___vfprintf_internal_r+0x13fc>
 1001a30:	d9402d17 	ldw	r5,180(sp)
 1001a34:	d8c02917 	ldw	r3,164(sp)
 1001a38:	d8002785 	stb	zero,158(sp)
 1001a3c:	28800104 	addi	r2,r5,4
 1001a40:	2cc00017 	ldw	r19,0(r5)
 1001a44:	002d883a 	mov	r22,zero
 1001a48:	18003716 	blt	r3,zero,1001b28 <___vfprintf_internal_r+0x1420>
 1001a4c:	00ffdfc4 	movi	r3,-129
 1001a50:	d8802d15 	stw	r2,180(sp)
 1001a54:	90e4703a 	and	r18,r18,r3
 1001a58:	0039883a 	mov	fp,zero
 1001a5c:	983df326 	beq	r19,zero,100122c <__alt_mem_TCDM+0xff00022c>
 1001a60:	00800244 	movi	r2,9
 1001a64:	14fc7b36 	bltu	r2,r19,1000c54 <__alt_mem_TCDM+0xfefffc54>
 1001a68:	d8c02817 	ldw	r3,160(sp)
 1001a6c:	dc001dc4 	addi	r16,sp,119
 1001a70:	9cc00c04 	addi	r19,r19,48
 1001a74:	1c07c83a 	sub	r3,r3,r16
 1001a78:	dcc01dc5 	stb	r19,119(sp)
 1001a7c:	d8c02e15 	stw	r3,184(sp)
 1001a80:	003ce806 	br	1000e24 <__alt_mem_TCDM+0xfefffe24>
 1001a84:	d8803317 	ldw	r2,204(sp)
 1001a88:	143fffc4 	addi	r16,r2,-1
 1001a8c:	043f4d0e 	bge	zero,r16,10017c4 <__alt_mem_TCDM+0xff0007c4>
 1001a90:	07000404 	movi	fp,16
 1001a94:	e400810e 	bge	fp,r16,1001c9c <___vfprintf_internal_r+0x1594>
 1001a98:	01404074 	movhi	r5,257
 1001a9c:	297f6584 	addi	r5,r5,-618
 1001aa0:	d9402b15 	stw	r5,172(sp)
 1001aa4:	01c001c4 	movi	r7,7
 1001aa8:	dcc02c17 	ldw	r19,176(sp)
 1001aac:	00000306 	br	1001abc <___vfprintf_internal_r+0x13b4>
 1001ab0:	b5800204 	addi	r22,r22,8
 1001ab4:	843ffc04 	addi	r16,r16,-16
 1001ab8:	e4007b0e 	bge	fp,r16,1001ca8 <___vfprintf_internal_r+0x15a0>
 1001abc:	18c00404 	addi	r3,r3,16
 1001ac0:	8c400044 	addi	r17,r17,1
 1001ac4:	b5000015 	stw	r20,0(r22)
 1001ac8:	b7000115 	stw	fp,4(r22)
 1001acc:	d8c02015 	stw	r3,128(sp)
 1001ad0:	dc401f15 	stw	r17,124(sp)
 1001ad4:	3c7ff60e 	bge	r7,r17,1001ab0 <__alt_mem_TCDM+0xff000ab0>
 1001ad8:	d9801e04 	addi	r6,sp,120
 1001adc:	b80b883a 	mov	r5,r23
 1001ae0:	9809883a 	mov	r4,r19
 1001ae4:	d9c03c15 	stw	r7,240(sp)
 1001ae8:	1007d040 	call	1007d04 <__sprint_r>
 1001aec:	d9c03c17 	ldw	r7,240(sp)
 1001af0:	103c071e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 1001af4:	d8c02017 	ldw	r3,128(sp)
 1001af8:	dc401f17 	ldw	r17,124(sp)
 1001afc:	dd800404 	addi	r22,sp,16
 1001b00:	003fec06 	br	1001ab4 <__alt_mem_TCDM+0xff000ab4>
 1001b04:	9080100c 	andi	r2,r18,64
 1001b08:	d8002785 	stb	zero,158(sp)
 1001b0c:	10010e26 	beq	r2,zero,1001f48 <___vfprintf_internal_r+0x1840>
 1001b10:	d9002d17 	ldw	r4,180(sp)
 1001b14:	d9402917 	ldw	r5,164(sp)
 1001b18:	002d883a 	mov	r22,zero
 1001b1c:	20800104 	addi	r2,r4,4
 1001b20:	24c0000b 	ldhu	r19,0(r4)
 1001b24:	283fc90e 	bge	r5,zero,1001a4c <__alt_mem_TCDM+0xff000a4c>
 1001b28:	d8802d15 	stw	r2,180(sp)
 1001b2c:	0039883a 	mov	fp,zero
 1001b30:	9d84b03a 	or	r2,r19,r22
 1001b34:	103c461e 	bne	r2,zero,1000c50 <__alt_mem_TCDM+0xfefffc50>
 1001b38:	00800044 	movi	r2,1
 1001b3c:	003e6c06 	br	10014f0 <__alt_mem_TCDM+0xff0004f0>
 1001b40:	d9002c17 	ldw	r4,176(sp)
 1001b44:	d9801e04 	addi	r6,sp,120
 1001b48:	b80b883a 	mov	r5,r23
 1001b4c:	1007d040 	call	1007d04 <__sprint_r>
 1001b50:	103bef1e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 1001b54:	d8c02017 	ldw	r3,128(sp)
 1001b58:	da000404 	addi	r8,sp,16
 1001b5c:	d9003217 	ldw	r4,200(sp)
 1001b60:	d8802617 	ldw	r2,152(sp)
 1001b64:	d9403317 	ldw	r5,204(sp)
 1001b68:	8123883a 	add	r17,r16,r4
 1001b6c:	11400216 	blt	r2,r5,1001b78 <___vfprintf_internal_r+0x1470>
 1001b70:	9100004c 	andi	r4,r18,1
 1001b74:	20000d26 	beq	r4,zero,1001bac <___vfprintf_internal_r+0x14a4>
 1001b78:	d9003717 	ldw	r4,220(sp)
 1001b7c:	d9403417 	ldw	r5,208(sp)
 1001b80:	1907883a 	add	r3,r3,r4
 1001b84:	d9001f17 	ldw	r4,124(sp)
 1001b88:	41400015 	stw	r5,0(r8)
 1001b8c:	d9403717 	ldw	r5,220(sp)
 1001b90:	21000044 	addi	r4,r4,1
 1001b94:	d8c02015 	stw	r3,128(sp)
 1001b98:	41400115 	stw	r5,4(r8)
 1001b9c:	d9001f15 	stw	r4,124(sp)
 1001ba0:	014001c4 	movi	r5,7
 1001ba4:	2901e816 	blt	r5,r4,1002348 <___vfprintf_internal_r+0x1c40>
 1001ba8:	42000204 	addi	r8,r8,8
 1001bac:	d9003317 	ldw	r4,204(sp)
 1001bb0:	8121883a 	add	r16,r16,r4
 1001bb4:	2085c83a 	sub	r2,r4,r2
 1001bb8:	8461c83a 	sub	r16,r16,r17
 1001bbc:	1400010e 	bge	r2,r16,1001bc4 <___vfprintf_internal_r+0x14bc>
 1001bc0:	1021883a 	mov	r16,r2
 1001bc4:	04000a0e 	bge	zero,r16,1001bf0 <___vfprintf_internal_r+0x14e8>
 1001bc8:	d9001f17 	ldw	r4,124(sp)
 1001bcc:	1c07883a 	add	r3,r3,r16
 1001bd0:	44400015 	stw	r17,0(r8)
 1001bd4:	21000044 	addi	r4,r4,1
 1001bd8:	44000115 	stw	r16,4(r8)
 1001bdc:	d8c02015 	stw	r3,128(sp)
 1001be0:	d9001f15 	stw	r4,124(sp)
 1001be4:	014001c4 	movi	r5,7
 1001be8:	2901fb16 	blt	r5,r4,10023d8 <___vfprintf_internal_r+0x1cd0>
 1001bec:	42000204 	addi	r8,r8,8
 1001bf0:	8001f716 	blt	r16,zero,10023d0 <___vfprintf_internal_r+0x1cc8>
 1001bf4:	1421c83a 	sub	r16,r2,r16
 1001bf8:	043d380e 	bge	zero,r16,10010dc <__alt_mem_TCDM+0xff0000dc>
 1001bfc:	04400404 	movi	r17,16
 1001c00:	d8801f17 	ldw	r2,124(sp)
 1001c04:	8c3efb0e 	bge	r17,r16,10017f4 <__alt_mem_TCDM+0xff0007f4>
 1001c08:	01404074 	movhi	r5,257
 1001c0c:	297f6584 	addi	r5,r5,-618
 1001c10:	d9402b15 	stw	r5,172(sp)
 1001c14:	058001c4 	movi	r22,7
 1001c18:	dcc02c17 	ldw	r19,176(sp)
 1001c1c:	00000306 	br	1001c2c <___vfprintf_internal_r+0x1524>
 1001c20:	42000204 	addi	r8,r8,8
 1001c24:	843ffc04 	addi	r16,r16,-16
 1001c28:	8c3ef50e 	bge	r17,r16,1001800 <__alt_mem_TCDM+0xff000800>
 1001c2c:	18c00404 	addi	r3,r3,16
 1001c30:	10800044 	addi	r2,r2,1
 1001c34:	45000015 	stw	r20,0(r8)
 1001c38:	44400115 	stw	r17,4(r8)
 1001c3c:	d8c02015 	stw	r3,128(sp)
 1001c40:	d8801f15 	stw	r2,124(sp)
 1001c44:	b0bff60e 	bge	r22,r2,1001c20 <__alt_mem_TCDM+0xff000c20>
 1001c48:	d9801e04 	addi	r6,sp,120
 1001c4c:	b80b883a 	mov	r5,r23
 1001c50:	9809883a 	mov	r4,r19
 1001c54:	1007d040 	call	1007d04 <__sprint_r>
 1001c58:	103bad1e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 1001c5c:	d8c02017 	ldw	r3,128(sp)
 1001c60:	d8801f17 	ldw	r2,124(sp)
 1001c64:	da000404 	addi	r8,sp,16
 1001c68:	003fee06 	br	1001c24 <__alt_mem_TCDM+0xff000c24>
 1001c6c:	9088703a 	and	r4,r18,r2
 1001c70:	203eab1e 	bne	r4,zero,1001720 <__alt_mem_TCDM+0xff000720>
 1001c74:	dc401f17 	ldw	r17,124(sp)
 1001c78:	40800115 	stw	r2,4(r8)
 1001c7c:	44000015 	stw	r16,0(r8)
 1001c80:	8c400044 	addi	r17,r17,1
 1001c84:	d8c02015 	stw	r3,128(sp)
 1001c88:	dc401f15 	stw	r17,124(sp)
 1001c8c:	008001c4 	movi	r2,7
 1001c90:	14400e16 	blt	r2,r17,1001ccc <___vfprintf_internal_r+0x15c4>
 1001c94:	45800204 	addi	r22,r8,8
 1001c98:	003eca06 	br	10017c4 <__alt_mem_TCDM+0xff0007c4>
 1001c9c:	01004074 	movhi	r4,257
 1001ca0:	213f6584 	addi	r4,r4,-618
 1001ca4:	d9002b15 	stw	r4,172(sp)
 1001ca8:	d8802b17 	ldw	r2,172(sp)
 1001cac:	1c07883a 	add	r3,r3,r16
 1001cb0:	8c400044 	addi	r17,r17,1
 1001cb4:	b0800015 	stw	r2,0(r22)
 1001cb8:	b4000115 	stw	r16,4(r22)
 1001cbc:	d8c02015 	stw	r3,128(sp)
 1001cc0:	dc401f15 	stw	r17,124(sp)
 1001cc4:	008001c4 	movi	r2,7
 1001cc8:	147ebd0e 	bge	r2,r17,10017c0 <__alt_mem_TCDM+0xff0007c0>
 1001ccc:	d9002c17 	ldw	r4,176(sp)
 1001cd0:	d9801e04 	addi	r6,sp,120
 1001cd4:	b80b883a 	mov	r5,r23
 1001cd8:	1007d040 	call	1007d04 <__sprint_r>
 1001cdc:	103b8c1e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 1001ce0:	d8c02017 	ldw	r3,128(sp)
 1001ce4:	dc401f17 	ldw	r17,124(sp)
 1001ce8:	dd800404 	addi	r22,sp,16
 1001cec:	003eb506 	br	10017c4 <__alt_mem_TCDM+0xff0007c4>
 1001cf0:	d9002c17 	ldw	r4,176(sp)
 1001cf4:	d9801e04 	addi	r6,sp,120
 1001cf8:	b80b883a 	mov	r5,r23
 1001cfc:	1007d040 	call	1007d04 <__sprint_r>
 1001d00:	103b831e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 1001d04:	d8c02017 	ldw	r3,128(sp)
 1001d08:	dc401f17 	ldw	r17,124(sp)
 1001d0c:	da000404 	addi	r8,sp,16
 1001d10:	003e8d06 	br	1001748 <__alt_mem_TCDM+0xff000748>
 1001d14:	d9002c17 	ldw	r4,176(sp)
 1001d18:	d9801e04 	addi	r6,sp,120
 1001d1c:	b80b883a 	mov	r5,r23
 1001d20:	1007d040 	call	1007d04 <__sprint_r>
 1001d24:	103b7a1e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 1001d28:	d8c02017 	ldw	r3,128(sp)
 1001d2c:	dc401f17 	ldw	r17,124(sp)
 1001d30:	dd800404 	addi	r22,sp,16
 1001d34:	003e8f06 	br	1001774 <__alt_mem_TCDM+0xff000774>
 1001d38:	0027883a 	mov	r19,zero
 1001d3c:	003f4a06 	br	1001a68 <__alt_mem_TCDM+0xff000a68>
 1001d40:	d9002c17 	ldw	r4,176(sp)
 1001d44:	d9801e04 	addi	r6,sp,120
 1001d48:	b80b883a 	mov	r5,r23
 1001d4c:	1007d040 	call	1007d04 <__sprint_r>
 1001d50:	103b6f1e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 1001d54:	d8c02017 	ldw	r3,128(sp)
 1001d58:	da000404 	addi	r8,sp,16
 1001d5c:	003c9d06 	br	1000fd4 <__alt_mem_TCDM+0xfeffffd4>
 1001d60:	04e7c83a 	sub	r19,zero,r19
 1001d64:	9804c03a 	cmpne	r2,r19,zero
 1001d68:	05adc83a 	sub	r22,zero,r22
 1001d6c:	b0adc83a 	sub	r22,r22,r2
 1001d70:	d8802917 	ldw	r2,164(sp)
 1001d74:	07000b44 	movi	fp,45
 1001d78:	df002785 	stb	fp,158(sp)
 1001d7c:	10017b16 	blt	r2,zero,100236c <___vfprintf_internal_r+0x1c64>
 1001d80:	00bfdfc4 	movi	r2,-129
 1001d84:	90a4703a 	and	r18,r18,r2
 1001d88:	003bb106 	br	1000c50 <__alt_mem_TCDM+0xfefffc50>
 1001d8c:	d9003617 	ldw	r4,216(sp)
 1001d90:	d9403817 	ldw	r5,224(sp)
 1001d94:	da003d15 	stw	r8,244(sp)
 1001d98:	10079280 	call	1007928 <__fpclassifyd>
 1001d9c:	da003d17 	ldw	r8,244(sp)
 1001da0:	1000f026 	beq	r2,zero,1002164 <___vfprintf_internal_r+0x1a5c>
 1001da4:	d9002917 	ldw	r4,164(sp)
 1001da8:	05bff7c4 	movi	r22,-33
 1001dac:	00bfffc4 	movi	r2,-1
 1001db0:	8dac703a 	and	r22,r17,r22
 1001db4:	20820026 	beq	r4,r2,10025b8 <___vfprintf_internal_r+0x1eb0>
 1001db8:	008011c4 	movi	r2,71
 1001dbc:	b081f726 	beq	r22,r2,100259c <___vfprintf_internal_r+0x1e94>
 1001dc0:	d9003817 	ldw	r4,224(sp)
 1001dc4:	90c04014 	ori	r3,r18,256
 1001dc8:	d8c02b15 	stw	r3,172(sp)
 1001dcc:	20021516 	blt	r4,zero,1002624 <___vfprintf_internal_r+0x1f1c>
 1001dd0:	dcc03817 	ldw	r19,224(sp)
 1001dd4:	d8002a05 	stb	zero,168(sp)
 1001dd8:	00801984 	movi	r2,102
 1001ddc:	8881f926 	beq	r17,r2,10025c4 <___vfprintf_internal_r+0x1ebc>
 1001de0:	00801184 	movi	r2,70
 1001de4:	88821c26 	beq	r17,r2,1002658 <___vfprintf_internal_r+0x1f50>
 1001de8:	00801144 	movi	r2,69
 1001dec:	b081ef26 	beq	r22,r2,10025ac <___vfprintf_internal_r+0x1ea4>
 1001df0:	d8c02917 	ldw	r3,164(sp)
 1001df4:	d8802104 	addi	r2,sp,132
 1001df8:	d8800315 	stw	r2,12(sp)
 1001dfc:	d9403617 	ldw	r5,216(sp)
 1001e00:	d8802504 	addi	r2,sp,148
 1001e04:	d9002c17 	ldw	r4,176(sp)
 1001e08:	d8800215 	stw	r2,8(sp)
 1001e0c:	d8802604 	addi	r2,sp,152
 1001e10:	d8c00015 	stw	r3,0(sp)
 1001e14:	d8800115 	stw	r2,4(sp)
 1001e18:	01c00084 	movi	r7,2
 1001e1c:	980d883a 	mov	r6,r19
 1001e20:	d8c03c15 	stw	r3,240(sp)
 1001e24:	da003d15 	stw	r8,244(sp)
 1001e28:	1002d2c0 	call	1002d2c <_dtoa_r>
 1001e2c:	1021883a 	mov	r16,r2
 1001e30:	008019c4 	movi	r2,103
 1001e34:	d8c03c17 	ldw	r3,240(sp)
 1001e38:	da003d17 	ldw	r8,244(sp)
 1001e3c:	88817126 	beq	r17,r2,1002404 <___vfprintf_internal_r+0x1cfc>
 1001e40:	008011c4 	movi	r2,71
 1001e44:	88829226 	beq	r17,r2,1002890 <___vfprintf_internal_r+0x2188>
 1001e48:	80f9883a 	add	fp,r16,r3
 1001e4c:	d9003617 	ldw	r4,216(sp)
 1001e50:	000d883a 	mov	r6,zero
 1001e54:	000f883a 	mov	r7,zero
 1001e58:	980b883a 	mov	r5,r19
 1001e5c:	da003d15 	stw	r8,244(sp)
 1001e60:	100b97c0 	call	100b97c <__eqdf2>
 1001e64:	da003d17 	ldw	r8,244(sp)
 1001e68:	10018d26 	beq	r2,zero,10024a0 <___vfprintf_internal_r+0x1d98>
 1001e6c:	d8802117 	ldw	r2,132(sp)
 1001e70:	1700062e 	bgeu	r2,fp,1001e8c <___vfprintf_internal_r+0x1784>
 1001e74:	01000c04 	movi	r4,48
 1001e78:	10c00044 	addi	r3,r2,1
 1001e7c:	d8c02115 	stw	r3,132(sp)
 1001e80:	11000005 	stb	r4,0(r2)
 1001e84:	d8802117 	ldw	r2,132(sp)
 1001e88:	173ffb36 	bltu	r2,fp,1001e78 <__alt_mem_TCDM+0xff000e78>
 1001e8c:	1405c83a 	sub	r2,r2,r16
 1001e90:	d8803315 	stw	r2,204(sp)
 1001e94:	008011c4 	movi	r2,71
 1001e98:	b0817626 	beq	r22,r2,1002474 <___vfprintf_internal_r+0x1d6c>
 1001e9c:	00801944 	movi	r2,101
 1001ea0:	1442810e 	bge	r2,r17,10028a8 <___vfprintf_internal_r+0x21a0>
 1001ea4:	d8c02617 	ldw	r3,152(sp)
 1001ea8:	00801984 	movi	r2,102
 1001eac:	d8c03215 	stw	r3,200(sp)
 1001eb0:	8881fe26 	beq	r17,r2,10026ac <___vfprintf_internal_r+0x1fa4>
 1001eb4:	d8c03217 	ldw	r3,200(sp)
 1001eb8:	d9003317 	ldw	r4,204(sp)
 1001ebc:	1901dd16 	blt	r3,r4,1002634 <___vfprintf_internal_r+0x1f2c>
 1001ec0:	9480004c 	andi	r18,r18,1
 1001ec4:	90022b1e 	bne	r18,zero,1002774 <___vfprintf_internal_r+0x206c>
 1001ec8:	1805883a 	mov	r2,r3
 1001ecc:	18028016 	blt	r3,zero,10028d0 <___vfprintf_internal_r+0x21c8>
 1001ed0:	d8c03217 	ldw	r3,200(sp)
 1001ed4:	044019c4 	movi	r17,103
 1001ed8:	d8c02e15 	stw	r3,184(sp)
 1001edc:	df002a07 	ldb	fp,168(sp)
 1001ee0:	e001531e 	bne	fp,zero,1002430 <___vfprintf_internal_r+0x1d28>
 1001ee4:	df002783 	ldbu	fp,158(sp)
 1001ee8:	d8802a15 	stw	r2,168(sp)
 1001eec:	dc802b17 	ldw	r18,172(sp)
 1001ef0:	d8002915 	stw	zero,164(sp)
 1001ef4:	003bd106 	br	1000e3c <__alt_mem_TCDM+0xfefffe3c>
 1001ef8:	d8802d17 	ldw	r2,180(sp)
 1001efc:	d8c02d17 	ldw	r3,180(sp)
 1001f00:	d9002d17 	ldw	r4,180(sp)
 1001f04:	10800017 	ldw	r2,0(r2)
 1001f08:	18c00117 	ldw	r3,4(r3)
 1001f0c:	21000204 	addi	r4,r4,8
 1001f10:	d8803615 	stw	r2,216(sp)
 1001f14:	d8c03815 	stw	r3,224(sp)
 1001f18:	d9002d15 	stw	r4,180(sp)
 1001f1c:	003b7506 	br	1000cf4 <__alt_mem_TCDM+0xfefffcf4>
 1001f20:	ac400007 	ldb	r17,0(r21)
 1001f24:	003a5906 	br	100088c <__alt_mem_TCDM+0xfefff88c>
 1001f28:	9080100c 	andi	r2,r18,64
 1001f2c:	1000a826 	beq	r2,zero,10021d0 <___vfprintf_internal_r+0x1ac8>
 1001f30:	d9002d17 	ldw	r4,180(sp)
 1001f34:	002d883a 	mov	r22,zero
 1001f38:	24c0000b 	ldhu	r19,0(r4)
 1001f3c:	21000104 	addi	r4,r4,4
 1001f40:	d9002d15 	stw	r4,180(sp)
 1001f44:	003ccb06 	br	1001274 <__alt_mem_TCDM+0xff000274>
 1001f48:	d8c02d17 	ldw	r3,180(sp)
 1001f4c:	d9002917 	ldw	r4,164(sp)
 1001f50:	002d883a 	mov	r22,zero
 1001f54:	18800104 	addi	r2,r3,4
 1001f58:	1cc00017 	ldw	r19,0(r3)
 1001f5c:	203ebb0e 	bge	r4,zero,1001a4c <__alt_mem_TCDM+0xff000a4c>
 1001f60:	003ef106 	br	1001b28 <__alt_mem_TCDM+0xff000b28>
 1001f64:	9080040c 	andi	r2,r18,16
 1001f68:	1000921e 	bne	r2,zero,10021b4 <___vfprintf_internal_r+0x1aac>
 1001f6c:	9480100c 	andi	r18,r18,64
 1001f70:	90013926 	beq	r18,zero,1002458 <___vfprintf_internal_r+0x1d50>
 1001f74:	d9002d17 	ldw	r4,180(sp)
 1001f78:	d9402f17 	ldw	r5,188(sp)
 1001f7c:	20800017 	ldw	r2,0(r4)
 1001f80:	21000104 	addi	r4,r4,4
 1001f84:	d9002d15 	stw	r4,180(sp)
 1001f88:	1140000d 	sth	r5,0(r2)
 1001f8c:	003a1606 	br	10007e8 <__alt_mem_TCDM+0xfefff7e8>
 1001f90:	9080100c 	andi	r2,r18,64
 1001f94:	10008026 	beq	r2,zero,1002198 <___vfprintf_internal_r+0x1a90>
 1001f98:	d8c02d17 	ldw	r3,180(sp)
 1001f9c:	1cc0000f 	ldh	r19,0(r3)
 1001fa0:	18c00104 	addi	r3,r3,4
 1001fa4:	d8c02d15 	stw	r3,180(sp)
 1001fa8:	982dd7fa 	srai	r22,r19,31
 1001fac:	b005883a 	mov	r2,r22
 1001fb0:	003b1f06 	br	1000c30 <__alt_mem_TCDM+0xfefffc30>
 1001fb4:	9080100c 	andi	r2,r18,64
 1001fb8:	d8002785 	stb	zero,158(sp)
 1001fbc:	10008a1e 	bne	r2,zero,10021e8 <___vfprintf_internal_r+0x1ae0>
 1001fc0:	d9402d17 	ldw	r5,180(sp)
 1001fc4:	d8c02917 	ldw	r3,164(sp)
 1001fc8:	002d883a 	mov	r22,zero
 1001fcc:	28800104 	addi	r2,r5,4
 1001fd0:	2cc00017 	ldw	r19,0(r5)
 1001fd4:	183e4b0e 	bge	r3,zero,1001904 <__alt_mem_TCDM+0xff000904>
 1001fd8:	9d86b03a 	or	r3,r19,r22
 1001fdc:	d8802d15 	stw	r2,180(sp)
 1001fe0:	183e4c1e 	bne	r3,zero,1001914 <__alt_mem_TCDM+0xff000914>
 1001fe4:	0039883a 	mov	fp,zero
 1001fe8:	0005883a 	mov	r2,zero
 1001fec:	003d4006 	br	10014f0 <__alt_mem_TCDM+0xff0004f0>
 1001ff0:	01404074 	movhi	r5,257
 1001ff4:	297f6584 	addi	r5,r5,-618
 1001ff8:	d9402b15 	stw	r5,172(sp)
 1001ffc:	d9402b17 	ldw	r5,172(sp)
 1002000:	1c47883a 	add	r3,r3,r17
 1002004:	10800044 	addi	r2,r2,1
 1002008:	41400015 	stw	r5,0(r8)
 100200c:	44400115 	stw	r17,4(r8)
 1002010:	d8c02015 	stw	r3,128(sp)
 1002014:	d8801f15 	stw	r2,124(sp)
 1002018:	010001c4 	movi	r4,7
 100201c:	20bec816 	blt	r4,r2,1001b40 <__alt_mem_TCDM+0xff000b40>
 1002020:	42000204 	addi	r8,r8,8
 1002024:	003ecd06 	br	1001b5c <__alt_mem_TCDM+0xff000b5c>
 1002028:	d9002917 	ldw	r4,164(sp)
 100202c:	d8002785 	stb	zero,158(sp)
 1002030:	203d2d16 	blt	r4,zero,10014e8 <__alt_mem_TCDM+0xff0004e8>
 1002034:	00bfdfc4 	movi	r2,-129
 1002038:	90a4703a 	and	r18,r18,r2
 100203c:	003a9106 	br	1000a84 <__alt_mem_TCDM+0xfefffa84>
 1002040:	01004074 	movhi	r4,257
 1002044:	213f6584 	addi	r4,r4,-618
 1002048:	d9002b15 	stw	r4,172(sp)
 100204c:	003c0c06 	br	1001080 <__alt_mem_TCDM+0xff000080>
 1002050:	d9002c17 	ldw	r4,176(sp)
 1002054:	d9801e04 	addi	r6,sp,120
 1002058:	b80b883a 	mov	r5,r23
 100205c:	1007d040 	call	1007d04 <__sprint_r>
 1002060:	103aab1e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 1002064:	d8c02017 	ldw	r3,128(sp)
 1002068:	da000404 	addi	r8,sp,16
 100206c:	003d4106 	br	1001574 <__alt_mem_TCDM+0xff000574>
 1002070:	d8801f17 	ldw	r2,124(sp)
 1002074:	01404074 	movhi	r5,257
 1002078:	01000044 	movi	r4,1
 100207c:	18c00044 	addi	r3,r3,1
 1002080:	10800044 	addi	r2,r2,1
 1002084:	297f6504 	addi	r5,r5,-620
 1002088:	41000115 	stw	r4,4(r8)
 100208c:	41400015 	stw	r5,0(r8)
 1002090:	d8c02015 	stw	r3,128(sp)
 1002094:	d8801f15 	stw	r2,124(sp)
 1002098:	010001c4 	movi	r4,7
 100209c:	20805c16 	blt	r4,r2,1002210 <___vfprintf_internal_r+0x1b08>
 10020a0:	42000204 	addi	r8,r8,8
 10020a4:	8800041e 	bne	r17,zero,10020b8 <___vfprintf_internal_r+0x19b0>
 10020a8:	d8803317 	ldw	r2,204(sp)
 10020ac:	1000021e 	bne	r2,zero,10020b8 <___vfprintf_internal_r+0x19b0>
 10020b0:	9080004c 	andi	r2,r18,1
 10020b4:	103c0926 	beq	r2,zero,10010dc <__alt_mem_TCDM+0xff0000dc>
 10020b8:	d9003717 	ldw	r4,220(sp)
 10020bc:	d8801f17 	ldw	r2,124(sp)
 10020c0:	d9403417 	ldw	r5,208(sp)
 10020c4:	20c7883a 	add	r3,r4,r3
 10020c8:	10800044 	addi	r2,r2,1
 10020cc:	41000115 	stw	r4,4(r8)
 10020d0:	41400015 	stw	r5,0(r8)
 10020d4:	d8c02015 	stw	r3,128(sp)
 10020d8:	d8801f15 	stw	r2,124(sp)
 10020dc:	010001c4 	movi	r4,7
 10020e0:	20812116 	blt	r4,r2,1002568 <___vfprintf_internal_r+0x1e60>
 10020e4:	42000204 	addi	r8,r8,8
 10020e8:	0463c83a 	sub	r17,zero,r17
 10020ec:	0440730e 	bge	zero,r17,10022bc <___vfprintf_internal_r+0x1bb4>
 10020f0:	05800404 	movi	r22,16
 10020f4:	b440860e 	bge	r22,r17,1002310 <___vfprintf_internal_r+0x1c08>
 10020f8:	01404074 	movhi	r5,257
 10020fc:	297f6584 	addi	r5,r5,-618
 1002100:	d9402b15 	stw	r5,172(sp)
 1002104:	070001c4 	movi	fp,7
 1002108:	dcc02c17 	ldw	r19,176(sp)
 100210c:	00000306 	br	100211c <___vfprintf_internal_r+0x1a14>
 1002110:	42000204 	addi	r8,r8,8
 1002114:	8c7ffc04 	addi	r17,r17,-16
 1002118:	b440800e 	bge	r22,r17,100231c <___vfprintf_internal_r+0x1c14>
 100211c:	18c00404 	addi	r3,r3,16
 1002120:	10800044 	addi	r2,r2,1
 1002124:	45000015 	stw	r20,0(r8)
 1002128:	45800115 	stw	r22,4(r8)
 100212c:	d8c02015 	stw	r3,128(sp)
 1002130:	d8801f15 	stw	r2,124(sp)
 1002134:	e0bff60e 	bge	fp,r2,1002110 <__alt_mem_TCDM+0xff001110>
 1002138:	d9801e04 	addi	r6,sp,120
 100213c:	b80b883a 	mov	r5,r23
 1002140:	9809883a 	mov	r4,r19
 1002144:	1007d040 	call	1007d04 <__sprint_r>
 1002148:	103a711e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 100214c:	d8c02017 	ldw	r3,128(sp)
 1002150:	d8801f17 	ldw	r2,124(sp)
 1002154:	da000404 	addi	r8,sp,16
 1002158:	003fee06 	br	1002114 <__alt_mem_TCDM+0xff001114>
 100215c:	00bfffc4 	movi	r2,-1
 1002160:	003a6f06 	br	1000b20 <__alt_mem_TCDM+0xfefffb20>
 1002164:	008011c4 	movi	r2,71
 1002168:	1440b816 	blt	r2,r17,100244c <___vfprintf_internal_r+0x1d44>
 100216c:	04004074 	movhi	r16,257
 1002170:	843f5704 	addi	r16,r16,-676
 1002174:	00c000c4 	movi	r3,3
 1002178:	00bfdfc4 	movi	r2,-129
 100217c:	d8c02a15 	stw	r3,168(sp)
 1002180:	90a4703a 	and	r18,r18,r2
 1002184:	df002783 	ldbu	fp,158(sp)
 1002188:	d8c02e15 	stw	r3,184(sp)
 100218c:	d8002915 	stw	zero,164(sp)
 1002190:	d8003215 	stw	zero,200(sp)
 1002194:	003b2906 	br	1000e3c <__alt_mem_TCDM+0xfefffe3c>
 1002198:	d9002d17 	ldw	r4,180(sp)
 100219c:	24c00017 	ldw	r19,0(r4)
 10021a0:	21000104 	addi	r4,r4,4
 10021a4:	d9002d15 	stw	r4,180(sp)
 10021a8:	982dd7fa 	srai	r22,r19,31
 10021ac:	b005883a 	mov	r2,r22
 10021b0:	003a9f06 	br	1000c30 <__alt_mem_TCDM+0xfefffc30>
 10021b4:	d9402d17 	ldw	r5,180(sp)
 10021b8:	d8c02f17 	ldw	r3,188(sp)
 10021bc:	28800017 	ldw	r2,0(r5)
 10021c0:	29400104 	addi	r5,r5,4
 10021c4:	d9402d15 	stw	r5,180(sp)
 10021c8:	10c00015 	stw	r3,0(r2)
 10021cc:	00398606 	br	10007e8 <__alt_mem_TCDM+0xfefff7e8>
 10021d0:	d9402d17 	ldw	r5,180(sp)
 10021d4:	002d883a 	mov	r22,zero
 10021d8:	2cc00017 	ldw	r19,0(r5)
 10021dc:	29400104 	addi	r5,r5,4
 10021e0:	d9402d15 	stw	r5,180(sp)
 10021e4:	003c2306 	br	1001274 <__alt_mem_TCDM+0xff000274>
 10021e8:	d8c02d17 	ldw	r3,180(sp)
 10021ec:	d9002917 	ldw	r4,164(sp)
 10021f0:	002d883a 	mov	r22,zero
 10021f4:	18800104 	addi	r2,r3,4
 10021f8:	1cc0000b 	ldhu	r19,0(r3)
 10021fc:	203dc10e 	bge	r4,zero,1001904 <__alt_mem_TCDM+0xff000904>
 1002200:	003f7506 	br	1001fd8 <__alt_mem_TCDM+0xff000fd8>
 1002204:	04004074 	movhi	r16,257
 1002208:	843f5504 	addi	r16,r16,-684
 100220c:	003acc06 	br	1000d40 <__alt_mem_TCDM+0xfefffd40>
 1002210:	d9002c17 	ldw	r4,176(sp)
 1002214:	d9801e04 	addi	r6,sp,120
 1002218:	b80b883a 	mov	r5,r23
 100221c:	1007d040 	call	1007d04 <__sprint_r>
 1002220:	103a3b1e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 1002224:	dc402617 	ldw	r17,152(sp)
 1002228:	d8c02017 	ldw	r3,128(sp)
 100222c:	da000404 	addi	r8,sp,16
 1002230:	003f9c06 	br	10020a4 <__alt_mem_TCDM+0xff0010a4>
 1002234:	ac400043 	ldbu	r17,1(r21)
 1002238:	94800814 	ori	r18,r18,32
 100223c:	ad400044 	addi	r21,r21,1
 1002240:	8c403fcc 	andi	r17,r17,255
 1002244:	8c40201c 	xori	r17,r17,128
 1002248:	8c7fe004 	addi	r17,r17,-128
 100224c:	00398f06 	br	100088c <__alt_mem_TCDM+0xfefff88c>
 1002250:	d8c02d15 	stw	r3,180(sp)
 1002254:	0039883a 	mov	fp,zero
 1002258:	003e3506 	br	1001b30 <__alt_mem_TCDM+0xff000b30>
 100225c:	d9002c17 	ldw	r4,176(sp)
 1002260:	d9801e04 	addi	r6,sp,120
 1002264:	b80b883a 	mov	r5,r23
 1002268:	1007d040 	call	1007d04 <__sprint_r>
 100226c:	103a281e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 1002270:	d8c02017 	ldw	r3,128(sp)
 1002274:	da000404 	addi	r8,sp,16
 1002278:	003cd006 	br	10015bc <__alt_mem_TCDM+0xff0005bc>
 100227c:	8009883a 	mov	r4,r16
 1002280:	da003d15 	stw	r8,244(sp)
 1002284:	10006700 	call	1000670 <strlen>
 1002288:	d8802e15 	stw	r2,184(sp)
 100228c:	da003d17 	ldw	r8,244(sp)
 1002290:	103c340e 	bge	r2,zero,1001364 <__alt_mem_TCDM+0xff000364>
 1002294:	0005883a 	mov	r2,zero
 1002298:	003c3206 	br	1001364 <__alt_mem_TCDM+0xff000364>
 100229c:	d9002c17 	ldw	r4,176(sp)
 10022a0:	d9801e04 	addi	r6,sp,120
 10022a4:	b80b883a 	mov	r5,r23
 10022a8:	1007d040 	call	1007d04 <__sprint_r>
 10022ac:	103a181e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 10022b0:	d8c02017 	ldw	r3,128(sp)
 10022b4:	d8801f17 	ldw	r2,124(sp)
 10022b8:	da000404 	addi	r8,sp,16
 10022bc:	d9403317 	ldw	r5,204(sp)
 10022c0:	10800044 	addi	r2,r2,1
 10022c4:	44000015 	stw	r16,0(r8)
 10022c8:	28c7883a 	add	r3,r5,r3
 10022cc:	003b7d06 	br	10010c4 <__alt_mem_TCDM+0xff0000c4>
 10022d0:	01004074 	movhi	r4,257
 10022d4:	213f6984 	addi	r4,r4,-602
 10022d8:	d9003515 	stw	r4,212(sp)
 10022dc:	003b1406 	br	1000f30 <__alt_mem_TCDM+0xfeffff30>
 10022e0:	013fffc4 	movi	r4,-1
 10022e4:	003a3506 	br	1000bbc <__alt_mem_TCDM+0xfefffbbc>
 10022e8:	0023883a 	mov	r17,zero
 10022ec:	003d9d06 	br	1001964 <__alt_mem_TCDM+0xff000964>
 10022f0:	d9002c17 	ldw	r4,176(sp)
 10022f4:	d9801e04 	addi	r6,sp,120
 10022f8:	b80b883a 	mov	r5,r23
 10022fc:	1007d040 	call	1007d04 <__sprint_r>
 1002300:	103a031e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 1002304:	d8c02017 	ldw	r3,128(sp)
 1002308:	da000404 	addi	r8,sp,16
 100230c:	003d9406 	br	1001960 <__alt_mem_TCDM+0xff000960>
 1002310:	01004074 	movhi	r4,257
 1002314:	213f6584 	addi	r4,r4,-618
 1002318:	d9002b15 	stw	r4,172(sp)
 100231c:	d9002b17 	ldw	r4,172(sp)
 1002320:	1c47883a 	add	r3,r3,r17
 1002324:	10800044 	addi	r2,r2,1
 1002328:	41000015 	stw	r4,0(r8)
 100232c:	44400115 	stw	r17,4(r8)
 1002330:	d8c02015 	stw	r3,128(sp)
 1002334:	d8801f15 	stw	r2,124(sp)
 1002338:	010001c4 	movi	r4,7
 100233c:	20bfd716 	blt	r4,r2,100229c <__alt_mem_TCDM+0xff00129c>
 1002340:	42000204 	addi	r8,r8,8
 1002344:	003fdd06 	br	10022bc <__alt_mem_TCDM+0xff0012bc>
 1002348:	d9002c17 	ldw	r4,176(sp)
 100234c:	d9801e04 	addi	r6,sp,120
 1002350:	b80b883a 	mov	r5,r23
 1002354:	1007d040 	call	1007d04 <__sprint_r>
 1002358:	1039ed1e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 100235c:	d8802617 	ldw	r2,152(sp)
 1002360:	d8c02017 	ldw	r3,128(sp)
 1002364:	da000404 	addi	r8,sp,16
 1002368:	003e1006 	br	1001bac <__alt_mem_TCDM+0xff000bac>
 100236c:	00800044 	movi	r2,1
 1002370:	10803fcc 	andi	r2,r2,255
 1002374:	00c00044 	movi	r3,1
 1002378:	10fa3526 	beq	r2,r3,1000c50 <__alt_mem_TCDM+0xfefffc50>
 100237c:	00c00084 	movi	r3,2
 1002380:	10fbcb26 	beq	r2,r3,10012b0 <__alt_mem_TCDM+0xff0002b0>
 1002384:	003a8f06 	br	1000dc4 <__alt_mem_TCDM+0xfefffdc4>
 1002388:	01004074 	movhi	r4,257
 100238c:	213f6984 	addi	r4,r4,-602
 1002390:	d9003515 	stw	r4,212(sp)
 1002394:	003b7606 	br	1001170 <__alt_mem_TCDM+0xff000170>
 1002398:	d8802917 	ldw	r2,164(sp)
 100239c:	00c00184 	movi	r3,6
 10023a0:	1880012e 	bgeu	r3,r2,10023a8 <___vfprintf_internal_r+0x1ca0>
 10023a4:	1805883a 	mov	r2,r3
 10023a8:	d8802e15 	stw	r2,184(sp)
 10023ac:	1000ef16 	blt	r2,zero,100276c <___vfprintf_internal_r+0x2064>
 10023b0:	04004074 	movhi	r16,257
 10023b4:	d8802a15 	stw	r2,168(sp)
 10023b8:	dcc02d15 	stw	r19,180(sp)
 10023bc:	d8002915 	stw	zero,164(sp)
 10023c0:	d8003215 	stw	zero,200(sp)
 10023c4:	843f6304 	addi	r16,r16,-628
 10023c8:	0039883a 	mov	fp,zero
 10023cc:	003aa206 	br	1000e58 <__alt_mem_TCDM+0xfefffe58>
 10023d0:	0021883a 	mov	r16,zero
 10023d4:	003e0706 	br	1001bf4 <__alt_mem_TCDM+0xff000bf4>
 10023d8:	d9002c17 	ldw	r4,176(sp)
 10023dc:	d9801e04 	addi	r6,sp,120
 10023e0:	b80b883a 	mov	r5,r23
 10023e4:	1007d040 	call	1007d04 <__sprint_r>
 10023e8:	1039c91e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 10023ec:	d8802617 	ldw	r2,152(sp)
 10023f0:	d9403317 	ldw	r5,204(sp)
 10023f4:	d8c02017 	ldw	r3,128(sp)
 10023f8:	da000404 	addi	r8,sp,16
 10023fc:	2885c83a 	sub	r2,r5,r2
 1002400:	003dfb06 	br	1001bf0 <__alt_mem_TCDM+0xff000bf0>
 1002404:	9080004c 	andi	r2,r18,1
 1002408:	103e8f1e 	bne	r2,zero,1001e48 <__alt_mem_TCDM+0xff000e48>
 100240c:	d8802117 	ldw	r2,132(sp)
 1002410:	003e9e06 	br	1001e8c <__alt_mem_TCDM+0xff000e8c>
 1002414:	1025883a 	mov	r18,r2
 1002418:	0039883a 	mov	fp,zero
 100241c:	00800084 	movi	r2,2
 1002420:	003fd306 	br	1002370 <__alt_mem_TCDM+0xff001370>
 1002424:	07000b44 	movi	fp,45
 1002428:	df002785 	stb	fp,158(sp)
 100242c:	003a4006 	br	1000d30 <__alt_mem_TCDM+0xfefffd30>
 1002430:	00c00b44 	movi	r3,45
 1002434:	d8c02785 	stb	r3,158(sp)
 1002438:	d8802a15 	stw	r2,168(sp)
 100243c:	dc802b17 	ldw	r18,172(sp)
 1002440:	d8002915 	stw	zero,164(sp)
 1002444:	07000b44 	movi	fp,45
 1002448:	003a8006 	br	1000e4c <__alt_mem_TCDM+0xfefffe4c>
 100244c:	04004074 	movhi	r16,257
 1002450:	843f5804 	addi	r16,r16,-672
 1002454:	003f4706 	br	1002174 <__alt_mem_TCDM+0xff001174>
 1002458:	d8c02d17 	ldw	r3,180(sp)
 100245c:	d9002f17 	ldw	r4,188(sp)
 1002460:	18800017 	ldw	r2,0(r3)
 1002464:	18c00104 	addi	r3,r3,4
 1002468:	d8c02d15 	stw	r3,180(sp)
 100246c:	11000015 	stw	r4,0(r2)
 1002470:	0038dd06 	br	10007e8 <__alt_mem_TCDM+0xfefff7e8>
 1002474:	dd802617 	ldw	r22,152(sp)
 1002478:	00bfff44 	movi	r2,-3
 100247c:	b0801c16 	blt	r22,r2,10024f0 <___vfprintf_internal_r+0x1de8>
 1002480:	d9402917 	ldw	r5,164(sp)
 1002484:	2d801a16 	blt	r5,r22,10024f0 <___vfprintf_internal_r+0x1de8>
 1002488:	dd803215 	stw	r22,200(sp)
 100248c:	003e8906 	br	1001eb4 <__alt_mem_TCDM+0xff000eb4>
 1002490:	01004074 	movhi	r4,257
 1002494:	213f6584 	addi	r4,r4,-618
 1002498:	d9002b15 	stw	r4,172(sp)
 100249c:	003c9106 	br	10016e4 <__alt_mem_TCDM+0xff0006e4>
 10024a0:	e005883a 	mov	r2,fp
 10024a4:	003e7906 	br	1001e8c <__alt_mem_TCDM+0xff000e8c>
 10024a8:	d9402917 	ldw	r5,164(sp)
 10024ac:	df002783 	ldbu	fp,158(sp)
 10024b0:	dcc02d15 	stw	r19,180(sp)
 10024b4:	d9402a15 	stw	r5,168(sp)
 10024b8:	d9402e15 	stw	r5,184(sp)
 10024bc:	d8002915 	stw	zero,164(sp)
 10024c0:	d8003215 	stw	zero,200(sp)
 10024c4:	003a5d06 	br	1000e3c <__alt_mem_TCDM+0xfefffe3c>
 10024c8:	9080004c 	andi	r2,r18,1
 10024cc:	0039883a 	mov	fp,zero
 10024d0:	10000426 	beq	r2,zero,10024e4 <___vfprintf_internal_r+0x1ddc>
 10024d4:	00800c04 	movi	r2,48
 10024d8:	dc001dc4 	addi	r16,sp,119
 10024dc:	d8801dc5 	stb	r2,119(sp)
 10024e0:	003b8006 	br	10012e4 <__alt_mem_TCDM+0xff0002e4>
 10024e4:	d8002e15 	stw	zero,184(sp)
 10024e8:	dc001e04 	addi	r16,sp,120
 10024ec:	003a4d06 	br	1000e24 <__alt_mem_TCDM+0xfefffe24>
 10024f0:	8c7fff84 	addi	r17,r17,-2
 10024f4:	b5bfffc4 	addi	r22,r22,-1
 10024f8:	dd802615 	stw	r22,152(sp)
 10024fc:	dc4022c5 	stb	r17,139(sp)
 1002500:	b000bf16 	blt	r22,zero,1002800 <___vfprintf_internal_r+0x20f8>
 1002504:	00800ac4 	movi	r2,43
 1002508:	d8802305 	stb	r2,140(sp)
 100250c:	00800244 	movi	r2,9
 1002510:	15807016 	blt	r2,r22,10026d4 <___vfprintf_internal_r+0x1fcc>
 1002514:	00800c04 	movi	r2,48
 1002518:	b5800c04 	addi	r22,r22,48
 100251c:	d8802345 	stb	r2,141(sp)
 1002520:	dd802385 	stb	r22,142(sp)
 1002524:	d88023c4 	addi	r2,sp,143
 1002528:	df0022c4 	addi	fp,sp,139
 100252c:	d8c03317 	ldw	r3,204(sp)
 1002530:	1739c83a 	sub	fp,r2,fp
 1002534:	d9003317 	ldw	r4,204(sp)
 1002538:	e0c7883a 	add	r3,fp,r3
 100253c:	df003a15 	stw	fp,232(sp)
 1002540:	d8c02e15 	stw	r3,184(sp)
 1002544:	00800044 	movi	r2,1
 1002548:	1100b30e 	bge	r2,r4,1002818 <___vfprintf_internal_r+0x2110>
 100254c:	d8c02e17 	ldw	r3,184(sp)
 1002550:	18c00044 	addi	r3,r3,1
 1002554:	d8c02e15 	stw	r3,184(sp)
 1002558:	1805883a 	mov	r2,r3
 100255c:	1800ac16 	blt	r3,zero,1002810 <___vfprintf_internal_r+0x2108>
 1002560:	d8003215 	stw	zero,200(sp)
 1002564:	003e5d06 	br	1001edc <__alt_mem_TCDM+0xff000edc>
 1002568:	d9002c17 	ldw	r4,176(sp)
 100256c:	d9801e04 	addi	r6,sp,120
 1002570:	b80b883a 	mov	r5,r23
 1002574:	1007d040 	call	1007d04 <__sprint_r>
 1002578:	1039651e 	bne	r2,zero,1000b10 <__alt_mem_TCDM+0xfefffb10>
 100257c:	dc402617 	ldw	r17,152(sp)
 1002580:	d8c02017 	ldw	r3,128(sp)
 1002584:	d8801f17 	ldw	r2,124(sp)
 1002588:	da000404 	addi	r8,sp,16
 100258c:	003ed606 	br	10020e8 <__alt_mem_TCDM+0xff0010e8>
 1002590:	582b883a 	mov	r21,r11
 1002594:	d8002915 	stw	zero,164(sp)
 1002598:	0038bd06 	br	1000890 <__alt_mem_TCDM+0xfefff890>
 100259c:	d8802917 	ldw	r2,164(sp)
 10025a0:	103e071e 	bne	r2,zero,1001dc0 <__alt_mem_TCDM+0xff000dc0>
 10025a4:	dc002915 	stw	r16,164(sp)
 10025a8:	003e0506 	br	1001dc0 <__alt_mem_TCDM+0xff000dc0>
 10025ac:	d9002917 	ldw	r4,164(sp)
 10025b0:	20c00044 	addi	r3,r4,1
 10025b4:	003e0f06 	br	1001df4 <__alt_mem_TCDM+0xff000df4>
 10025b8:	01400184 	movi	r5,6
 10025bc:	d9402915 	stw	r5,164(sp)
 10025c0:	003dff06 	br	1001dc0 <__alt_mem_TCDM+0xff000dc0>
 10025c4:	d8802104 	addi	r2,sp,132
 10025c8:	d8800315 	stw	r2,12(sp)
 10025cc:	d8802504 	addi	r2,sp,148
 10025d0:	d8800215 	stw	r2,8(sp)
 10025d4:	d8802604 	addi	r2,sp,152
 10025d8:	d8800115 	stw	r2,4(sp)
 10025dc:	d8802917 	ldw	r2,164(sp)
 10025e0:	d9403617 	ldw	r5,216(sp)
 10025e4:	d9002c17 	ldw	r4,176(sp)
 10025e8:	d8800015 	stw	r2,0(sp)
 10025ec:	01c000c4 	movi	r7,3
 10025f0:	980d883a 	mov	r6,r19
 10025f4:	da003d15 	stw	r8,244(sp)
 10025f8:	1002d2c0 	call	1002d2c <_dtoa_r>
 10025fc:	d8c02917 	ldw	r3,164(sp)
 1002600:	da003d17 	ldw	r8,244(sp)
 1002604:	1021883a 	mov	r16,r2
 1002608:	10f9883a 	add	fp,r2,r3
 100260c:	81000007 	ldb	r4,0(r16)
 1002610:	00800c04 	movi	r2,48
 1002614:	20805e26 	beq	r4,r2,1002790 <___vfprintf_internal_r+0x2088>
 1002618:	d8c02617 	ldw	r3,152(sp)
 100261c:	e0f9883a 	add	fp,fp,r3
 1002620:	003e0a06 	br	1001e4c <__alt_mem_TCDM+0xff000e4c>
 1002624:	00c00b44 	movi	r3,45
 1002628:	24e0003c 	xorhi	r19,r4,32768
 100262c:	d8c02a05 	stb	r3,168(sp)
 1002630:	003de906 	br	1001dd8 <__alt_mem_TCDM+0xff000dd8>
 1002634:	d8c03217 	ldw	r3,200(sp)
 1002638:	00c07a0e 	bge	zero,r3,1002824 <___vfprintf_internal_r+0x211c>
 100263c:	00800044 	movi	r2,1
 1002640:	d9003317 	ldw	r4,204(sp)
 1002644:	1105883a 	add	r2,r2,r4
 1002648:	d8802e15 	stw	r2,184(sp)
 100264c:	10004e16 	blt	r2,zero,1002788 <___vfprintf_internal_r+0x2080>
 1002650:	044019c4 	movi	r17,103
 1002654:	003e2106 	br	1001edc <__alt_mem_TCDM+0xff000edc>
 1002658:	d9002917 	ldw	r4,164(sp)
 100265c:	d8802104 	addi	r2,sp,132
 1002660:	d8800315 	stw	r2,12(sp)
 1002664:	d9000015 	stw	r4,0(sp)
 1002668:	d8802504 	addi	r2,sp,148
 100266c:	d9403617 	ldw	r5,216(sp)
 1002670:	d9002c17 	ldw	r4,176(sp)
 1002674:	d8800215 	stw	r2,8(sp)
 1002678:	d8802604 	addi	r2,sp,152
 100267c:	d8800115 	stw	r2,4(sp)
 1002680:	01c000c4 	movi	r7,3
 1002684:	980d883a 	mov	r6,r19
 1002688:	da003d15 	stw	r8,244(sp)
 100268c:	1002d2c0 	call	1002d2c <_dtoa_r>
 1002690:	d8c02917 	ldw	r3,164(sp)
 1002694:	da003d17 	ldw	r8,244(sp)
 1002698:	1021883a 	mov	r16,r2
 100269c:	00801184 	movi	r2,70
 10026a0:	80f9883a 	add	fp,r16,r3
 10026a4:	88bfd926 	beq	r17,r2,100260c <__alt_mem_TCDM+0xff00160c>
 10026a8:	003de806 	br	1001e4c <__alt_mem_TCDM+0xff000e4c>
 10026ac:	d9002917 	ldw	r4,164(sp)
 10026b0:	00c04d0e 	bge	zero,r3,10027e8 <___vfprintf_internal_r+0x20e0>
 10026b4:	2000441e 	bne	r4,zero,10027c8 <___vfprintf_internal_r+0x20c0>
 10026b8:	9480004c 	andi	r18,r18,1
 10026bc:	9000421e 	bne	r18,zero,10027c8 <___vfprintf_internal_r+0x20c0>
 10026c0:	1805883a 	mov	r2,r3
 10026c4:	18007016 	blt	r3,zero,1002888 <___vfprintf_internal_r+0x2180>
 10026c8:	d8c03217 	ldw	r3,200(sp)
 10026cc:	d8c02e15 	stw	r3,184(sp)
 10026d0:	003e0206 	br	1001edc <__alt_mem_TCDM+0xff000edc>
 10026d4:	df0022c4 	addi	fp,sp,139
 10026d8:	dc002915 	stw	r16,164(sp)
 10026dc:	4027883a 	mov	r19,r8
 10026e0:	e021883a 	mov	r16,fp
 10026e4:	b009883a 	mov	r4,r22
 10026e8:	01400284 	movi	r5,10
 10026ec:	100a6b80 	call	100a6b8 <__modsi3>
 10026f0:	10800c04 	addi	r2,r2,48
 10026f4:	843fffc4 	addi	r16,r16,-1
 10026f8:	b009883a 	mov	r4,r22
 10026fc:	01400284 	movi	r5,10
 1002700:	80800005 	stb	r2,0(r16)
 1002704:	100a6340 	call	100a634 <__divsi3>
 1002708:	102d883a 	mov	r22,r2
 100270c:	00800244 	movi	r2,9
 1002710:	15bff416 	blt	r2,r22,10026e4 <__alt_mem_TCDM+0xff0016e4>
 1002714:	9811883a 	mov	r8,r19
 1002718:	b0800c04 	addi	r2,r22,48
 100271c:	8027883a 	mov	r19,r16
 1002720:	997fffc4 	addi	r5,r19,-1
 1002724:	98bfffc5 	stb	r2,-1(r19)
 1002728:	dc002917 	ldw	r16,164(sp)
 100272c:	2f006a2e 	bgeu	r5,fp,10028d8 <___vfprintf_internal_r+0x21d0>
 1002730:	d9c02384 	addi	r7,sp,142
 1002734:	3ccfc83a 	sub	r7,r7,r19
 1002738:	d9002344 	addi	r4,sp,141
 100273c:	e1cf883a 	add	r7,fp,r7
 1002740:	00000106 	br	1002748 <___vfprintf_internal_r+0x2040>
 1002744:	28800003 	ldbu	r2,0(r5)
 1002748:	20800005 	stb	r2,0(r4)
 100274c:	21000044 	addi	r4,r4,1
 1002750:	29400044 	addi	r5,r5,1
 1002754:	393ffb1e 	bne	r7,r4,1002744 <__alt_mem_TCDM+0xff001744>
 1002758:	d8802304 	addi	r2,sp,140
 100275c:	14c5c83a 	sub	r2,r2,r19
 1002760:	d8c02344 	addi	r3,sp,141
 1002764:	1885883a 	add	r2,r3,r2
 1002768:	003f7006 	br	100252c <__alt_mem_TCDM+0xff00152c>
 100276c:	0005883a 	mov	r2,zero
 1002770:	003f0f06 	br	10023b0 <__alt_mem_TCDM+0xff0013b0>
 1002774:	d8c03217 	ldw	r3,200(sp)
 1002778:	18c00044 	addi	r3,r3,1
 100277c:	d8c02e15 	stw	r3,184(sp)
 1002780:	1805883a 	mov	r2,r3
 1002784:	183fb20e 	bge	r3,zero,1002650 <__alt_mem_TCDM+0xff001650>
 1002788:	0005883a 	mov	r2,zero
 100278c:	003fb006 	br	1002650 <__alt_mem_TCDM+0xff001650>
 1002790:	d9003617 	ldw	r4,216(sp)
 1002794:	000d883a 	mov	r6,zero
 1002798:	000f883a 	mov	r7,zero
 100279c:	980b883a 	mov	r5,r19
 10027a0:	d8c03c15 	stw	r3,240(sp)
 10027a4:	da003d15 	stw	r8,244(sp)
 10027a8:	100b97c0 	call	100b97c <__eqdf2>
 10027ac:	d8c03c17 	ldw	r3,240(sp)
 10027b0:	da003d17 	ldw	r8,244(sp)
 10027b4:	103f9826 	beq	r2,zero,1002618 <__alt_mem_TCDM+0xff001618>
 10027b8:	00800044 	movi	r2,1
 10027bc:	10c7c83a 	sub	r3,r2,r3
 10027c0:	d8c02615 	stw	r3,152(sp)
 10027c4:	003f9506 	br	100261c <__alt_mem_TCDM+0xff00161c>
 10027c8:	d9002917 	ldw	r4,164(sp)
 10027cc:	d8c03217 	ldw	r3,200(sp)
 10027d0:	20800044 	addi	r2,r4,1
 10027d4:	1885883a 	add	r2,r3,r2
 10027d8:	d8802e15 	stw	r2,184(sp)
 10027dc:	103dbf0e 	bge	r2,zero,1001edc <__alt_mem_TCDM+0xff000edc>
 10027e0:	0005883a 	mov	r2,zero
 10027e4:	003dbd06 	br	1001edc <__alt_mem_TCDM+0xff000edc>
 10027e8:	2000211e 	bne	r4,zero,1002870 <___vfprintf_internal_r+0x2168>
 10027ec:	9480004c 	andi	r18,r18,1
 10027f0:	90001f1e 	bne	r18,zero,1002870 <___vfprintf_internal_r+0x2168>
 10027f4:	00800044 	movi	r2,1
 10027f8:	d8802e15 	stw	r2,184(sp)
 10027fc:	003db706 	br	1001edc <__alt_mem_TCDM+0xff000edc>
 1002800:	00800b44 	movi	r2,45
 1002804:	05adc83a 	sub	r22,zero,r22
 1002808:	d8802305 	stb	r2,140(sp)
 100280c:	003f3f06 	br	100250c <__alt_mem_TCDM+0xff00150c>
 1002810:	0005883a 	mov	r2,zero
 1002814:	003f5206 	br	1002560 <__alt_mem_TCDM+0xff001560>
 1002818:	90a4703a 	and	r18,r18,r2
 100281c:	903f4e26 	beq	r18,zero,1002558 <__alt_mem_TCDM+0xff001558>
 1002820:	003f4a06 	br	100254c <__alt_mem_TCDM+0xff00154c>
 1002824:	00800084 	movi	r2,2
 1002828:	10c5c83a 	sub	r2,r2,r3
 100282c:	003f8406 	br	1002640 <__alt_mem_TCDM+0xff001640>
 1002830:	d8802d17 	ldw	r2,180(sp)
 1002834:	d9002d17 	ldw	r4,180(sp)
 1002838:	ac400043 	ldbu	r17,1(r21)
 100283c:	10800017 	ldw	r2,0(r2)
 1002840:	582b883a 	mov	r21,r11
 1002844:	d8802915 	stw	r2,164(sp)
 1002848:	20800104 	addi	r2,r4,4
 100284c:	d9002917 	ldw	r4,164(sp)
 1002850:	d8802d15 	stw	r2,180(sp)
 1002854:	203e7a0e 	bge	r4,zero,1002240 <__alt_mem_TCDM+0xff001240>
 1002858:	8c403fcc 	andi	r17,r17,255
 100285c:	00bfffc4 	movi	r2,-1
 1002860:	8c40201c 	xori	r17,r17,128
 1002864:	d8802915 	stw	r2,164(sp)
 1002868:	8c7fe004 	addi	r17,r17,-128
 100286c:	00380706 	br	100088c <__alt_mem_TCDM+0xfefff88c>
 1002870:	d8c02917 	ldw	r3,164(sp)
 1002874:	18c00084 	addi	r3,r3,2
 1002878:	d8c02e15 	stw	r3,184(sp)
 100287c:	1805883a 	mov	r2,r3
 1002880:	183d960e 	bge	r3,zero,1001edc <__alt_mem_TCDM+0xff000edc>
 1002884:	003fd606 	br	10027e0 <__alt_mem_TCDM+0xff0017e0>
 1002888:	0005883a 	mov	r2,zero
 100288c:	003f8e06 	br	10026c8 <__alt_mem_TCDM+0xff0016c8>
 1002890:	9080004c 	andi	r2,r18,1
 1002894:	103f811e 	bne	r2,zero,100269c <__alt_mem_TCDM+0xff00169c>
 1002898:	d8802117 	ldw	r2,132(sp)
 100289c:	1405c83a 	sub	r2,r2,r16
 10028a0:	d8803315 	stw	r2,204(sp)
 10028a4:	b47ef326 	beq	r22,r17,1002474 <__alt_mem_TCDM+0xff001474>
 10028a8:	dd802617 	ldw	r22,152(sp)
 10028ac:	003f1106 	br	10024f4 <__alt_mem_TCDM+0xff0014f4>
 10028b0:	d9c02785 	stb	r7,158(sp)
 10028b4:	00390406 	br	1000cc8 <__alt_mem_TCDM+0xfefffcc8>
 10028b8:	d9c02785 	stb	r7,158(sp)
 10028bc:	0038d306 	br	1000c0c <__alt_mem_TCDM+0xfefffc0c>
 10028c0:	d9c02785 	stb	r7,158(sp)
 10028c4:	003a6106 	br	100124c <__alt_mem_TCDM+0xff00024c>
 10028c8:	d9c02785 	stb	r7,158(sp)
 10028cc:	003af806 	br	10014b0 <__alt_mem_TCDM+0xff0004b0>
 10028d0:	0005883a 	mov	r2,zero
 10028d4:	003d7e06 	br	1001ed0 <__alt_mem_TCDM+0xff000ed0>
 10028d8:	d8802344 	addi	r2,sp,141
 10028dc:	003f1306 	br	100252c <__alt_mem_TCDM+0xff00152c>
 10028e0:	d9c02785 	stb	r7,158(sp)
 10028e4:	00392306 	br	1000d74 <__alt_mem_TCDM+0xfefffd74>
 10028e8:	d9c02785 	stb	r7,158(sp)
 10028ec:	003aa906 	br	1001394 <__alt_mem_TCDM+0xff000394>
 10028f0:	d9c02785 	stb	r7,158(sp)
 10028f4:	003a3d06 	br	10011ec <__alt_mem_TCDM+0xff0001ec>
 10028f8:	d9c02785 	stb	r7,158(sp)
 10028fc:	003aca06 	br	1001428 <__alt_mem_TCDM+0xff000428>

01002900 <__vfprintf_internal>:
 1002900:	00804074 	movhi	r2,257
 1002904:	1086fe04 	addi	r2,r2,7160
 1002908:	300f883a 	mov	r7,r6
 100290c:	280d883a 	mov	r6,r5
 1002910:	200b883a 	mov	r5,r4
 1002914:	11000017 	ldw	r4,0(r2)
 1002918:	10007081 	jmpi	1000708 <___vfprintf_internal_r>

0100291c <__sbprintf>:
 100291c:	2880030b 	ldhu	r2,12(r5)
 1002920:	2ac01917 	ldw	r11,100(r5)
 1002924:	2a80038b 	ldhu	r10,14(r5)
 1002928:	2a400717 	ldw	r9,28(r5)
 100292c:	2a000917 	ldw	r8,36(r5)
 1002930:	defee204 	addi	sp,sp,-1144
 1002934:	00c10004 	movi	r3,1024
 1002938:	dc011a15 	stw	r16,1128(sp)
 100293c:	10bfff4c 	andi	r2,r2,65533
 1002940:	2821883a 	mov	r16,r5
 1002944:	d8cb883a 	add	r5,sp,r3
 1002948:	dc811c15 	stw	r18,1136(sp)
 100294c:	dc411b15 	stw	r17,1132(sp)
 1002950:	dfc11d15 	stw	ra,1140(sp)
 1002954:	2025883a 	mov	r18,r4
 1002958:	d881030d 	sth	r2,1036(sp)
 100295c:	dac11915 	stw	r11,1124(sp)
 1002960:	da81038d 	sth	r10,1038(sp)
 1002964:	da410715 	stw	r9,1052(sp)
 1002968:	da010915 	stw	r8,1060(sp)
 100296c:	dec10015 	stw	sp,1024(sp)
 1002970:	dec10415 	stw	sp,1040(sp)
 1002974:	d8c10215 	stw	r3,1032(sp)
 1002978:	d8c10515 	stw	r3,1044(sp)
 100297c:	d8010615 	stw	zero,1048(sp)
 1002980:	10007080 	call	1000708 <___vfprintf_internal_r>
 1002984:	1023883a 	mov	r17,r2
 1002988:	10000416 	blt	r2,zero,100299c <__sbprintf+0x80>
 100298c:	d9410004 	addi	r5,sp,1024
 1002990:	9009883a 	mov	r4,r18
 1002994:	10045d00 	call	10045d0 <_fflush_r>
 1002998:	10000d1e 	bne	r2,zero,10029d0 <__sbprintf+0xb4>
 100299c:	d881030b 	ldhu	r2,1036(sp)
 10029a0:	1080100c 	andi	r2,r2,64
 10029a4:	10000326 	beq	r2,zero,10029b4 <__sbprintf+0x98>
 10029a8:	8080030b 	ldhu	r2,12(r16)
 10029ac:	10801014 	ori	r2,r2,64
 10029b0:	8080030d 	sth	r2,12(r16)
 10029b4:	8805883a 	mov	r2,r17
 10029b8:	dfc11d17 	ldw	ra,1140(sp)
 10029bc:	dc811c17 	ldw	r18,1136(sp)
 10029c0:	dc411b17 	ldw	r17,1132(sp)
 10029c4:	dc011a17 	ldw	r16,1128(sp)
 10029c8:	dec11e04 	addi	sp,sp,1144
 10029cc:	f800283a 	ret
 10029d0:	047fffc4 	movi	r17,-1
 10029d4:	003ff106 	br	100299c <__alt_mem_TCDM+0xff00199c>

010029d8 <__swsetup_r>:
 10029d8:	00804074 	movhi	r2,257
 10029dc:	defffd04 	addi	sp,sp,-12
 10029e0:	1086fe04 	addi	r2,r2,7160
 10029e4:	dc400115 	stw	r17,4(sp)
 10029e8:	2023883a 	mov	r17,r4
 10029ec:	11000017 	ldw	r4,0(r2)
 10029f0:	dc000015 	stw	r16,0(sp)
 10029f4:	dfc00215 	stw	ra,8(sp)
 10029f8:	2821883a 	mov	r16,r5
 10029fc:	20000226 	beq	r4,zero,1002a08 <__swsetup_r+0x30>
 1002a00:	20800e17 	ldw	r2,56(r4)
 1002a04:	10003126 	beq	r2,zero,1002acc <__swsetup_r+0xf4>
 1002a08:	8080030b 	ldhu	r2,12(r16)
 1002a0c:	10c0020c 	andi	r3,r2,8
 1002a10:	1009883a 	mov	r4,r2
 1002a14:	18000f26 	beq	r3,zero,1002a54 <__swsetup_r+0x7c>
 1002a18:	80c00417 	ldw	r3,16(r16)
 1002a1c:	18001526 	beq	r3,zero,1002a74 <__swsetup_r+0x9c>
 1002a20:	1100004c 	andi	r4,r2,1
 1002a24:	20001c1e 	bne	r4,zero,1002a98 <__swsetup_r+0xc0>
 1002a28:	1080008c 	andi	r2,r2,2
 1002a2c:	1000291e 	bne	r2,zero,1002ad4 <__swsetup_r+0xfc>
 1002a30:	80800517 	ldw	r2,20(r16)
 1002a34:	80800215 	stw	r2,8(r16)
 1002a38:	18001c26 	beq	r3,zero,1002aac <__swsetup_r+0xd4>
 1002a3c:	0005883a 	mov	r2,zero
 1002a40:	dfc00217 	ldw	ra,8(sp)
 1002a44:	dc400117 	ldw	r17,4(sp)
 1002a48:	dc000017 	ldw	r16,0(sp)
 1002a4c:	dec00304 	addi	sp,sp,12
 1002a50:	f800283a 	ret
 1002a54:	2080040c 	andi	r2,r4,16
 1002a58:	10002e26 	beq	r2,zero,1002b14 <__swsetup_r+0x13c>
 1002a5c:	2080010c 	andi	r2,r4,4
 1002a60:	10001e1e 	bne	r2,zero,1002adc <__swsetup_r+0x104>
 1002a64:	80c00417 	ldw	r3,16(r16)
 1002a68:	20800214 	ori	r2,r4,8
 1002a6c:	8080030d 	sth	r2,12(r16)
 1002a70:	183feb1e 	bne	r3,zero,1002a20 <__alt_mem_TCDM+0xff001a20>
 1002a74:	1100a00c 	andi	r4,r2,640
 1002a78:	01408004 	movi	r5,512
 1002a7c:	217fe826 	beq	r4,r5,1002a20 <__alt_mem_TCDM+0xff001a20>
 1002a80:	800b883a 	mov	r5,r16
 1002a84:	8809883a 	mov	r4,r17
 1002a88:	10055500 	call	1005550 <__smakebuf_r>
 1002a8c:	8080030b 	ldhu	r2,12(r16)
 1002a90:	80c00417 	ldw	r3,16(r16)
 1002a94:	003fe206 	br	1002a20 <__alt_mem_TCDM+0xff001a20>
 1002a98:	80800517 	ldw	r2,20(r16)
 1002a9c:	80000215 	stw	zero,8(r16)
 1002aa0:	0085c83a 	sub	r2,zero,r2
 1002aa4:	80800615 	stw	r2,24(r16)
 1002aa8:	183fe41e 	bne	r3,zero,1002a3c <__alt_mem_TCDM+0xff001a3c>
 1002aac:	80c0030b 	ldhu	r3,12(r16)
 1002ab0:	0005883a 	mov	r2,zero
 1002ab4:	1900200c 	andi	r4,r3,128
 1002ab8:	203fe126 	beq	r4,zero,1002a40 <__alt_mem_TCDM+0xff001a40>
 1002abc:	18c01014 	ori	r3,r3,64
 1002ac0:	80c0030d 	sth	r3,12(r16)
 1002ac4:	00bfffc4 	movi	r2,-1
 1002ac8:	003fdd06 	br	1002a40 <__alt_mem_TCDM+0xff001a40>
 1002acc:	10049ac0 	call	10049ac <__sinit>
 1002ad0:	003fcd06 	br	1002a08 <__alt_mem_TCDM+0xff001a08>
 1002ad4:	0005883a 	mov	r2,zero
 1002ad8:	003fd606 	br	1002a34 <__alt_mem_TCDM+0xff001a34>
 1002adc:	81400c17 	ldw	r5,48(r16)
 1002ae0:	28000626 	beq	r5,zero,1002afc <__swsetup_r+0x124>
 1002ae4:	80801004 	addi	r2,r16,64
 1002ae8:	28800326 	beq	r5,r2,1002af8 <__swsetup_r+0x120>
 1002aec:	8809883a 	mov	r4,r17
 1002af0:	1004b200 	call	1004b20 <_free_r>
 1002af4:	8100030b 	ldhu	r4,12(r16)
 1002af8:	80000c15 	stw	zero,48(r16)
 1002afc:	80c00417 	ldw	r3,16(r16)
 1002b00:	00bff6c4 	movi	r2,-37
 1002b04:	1108703a 	and	r4,r2,r4
 1002b08:	80000115 	stw	zero,4(r16)
 1002b0c:	80c00015 	stw	r3,0(r16)
 1002b10:	003fd506 	br	1002a68 <__alt_mem_TCDM+0xff001a68>
 1002b14:	00800244 	movi	r2,9
 1002b18:	88800015 	stw	r2,0(r17)
 1002b1c:	20801014 	ori	r2,r4,64
 1002b20:	8080030d 	sth	r2,12(r16)
 1002b24:	00bfffc4 	movi	r2,-1
 1002b28:	003fc506 	br	1002a40 <__alt_mem_TCDM+0xff001a40>

01002b2c <quorem>:
 1002b2c:	defff704 	addi	sp,sp,-36
 1002b30:	dc800215 	stw	r18,8(sp)
 1002b34:	20800417 	ldw	r2,16(r4)
 1002b38:	2c800417 	ldw	r18,16(r5)
 1002b3c:	dfc00815 	stw	ra,32(sp)
 1002b40:	ddc00715 	stw	r23,28(sp)
 1002b44:	dd800615 	stw	r22,24(sp)
 1002b48:	dd400515 	stw	r21,20(sp)
 1002b4c:	dd000415 	stw	r20,16(sp)
 1002b50:	dcc00315 	stw	r19,12(sp)
 1002b54:	dc400115 	stw	r17,4(sp)
 1002b58:	dc000015 	stw	r16,0(sp)
 1002b5c:	14807116 	blt	r2,r18,1002d24 <quorem+0x1f8>
 1002b60:	94bfffc4 	addi	r18,r18,-1
 1002b64:	94ad883a 	add	r22,r18,r18
 1002b68:	b5ad883a 	add	r22,r22,r22
 1002b6c:	2c400504 	addi	r17,r5,20
 1002b70:	8da9883a 	add	r20,r17,r22
 1002b74:	25400504 	addi	r21,r4,20
 1002b78:	282f883a 	mov	r23,r5
 1002b7c:	adad883a 	add	r22,r21,r22
 1002b80:	a1400017 	ldw	r5,0(r20)
 1002b84:	2021883a 	mov	r16,r4
 1002b88:	b1000017 	ldw	r4,0(r22)
 1002b8c:	29400044 	addi	r5,r5,1
 1002b90:	100a72c0 	call	100a72c <__udivsi3>
 1002b94:	1027883a 	mov	r19,r2
 1002b98:	10002c26 	beq	r2,zero,1002c4c <quorem+0x120>
 1002b9c:	a813883a 	mov	r9,r21
 1002ba0:	880b883a 	mov	r5,r17
 1002ba4:	0009883a 	mov	r4,zero
 1002ba8:	000d883a 	mov	r6,zero
 1002bac:	2a000017 	ldw	r8,0(r5)
 1002bb0:	49c00017 	ldw	r7,0(r9)
 1002bb4:	29400104 	addi	r5,r5,4
 1002bb8:	40bfffcc 	andi	r2,r8,65535
 1002bbc:	14c5383a 	mul	r2,r2,r19
 1002bc0:	4010d43a 	srli	r8,r8,16
 1002bc4:	38ffffcc 	andi	r3,r7,65535
 1002bc8:	1105883a 	add	r2,r2,r4
 1002bcc:	1008d43a 	srli	r4,r2,16
 1002bd0:	44d1383a 	mul	r8,r8,r19
 1002bd4:	198d883a 	add	r6,r3,r6
 1002bd8:	10ffffcc 	andi	r3,r2,65535
 1002bdc:	30c7c83a 	sub	r3,r6,r3
 1002be0:	380ed43a 	srli	r7,r7,16
 1002be4:	4105883a 	add	r2,r8,r4
 1002be8:	180dd43a 	srai	r6,r3,16
 1002bec:	113fffcc 	andi	r4,r2,65535
 1002bf0:	390fc83a 	sub	r7,r7,r4
 1002bf4:	398d883a 	add	r6,r7,r6
 1002bf8:	300e943a 	slli	r7,r6,16
 1002bfc:	18ffffcc 	andi	r3,r3,65535
 1002c00:	1008d43a 	srli	r4,r2,16
 1002c04:	38ceb03a 	or	r7,r7,r3
 1002c08:	49c00015 	stw	r7,0(r9)
 1002c0c:	300dd43a 	srai	r6,r6,16
 1002c10:	4a400104 	addi	r9,r9,4
 1002c14:	a17fe52e 	bgeu	r20,r5,1002bac <__alt_mem_TCDM+0xff001bac>
 1002c18:	b0800017 	ldw	r2,0(r22)
 1002c1c:	10000b1e 	bne	r2,zero,1002c4c <quorem+0x120>
 1002c20:	b0bfff04 	addi	r2,r22,-4
 1002c24:	a880082e 	bgeu	r21,r2,1002c48 <quorem+0x11c>
 1002c28:	b0ffff17 	ldw	r3,-4(r22)
 1002c2c:	18000326 	beq	r3,zero,1002c3c <quorem+0x110>
 1002c30:	00000506 	br	1002c48 <quorem+0x11c>
 1002c34:	10c00017 	ldw	r3,0(r2)
 1002c38:	1800031e 	bne	r3,zero,1002c48 <quorem+0x11c>
 1002c3c:	10bfff04 	addi	r2,r2,-4
 1002c40:	94bfffc4 	addi	r18,r18,-1
 1002c44:	a8bffb36 	bltu	r21,r2,1002c34 <__alt_mem_TCDM+0xff001c34>
 1002c48:	84800415 	stw	r18,16(r16)
 1002c4c:	b80b883a 	mov	r5,r23
 1002c50:	8009883a 	mov	r4,r16
 1002c54:	1006c900 	call	1006c90 <__mcmp>
 1002c58:	10002616 	blt	r2,zero,1002cf4 <quorem+0x1c8>
 1002c5c:	9cc00044 	addi	r19,r19,1
 1002c60:	a805883a 	mov	r2,r21
 1002c64:	000b883a 	mov	r5,zero
 1002c68:	11000017 	ldw	r4,0(r2)
 1002c6c:	89800017 	ldw	r6,0(r17)
 1002c70:	10800104 	addi	r2,r2,4
 1002c74:	20ffffcc 	andi	r3,r4,65535
 1002c78:	194b883a 	add	r5,r3,r5
 1002c7c:	30ffffcc 	andi	r3,r6,65535
 1002c80:	28c7c83a 	sub	r3,r5,r3
 1002c84:	300cd43a 	srli	r6,r6,16
 1002c88:	2008d43a 	srli	r4,r4,16
 1002c8c:	180bd43a 	srai	r5,r3,16
 1002c90:	18ffffcc 	andi	r3,r3,65535
 1002c94:	2189c83a 	sub	r4,r4,r6
 1002c98:	2149883a 	add	r4,r4,r5
 1002c9c:	200c943a 	slli	r6,r4,16
 1002ca0:	8c400104 	addi	r17,r17,4
 1002ca4:	200bd43a 	srai	r5,r4,16
 1002ca8:	30c6b03a 	or	r3,r6,r3
 1002cac:	10ffff15 	stw	r3,-4(r2)
 1002cb0:	a47fed2e 	bgeu	r20,r17,1002c68 <__alt_mem_TCDM+0xff001c68>
 1002cb4:	9485883a 	add	r2,r18,r18
 1002cb8:	1085883a 	add	r2,r2,r2
 1002cbc:	a887883a 	add	r3,r21,r2
 1002cc0:	18800017 	ldw	r2,0(r3)
 1002cc4:	10000b1e 	bne	r2,zero,1002cf4 <quorem+0x1c8>
 1002cc8:	18bfff04 	addi	r2,r3,-4
 1002ccc:	a880082e 	bgeu	r21,r2,1002cf0 <quorem+0x1c4>
 1002cd0:	18ffff17 	ldw	r3,-4(r3)
 1002cd4:	18000326 	beq	r3,zero,1002ce4 <quorem+0x1b8>
 1002cd8:	00000506 	br	1002cf0 <quorem+0x1c4>
 1002cdc:	10c00017 	ldw	r3,0(r2)
 1002ce0:	1800031e 	bne	r3,zero,1002cf0 <quorem+0x1c4>
 1002ce4:	10bfff04 	addi	r2,r2,-4
 1002ce8:	94bfffc4 	addi	r18,r18,-1
 1002cec:	a8bffb36 	bltu	r21,r2,1002cdc <__alt_mem_TCDM+0xff001cdc>
 1002cf0:	84800415 	stw	r18,16(r16)
 1002cf4:	9805883a 	mov	r2,r19
 1002cf8:	dfc00817 	ldw	ra,32(sp)
 1002cfc:	ddc00717 	ldw	r23,28(sp)
 1002d00:	dd800617 	ldw	r22,24(sp)
 1002d04:	dd400517 	ldw	r21,20(sp)
 1002d08:	dd000417 	ldw	r20,16(sp)
 1002d0c:	dcc00317 	ldw	r19,12(sp)
 1002d10:	dc800217 	ldw	r18,8(sp)
 1002d14:	dc400117 	ldw	r17,4(sp)
 1002d18:	dc000017 	ldw	r16,0(sp)
 1002d1c:	dec00904 	addi	sp,sp,36
 1002d20:	f800283a 	ret
 1002d24:	0005883a 	mov	r2,zero
 1002d28:	003ff306 	br	1002cf8 <__alt_mem_TCDM+0xff001cf8>

01002d2c <_dtoa_r>:
 1002d2c:	20801017 	ldw	r2,64(r4)
 1002d30:	deffde04 	addi	sp,sp,-136
 1002d34:	df002015 	stw	fp,128(sp)
 1002d38:	dcc01b15 	stw	r19,108(sp)
 1002d3c:	dc801a15 	stw	r18,104(sp)
 1002d40:	dc401915 	stw	r17,100(sp)
 1002d44:	dc001815 	stw	r16,96(sp)
 1002d48:	dfc02115 	stw	ra,132(sp)
 1002d4c:	ddc01f15 	stw	r23,124(sp)
 1002d50:	dd801e15 	stw	r22,120(sp)
 1002d54:	dd401d15 	stw	r21,116(sp)
 1002d58:	dd001c15 	stw	r20,112(sp)
 1002d5c:	d9c00315 	stw	r7,12(sp)
 1002d60:	2039883a 	mov	fp,r4
 1002d64:	3023883a 	mov	r17,r6
 1002d68:	2825883a 	mov	r18,r5
 1002d6c:	dc002417 	ldw	r16,144(sp)
 1002d70:	3027883a 	mov	r19,r6
 1002d74:	10000826 	beq	r2,zero,1002d98 <_dtoa_r+0x6c>
 1002d78:	21801117 	ldw	r6,68(r4)
 1002d7c:	00c00044 	movi	r3,1
 1002d80:	100b883a 	mov	r5,r2
 1002d84:	1986983a 	sll	r3,r3,r6
 1002d88:	11800115 	stw	r6,4(r2)
 1002d8c:	10c00215 	stw	r3,8(r2)
 1002d90:	10064700 	call	1006470 <_Bfree>
 1002d94:	e0001015 	stw	zero,64(fp)
 1002d98:	88002e16 	blt	r17,zero,1002e54 <_dtoa_r+0x128>
 1002d9c:	80000015 	stw	zero,0(r16)
 1002da0:	889ffc2c 	andhi	r2,r17,32752
 1002da4:	00dffc34 	movhi	r3,32752
 1002da8:	10c01c26 	beq	r2,r3,1002e1c <_dtoa_r+0xf0>
 1002dac:	000d883a 	mov	r6,zero
 1002db0:	000f883a 	mov	r7,zero
 1002db4:	9009883a 	mov	r4,r18
 1002db8:	980b883a 	mov	r5,r19
 1002dbc:	100b97c0 	call	100b97c <__eqdf2>
 1002dc0:	10002b1e 	bne	r2,zero,1002e70 <_dtoa_r+0x144>
 1002dc4:	d9c02317 	ldw	r7,140(sp)
 1002dc8:	00800044 	movi	r2,1
 1002dcc:	38800015 	stw	r2,0(r7)
 1002dd0:	d8802517 	ldw	r2,148(sp)
 1002dd4:	10019e26 	beq	r2,zero,1003450 <_dtoa_r+0x724>
 1002dd8:	d8c02517 	ldw	r3,148(sp)
 1002ddc:	00804074 	movhi	r2,257
 1002de0:	10bf6544 	addi	r2,r2,-619
 1002de4:	18800015 	stw	r2,0(r3)
 1002de8:	10bfffc4 	addi	r2,r2,-1
 1002dec:	dfc02117 	ldw	ra,132(sp)
 1002df0:	df002017 	ldw	fp,128(sp)
 1002df4:	ddc01f17 	ldw	r23,124(sp)
 1002df8:	dd801e17 	ldw	r22,120(sp)
 1002dfc:	dd401d17 	ldw	r21,116(sp)
 1002e00:	dd001c17 	ldw	r20,112(sp)
 1002e04:	dcc01b17 	ldw	r19,108(sp)
 1002e08:	dc801a17 	ldw	r18,104(sp)
 1002e0c:	dc401917 	ldw	r17,100(sp)
 1002e10:	dc001817 	ldw	r16,96(sp)
 1002e14:	dec02204 	addi	sp,sp,136
 1002e18:	f800283a 	ret
 1002e1c:	d8c02317 	ldw	r3,140(sp)
 1002e20:	0089c3c4 	movi	r2,9999
 1002e24:	18800015 	stw	r2,0(r3)
 1002e28:	90017726 	beq	r18,zero,1003408 <_dtoa_r+0x6dc>
 1002e2c:	00804074 	movhi	r2,257
 1002e30:	10bf7104 	addi	r2,r2,-572
 1002e34:	d9002517 	ldw	r4,148(sp)
 1002e38:	203fec26 	beq	r4,zero,1002dec <__alt_mem_TCDM+0xff001dec>
 1002e3c:	10c000c7 	ldb	r3,3(r2)
 1002e40:	1801781e 	bne	r3,zero,1003424 <_dtoa_r+0x6f8>
 1002e44:	10c000c4 	addi	r3,r2,3
 1002e48:	d9802517 	ldw	r6,148(sp)
 1002e4c:	30c00015 	stw	r3,0(r6)
 1002e50:	003fe606 	br	1002dec <__alt_mem_TCDM+0xff001dec>
 1002e54:	04e00034 	movhi	r19,32768
 1002e58:	9cffffc4 	addi	r19,r19,-1
 1002e5c:	00800044 	movi	r2,1
 1002e60:	8ce6703a 	and	r19,r17,r19
 1002e64:	80800015 	stw	r2,0(r16)
 1002e68:	9823883a 	mov	r17,r19
 1002e6c:	003fcc06 	br	1002da0 <__alt_mem_TCDM+0xff001da0>
 1002e70:	d8800204 	addi	r2,sp,8
 1002e74:	d8800015 	stw	r2,0(sp)
 1002e78:	d9c00104 	addi	r7,sp,4
 1002e7c:	900b883a 	mov	r5,r18
 1002e80:	980d883a 	mov	r6,r19
 1002e84:	e009883a 	mov	r4,fp
 1002e88:	8820d53a 	srli	r16,r17,20
 1002e8c:	100705c0 	call	100705c <__d2b>
 1002e90:	d8800915 	stw	r2,36(sp)
 1002e94:	8001651e 	bne	r16,zero,100342c <_dtoa_r+0x700>
 1002e98:	dd800217 	ldw	r22,8(sp)
 1002e9c:	dc000117 	ldw	r16,4(sp)
 1002ea0:	00800804 	movi	r2,32
 1002ea4:	b421883a 	add	r16,r22,r16
 1002ea8:	80c10c84 	addi	r3,r16,1074
 1002eac:	10c2d10e 	bge	r2,r3,10039f4 <_dtoa_r+0xcc8>
 1002eb0:	00801004 	movi	r2,64
 1002eb4:	81010484 	addi	r4,r16,1042
 1002eb8:	10c7c83a 	sub	r3,r2,r3
 1002ebc:	9108d83a 	srl	r4,r18,r4
 1002ec0:	88e2983a 	sll	r17,r17,r3
 1002ec4:	2448b03a 	or	r4,r4,r17
 1002ec8:	100cd440 	call	100cd44 <__floatunsidf>
 1002ecc:	017f8434 	movhi	r5,65040
 1002ed0:	01800044 	movi	r6,1
 1002ed4:	1009883a 	mov	r4,r2
 1002ed8:	194b883a 	add	r5,r3,r5
 1002edc:	843fffc4 	addi	r16,r16,-1
 1002ee0:	d9801115 	stw	r6,68(sp)
 1002ee4:	000d883a 	mov	r6,zero
 1002ee8:	01cffe34 	movhi	r7,16376
 1002eec:	100c2ec0 	call	100c2ec <__subdf3>
 1002ef0:	0198dbf4 	movhi	r6,25455
 1002ef4:	01cff4f4 	movhi	r7,16339
 1002ef8:	3190d844 	addi	r6,r6,17249
 1002efc:	39e1e9c4 	addi	r7,r7,-30809
 1002f00:	1009883a 	mov	r4,r2
 1002f04:	180b883a 	mov	r5,r3
 1002f08:	100bbd40 	call	100bbd4 <__muldf3>
 1002f0c:	01a2d874 	movhi	r6,35681
 1002f10:	01cff1f4 	movhi	r7,16327
 1002f14:	31b22cc4 	addi	r6,r6,-14157
 1002f18:	39e28a04 	addi	r7,r7,-30168
 1002f1c:	180b883a 	mov	r5,r3
 1002f20:	1009883a 	mov	r4,r2
 1002f24:	100a7e80 	call	100a7e8 <__adddf3>
 1002f28:	8009883a 	mov	r4,r16
 1002f2c:	1029883a 	mov	r20,r2
 1002f30:	1823883a 	mov	r17,r3
 1002f34:	100cc680 	call	100cc68 <__floatsidf>
 1002f38:	019427f4 	movhi	r6,20639
 1002f3c:	01cff4f4 	movhi	r7,16339
 1002f40:	319e7ec4 	addi	r6,r6,31227
 1002f44:	39d104c4 	addi	r7,r7,17427
 1002f48:	1009883a 	mov	r4,r2
 1002f4c:	180b883a 	mov	r5,r3
 1002f50:	100bbd40 	call	100bbd4 <__muldf3>
 1002f54:	100d883a 	mov	r6,r2
 1002f58:	180f883a 	mov	r7,r3
 1002f5c:	a009883a 	mov	r4,r20
 1002f60:	880b883a 	mov	r5,r17
 1002f64:	100a7e80 	call	100a7e8 <__adddf3>
 1002f68:	1009883a 	mov	r4,r2
 1002f6c:	180b883a 	mov	r5,r3
 1002f70:	1029883a 	mov	r20,r2
 1002f74:	1823883a 	mov	r17,r3
 1002f78:	100cbe80 	call	100cbe8 <__fixdfsi>
 1002f7c:	000d883a 	mov	r6,zero
 1002f80:	000f883a 	mov	r7,zero
 1002f84:	a009883a 	mov	r4,r20
 1002f88:	880b883a 	mov	r5,r17
 1002f8c:	d8800515 	stw	r2,20(sp)
 1002f90:	100bae00 	call	100bae0 <__ledf2>
 1002f94:	10028716 	blt	r2,zero,10039b4 <_dtoa_r+0xc88>
 1002f98:	d8c00517 	ldw	r3,20(sp)
 1002f9c:	00800584 	movi	r2,22
 1002fa0:	10c27536 	bltu	r2,r3,1003978 <_dtoa_r+0xc4c>
 1002fa4:	180490fa 	slli	r2,r3,3
 1002fa8:	00c04074 	movhi	r3,257
 1002fac:	18ff8d04 	addi	r3,r3,-460
 1002fb0:	1885883a 	add	r2,r3,r2
 1002fb4:	11000017 	ldw	r4,0(r2)
 1002fb8:	11400117 	ldw	r5,4(r2)
 1002fbc:	900d883a 	mov	r6,r18
 1002fc0:	980f883a 	mov	r7,r19
 1002fc4:	100ba040 	call	100ba04 <__gedf2>
 1002fc8:	00828d0e 	bge	zero,r2,1003a00 <_dtoa_r+0xcd4>
 1002fcc:	d9000517 	ldw	r4,20(sp)
 1002fd0:	d8000e15 	stw	zero,56(sp)
 1002fd4:	213fffc4 	addi	r4,r4,-1
 1002fd8:	d9000515 	stw	r4,20(sp)
 1002fdc:	b42dc83a 	sub	r22,r22,r16
 1002fe0:	b5bfffc4 	addi	r22,r22,-1
 1002fe4:	b0026f16 	blt	r22,zero,10039a4 <_dtoa_r+0xc78>
 1002fe8:	d8000815 	stw	zero,32(sp)
 1002fec:	d9c00517 	ldw	r7,20(sp)
 1002ff0:	38026416 	blt	r7,zero,1003984 <_dtoa_r+0xc58>
 1002ff4:	b1ed883a 	add	r22,r22,r7
 1002ff8:	d9c00d15 	stw	r7,52(sp)
 1002ffc:	d8000a15 	stw	zero,40(sp)
 1003000:	d9800317 	ldw	r6,12(sp)
 1003004:	00800244 	movi	r2,9
 1003008:	11811436 	bltu	r2,r6,100345c <_dtoa_r+0x730>
 100300c:	00800144 	movi	r2,5
 1003010:	1184e10e 	bge	r2,r6,1004398 <_dtoa_r+0x166c>
 1003014:	31bfff04 	addi	r6,r6,-4
 1003018:	d9800315 	stw	r6,12(sp)
 100301c:	0023883a 	mov	r17,zero
 1003020:	d9800317 	ldw	r6,12(sp)
 1003024:	008000c4 	movi	r2,3
 1003028:	30836726 	beq	r6,r2,1003dc8 <_dtoa_r+0x109c>
 100302c:	1183410e 	bge	r2,r6,1003d34 <_dtoa_r+0x1008>
 1003030:	d9c00317 	ldw	r7,12(sp)
 1003034:	00800104 	movi	r2,4
 1003038:	38827c26 	beq	r7,r2,1003a2c <_dtoa_r+0xd00>
 100303c:	00800144 	movi	r2,5
 1003040:	3884c41e 	bne	r7,r2,1004354 <_dtoa_r+0x1628>
 1003044:	00800044 	movi	r2,1
 1003048:	d8800b15 	stw	r2,44(sp)
 100304c:	d8c00517 	ldw	r3,20(sp)
 1003050:	d9002217 	ldw	r4,136(sp)
 1003054:	1907883a 	add	r3,r3,r4
 1003058:	19800044 	addi	r6,r3,1
 100305c:	d8c00c15 	stw	r3,48(sp)
 1003060:	d9800615 	stw	r6,24(sp)
 1003064:	0183a40e 	bge	zero,r6,1003ef8 <_dtoa_r+0x11cc>
 1003068:	d9800617 	ldw	r6,24(sp)
 100306c:	3021883a 	mov	r16,r6
 1003070:	e0001115 	stw	zero,68(fp)
 1003074:	008005c4 	movi	r2,23
 1003078:	1184c92e 	bgeu	r2,r6,10043a0 <_dtoa_r+0x1674>
 100307c:	00c00044 	movi	r3,1
 1003080:	00800104 	movi	r2,4
 1003084:	1085883a 	add	r2,r2,r2
 1003088:	11000504 	addi	r4,r2,20
 100308c:	180b883a 	mov	r5,r3
 1003090:	18c00044 	addi	r3,r3,1
 1003094:	313ffb2e 	bgeu	r6,r4,1003084 <__alt_mem_TCDM+0xff002084>
 1003098:	e1401115 	stw	r5,68(fp)
 100309c:	e009883a 	mov	r4,fp
 10030a0:	10063c80 	call	10063c8 <_Balloc>
 10030a4:	d8800715 	stw	r2,28(sp)
 10030a8:	e0801015 	stw	r2,64(fp)
 10030ac:	00800384 	movi	r2,14
 10030b0:	1400f736 	bltu	r2,r16,1003490 <_dtoa_r+0x764>
 10030b4:	8800f626 	beq	r17,zero,1003490 <_dtoa_r+0x764>
 10030b8:	d9c00517 	ldw	r7,20(sp)
 10030bc:	01c39a0e 	bge	zero,r7,1003f28 <_dtoa_r+0x11fc>
 10030c0:	388003cc 	andi	r2,r7,15
 10030c4:	100490fa 	slli	r2,r2,3
 10030c8:	382bd13a 	srai	r21,r7,4
 10030cc:	00c04074 	movhi	r3,257
 10030d0:	18ff8d04 	addi	r3,r3,-460
 10030d4:	1885883a 	add	r2,r3,r2
 10030d8:	a8c0040c 	andi	r3,r21,16
 10030dc:	12400017 	ldw	r9,0(r2)
 10030e0:	12000117 	ldw	r8,4(r2)
 10030e4:	18037926 	beq	r3,zero,1003ecc <_dtoa_r+0x11a0>
 10030e8:	00804074 	movhi	r2,257
 10030ec:	10bf8304 	addi	r2,r2,-500
 10030f0:	11800817 	ldw	r6,32(r2)
 10030f4:	11c00917 	ldw	r7,36(r2)
 10030f8:	9009883a 	mov	r4,r18
 10030fc:	980b883a 	mov	r5,r19
 1003100:	da001715 	stw	r8,92(sp)
 1003104:	da401615 	stw	r9,88(sp)
 1003108:	100b0940 	call	100b094 <__divdf3>
 100310c:	da001717 	ldw	r8,92(sp)
 1003110:	da401617 	ldw	r9,88(sp)
 1003114:	ad4003cc 	andi	r21,r21,15
 1003118:	040000c4 	movi	r16,3
 100311c:	1023883a 	mov	r17,r2
 1003120:	1829883a 	mov	r20,r3
 1003124:	a8001126 	beq	r21,zero,100316c <_dtoa_r+0x440>
 1003128:	05c04074 	movhi	r23,257
 100312c:	bdff8304 	addi	r23,r23,-500
 1003130:	4805883a 	mov	r2,r9
 1003134:	4007883a 	mov	r3,r8
 1003138:	a980004c 	andi	r6,r21,1
 100313c:	1009883a 	mov	r4,r2
 1003140:	a82bd07a 	srai	r21,r21,1
 1003144:	180b883a 	mov	r5,r3
 1003148:	30000426 	beq	r6,zero,100315c <_dtoa_r+0x430>
 100314c:	b9800017 	ldw	r6,0(r23)
 1003150:	b9c00117 	ldw	r7,4(r23)
 1003154:	84000044 	addi	r16,r16,1
 1003158:	100bbd40 	call	100bbd4 <__muldf3>
 100315c:	bdc00204 	addi	r23,r23,8
 1003160:	a83ff51e 	bne	r21,zero,1003138 <__alt_mem_TCDM+0xff002138>
 1003164:	1013883a 	mov	r9,r2
 1003168:	1811883a 	mov	r8,r3
 100316c:	480d883a 	mov	r6,r9
 1003170:	400f883a 	mov	r7,r8
 1003174:	8809883a 	mov	r4,r17
 1003178:	a00b883a 	mov	r5,r20
 100317c:	100b0940 	call	100b094 <__divdf3>
 1003180:	d8800f15 	stw	r2,60(sp)
 1003184:	d8c01015 	stw	r3,64(sp)
 1003188:	d8c00e17 	ldw	r3,56(sp)
 100318c:	18000626 	beq	r3,zero,10031a8 <_dtoa_r+0x47c>
 1003190:	d9000f17 	ldw	r4,60(sp)
 1003194:	d9401017 	ldw	r5,64(sp)
 1003198:	000d883a 	mov	r6,zero
 100319c:	01cffc34 	movhi	r7,16368
 10031a0:	100bae00 	call	100bae0 <__ledf2>
 10031a4:	10040b16 	blt	r2,zero,10041d4 <_dtoa_r+0x14a8>
 10031a8:	8009883a 	mov	r4,r16
 10031ac:	100cc680 	call	100cc68 <__floatsidf>
 10031b0:	d9800f17 	ldw	r6,60(sp)
 10031b4:	d9c01017 	ldw	r7,64(sp)
 10031b8:	1009883a 	mov	r4,r2
 10031bc:	180b883a 	mov	r5,r3
 10031c0:	100bbd40 	call	100bbd4 <__muldf3>
 10031c4:	000d883a 	mov	r6,zero
 10031c8:	01d00734 	movhi	r7,16412
 10031cc:	1009883a 	mov	r4,r2
 10031d0:	180b883a 	mov	r5,r3
 10031d4:	100a7e80 	call	100a7e8 <__adddf3>
 10031d8:	1021883a 	mov	r16,r2
 10031dc:	d8800617 	ldw	r2,24(sp)
 10031e0:	047f3034 	movhi	r17,64704
 10031e4:	1c63883a 	add	r17,r3,r17
 10031e8:	10031826 	beq	r2,zero,1003e4c <_dtoa_r+0x1120>
 10031ec:	d8c00517 	ldw	r3,20(sp)
 10031f0:	db000617 	ldw	r12,24(sp)
 10031f4:	d8c01315 	stw	r3,76(sp)
 10031f8:	d9000b17 	ldw	r4,44(sp)
 10031fc:	20038f26 	beq	r4,zero,100403c <_dtoa_r+0x1310>
 1003200:	60bfffc4 	addi	r2,r12,-1
 1003204:	100490fa 	slli	r2,r2,3
 1003208:	00c04074 	movhi	r3,257
 100320c:	18ff8d04 	addi	r3,r3,-460
 1003210:	1885883a 	add	r2,r3,r2
 1003214:	11800017 	ldw	r6,0(r2)
 1003218:	11c00117 	ldw	r7,4(r2)
 100321c:	d8800717 	ldw	r2,28(sp)
 1003220:	0009883a 	mov	r4,zero
 1003224:	014ff834 	movhi	r5,16352
 1003228:	db001615 	stw	r12,88(sp)
 100322c:	15c00044 	addi	r23,r2,1
 1003230:	100b0940 	call	100b094 <__divdf3>
 1003234:	800d883a 	mov	r6,r16
 1003238:	880f883a 	mov	r7,r17
 100323c:	1009883a 	mov	r4,r2
 1003240:	180b883a 	mov	r5,r3
 1003244:	100c2ec0 	call	100c2ec <__subdf3>
 1003248:	d9401017 	ldw	r5,64(sp)
 100324c:	d9000f17 	ldw	r4,60(sp)
 1003250:	102b883a 	mov	r21,r2
 1003254:	d8c01215 	stw	r3,72(sp)
 1003258:	100cbe80 	call	100cbe8 <__fixdfsi>
 100325c:	1009883a 	mov	r4,r2
 1003260:	1029883a 	mov	r20,r2
 1003264:	100cc680 	call	100cc68 <__floatsidf>
 1003268:	d9000f17 	ldw	r4,60(sp)
 100326c:	d9401017 	ldw	r5,64(sp)
 1003270:	100d883a 	mov	r6,r2
 1003274:	180f883a 	mov	r7,r3
 1003278:	100c2ec0 	call	100c2ec <__subdf3>
 100327c:	1823883a 	mov	r17,r3
 1003280:	d8c00717 	ldw	r3,28(sp)
 1003284:	d9401217 	ldw	r5,72(sp)
 1003288:	a2000c04 	addi	r8,r20,48
 100328c:	1021883a 	mov	r16,r2
 1003290:	1a000005 	stb	r8,0(r3)
 1003294:	800d883a 	mov	r6,r16
 1003298:	880f883a 	mov	r7,r17
 100329c:	a809883a 	mov	r4,r21
 10032a0:	4029883a 	mov	r20,r8
 10032a4:	100ba040 	call	100ba04 <__gedf2>
 10032a8:	00841d16 	blt	zero,r2,1004320 <_dtoa_r+0x15f4>
 10032ac:	800d883a 	mov	r6,r16
 10032b0:	880f883a 	mov	r7,r17
 10032b4:	0009883a 	mov	r4,zero
 10032b8:	014ffc34 	movhi	r5,16368
 10032bc:	100c2ec0 	call	100c2ec <__subdf3>
 10032c0:	d9401217 	ldw	r5,72(sp)
 10032c4:	100d883a 	mov	r6,r2
 10032c8:	180f883a 	mov	r7,r3
 10032cc:	a809883a 	mov	r4,r21
 10032d0:	100ba040 	call	100ba04 <__gedf2>
 10032d4:	db001617 	ldw	r12,88(sp)
 10032d8:	00840e16 	blt	zero,r2,1004314 <_dtoa_r+0x15e8>
 10032dc:	00800044 	movi	r2,1
 10032e0:	13006b0e 	bge	r2,r12,1003490 <_dtoa_r+0x764>
 10032e4:	d9000717 	ldw	r4,28(sp)
 10032e8:	dd800f15 	stw	r22,60(sp)
 10032ec:	dcc01015 	stw	r19,64(sp)
 10032f0:	2319883a 	add	r12,r4,r12
 10032f4:	dcc01217 	ldw	r19,72(sp)
 10032f8:	602d883a 	mov	r22,r12
 10032fc:	dc801215 	stw	r18,72(sp)
 1003300:	b825883a 	mov	r18,r23
 1003304:	00000906 	br	100332c <_dtoa_r+0x600>
 1003308:	100c2ec0 	call	100c2ec <__subdf3>
 100330c:	a80d883a 	mov	r6,r21
 1003310:	980f883a 	mov	r7,r19
 1003314:	1009883a 	mov	r4,r2
 1003318:	180b883a 	mov	r5,r3
 100331c:	100bae00 	call	100bae0 <__ledf2>
 1003320:	1003e816 	blt	r2,zero,10042c4 <_dtoa_r+0x1598>
 1003324:	b825883a 	mov	r18,r23
 1003328:	bd83e926 	beq	r23,r22,10042d0 <_dtoa_r+0x15a4>
 100332c:	a809883a 	mov	r4,r21
 1003330:	980b883a 	mov	r5,r19
 1003334:	000d883a 	mov	r6,zero
 1003338:	01d00934 	movhi	r7,16420
 100333c:	100bbd40 	call	100bbd4 <__muldf3>
 1003340:	000d883a 	mov	r6,zero
 1003344:	01d00934 	movhi	r7,16420
 1003348:	8009883a 	mov	r4,r16
 100334c:	880b883a 	mov	r5,r17
 1003350:	102b883a 	mov	r21,r2
 1003354:	1827883a 	mov	r19,r3
 1003358:	100bbd40 	call	100bbd4 <__muldf3>
 100335c:	180b883a 	mov	r5,r3
 1003360:	1009883a 	mov	r4,r2
 1003364:	1821883a 	mov	r16,r3
 1003368:	1023883a 	mov	r17,r2
 100336c:	100cbe80 	call	100cbe8 <__fixdfsi>
 1003370:	1009883a 	mov	r4,r2
 1003374:	1029883a 	mov	r20,r2
 1003378:	100cc680 	call	100cc68 <__floatsidf>
 100337c:	8809883a 	mov	r4,r17
 1003380:	800b883a 	mov	r5,r16
 1003384:	100d883a 	mov	r6,r2
 1003388:	180f883a 	mov	r7,r3
 100338c:	100c2ec0 	call	100c2ec <__subdf3>
 1003390:	a5000c04 	addi	r20,r20,48
 1003394:	a80d883a 	mov	r6,r21
 1003398:	980f883a 	mov	r7,r19
 100339c:	1009883a 	mov	r4,r2
 10033a0:	180b883a 	mov	r5,r3
 10033a4:	95000005 	stb	r20,0(r18)
 10033a8:	1021883a 	mov	r16,r2
 10033ac:	1823883a 	mov	r17,r3
 10033b0:	100bae00 	call	100bae0 <__ledf2>
 10033b4:	bdc00044 	addi	r23,r23,1
 10033b8:	800d883a 	mov	r6,r16
 10033bc:	880f883a 	mov	r7,r17
 10033c0:	0009883a 	mov	r4,zero
 10033c4:	014ffc34 	movhi	r5,16368
 10033c8:	103fcf0e 	bge	r2,zero,1003308 <__alt_mem_TCDM+0xff002308>
 10033cc:	d8c01317 	ldw	r3,76(sp)
 10033d0:	d8c00515 	stw	r3,20(sp)
 10033d4:	d9400917 	ldw	r5,36(sp)
 10033d8:	e009883a 	mov	r4,fp
 10033dc:	10064700 	call	1006470 <_Bfree>
 10033e0:	d9000517 	ldw	r4,20(sp)
 10033e4:	d9802317 	ldw	r6,140(sp)
 10033e8:	d9c02517 	ldw	r7,148(sp)
 10033ec:	b8000005 	stb	zero,0(r23)
 10033f0:	20800044 	addi	r2,r4,1
 10033f4:	30800015 	stw	r2,0(r6)
 10033f8:	3802aa26 	beq	r7,zero,1003ea4 <_dtoa_r+0x1178>
 10033fc:	3dc00015 	stw	r23,0(r7)
 1003400:	d8800717 	ldw	r2,28(sp)
 1003404:	003e7906 	br	1002dec <__alt_mem_TCDM+0xff001dec>
 1003408:	00800434 	movhi	r2,16
 100340c:	10bfffc4 	addi	r2,r2,-1
 1003410:	88a2703a 	and	r17,r17,r2
 1003414:	883e851e 	bne	r17,zero,1002e2c <__alt_mem_TCDM+0xff001e2c>
 1003418:	00804074 	movhi	r2,257
 100341c:	10bf6e04 	addi	r2,r2,-584
 1003420:	003e8406 	br	1002e34 <__alt_mem_TCDM+0xff001e34>
 1003424:	10c00204 	addi	r3,r2,8
 1003428:	003e8706 	br	1002e48 <__alt_mem_TCDM+0xff001e48>
 100342c:	01400434 	movhi	r5,16
 1003430:	297fffc4 	addi	r5,r5,-1
 1003434:	994a703a 	and	r5,r19,r5
 1003438:	9009883a 	mov	r4,r18
 100343c:	843f0044 	addi	r16,r16,-1023
 1003440:	294ffc34 	orhi	r5,r5,16368
 1003444:	dd800217 	ldw	r22,8(sp)
 1003448:	d8001115 	stw	zero,68(sp)
 100344c:	003ea506 	br	1002ee4 <__alt_mem_TCDM+0xff001ee4>
 1003450:	00804074 	movhi	r2,257
 1003454:	10bf6504 	addi	r2,r2,-620
 1003458:	003e6406 	br	1002dec <__alt_mem_TCDM+0xff001dec>
 100345c:	e0001115 	stw	zero,68(fp)
 1003460:	000b883a 	mov	r5,zero
 1003464:	e009883a 	mov	r4,fp
 1003468:	10063c80 	call	10063c8 <_Balloc>
 100346c:	01bfffc4 	movi	r6,-1
 1003470:	01c00044 	movi	r7,1
 1003474:	d8800715 	stw	r2,28(sp)
 1003478:	d9800c15 	stw	r6,48(sp)
 100347c:	e0801015 	stw	r2,64(fp)
 1003480:	d8000315 	stw	zero,12(sp)
 1003484:	d9c00b15 	stw	r7,44(sp)
 1003488:	d9800615 	stw	r6,24(sp)
 100348c:	d8002215 	stw	zero,136(sp)
 1003490:	d8800117 	ldw	r2,4(sp)
 1003494:	10008916 	blt	r2,zero,10036bc <_dtoa_r+0x990>
 1003498:	d9000517 	ldw	r4,20(sp)
 100349c:	00c00384 	movi	r3,14
 10034a0:	19008616 	blt	r3,r4,10036bc <_dtoa_r+0x990>
 10034a4:	200490fa 	slli	r2,r4,3
 10034a8:	00c04074 	movhi	r3,257
 10034ac:	d9802217 	ldw	r6,136(sp)
 10034b0:	18ff8d04 	addi	r3,r3,-460
 10034b4:	1885883a 	add	r2,r3,r2
 10034b8:	14000017 	ldw	r16,0(r2)
 10034bc:	14400117 	ldw	r17,4(r2)
 10034c0:	30016316 	blt	r6,zero,1003a50 <_dtoa_r+0xd24>
 10034c4:	800d883a 	mov	r6,r16
 10034c8:	880f883a 	mov	r7,r17
 10034cc:	9009883a 	mov	r4,r18
 10034d0:	980b883a 	mov	r5,r19
 10034d4:	100b0940 	call	100b094 <__divdf3>
 10034d8:	180b883a 	mov	r5,r3
 10034dc:	1009883a 	mov	r4,r2
 10034e0:	100cbe80 	call	100cbe8 <__fixdfsi>
 10034e4:	1009883a 	mov	r4,r2
 10034e8:	102b883a 	mov	r21,r2
 10034ec:	100cc680 	call	100cc68 <__floatsidf>
 10034f0:	800d883a 	mov	r6,r16
 10034f4:	880f883a 	mov	r7,r17
 10034f8:	1009883a 	mov	r4,r2
 10034fc:	180b883a 	mov	r5,r3
 1003500:	100bbd40 	call	100bbd4 <__muldf3>
 1003504:	100d883a 	mov	r6,r2
 1003508:	180f883a 	mov	r7,r3
 100350c:	9009883a 	mov	r4,r18
 1003510:	980b883a 	mov	r5,r19
 1003514:	100c2ec0 	call	100c2ec <__subdf3>
 1003518:	d9c00717 	ldw	r7,28(sp)
 100351c:	1009883a 	mov	r4,r2
 1003520:	a8800c04 	addi	r2,r21,48
 1003524:	38800005 	stb	r2,0(r7)
 1003528:	3dc00044 	addi	r23,r7,1
 100352c:	d9c00617 	ldw	r7,24(sp)
 1003530:	01800044 	movi	r6,1
 1003534:	180b883a 	mov	r5,r3
 1003538:	2005883a 	mov	r2,r4
 100353c:	39803826 	beq	r7,r6,1003620 <_dtoa_r+0x8f4>
 1003540:	000d883a 	mov	r6,zero
 1003544:	01d00934 	movhi	r7,16420
 1003548:	100bbd40 	call	100bbd4 <__muldf3>
 100354c:	000d883a 	mov	r6,zero
 1003550:	000f883a 	mov	r7,zero
 1003554:	1009883a 	mov	r4,r2
 1003558:	180b883a 	mov	r5,r3
 100355c:	1025883a 	mov	r18,r2
 1003560:	1827883a 	mov	r19,r3
 1003564:	100b97c0 	call	100b97c <__eqdf2>
 1003568:	103f9a26 	beq	r2,zero,10033d4 <__alt_mem_TCDM+0xff0023d4>
 100356c:	d9c00617 	ldw	r7,24(sp)
 1003570:	d8c00717 	ldw	r3,28(sp)
 1003574:	b829883a 	mov	r20,r23
 1003578:	38bfffc4 	addi	r2,r7,-1
 100357c:	18ad883a 	add	r22,r3,r2
 1003580:	00000a06 	br	10035ac <_dtoa_r+0x880>
 1003584:	100bbd40 	call	100bbd4 <__muldf3>
 1003588:	000d883a 	mov	r6,zero
 100358c:	000f883a 	mov	r7,zero
 1003590:	1009883a 	mov	r4,r2
 1003594:	180b883a 	mov	r5,r3
 1003598:	1025883a 	mov	r18,r2
 100359c:	1827883a 	mov	r19,r3
 10035a0:	b829883a 	mov	r20,r23
 10035a4:	100b97c0 	call	100b97c <__eqdf2>
 10035a8:	103f8a26 	beq	r2,zero,10033d4 <__alt_mem_TCDM+0xff0023d4>
 10035ac:	800d883a 	mov	r6,r16
 10035b0:	880f883a 	mov	r7,r17
 10035b4:	9009883a 	mov	r4,r18
 10035b8:	980b883a 	mov	r5,r19
 10035bc:	100b0940 	call	100b094 <__divdf3>
 10035c0:	180b883a 	mov	r5,r3
 10035c4:	1009883a 	mov	r4,r2
 10035c8:	100cbe80 	call	100cbe8 <__fixdfsi>
 10035cc:	1009883a 	mov	r4,r2
 10035d0:	102b883a 	mov	r21,r2
 10035d4:	100cc680 	call	100cc68 <__floatsidf>
 10035d8:	800d883a 	mov	r6,r16
 10035dc:	880f883a 	mov	r7,r17
 10035e0:	1009883a 	mov	r4,r2
 10035e4:	180b883a 	mov	r5,r3
 10035e8:	100bbd40 	call	100bbd4 <__muldf3>
 10035ec:	100d883a 	mov	r6,r2
 10035f0:	180f883a 	mov	r7,r3
 10035f4:	9009883a 	mov	r4,r18
 10035f8:	980b883a 	mov	r5,r19
 10035fc:	100c2ec0 	call	100c2ec <__subdf3>
 1003600:	aa000c04 	addi	r8,r21,48
 1003604:	a2000005 	stb	r8,0(r20)
 1003608:	000d883a 	mov	r6,zero
 100360c:	01d00934 	movhi	r7,16420
 1003610:	1009883a 	mov	r4,r2
 1003614:	180b883a 	mov	r5,r3
 1003618:	a5c00044 	addi	r23,r20,1
 100361c:	b53fd91e 	bne	r22,r20,1003584 <__alt_mem_TCDM+0xff002584>
 1003620:	100d883a 	mov	r6,r2
 1003624:	180f883a 	mov	r7,r3
 1003628:	1009883a 	mov	r4,r2
 100362c:	180b883a 	mov	r5,r3
 1003630:	100a7e80 	call	100a7e8 <__adddf3>
 1003634:	100d883a 	mov	r6,r2
 1003638:	180f883a 	mov	r7,r3
 100363c:	8009883a 	mov	r4,r16
 1003640:	880b883a 	mov	r5,r17
 1003644:	1027883a 	mov	r19,r2
 1003648:	1825883a 	mov	r18,r3
 100364c:	100bae00 	call	100bae0 <__ledf2>
 1003650:	10000816 	blt	r2,zero,1003674 <_dtoa_r+0x948>
 1003654:	980d883a 	mov	r6,r19
 1003658:	900f883a 	mov	r7,r18
 100365c:	8009883a 	mov	r4,r16
 1003660:	880b883a 	mov	r5,r17
 1003664:	100b97c0 	call	100b97c <__eqdf2>
 1003668:	103f5a1e 	bne	r2,zero,10033d4 <__alt_mem_TCDM+0xff0023d4>
 100366c:	ad40004c 	andi	r21,r21,1
 1003670:	a83f5826 	beq	r21,zero,10033d4 <__alt_mem_TCDM+0xff0023d4>
 1003674:	bd3fffc3 	ldbu	r20,-1(r23)
 1003678:	b8bfffc4 	addi	r2,r23,-1
 100367c:	1007883a 	mov	r3,r2
 1003680:	01400e44 	movi	r5,57
 1003684:	d9800717 	ldw	r6,28(sp)
 1003688:	00000506 	br	10036a0 <_dtoa_r+0x974>
 100368c:	18ffffc4 	addi	r3,r3,-1
 1003690:	11824726 	beq	r2,r6,1003fb0 <_dtoa_r+0x1284>
 1003694:	1d000003 	ldbu	r20,0(r3)
 1003698:	102f883a 	mov	r23,r2
 100369c:	10bfffc4 	addi	r2,r2,-1
 10036a0:	a1003fcc 	andi	r4,r20,255
 10036a4:	2100201c 	xori	r4,r4,128
 10036a8:	213fe004 	addi	r4,r4,-128
 10036ac:	217ff726 	beq	r4,r5,100368c <__alt_mem_TCDM+0xff00268c>
 10036b0:	a2000044 	addi	r8,r20,1
 10036b4:	12000005 	stb	r8,0(r2)
 10036b8:	003f4606 	br	10033d4 <__alt_mem_TCDM+0xff0023d4>
 10036bc:	d9000b17 	ldw	r4,44(sp)
 10036c0:	2000c826 	beq	r4,zero,10039e4 <_dtoa_r+0xcb8>
 10036c4:	d9800317 	ldw	r6,12(sp)
 10036c8:	00c00044 	movi	r3,1
 10036cc:	1980f90e 	bge	r3,r6,1003ab4 <_dtoa_r+0xd88>
 10036d0:	d8800617 	ldw	r2,24(sp)
 10036d4:	d8c00a17 	ldw	r3,40(sp)
 10036d8:	157fffc4 	addi	r21,r2,-1
 10036dc:	1d41f316 	blt	r3,r21,1003eac <_dtoa_r+0x1180>
 10036e0:	1d6bc83a 	sub	r21,r3,r21
 10036e4:	d9c00617 	ldw	r7,24(sp)
 10036e8:	3802aa16 	blt	r7,zero,1004194 <_dtoa_r+0x1468>
 10036ec:	dd000817 	ldw	r20,32(sp)
 10036f0:	d8800617 	ldw	r2,24(sp)
 10036f4:	d8c00817 	ldw	r3,32(sp)
 10036f8:	01400044 	movi	r5,1
 10036fc:	e009883a 	mov	r4,fp
 1003700:	1887883a 	add	r3,r3,r2
 1003704:	d8c00815 	stw	r3,32(sp)
 1003708:	b0ad883a 	add	r22,r22,r2
 100370c:	10067d40 	call	10067d4 <__i2b>
 1003710:	1023883a 	mov	r17,r2
 1003714:	a0000826 	beq	r20,zero,1003738 <_dtoa_r+0xa0c>
 1003718:	0580070e 	bge	zero,r22,1003738 <_dtoa_r+0xa0c>
 100371c:	a005883a 	mov	r2,r20
 1003720:	b500b916 	blt	r22,r20,1003a08 <_dtoa_r+0xcdc>
 1003724:	d9000817 	ldw	r4,32(sp)
 1003728:	a0a9c83a 	sub	r20,r20,r2
 100372c:	b0adc83a 	sub	r22,r22,r2
 1003730:	2089c83a 	sub	r4,r4,r2
 1003734:	d9000815 	stw	r4,32(sp)
 1003738:	d9800a17 	ldw	r6,40(sp)
 100373c:	0181810e 	bge	zero,r6,1003d44 <_dtoa_r+0x1018>
 1003740:	d9c00b17 	ldw	r7,44(sp)
 1003744:	3800b326 	beq	r7,zero,1003a14 <_dtoa_r+0xce8>
 1003748:	a800b226 	beq	r21,zero,1003a14 <_dtoa_r+0xce8>
 100374c:	880b883a 	mov	r5,r17
 1003750:	a80d883a 	mov	r6,r21
 1003754:	e009883a 	mov	r4,fp
 1003758:	1006a080 	call	1006a08 <__pow5mult>
 100375c:	d9800917 	ldw	r6,36(sp)
 1003760:	100b883a 	mov	r5,r2
 1003764:	e009883a 	mov	r4,fp
 1003768:	1023883a 	mov	r17,r2
 100376c:	10068100 	call	1006810 <__multiply>
 1003770:	1021883a 	mov	r16,r2
 1003774:	d8800a17 	ldw	r2,40(sp)
 1003778:	d9400917 	ldw	r5,36(sp)
 100377c:	e009883a 	mov	r4,fp
 1003780:	1545c83a 	sub	r2,r2,r21
 1003784:	d8800a15 	stw	r2,40(sp)
 1003788:	10064700 	call	1006470 <_Bfree>
 100378c:	d8c00a17 	ldw	r3,40(sp)
 1003790:	18009f1e 	bne	r3,zero,1003a10 <_dtoa_r+0xce4>
 1003794:	05c00044 	movi	r23,1
 1003798:	e009883a 	mov	r4,fp
 100379c:	b80b883a 	mov	r5,r23
 10037a0:	10067d40 	call	10067d4 <__i2b>
 10037a4:	d9000d17 	ldw	r4,52(sp)
 10037a8:	102b883a 	mov	r21,r2
 10037ac:	2000ce26 	beq	r4,zero,1003ae8 <_dtoa_r+0xdbc>
 10037b0:	200d883a 	mov	r6,r4
 10037b4:	100b883a 	mov	r5,r2
 10037b8:	e009883a 	mov	r4,fp
 10037bc:	1006a080 	call	1006a08 <__pow5mult>
 10037c0:	d9800317 	ldw	r6,12(sp)
 10037c4:	102b883a 	mov	r21,r2
 10037c8:	b981810e 	bge	r23,r6,1003dd0 <_dtoa_r+0x10a4>
 10037cc:	0027883a 	mov	r19,zero
 10037d0:	a8800417 	ldw	r2,16(r21)
 10037d4:	05c00804 	movi	r23,32
 10037d8:	10800104 	addi	r2,r2,4
 10037dc:	1085883a 	add	r2,r2,r2
 10037e0:	1085883a 	add	r2,r2,r2
 10037e4:	a885883a 	add	r2,r21,r2
 10037e8:	11000017 	ldw	r4,0(r2)
 10037ec:	10066bc0 	call	10066bc <__hi0bits>
 10037f0:	b885c83a 	sub	r2,r23,r2
 10037f4:	1585883a 	add	r2,r2,r22
 10037f8:	108007cc 	andi	r2,r2,31
 10037fc:	1000b326 	beq	r2,zero,1003acc <_dtoa_r+0xda0>
 1003800:	00c00804 	movi	r3,32
 1003804:	1887c83a 	sub	r3,r3,r2
 1003808:	01000104 	movi	r4,4
 100380c:	20c2cd0e 	bge	r4,r3,1004344 <_dtoa_r+0x1618>
 1003810:	00c00704 	movi	r3,28
 1003814:	1885c83a 	sub	r2,r3,r2
 1003818:	d8c00817 	ldw	r3,32(sp)
 100381c:	a0a9883a 	add	r20,r20,r2
 1003820:	b0ad883a 	add	r22,r22,r2
 1003824:	1887883a 	add	r3,r3,r2
 1003828:	d8c00815 	stw	r3,32(sp)
 100382c:	d9800817 	ldw	r6,32(sp)
 1003830:	0180040e 	bge	zero,r6,1003844 <_dtoa_r+0xb18>
 1003834:	800b883a 	mov	r5,r16
 1003838:	e009883a 	mov	r4,fp
 100383c:	1006b480 	call	1006b48 <__lshift>
 1003840:	1021883a 	mov	r16,r2
 1003844:	0580050e 	bge	zero,r22,100385c <_dtoa_r+0xb30>
 1003848:	a80b883a 	mov	r5,r21
 100384c:	b00d883a 	mov	r6,r22
 1003850:	e009883a 	mov	r4,fp
 1003854:	1006b480 	call	1006b48 <__lshift>
 1003858:	102b883a 	mov	r21,r2
 100385c:	d9c00e17 	ldw	r7,56(sp)
 1003860:	3801211e 	bne	r7,zero,1003ce8 <_dtoa_r+0xfbc>
 1003864:	d9800617 	ldw	r6,24(sp)
 1003868:	0181380e 	bge	zero,r6,1003d4c <_dtoa_r+0x1020>
 100386c:	d8c00b17 	ldw	r3,44(sp)
 1003870:	1800ab1e 	bne	r3,zero,1003b20 <_dtoa_r+0xdf4>
 1003874:	dc800717 	ldw	r18,28(sp)
 1003878:	dcc00617 	ldw	r19,24(sp)
 100387c:	9029883a 	mov	r20,r18
 1003880:	00000206 	br	100388c <_dtoa_r+0xb60>
 1003884:	10064980 	call	1006498 <__multadd>
 1003888:	1021883a 	mov	r16,r2
 100388c:	a80b883a 	mov	r5,r21
 1003890:	8009883a 	mov	r4,r16
 1003894:	1002b2c0 	call	1002b2c <quorem>
 1003898:	10800c04 	addi	r2,r2,48
 100389c:	90800005 	stb	r2,0(r18)
 10038a0:	94800044 	addi	r18,r18,1
 10038a4:	9507c83a 	sub	r3,r18,r20
 10038a8:	000f883a 	mov	r7,zero
 10038ac:	01800284 	movi	r6,10
 10038b0:	800b883a 	mov	r5,r16
 10038b4:	e009883a 	mov	r4,fp
 10038b8:	1cfff216 	blt	r3,r19,1003884 <__alt_mem_TCDM+0xff002884>
 10038bc:	1011883a 	mov	r8,r2
 10038c0:	d8800617 	ldw	r2,24(sp)
 10038c4:	0082370e 	bge	zero,r2,10041a4 <_dtoa_r+0x1478>
 10038c8:	d9000717 	ldw	r4,28(sp)
 10038cc:	0025883a 	mov	r18,zero
 10038d0:	20af883a 	add	r23,r4,r2
 10038d4:	01800044 	movi	r6,1
 10038d8:	800b883a 	mov	r5,r16
 10038dc:	e009883a 	mov	r4,fp
 10038e0:	da001715 	stw	r8,92(sp)
 10038e4:	1006b480 	call	1006b48 <__lshift>
 10038e8:	a80b883a 	mov	r5,r21
 10038ec:	1009883a 	mov	r4,r2
 10038f0:	d8800915 	stw	r2,36(sp)
 10038f4:	1006c900 	call	1006c90 <__mcmp>
 10038f8:	da001717 	ldw	r8,92(sp)
 10038fc:	0081800e 	bge	zero,r2,1003f00 <_dtoa_r+0x11d4>
 1003900:	b93fffc3 	ldbu	r4,-1(r23)
 1003904:	b8bfffc4 	addi	r2,r23,-1
 1003908:	1007883a 	mov	r3,r2
 100390c:	01800e44 	movi	r6,57
 1003910:	d9c00717 	ldw	r7,28(sp)
 1003914:	00000506 	br	100392c <_dtoa_r+0xc00>
 1003918:	18ffffc4 	addi	r3,r3,-1
 100391c:	11c12326 	beq	r2,r7,1003dac <_dtoa_r+0x1080>
 1003920:	19000003 	ldbu	r4,0(r3)
 1003924:	102f883a 	mov	r23,r2
 1003928:	10bfffc4 	addi	r2,r2,-1
 100392c:	21403fcc 	andi	r5,r4,255
 1003930:	2940201c 	xori	r5,r5,128
 1003934:	297fe004 	addi	r5,r5,-128
 1003938:	29bff726 	beq	r5,r6,1003918 <__alt_mem_TCDM+0xff002918>
 100393c:	21000044 	addi	r4,r4,1
 1003940:	11000005 	stb	r4,0(r2)
 1003944:	a80b883a 	mov	r5,r21
 1003948:	e009883a 	mov	r4,fp
 100394c:	10064700 	call	1006470 <_Bfree>
 1003950:	883ea026 	beq	r17,zero,10033d4 <__alt_mem_TCDM+0xff0023d4>
 1003954:	90000426 	beq	r18,zero,1003968 <_dtoa_r+0xc3c>
 1003958:	94400326 	beq	r18,r17,1003968 <_dtoa_r+0xc3c>
 100395c:	900b883a 	mov	r5,r18
 1003960:	e009883a 	mov	r4,fp
 1003964:	10064700 	call	1006470 <_Bfree>
 1003968:	880b883a 	mov	r5,r17
 100396c:	e009883a 	mov	r4,fp
 1003970:	10064700 	call	1006470 <_Bfree>
 1003974:	003e9706 	br	10033d4 <__alt_mem_TCDM+0xff0023d4>
 1003978:	01800044 	movi	r6,1
 100397c:	d9800e15 	stw	r6,56(sp)
 1003980:	003d9606 	br	1002fdc <__alt_mem_TCDM+0xff001fdc>
 1003984:	d8800817 	ldw	r2,32(sp)
 1003988:	d8c00517 	ldw	r3,20(sp)
 100398c:	d8000d15 	stw	zero,52(sp)
 1003990:	10c5c83a 	sub	r2,r2,r3
 1003994:	00c9c83a 	sub	r4,zero,r3
 1003998:	d8800815 	stw	r2,32(sp)
 100399c:	d9000a15 	stw	r4,40(sp)
 10039a0:	003d9706 	br	1003000 <__alt_mem_TCDM+0xff002000>
 10039a4:	05adc83a 	sub	r22,zero,r22
 10039a8:	dd800815 	stw	r22,32(sp)
 10039ac:	002d883a 	mov	r22,zero
 10039b0:	003d8e06 	br	1002fec <__alt_mem_TCDM+0xff001fec>
 10039b4:	d9000517 	ldw	r4,20(sp)
 10039b8:	100cc680 	call	100cc68 <__floatsidf>
 10039bc:	100d883a 	mov	r6,r2
 10039c0:	180f883a 	mov	r7,r3
 10039c4:	a009883a 	mov	r4,r20
 10039c8:	880b883a 	mov	r5,r17
 10039cc:	100b97c0 	call	100b97c <__eqdf2>
 10039d0:	103d7126 	beq	r2,zero,1002f98 <__alt_mem_TCDM+0xff001f98>
 10039d4:	d9c00517 	ldw	r7,20(sp)
 10039d8:	39ffffc4 	addi	r7,r7,-1
 10039dc:	d9c00515 	stw	r7,20(sp)
 10039e0:	003d6d06 	br	1002f98 <__alt_mem_TCDM+0xff001f98>
 10039e4:	dd400a17 	ldw	r21,40(sp)
 10039e8:	dd000817 	ldw	r20,32(sp)
 10039ec:	0023883a 	mov	r17,zero
 10039f0:	003f4806 	br	1003714 <__alt_mem_TCDM+0xff002714>
 10039f4:	10e3c83a 	sub	r17,r2,r3
 10039f8:	9448983a 	sll	r4,r18,r17
 10039fc:	003d3206 	br	1002ec8 <__alt_mem_TCDM+0xff001ec8>
 1003a00:	d8000e15 	stw	zero,56(sp)
 1003a04:	003d7506 	br	1002fdc <__alt_mem_TCDM+0xff001fdc>
 1003a08:	b005883a 	mov	r2,r22
 1003a0c:	003f4506 	br	1003724 <__alt_mem_TCDM+0xff002724>
 1003a10:	dc000915 	stw	r16,36(sp)
 1003a14:	d9800a17 	ldw	r6,40(sp)
 1003a18:	d9400917 	ldw	r5,36(sp)
 1003a1c:	e009883a 	mov	r4,fp
 1003a20:	1006a080 	call	1006a08 <__pow5mult>
 1003a24:	1021883a 	mov	r16,r2
 1003a28:	003f5a06 	br	1003794 <__alt_mem_TCDM+0xff002794>
 1003a2c:	01c00044 	movi	r7,1
 1003a30:	d9c00b15 	stw	r7,44(sp)
 1003a34:	d8802217 	ldw	r2,136(sp)
 1003a38:	0081280e 	bge	zero,r2,1003edc <_dtoa_r+0x11b0>
 1003a3c:	100d883a 	mov	r6,r2
 1003a40:	1021883a 	mov	r16,r2
 1003a44:	d8800c15 	stw	r2,48(sp)
 1003a48:	d8800615 	stw	r2,24(sp)
 1003a4c:	003d8806 	br	1003070 <__alt_mem_TCDM+0xff002070>
 1003a50:	d8800617 	ldw	r2,24(sp)
 1003a54:	00be9b16 	blt	zero,r2,10034c4 <__alt_mem_TCDM+0xff0024c4>
 1003a58:	10010f1e 	bne	r2,zero,1003e98 <_dtoa_r+0x116c>
 1003a5c:	880b883a 	mov	r5,r17
 1003a60:	000d883a 	mov	r6,zero
 1003a64:	01d00534 	movhi	r7,16404
 1003a68:	8009883a 	mov	r4,r16
 1003a6c:	100bbd40 	call	100bbd4 <__muldf3>
 1003a70:	900d883a 	mov	r6,r18
 1003a74:	980f883a 	mov	r7,r19
 1003a78:	1009883a 	mov	r4,r2
 1003a7c:	180b883a 	mov	r5,r3
 1003a80:	100ba040 	call	100ba04 <__gedf2>
 1003a84:	002b883a 	mov	r21,zero
 1003a88:	0023883a 	mov	r17,zero
 1003a8c:	1000bf16 	blt	r2,zero,1003d8c <_dtoa_r+0x1060>
 1003a90:	d9802217 	ldw	r6,136(sp)
 1003a94:	ddc00717 	ldw	r23,28(sp)
 1003a98:	018c303a 	nor	r6,zero,r6
 1003a9c:	d9800515 	stw	r6,20(sp)
 1003aa0:	a80b883a 	mov	r5,r21
 1003aa4:	e009883a 	mov	r4,fp
 1003aa8:	10064700 	call	1006470 <_Bfree>
 1003aac:	883e4926 	beq	r17,zero,10033d4 <__alt_mem_TCDM+0xff0023d4>
 1003ab0:	003fad06 	br	1003968 <__alt_mem_TCDM+0xff002968>
 1003ab4:	d9c01117 	ldw	r7,68(sp)
 1003ab8:	3801bc26 	beq	r7,zero,10041ac <_dtoa_r+0x1480>
 1003abc:	10810cc4 	addi	r2,r2,1075
 1003ac0:	dd400a17 	ldw	r21,40(sp)
 1003ac4:	dd000817 	ldw	r20,32(sp)
 1003ac8:	003f0a06 	br	10036f4 <__alt_mem_TCDM+0xff0026f4>
 1003acc:	00800704 	movi	r2,28
 1003ad0:	d9000817 	ldw	r4,32(sp)
 1003ad4:	a0a9883a 	add	r20,r20,r2
 1003ad8:	b0ad883a 	add	r22,r22,r2
 1003adc:	2089883a 	add	r4,r4,r2
 1003ae0:	d9000815 	stw	r4,32(sp)
 1003ae4:	003f5106 	br	100382c <__alt_mem_TCDM+0xff00282c>
 1003ae8:	d8c00317 	ldw	r3,12(sp)
 1003aec:	b8c1fc0e 	bge	r23,r3,10042e0 <_dtoa_r+0x15b4>
 1003af0:	0027883a 	mov	r19,zero
 1003af4:	b805883a 	mov	r2,r23
 1003af8:	003f3e06 	br	10037f4 <__alt_mem_TCDM+0xff0027f4>
 1003afc:	880b883a 	mov	r5,r17
 1003b00:	e009883a 	mov	r4,fp
 1003b04:	000f883a 	mov	r7,zero
 1003b08:	01800284 	movi	r6,10
 1003b0c:	10064980 	call	1006498 <__multadd>
 1003b10:	d9000c17 	ldw	r4,48(sp)
 1003b14:	1023883a 	mov	r17,r2
 1003b18:	0102040e 	bge	zero,r4,100432c <_dtoa_r+0x1600>
 1003b1c:	d9000615 	stw	r4,24(sp)
 1003b20:	0500050e 	bge	zero,r20,1003b38 <_dtoa_r+0xe0c>
 1003b24:	880b883a 	mov	r5,r17
 1003b28:	a00d883a 	mov	r6,r20
 1003b2c:	e009883a 	mov	r4,fp
 1003b30:	1006b480 	call	1006b48 <__lshift>
 1003b34:	1023883a 	mov	r17,r2
 1003b38:	9801241e 	bne	r19,zero,1003fcc <_dtoa_r+0x12a0>
 1003b3c:	8829883a 	mov	r20,r17
 1003b40:	d9000617 	ldw	r4,24(sp)
 1003b44:	dcc00717 	ldw	r19,28(sp)
 1003b48:	9480004c 	andi	r18,r18,1
 1003b4c:	20bfffc4 	addi	r2,r4,-1
 1003b50:	9885883a 	add	r2,r19,r2
 1003b54:	d8800415 	stw	r2,16(sp)
 1003b58:	dc800615 	stw	r18,24(sp)
 1003b5c:	a80b883a 	mov	r5,r21
 1003b60:	8009883a 	mov	r4,r16
 1003b64:	1002b2c0 	call	1002b2c <quorem>
 1003b68:	880b883a 	mov	r5,r17
 1003b6c:	8009883a 	mov	r4,r16
 1003b70:	102f883a 	mov	r23,r2
 1003b74:	1006c900 	call	1006c90 <__mcmp>
 1003b78:	a80b883a 	mov	r5,r21
 1003b7c:	a00d883a 	mov	r6,r20
 1003b80:	e009883a 	mov	r4,fp
 1003b84:	102d883a 	mov	r22,r2
 1003b88:	1006cf00 	call	1006cf0 <__mdiff>
 1003b8c:	1007883a 	mov	r3,r2
 1003b90:	10800317 	ldw	r2,12(r2)
 1003b94:	bc800c04 	addi	r18,r23,48
 1003b98:	180b883a 	mov	r5,r3
 1003b9c:	10004e1e 	bne	r2,zero,1003cd8 <_dtoa_r+0xfac>
 1003ba0:	8009883a 	mov	r4,r16
 1003ba4:	d8c01615 	stw	r3,88(sp)
 1003ba8:	1006c900 	call	1006c90 <__mcmp>
 1003bac:	d8c01617 	ldw	r3,88(sp)
 1003bb0:	e009883a 	mov	r4,fp
 1003bb4:	d8801615 	stw	r2,88(sp)
 1003bb8:	180b883a 	mov	r5,r3
 1003bbc:	10064700 	call	1006470 <_Bfree>
 1003bc0:	d8801617 	ldw	r2,88(sp)
 1003bc4:	1000041e 	bne	r2,zero,1003bd8 <_dtoa_r+0xeac>
 1003bc8:	d9800317 	ldw	r6,12(sp)
 1003bcc:	3000021e 	bne	r6,zero,1003bd8 <_dtoa_r+0xeac>
 1003bd0:	d8c00617 	ldw	r3,24(sp)
 1003bd4:	18003726 	beq	r3,zero,1003cb4 <_dtoa_r+0xf88>
 1003bd8:	b0002016 	blt	r22,zero,1003c5c <_dtoa_r+0xf30>
 1003bdc:	b000041e 	bne	r22,zero,1003bf0 <_dtoa_r+0xec4>
 1003be0:	d9000317 	ldw	r4,12(sp)
 1003be4:	2000021e 	bne	r4,zero,1003bf0 <_dtoa_r+0xec4>
 1003be8:	d8c00617 	ldw	r3,24(sp)
 1003bec:	18001b26 	beq	r3,zero,1003c5c <_dtoa_r+0xf30>
 1003bf0:	00810716 	blt	zero,r2,1004010 <_dtoa_r+0x12e4>
 1003bf4:	d8c00417 	ldw	r3,16(sp)
 1003bf8:	9d800044 	addi	r22,r19,1
 1003bfc:	9c800005 	stb	r18,0(r19)
 1003c00:	b02f883a 	mov	r23,r22
 1003c04:	98c10626 	beq	r19,r3,1004020 <_dtoa_r+0x12f4>
 1003c08:	800b883a 	mov	r5,r16
 1003c0c:	000f883a 	mov	r7,zero
 1003c10:	01800284 	movi	r6,10
 1003c14:	e009883a 	mov	r4,fp
 1003c18:	10064980 	call	1006498 <__multadd>
 1003c1c:	1021883a 	mov	r16,r2
 1003c20:	000f883a 	mov	r7,zero
 1003c24:	01800284 	movi	r6,10
 1003c28:	880b883a 	mov	r5,r17
 1003c2c:	e009883a 	mov	r4,fp
 1003c30:	8d002526 	beq	r17,r20,1003cc8 <_dtoa_r+0xf9c>
 1003c34:	10064980 	call	1006498 <__multadd>
 1003c38:	a00b883a 	mov	r5,r20
 1003c3c:	000f883a 	mov	r7,zero
 1003c40:	01800284 	movi	r6,10
 1003c44:	e009883a 	mov	r4,fp
 1003c48:	1023883a 	mov	r17,r2
 1003c4c:	10064980 	call	1006498 <__multadd>
 1003c50:	1029883a 	mov	r20,r2
 1003c54:	b027883a 	mov	r19,r22
 1003c58:	003fc006 	br	1003b5c <__alt_mem_TCDM+0xff002b5c>
 1003c5c:	9011883a 	mov	r8,r18
 1003c60:	00800e0e 	bge	zero,r2,1003c9c <_dtoa_r+0xf70>
 1003c64:	800b883a 	mov	r5,r16
 1003c68:	01800044 	movi	r6,1
 1003c6c:	e009883a 	mov	r4,fp
 1003c70:	da001715 	stw	r8,92(sp)
 1003c74:	1006b480 	call	1006b48 <__lshift>
 1003c78:	a80b883a 	mov	r5,r21
 1003c7c:	1009883a 	mov	r4,r2
 1003c80:	1021883a 	mov	r16,r2
 1003c84:	1006c900 	call	1006c90 <__mcmp>
 1003c88:	da001717 	ldw	r8,92(sp)
 1003c8c:	0081960e 	bge	zero,r2,10042e8 <_dtoa_r+0x15bc>
 1003c90:	00800e44 	movi	r2,57
 1003c94:	40817026 	beq	r8,r2,1004258 <_dtoa_r+0x152c>
 1003c98:	ba000c44 	addi	r8,r23,49
 1003c9c:	8825883a 	mov	r18,r17
 1003ca0:	9dc00044 	addi	r23,r19,1
 1003ca4:	9a000005 	stb	r8,0(r19)
 1003ca8:	a023883a 	mov	r17,r20
 1003cac:	dc000915 	stw	r16,36(sp)
 1003cb0:	003f2406 	br	1003944 <__alt_mem_TCDM+0xff002944>
 1003cb4:	00800e44 	movi	r2,57
 1003cb8:	9011883a 	mov	r8,r18
 1003cbc:	90816626 	beq	r18,r2,1004258 <_dtoa_r+0x152c>
 1003cc0:	05bff516 	blt	zero,r22,1003c98 <__alt_mem_TCDM+0xff002c98>
 1003cc4:	003ff506 	br	1003c9c <__alt_mem_TCDM+0xff002c9c>
 1003cc8:	10064980 	call	1006498 <__multadd>
 1003ccc:	1023883a 	mov	r17,r2
 1003cd0:	1029883a 	mov	r20,r2
 1003cd4:	003fdf06 	br	1003c54 <__alt_mem_TCDM+0xff002c54>
 1003cd8:	e009883a 	mov	r4,fp
 1003cdc:	10064700 	call	1006470 <_Bfree>
 1003ce0:	00800044 	movi	r2,1
 1003ce4:	003fbc06 	br	1003bd8 <__alt_mem_TCDM+0xff002bd8>
 1003ce8:	a80b883a 	mov	r5,r21
 1003cec:	8009883a 	mov	r4,r16
 1003cf0:	1006c900 	call	1006c90 <__mcmp>
 1003cf4:	103edb0e 	bge	r2,zero,1003864 <__alt_mem_TCDM+0xff002864>
 1003cf8:	800b883a 	mov	r5,r16
 1003cfc:	000f883a 	mov	r7,zero
 1003d00:	01800284 	movi	r6,10
 1003d04:	e009883a 	mov	r4,fp
 1003d08:	10064980 	call	1006498 <__multadd>
 1003d0c:	1021883a 	mov	r16,r2
 1003d10:	d8800517 	ldw	r2,20(sp)
 1003d14:	d8c00b17 	ldw	r3,44(sp)
 1003d18:	10bfffc4 	addi	r2,r2,-1
 1003d1c:	d8800515 	stw	r2,20(sp)
 1003d20:	183f761e 	bne	r3,zero,1003afc <__alt_mem_TCDM+0xff002afc>
 1003d24:	d9000c17 	ldw	r4,48(sp)
 1003d28:	0101730e 	bge	zero,r4,10042f8 <_dtoa_r+0x15cc>
 1003d2c:	d9000615 	stw	r4,24(sp)
 1003d30:	003ed006 	br	1003874 <__alt_mem_TCDM+0xff002874>
 1003d34:	00800084 	movi	r2,2
 1003d38:	3081861e 	bne	r6,r2,1004354 <_dtoa_r+0x1628>
 1003d3c:	d8000b15 	stw	zero,44(sp)
 1003d40:	003f3c06 	br	1003a34 <__alt_mem_TCDM+0xff002a34>
 1003d44:	dc000917 	ldw	r16,36(sp)
 1003d48:	003e9206 	br	1003794 <__alt_mem_TCDM+0xff002794>
 1003d4c:	d9c00317 	ldw	r7,12(sp)
 1003d50:	00800084 	movi	r2,2
 1003d54:	11fec50e 	bge	r2,r7,100386c <__alt_mem_TCDM+0xff00286c>
 1003d58:	d9000617 	ldw	r4,24(sp)
 1003d5c:	20013c1e 	bne	r4,zero,1004250 <_dtoa_r+0x1524>
 1003d60:	a80b883a 	mov	r5,r21
 1003d64:	000f883a 	mov	r7,zero
 1003d68:	01800144 	movi	r6,5
 1003d6c:	e009883a 	mov	r4,fp
 1003d70:	10064980 	call	1006498 <__multadd>
 1003d74:	100b883a 	mov	r5,r2
 1003d78:	8009883a 	mov	r4,r16
 1003d7c:	102b883a 	mov	r21,r2
 1003d80:	1006c900 	call	1006c90 <__mcmp>
 1003d84:	dc000915 	stw	r16,36(sp)
 1003d88:	00bf410e 	bge	zero,r2,1003a90 <__alt_mem_TCDM+0xff002a90>
 1003d8c:	d9c00717 	ldw	r7,28(sp)
 1003d90:	00800c44 	movi	r2,49
 1003d94:	38800005 	stb	r2,0(r7)
 1003d98:	d8800517 	ldw	r2,20(sp)
 1003d9c:	3dc00044 	addi	r23,r7,1
 1003da0:	10800044 	addi	r2,r2,1
 1003da4:	d8800515 	stw	r2,20(sp)
 1003da8:	003f3d06 	br	1003aa0 <__alt_mem_TCDM+0xff002aa0>
 1003dac:	d9800517 	ldw	r6,20(sp)
 1003db0:	d9c00717 	ldw	r7,28(sp)
 1003db4:	00800c44 	movi	r2,49
 1003db8:	31800044 	addi	r6,r6,1
 1003dbc:	d9800515 	stw	r6,20(sp)
 1003dc0:	38800005 	stb	r2,0(r7)
 1003dc4:	003edf06 	br	1003944 <__alt_mem_TCDM+0xff002944>
 1003dc8:	d8000b15 	stw	zero,44(sp)
 1003dcc:	003c9f06 	br	100304c <__alt_mem_TCDM+0xff00204c>
 1003dd0:	903e7e1e 	bne	r18,zero,10037cc <__alt_mem_TCDM+0xff0027cc>
 1003dd4:	00800434 	movhi	r2,16
 1003dd8:	10bfffc4 	addi	r2,r2,-1
 1003ddc:	9884703a 	and	r2,r19,r2
 1003de0:	1000ea1e 	bne	r2,zero,100418c <_dtoa_r+0x1460>
 1003de4:	9cdffc2c 	andhi	r19,r19,32752
 1003de8:	9800e826 	beq	r19,zero,100418c <_dtoa_r+0x1460>
 1003dec:	d9c00817 	ldw	r7,32(sp)
 1003df0:	b5800044 	addi	r22,r22,1
 1003df4:	04c00044 	movi	r19,1
 1003df8:	39c00044 	addi	r7,r7,1
 1003dfc:	d9c00815 	stw	r7,32(sp)
 1003e00:	d8800d17 	ldw	r2,52(sp)
 1003e04:	103e721e 	bne	r2,zero,10037d0 <__alt_mem_TCDM+0xff0027d0>
 1003e08:	00800044 	movi	r2,1
 1003e0c:	003e7906 	br	10037f4 <__alt_mem_TCDM+0xff0027f4>
 1003e10:	8009883a 	mov	r4,r16
 1003e14:	100cc680 	call	100cc68 <__floatsidf>
 1003e18:	d9800f17 	ldw	r6,60(sp)
 1003e1c:	d9c01017 	ldw	r7,64(sp)
 1003e20:	1009883a 	mov	r4,r2
 1003e24:	180b883a 	mov	r5,r3
 1003e28:	100bbd40 	call	100bbd4 <__muldf3>
 1003e2c:	000d883a 	mov	r6,zero
 1003e30:	01d00734 	movhi	r7,16412
 1003e34:	1009883a 	mov	r4,r2
 1003e38:	180b883a 	mov	r5,r3
 1003e3c:	100a7e80 	call	100a7e8 <__adddf3>
 1003e40:	047f3034 	movhi	r17,64704
 1003e44:	1021883a 	mov	r16,r2
 1003e48:	1c63883a 	add	r17,r3,r17
 1003e4c:	d9000f17 	ldw	r4,60(sp)
 1003e50:	d9401017 	ldw	r5,64(sp)
 1003e54:	000d883a 	mov	r6,zero
 1003e58:	01d00534 	movhi	r7,16404
 1003e5c:	100c2ec0 	call	100c2ec <__subdf3>
 1003e60:	800d883a 	mov	r6,r16
 1003e64:	880f883a 	mov	r7,r17
 1003e68:	1009883a 	mov	r4,r2
 1003e6c:	180b883a 	mov	r5,r3
 1003e70:	102b883a 	mov	r21,r2
 1003e74:	1829883a 	mov	r20,r3
 1003e78:	100ba040 	call	100ba04 <__gedf2>
 1003e7c:	00806c16 	blt	zero,r2,1004030 <_dtoa_r+0x1304>
 1003e80:	89e0003c 	xorhi	r7,r17,32768
 1003e84:	800d883a 	mov	r6,r16
 1003e88:	a809883a 	mov	r4,r21
 1003e8c:	a00b883a 	mov	r5,r20
 1003e90:	100bae00 	call	100bae0 <__ledf2>
 1003e94:	103d7e0e 	bge	r2,zero,1003490 <__alt_mem_TCDM+0xff002490>
 1003e98:	002b883a 	mov	r21,zero
 1003e9c:	0023883a 	mov	r17,zero
 1003ea0:	003efb06 	br	1003a90 <__alt_mem_TCDM+0xff002a90>
 1003ea4:	d8800717 	ldw	r2,28(sp)
 1003ea8:	003bd006 	br	1002dec <__alt_mem_TCDM+0xff001dec>
 1003eac:	d9000a17 	ldw	r4,40(sp)
 1003eb0:	d9800d17 	ldw	r6,52(sp)
 1003eb4:	dd400a15 	stw	r21,40(sp)
 1003eb8:	a905c83a 	sub	r2,r21,r4
 1003ebc:	308d883a 	add	r6,r6,r2
 1003ec0:	d9800d15 	stw	r6,52(sp)
 1003ec4:	002b883a 	mov	r21,zero
 1003ec8:	003e0606 	br	10036e4 <__alt_mem_TCDM+0xff0026e4>
 1003ecc:	9023883a 	mov	r17,r18
 1003ed0:	9829883a 	mov	r20,r19
 1003ed4:	04000084 	movi	r16,2
 1003ed8:	003c9206 	br	1003124 <__alt_mem_TCDM+0xff002124>
 1003edc:	04000044 	movi	r16,1
 1003ee0:	dc000c15 	stw	r16,48(sp)
 1003ee4:	dc000615 	stw	r16,24(sp)
 1003ee8:	dc002215 	stw	r16,136(sp)
 1003eec:	e0001115 	stw	zero,68(fp)
 1003ef0:	000b883a 	mov	r5,zero
 1003ef4:	003c6906 	br	100309c <__alt_mem_TCDM+0xff00209c>
 1003ef8:	3021883a 	mov	r16,r6
 1003efc:	003ffb06 	br	1003eec <__alt_mem_TCDM+0xff002eec>
 1003f00:	1000021e 	bne	r2,zero,1003f0c <_dtoa_r+0x11e0>
 1003f04:	4200004c 	andi	r8,r8,1
 1003f08:	403e7d1e 	bne	r8,zero,1003900 <__alt_mem_TCDM+0xff002900>
 1003f0c:	01000c04 	movi	r4,48
 1003f10:	00000106 	br	1003f18 <_dtoa_r+0x11ec>
 1003f14:	102f883a 	mov	r23,r2
 1003f18:	b8bfffc4 	addi	r2,r23,-1
 1003f1c:	10c00007 	ldb	r3,0(r2)
 1003f20:	193ffc26 	beq	r3,r4,1003f14 <__alt_mem_TCDM+0xff002f14>
 1003f24:	003e8706 	br	1003944 <__alt_mem_TCDM+0xff002944>
 1003f28:	d8800517 	ldw	r2,20(sp)
 1003f2c:	00a3c83a 	sub	r17,zero,r2
 1003f30:	8800a426 	beq	r17,zero,10041c4 <_dtoa_r+0x1498>
 1003f34:	888003cc 	andi	r2,r17,15
 1003f38:	100490fa 	slli	r2,r2,3
 1003f3c:	00c04074 	movhi	r3,257
 1003f40:	18ff8d04 	addi	r3,r3,-460
 1003f44:	1885883a 	add	r2,r3,r2
 1003f48:	11800017 	ldw	r6,0(r2)
 1003f4c:	11c00117 	ldw	r7,4(r2)
 1003f50:	9009883a 	mov	r4,r18
 1003f54:	980b883a 	mov	r5,r19
 1003f58:	8823d13a 	srai	r17,r17,4
 1003f5c:	100bbd40 	call	100bbd4 <__muldf3>
 1003f60:	d8800f15 	stw	r2,60(sp)
 1003f64:	d8c01015 	stw	r3,64(sp)
 1003f68:	8800e826 	beq	r17,zero,100430c <_dtoa_r+0x15e0>
 1003f6c:	05004074 	movhi	r20,257
 1003f70:	a53f8304 	addi	r20,r20,-500
 1003f74:	04000084 	movi	r16,2
 1003f78:	8980004c 	andi	r6,r17,1
 1003f7c:	1009883a 	mov	r4,r2
 1003f80:	8823d07a 	srai	r17,r17,1
 1003f84:	180b883a 	mov	r5,r3
 1003f88:	30000426 	beq	r6,zero,1003f9c <_dtoa_r+0x1270>
 1003f8c:	a1800017 	ldw	r6,0(r20)
 1003f90:	a1c00117 	ldw	r7,4(r20)
 1003f94:	84000044 	addi	r16,r16,1
 1003f98:	100bbd40 	call	100bbd4 <__muldf3>
 1003f9c:	a5000204 	addi	r20,r20,8
 1003fa0:	883ff51e 	bne	r17,zero,1003f78 <__alt_mem_TCDM+0xff002f78>
 1003fa4:	d8800f15 	stw	r2,60(sp)
 1003fa8:	d8c01015 	stw	r3,64(sp)
 1003fac:	003c7606 	br	1003188 <__alt_mem_TCDM+0xff002188>
 1003fb0:	00c00c04 	movi	r3,48
 1003fb4:	10c00005 	stb	r3,0(r2)
 1003fb8:	d8c00517 	ldw	r3,20(sp)
 1003fbc:	bd3fffc3 	ldbu	r20,-1(r23)
 1003fc0:	18c00044 	addi	r3,r3,1
 1003fc4:	d8c00515 	stw	r3,20(sp)
 1003fc8:	003db906 	br	10036b0 <__alt_mem_TCDM+0xff0026b0>
 1003fcc:	89400117 	ldw	r5,4(r17)
 1003fd0:	e009883a 	mov	r4,fp
 1003fd4:	10063c80 	call	10063c8 <_Balloc>
 1003fd8:	89800417 	ldw	r6,16(r17)
 1003fdc:	89400304 	addi	r5,r17,12
 1003fe0:	11000304 	addi	r4,r2,12
 1003fe4:	31800084 	addi	r6,r6,2
 1003fe8:	318d883a 	add	r6,r6,r6
 1003fec:	318d883a 	add	r6,r6,r6
 1003ff0:	1027883a 	mov	r19,r2
 1003ff4:	1005ffc0 	call	1005ffc <memcpy>
 1003ff8:	01800044 	movi	r6,1
 1003ffc:	980b883a 	mov	r5,r19
 1004000:	e009883a 	mov	r4,fp
 1004004:	1006b480 	call	1006b48 <__lshift>
 1004008:	1029883a 	mov	r20,r2
 100400c:	003ecc06 	br	1003b40 <__alt_mem_TCDM+0xff002b40>
 1004010:	00800e44 	movi	r2,57
 1004014:	90809026 	beq	r18,r2,1004258 <_dtoa_r+0x152c>
 1004018:	92000044 	addi	r8,r18,1
 100401c:	003f1f06 	br	1003c9c <__alt_mem_TCDM+0xff002c9c>
 1004020:	9011883a 	mov	r8,r18
 1004024:	8825883a 	mov	r18,r17
 1004028:	a023883a 	mov	r17,r20
 100402c:	003e2906 	br	10038d4 <__alt_mem_TCDM+0xff0028d4>
 1004030:	002b883a 	mov	r21,zero
 1004034:	0023883a 	mov	r17,zero
 1004038:	003f5406 	br	1003d8c <__alt_mem_TCDM+0xff002d8c>
 100403c:	61bfffc4 	addi	r6,r12,-1
 1004040:	300490fa 	slli	r2,r6,3
 1004044:	00c04074 	movhi	r3,257
 1004048:	18ff8d04 	addi	r3,r3,-460
 100404c:	1885883a 	add	r2,r3,r2
 1004050:	11000017 	ldw	r4,0(r2)
 1004054:	11400117 	ldw	r5,4(r2)
 1004058:	d8800717 	ldw	r2,28(sp)
 100405c:	880f883a 	mov	r7,r17
 1004060:	d9801215 	stw	r6,72(sp)
 1004064:	800d883a 	mov	r6,r16
 1004068:	db001615 	stw	r12,88(sp)
 100406c:	15c00044 	addi	r23,r2,1
 1004070:	100bbd40 	call	100bbd4 <__muldf3>
 1004074:	d9401017 	ldw	r5,64(sp)
 1004078:	d9000f17 	ldw	r4,60(sp)
 100407c:	d8c01515 	stw	r3,84(sp)
 1004080:	d8801415 	stw	r2,80(sp)
 1004084:	100cbe80 	call	100cbe8 <__fixdfsi>
 1004088:	1009883a 	mov	r4,r2
 100408c:	1021883a 	mov	r16,r2
 1004090:	100cc680 	call	100cc68 <__floatsidf>
 1004094:	d9000f17 	ldw	r4,60(sp)
 1004098:	d9401017 	ldw	r5,64(sp)
 100409c:	100d883a 	mov	r6,r2
 10040a0:	180f883a 	mov	r7,r3
 10040a4:	100c2ec0 	call	100c2ec <__subdf3>
 10040a8:	1829883a 	mov	r20,r3
 10040ac:	d8c00717 	ldw	r3,28(sp)
 10040b0:	84000c04 	addi	r16,r16,48
 10040b4:	1023883a 	mov	r17,r2
 10040b8:	1c000005 	stb	r16,0(r3)
 10040bc:	db001617 	ldw	r12,88(sp)
 10040c0:	00800044 	movi	r2,1
 10040c4:	60802226 	beq	r12,r2,1004150 <_dtoa_r+0x1424>
 10040c8:	d9c00717 	ldw	r7,28(sp)
 10040cc:	8805883a 	mov	r2,r17
 10040d0:	b82b883a 	mov	r21,r23
 10040d4:	3b19883a 	add	r12,r7,r12
 10040d8:	6023883a 	mov	r17,r12
 10040dc:	a007883a 	mov	r3,r20
 10040e0:	dc800f15 	stw	r18,60(sp)
 10040e4:	000d883a 	mov	r6,zero
 10040e8:	01d00934 	movhi	r7,16420
 10040ec:	1009883a 	mov	r4,r2
 10040f0:	180b883a 	mov	r5,r3
 10040f4:	100bbd40 	call	100bbd4 <__muldf3>
 10040f8:	180b883a 	mov	r5,r3
 10040fc:	1009883a 	mov	r4,r2
 1004100:	1829883a 	mov	r20,r3
 1004104:	1025883a 	mov	r18,r2
 1004108:	100cbe80 	call	100cbe8 <__fixdfsi>
 100410c:	1009883a 	mov	r4,r2
 1004110:	1021883a 	mov	r16,r2
 1004114:	100cc680 	call	100cc68 <__floatsidf>
 1004118:	100d883a 	mov	r6,r2
 100411c:	180f883a 	mov	r7,r3
 1004120:	9009883a 	mov	r4,r18
 1004124:	a00b883a 	mov	r5,r20
 1004128:	84000c04 	addi	r16,r16,48
 100412c:	100c2ec0 	call	100c2ec <__subdf3>
 1004130:	ad400044 	addi	r21,r21,1
 1004134:	ac3fffc5 	stb	r16,-1(r21)
 1004138:	ac7fea1e 	bne	r21,r17,10040e4 <__alt_mem_TCDM+0xff0030e4>
 100413c:	1023883a 	mov	r17,r2
 1004140:	d8801217 	ldw	r2,72(sp)
 1004144:	dc800f17 	ldw	r18,60(sp)
 1004148:	1829883a 	mov	r20,r3
 100414c:	b8af883a 	add	r23,r23,r2
 1004150:	d9001417 	ldw	r4,80(sp)
 1004154:	d9401517 	ldw	r5,84(sp)
 1004158:	000d883a 	mov	r6,zero
 100415c:	01cff834 	movhi	r7,16352
 1004160:	100a7e80 	call	100a7e8 <__adddf3>
 1004164:	880d883a 	mov	r6,r17
 1004168:	a00f883a 	mov	r7,r20
 100416c:	1009883a 	mov	r4,r2
 1004170:	180b883a 	mov	r5,r3
 1004174:	100bae00 	call	100bae0 <__ledf2>
 1004178:	10003e0e 	bge	r2,zero,1004274 <_dtoa_r+0x1548>
 100417c:	d9001317 	ldw	r4,76(sp)
 1004180:	bd3fffc3 	ldbu	r20,-1(r23)
 1004184:	d9000515 	stw	r4,20(sp)
 1004188:	003d3b06 	br	1003678 <__alt_mem_TCDM+0xff002678>
 100418c:	0027883a 	mov	r19,zero
 1004190:	003f1b06 	br	1003e00 <__alt_mem_TCDM+0xff002e00>
 1004194:	d8800817 	ldw	r2,32(sp)
 1004198:	11e9c83a 	sub	r20,r2,r7
 100419c:	0005883a 	mov	r2,zero
 10041a0:	003d5406 	br	10036f4 <__alt_mem_TCDM+0xff0026f4>
 10041a4:	00800044 	movi	r2,1
 10041a8:	003dc706 	br	10038c8 <__alt_mem_TCDM+0xff0028c8>
 10041ac:	d8c00217 	ldw	r3,8(sp)
 10041b0:	00800d84 	movi	r2,54
 10041b4:	dd400a17 	ldw	r21,40(sp)
 10041b8:	10c5c83a 	sub	r2,r2,r3
 10041bc:	dd000817 	ldw	r20,32(sp)
 10041c0:	003d4c06 	br	10036f4 <__alt_mem_TCDM+0xff0026f4>
 10041c4:	dc800f15 	stw	r18,60(sp)
 10041c8:	dcc01015 	stw	r19,64(sp)
 10041cc:	04000084 	movi	r16,2
 10041d0:	003bed06 	br	1003188 <__alt_mem_TCDM+0xff002188>
 10041d4:	d9000617 	ldw	r4,24(sp)
 10041d8:	203f0d26 	beq	r4,zero,1003e10 <__alt_mem_TCDM+0xff002e10>
 10041dc:	d9800c17 	ldw	r6,48(sp)
 10041e0:	01bcab0e 	bge	zero,r6,1003490 <__alt_mem_TCDM+0xff002490>
 10041e4:	d9401017 	ldw	r5,64(sp)
 10041e8:	d9000f17 	ldw	r4,60(sp)
 10041ec:	000d883a 	mov	r6,zero
 10041f0:	01d00934 	movhi	r7,16420
 10041f4:	100bbd40 	call	100bbd4 <__muldf3>
 10041f8:	81000044 	addi	r4,r16,1
 10041fc:	d8800f15 	stw	r2,60(sp)
 1004200:	d8c01015 	stw	r3,64(sp)
 1004204:	100cc680 	call	100cc68 <__floatsidf>
 1004208:	d9800f17 	ldw	r6,60(sp)
 100420c:	d9c01017 	ldw	r7,64(sp)
 1004210:	1009883a 	mov	r4,r2
 1004214:	180b883a 	mov	r5,r3
 1004218:	100bbd40 	call	100bbd4 <__muldf3>
 100421c:	01d00734 	movhi	r7,16412
 1004220:	000d883a 	mov	r6,zero
 1004224:	1009883a 	mov	r4,r2
 1004228:	180b883a 	mov	r5,r3
 100422c:	100a7e80 	call	100a7e8 <__adddf3>
 1004230:	d9c00517 	ldw	r7,20(sp)
 1004234:	047f3034 	movhi	r17,64704
 1004238:	1021883a 	mov	r16,r2
 100423c:	39ffffc4 	addi	r7,r7,-1
 1004240:	d9c01315 	stw	r7,76(sp)
 1004244:	1c63883a 	add	r17,r3,r17
 1004248:	db000c17 	ldw	r12,48(sp)
 100424c:	003bea06 	br	10031f8 <__alt_mem_TCDM+0xff0021f8>
 1004250:	dc000915 	stw	r16,36(sp)
 1004254:	003e0e06 	br	1003a90 <__alt_mem_TCDM+0xff002a90>
 1004258:	01000e44 	movi	r4,57
 100425c:	8825883a 	mov	r18,r17
 1004260:	9dc00044 	addi	r23,r19,1
 1004264:	99000005 	stb	r4,0(r19)
 1004268:	a023883a 	mov	r17,r20
 100426c:	dc000915 	stw	r16,36(sp)
 1004270:	003da406 	br	1003904 <__alt_mem_TCDM+0xff002904>
 1004274:	d9801417 	ldw	r6,80(sp)
 1004278:	d9c01517 	ldw	r7,84(sp)
 100427c:	0009883a 	mov	r4,zero
 1004280:	014ff834 	movhi	r5,16352
 1004284:	100c2ec0 	call	100c2ec <__subdf3>
 1004288:	880d883a 	mov	r6,r17
 100428c:	a00f883a 	mov	r7,r20
 1004290:	1009883a 	mov	r4,r2
 1004294:	180b883a 	mov	r5,r3
 1004298:	100ba040 	call	100ba04 <__gedf2>
 100429c:	00bc7c0e 	bge	zero,r2,1003490 <__alt_mem_TCDM+0xff002490>
 10042a0:	01000c04 	movi	r4,48
 10042a4:	00000106 	br	10042ac <_dtoa_r+0x1580>
 10042a8:	102f883a 	mov	r23,r2
 10042ac:	b8bfffc4 	addi	r2,r23,-1
 10042b0:	10c00007 	ldb	r3,0(r2)
 10042b4:	193ffc26 	beq	r3,r4,10042a8 <__alt_mem_TCDM+0xff0032a8>
 10042b8:	d9801317 	ldw	r6,76(sp)
 10042bc:	d9800515 	stw	r6,20(sp)
 10042c0:	003c4406 	br	10033d4 <__alt_mem_TCDM+0xff0023d4>
 10042c4:	d9801317 	ldw	r6,76(sp)
 10042c8:	d9800515 	stw	r6,20(sp)
 10042cc:	003cea06 	br	1003678 <__alt_mem_TCDM+0xff002678>
 10042d0:	dd800f17 	ldw	r22,60(sp)
 10042d4:	dcc01017 	ldw	r19,64(sp)
 10042d8:	dc801217 	ldw	r18,72(sp)
 10042dc:	003c6c06 	br	1003490 <__alt_mem_TCDM+0xff002490>
 10042e0:	903e031e 	bne	r18,zero,1003af0 <__alt_mem_TCDM+0xff002af0>
 10042e4:	003ebb06 	br	1003dd4 <__alt_mem_TCDM+0xff002dd4>
 10042e8:	103e6c1e 	bne	r2,zero,1003c9c <__alt_mem_TCDM+0xff002c9c>
 10042ec:	4080004c 	andi	r2,r8,1
 10042f0:	103e6a26 	beq	r2,zero,1003c9c <__alt_mem_TCDM+0xff002c9c>
 10042f4:	003e6606 	br	1003c90 <__alt_mem_TCDM+0xff002c90>
 10042f8:	d8c00317 	ldw	r3,12(sp)
 10042fc:	00800084 	movi	r2,2
 1004300:	10c02916 	blt	r2,r3,10043a8 <_dtoa_r+0x167c>
 1004304:	d9000c17 	ldw	r4,48(sp)
 1004308:	003e8806 	br	1003d2c <__alt_mem_TCDM+0xff002d2c>
 100430c:	04000084 	movi	r16,2
 1004310:	003b9d06 	br	1003188 <__alt_mem_TCDM+0xff002188>
 1004314:	d9001317 	ldw	r4,76(sp)
 1004318:	d9000515 	stw	r4,20(sp)
 100431c:	003cd606 	br	1003678 <__alt_mem_TCDM+0xff002678>
 1004320:	d8801317 	ldw	r2,76(sp)
 1004324:	d8800515 	stw	r2,20(sp)
 1004328:	003c2a06 	br	10033d4 <__alt_mem_TCDM+0xff0023d4>
 100432c:	d9800317 	ldw	r6,12(sp)
 1004330:	00800084 	movi	r2,2
 1004334:	11801516 	blt	r2,r6,100438c <_dtoa_r+0x1660>
 1004338:	d9c00c17 	ldw	r7,48(sp)
 100433c:	d9c00615 	stw	r7,24(sp)
 1004340:	003df706 	br	1003b20 <__alt_mem_TCDM+0xff002b20>
 1004344:	193d3926 	beq	r3,r4,100382c <__alt_mem_TCDM+0xff00282c>
 1004348:	00c00f04 	movi	r3,60
 100434c:	1885c83a 	sub	r2,r3,r2
 1004350:	003ddf06 	br	1003ad0 <__alt_mem_TCDM+0xff002ad0>
 1004354:	e009883a 	mov	r4,fp
 1004358:	e0001115 	stw	zero,68(fp)
 100435c:	000b883a 	mov	r5,zero
 1004360:	10063c80 	call	10063c8 <_Balloc>
 1004364:	d8800715 	stw	r2,28(sp)
 1004368:	d8c00717 	ldw	r3,28(sp)
 100436c:	00bfffc4 	movi	r2,-1
 1004370:	01000044 	movi	r4,1
 1004374:	d8800c15 	stw	r2,48(sp)
 1004378:	e0c01015 	stw	r3,64(fp)
 100437c:	d9000b15 	stw	r4,44(sp)
 1004380:	d8800615 	stw	r2,24(sp)
 1004384:	d8002215 	stw	zero,136(sp)
 1004388:	003c4106 	br	1003490 <__alt_mem_TCDM+0xff002490>
 100438c:	d8c00c17 	ldw	r3,48(sp)
 1004390:	d8c00615 	stw	r3,24(sp)
 1004394:	003e7006 	br	1003d58 <__alt_mem_TCDM+0xff002d58>
 1004398:	04400044 	movi	r17,1
 100439c:	003b2006 	br	1003020 <__alt_mem_TCDM+0xff002020>
 10043a0:	000b883a 	mov	r5,zero
 10043a4:	003b3d06 	br	100309c <__alt_mem_TCDM+0xff00209c>
 10043a8:	d8800c17 	ldw	r2,48(sp)
 10043ac:	d8800615 	stw	r2,24(sp)
 10043b0:	003e6906 	br	1003d58 <__alt_mem_TCDM+0xff002d58>

010043b4 <__sflush_r>:
 10043b4:	2880030b 	ldhu	r2,12(r5)
 10043b8:	defffb04 	addi	sp,sp,-20
 10043bc:	dcc00315 	stw	r19,12(sp)
 10043c0:	dc400115 	stw	r17,4(sp)
 10043c4:	dfc00415 	stw	ra,16(sp)
 10043c8:	dc800215 	stw	r18,8(sp)
 10043cc:	dc000015 	stw	r16,0(sp)
 10043d0:	10c0020c 	andi	r3,r2,8
 10043d4:	2823883a 	mov	r17,r5
 10043d8:	2027883a 	mov	r19,r4
 10043dc:	1800311e 	bne	r3,zero,10044a4 <__sflush_r+0xf0>
 10043e0:	28c00117 	ldw	r3,4(r5)
 10043e4:	10820014 	ori	r2,r2,2048
 10043e8:	2880030d 	sth	r2,12(r5)
 10043ec:	00c04b0e 	bge	zero,r3,100451c <__sflush_r+0x168>
 10043f0:	8a000a17 	ldw	r8,40(r17)
 10043f4:	40002326 	beq	r8,zero,1004484 <__sflush_r+0xd0>
 10043f8:	9c000017 	ldw	r16,0(r19)
 10043fc:	10c4000c 	andi	r3,r2,4096
 1004400:	98000015 	stw	zero,0(r19)
 1004404:	18004826 	beq	r3,zero,1004528 <__sflush_r+0x174>
 1004408:	89801417 	ldw	r6,80(r17)
 100440c:	10c0010c 	andi	r3,r2,4
 1004410:	18000626 	beq	r3,zero,100442c <__sflush_r+0x78>
 1004414:	88c00117 	ldw	r3,4(r17)
 1004418:	88800c17 	ldw	r2,48(r17)
 100441c:	30cdc83a 	sub	r6,r6,r3
 1004420:	10000226 	beq	r2,zero,100442c <__sflush_r+0x78>
 1004424:	88800f17 	ldw	r2,60(r17)
 1004428:	308dc83a 	sub	r6,r6,r2
 100442c:	89400717 	ldw	r5,28(r17)
 1004430:	000f883a 	mov	r7,zero
 1004434:	9809883a 	mov	r4,r19
 1004438:	403ee83a 	callr	r8
 100443c:	00ffffc4 	movi	r3,-1
 1004440:	10c04426 	beq	r2,r3,1004554 <__sflush_r+0x1a0>
 1004444:	88c0030b 	ldhu	r3,12(r17)
 1004448:	89000417 	ldw	r4,16(r17)
 100444c:	88000115 	stw	zero,4(r17)
 1004450:	197dffcc 	andi	r5,r3,63487
 1004454:	8940030d 	sth	r5,12(r17)
 1004458:	89000015 	stw	r4,0(r17)
 100445c:	18c4000c 	andi	r3,r3,4096
 1004460:	18002c1e 	bne	r3,zero,1004514 <__sflush_r+0x160>
 1004464:	89400c17 	ldw	r5,48(r17)
 1004468:	9c000015 	stw	r16,0(r19)
 100446c:	28000526 	beq	r5,zero,1004484 <__sflush_r+0xd0>
 1004470:	88801004 	addi	r2,r17,64
 1004474:	28800226 	beq	r5,r2,1004480 <__sflush_r+0xcc>
 1004478:	9809883a 	mov	r4,r19
 100447c:	1004b200 	call	1004b20 <_free_r>
 1004480:	88000c15 	stw	zero,48(r17)
 1004484:	0005883a 	mov	r2,zero
 1004488:	dfc00417 	ldw	ra,16(sp)
 100448c:	dcc00317 	ldw	r19,12(sp)
 1004490:	dc800217 	ldw	r18,8(sp)
 1004494:	dc400117 	ldw	r17,4(sp)
 1004498:	dc000017 	ldw	r16,0(sp)
 100449c:	dec00504 	addi	sp,sp,20
 10044a0:	f800283a 	ret
 10044a4:	2c800417 	ldw	r18,16(r5)
 10044a8:	903ff626 	beq	r18,zero,1004484 <__alt_mem_TCDM+0xff003484>
 10044ac:	2c000017 	ldw	r16,0(r5)
 10044b0:	108000cc 	andi	r2,r2,3
 10044b4:	2c800015 	stw	r18,0(r5)
 10044b8:	84a1c83a 	sub	r16,r16,r18
 10044bc:	1000131e 	bne	r2,zero,100450c <__sflush_r+0x158>
 10044c0:	28800517 	ldw	r2,20(r5)
 10044c4:	88800215 	stw	r2,8(r17)
 10044c8:	04000316 	blt	zero,r16,10044d8 <__sflush_r+0x124>
 10044cc:	003fed06 	br	1004484 <__alt_mem_TCDM+0xff003484>
 10044d0:	90a5883a 	add	r18,r18,r2
 10044d4:	043feb0e 	bge	zero,r16,1004484 <__alt_mem_TCDM+0xff003484>
 10044d8:	88800917 	ldw	r2,36(r17)
 10044dc:	89400717 	ldw	r5,28(r17)
 10044e0:	800f883a 	mov	r7,r16
 10044e4:	900d883a 	mov	r6,r18
 10044e8:	9809883a 	mov	r4,r19
 10044ec:	103ee83a 	callr	r2
 10044f0:	80a1c83a 	sub	r16,r16,r2
 10044f4:	00bff616 	blt	zero,r2,10044d0 <__alt_mem_TCDM+0xff0034d0>
 10044f8:	88c0030b 	ldhu	r3,12(r17)
 10044fc:	00bfffc4 	movi	r2,-1
 1004500:	18c01014 	ori	r3,r3,64
 1004504:	88c0030d 	sth	r3,12(r17)
 1004508:	003fdf06 	br	1004488 <__alt_mem_TCDM+0xff003488>
 100450c:	0005883a 	mov	r2,zero
 1004510:	003fec06 	br	10044c4 <__alt_mem_TCDM+0xff0034c4>
 1004514:	88801415 	stw	r2,80(r17)
 1004518:	003fd206 	br	1004464 <__alt_mem_TCDM+0xff003464>
 100451c:	28c00f17 	ldw	r3,60(r5)
 1004520:	00ffb316 	blt	zero,r3,10043f0 <__alt_mem_TCDM+0xff0033f0>
 1004524:	003fd706 	br	1004484 <__alt_mem_TCDM+0xff003484>
 1004528:	89400717 	ldw	r5,28(r17)
 100452c:	000d883a 	mov	r6,zero
 1004530:	01c00044 	movi	r7,1
 1004534:	9809883a 	mov	r4,r19
 1004538:	403ee83a 	callr	r8
 100453c:	100d883a 	mov	r6,r2
 1004540:	00bfffc4 	movi	r2,-1
 1004544:	30801426 	beq	r6,r2,1004598 <__sflush_r+0x1e4>
 1004548:	8880030b 	ldhu	r2,12(r17)
 100454c:	8a000a17 	ldw	r8,40(r17)
 1004550:	003fae06 	br	100440c <__alt_mem_TCDM+0xff00340c>
 1004554:	98c00017 	ldw	r3,0(r19)
 1004558:	183fba26 	beq	r3,zero,1004444 <__alt_mem_TCDM+0xff003444>
 100455c:	01000744 	movi	r4,29
 1004560:	19000626 	beq	r3,r4,100457c <__sflush_r+0x1c8>
 1004564:	01000584 	movi	r4,22
 1004568:	19000426 	beq	r3,r4,100457c <__sflush_r+0x1c8>
 100456c:	88c0030b 	ldhu	r3,12(r17)
 1004570:	18c01014 	ori	r3,r3,64
 1004574:	88c0030d 	sth	r3,12(r17)
 1004578:	003fc306 	br	1004488 <__alt_mem_TCDM+0xff003488>
 100457c:	8880030b 	ldhu	r2,12(r17)
 1004580:	88c00417 	ldw	r3,16(r17)
 1004584:	88000115 	stw	zero,4(r17)
 1004588:	10bdffcc 	andi	r2,r2,63487
 100458c:	8880030d 	sth	r2,12(r17)
 1004590:	88c00015 	stw	r3,0(r17)
 1004594:	003fb306 	br	1004464 <__alt_mem_TCDM+0xff003464>
 1004598:	98800017 	ldw	r2,0(r19)
 100459c:	103fea26 	beq	r2,zero,1004548 <__alt_mem_TCDM+0xff003548>
 10045a0:	00c00744 	movi	r3,29
 10045a4:	10c00226 	beq	r2,r3,10045b0 <__sflush_r+0x1fc>
 10045a8:	00c00584 	movi	r3,22
 10045ac:	10c0031e 	bne	r2,r3,10045bc <__sflush_r+0x208>
 10045b0:	9c000015 	stw	r16,0(r19)
 10045b4:	0005883a 	mov	r2,zero
 10045b8:	003fb306 	br	1004488 <__alt_mem_TCDM+0xff003488>
 10045bc:	88c0030b 	ldhu	r3,12(r17)
 10045c0:	3005883a 	mov	r2,r6
 10045c4:	18c01014 	ori	r3,r3,64
 10045c8:	88c0030d 	sth	r3,12(r17)
 10045cc:	003fae06 	br	1004488 <__alt_mem_TCDM+0xff003488>

010045d0 <_fflush_r>:
 10045d0:	defffd04 	addi	sp,sp,-12
 10045d4:	dc000115 	stw	r16,4(sp)
 10045d8:	dfc00215 	stw	ra,8(sp)
 10045dc:	2021883a 	mov	r16,r4
 10045e0:	20000226 	beq	r4,zero,10045ec <_fflush_r+0x1c>
 10045e4:	20800e17 	ldw	r2,56(r4)
 10045e8:	10000c26 	beq	r2,zero,100461c <_fflush_r+0x4c>
 10045ec:	2880030f 	ldh	r2,12(r5)
 10045f0:	1000051e 	bne	r2,zero,1004608 <_fflush_r+0x38>
 10045f4:	0005883a 	mov	r2,zero
 10045f8:	dfc00217 	ldw	ra,8(sp)
 10045fc:	dc000117 	ldw	r16,4(sp)
 1004600:	dec00304 	addi	sp,sp,12
 1004604:	f800283a 	ret
 1004608:	8009883a 	mov	r4,r16
 100460c:	dfc00217 	ldw	ra,8(sp)
 1004610:	dc000117 	ldw	r16,4(sp)
 1004614:	dec00304 	addi	sp,sp,12
 1004618:	10043b41 	jmpi	10043b4 <__sflush_r>
 100461c:	d9400015 	stw	r5,0(sp)
 1004620:	10049ac0 	call	10049ac <__sinit>
 1004624:	d9400017 	ldw	r5,0(sp)
 1004628:	003ff006 	br	10045ec <__alt_mem_TCDM+0xff0035ec>

0100462c <fflush>:
 100462c:	20000526 	beq	r4,zero,1004644 <fflush+0x18>
 1004630:	00804074 	movhi	r2,257
 1004634:	1086fe04 	addi	r2,r2,7160
 1004638:	200b883a 	mov	r5,r4
 100463c:	11000017 	ldw	r4,0(r2)
 1004640:	10045d01 	jmpi	10045d0 <_fflush_r>
 1004644:	00804074 	movhi	r2,257
 1004648:	1086fd04 	addi	r2,r2,7156
 100464c:	11000017 	ldw	r4,0(r2)
 1004650:	01404034 	movhi	r5,256
 1004654:	29517404 	addi	r5,r5,17872
 1004658:	10053b01 	jmpi	10053b0 <_fwalk_reent>

0100465c <__fp_unlock>:
 100465c:	0005883a 	mov	r2,zero
 1004660:	f800283a 	ret

01004664 <_cleanup_r>:
 1004664:	01404074 	movhi	r5,257
 1004668:	2964f204 	addi	r5,r5,-27704
 100466c:	10053b01 	jmpi	10053b0 <_fwalk_reent>

01004670 <__sinit.part.1>:
 1004670:	defff704 	addi	sp,sp,-36
 1004674:	00c04034 	movhi	r3,256
 1004678:	dfc00815 	stw	ra,32(sp)
 100467c:	ddc00715 	stw	r23,28(sp)
 1004680:	dd800615 	stw	r22,24(sp)
 1004684:	dd400515 	stw	r21,20(sp)
 1004688:	dd000415 	stw	r20,16(sp)
 100468c:	dcc00315 	stw	r19,12(sp)
 1004690:	dc800215 	stw	r18,8(sp)
 1004694:	dc400115 	stw	r17,4(sp)
 1004698:	dc000015 	stw	r16,0(sp)
 100469c:	18d19904 	addi	r3,r3,18020
 10046a0:	24000117 	ldw	r16,4(r4)
 10046a4:	20c00f15 	stw	r3,60(r4)
 10046a8:	2080bb04 	addi	r2,r4,748
 10046ac:	00c000c4 	movi	r3,3
 10046b0:	20c0b915 	stw	r3,740(r4)
 10046b4:	2080ba15 	stw	r2,744(r4)
 10046b8:	2000b815 	stw	zero,736(r4)
 10046bc:	05c00204 	movi	r23,8
 10046c0:	00800104 	movi	r2,4
 10046c4:	2025883a 	mov	r18,r4
 10046c8:	b80d883a 	mov	r6,r23
 10046cc:	81001704 	addi	r4,r16,92
 10046d0:	000b883a 	mov	r5,zero
 10046d4:	80000015 	stw	zero,0(r16)
 10046d8:	80000115 	stw	zero,4(r16)
 10046dc:	80000215 	stw	zero,8(r16)
 10046e0:	8080030d 	sth	r2,12(r16)
 10046e4:	80001915 	stw	zero,100(r16)
 10046e8:	8000038d 	sth	zero,14(r16)
 10046ec:	80000415 	stw	zero,16(r16)
 10046f0:	80000515 	stw	zero,20(r16)
 10046f4:	80000615 	stw	zero,24(r16)
 10046f8:	10062a00 	call	10062a0 <memset>
 10046fc:	05804034 	movhi	r22,256
 1004700:	94400217 	ldw	r17,8(r18)
 1004704:	05404034 	movhi	r21,256
 1004708:	05004034 	movhi	r20,256
 100470c:	04c04034 	movhi	r19,256
 1004710:	b59e7c04 	addi	r22,r22,31216
 1004714:	ad5e9304 	addi	r21,r21,31308
 1004718:	a51eb204 	addi	r20,r20,31432
 100471c:	9cdec904 	addi	r19,r19,31524
 1004720:	85800815 	stw	r22,32(r16)
 1004724:	85400915 	stw	r21,36(r16)
 1004728:	85000a15 	stw	r20,40(r16)
 100472c:	84c00b15 	stw	r19,44(r16)
 1004730:	84000715 	stw	r16,28(r16)
 1004734:	00800284 	movi	r2,10
 1004738:	8880030d 	sth	r2,12(r17)
 100473c:	00800044 	movi	r2,1
 1004740:	b80d883a 	mov	r6,r23
 1004744:	89001704 	addi	r4,r17,92
 1004748:	000b883a 	mov	r5,zero
 100474c:	88000015 	stw	zero,0(r17)
 1004750:	88000115 	stw	zero,4(r17)
 1004754:	88000215 	stw	zero,8(r17)
 1004758:	88001915 	stw	zero,100(r17)
 100475c:	8880038d 	sth	r2,14(r17)
 1004760:	88000415 	stw	zero,16(r17)
 1004764:	88000515 	stw	zero,20(r17)
 1004768:	88000615 	stw	zero,24(r17)
 100476c:	10062a00 	call	10062a0 <memset>
 1004770:	94000317 	ldw	r16,12(r18)
 1004774:	00800484 	movi	r2,18
 1004778:	8c400715 	stw	r17,28(r17)
 100477c:	8d800815 	stw	r22,32(r17)
 1004780:	8d400915 	stw	r21,36(r17)
 1004784:	8d000a15 	stw	r20,40(r17)
 1004788:	8cc00b15 	stw	r19,44(r17)
 100478c:	8080030d 	sth	r2,12(r16)
 1004790:	00800084 	movi	r2,2
 1004794:	80000015 	stw	zero,0(r16)
 1004798:	80000115 	stw	zero,4(r16)
 100479c:	80000215 	stw	zero,8(r16)
 10047a0:	80001915 	stw	zero,100(r16)
 10047a4:	8080038d 	sth	r2,14(r16)
 10047a8:	80000415 	stw	zero,16(r16)
 10047ac:	80000515 	stw	zero,20(r16)
 10047b0:	80000615 	stw	zero,24(r16)
 10047b4:	b80d883a 	mov	r6,r23
 10047b8:	000b883a 	mov	r5,zero
 10047bc:	81001704 	addi	r4,r16,92
 10047c0:	10062a00 	call	10062a0 <memset>
 10047c4:	00800044 	movi	r2,1
 10047c8:	84000715 	stw	r16,28(r16)
 10047cc:	85800815 	stw	r22,32(r16)
 10047d0:	85400915 	stw	r21,36(r16)
 10047d4:	85000a15 	stw	r20,40(r16)
 10047d8:	84c00b15 	stw	r19,44(r16)
 10047dc:	90800e15 	stw	r2,56(r18)
 10047e0:	dfc00817 	ldw	ra,32(sp)
 10047e4:	ddc00717 	ldw	r23,28(sp)
 10047e8:	dd800617 	ldw	r22,24(sp)
 10047ec:	dd400517 	ldw	r21,20(sp)
 10047f0:	dd000417 	ldw	r20,16(sp)
 10047f4:	dcc00317 	ldw	r19,12(sp)
 10047f8:	dc800217 	ldw	r18,8(sp)
 10047fc:	dc400117 	ldw	r17,4(sp)
 1004800:	dc000017 	ldw	r16,0(sp)
 1004804:	dec00904 	addi	sp,sp,36
 1004808:	f800283a 	ret

0100480c <__fp_lock>:
 100480c:	0005883a 	mov	r2,zero
 1004810:	f800283a 	ret

01004814 <__sfmoreglue>:
 1004814:	defffc04 	addi	sp,sp,-16
 1004818:	dc400115 	stw	r17,4(sp)
 100481c:	2c7fffc4 	addi	r17,r5,-1
 1004820:	8c401a24 	muli	r17,r17,104
 1004824:	dc800215 	stw	r18,8(sp)
 1004828:	2825883a 	mov	r18,r5
 100482c:	89401d04 	addi	r5,r17,116
 1004830:	dc000015 	stw	r16,0(sp)
 1004834:	dfc00315 	stw	ra,12(sp)
 1004838:	100570c0 	call	100570c <_malloc_r>
 100483c:	1021883a 	mov	r16,r2
 1004840:	10000726 	beq	r2,zero,1004860 <__sfmoreglue+0x4c>
 1004844:	11000304 	addi	r4,r2,12
 1004848:	10000015 	stw	zero,0(r2)
 100484c:	14800115 	stw	r18,4(r2)
 1004850:	11000215 	stw	r4,8(r2)
 1004854:	89801a04 	addi	r6,r17,104
 1004858:	000b883a 	mov	r5,zero
 100485c:	10062a00 	call	10062a0 <memset>
 1004860:	8005883a 	mov	r2,r16
 1004864:	dfc00317 	ldw	ra,12(sp)
 1004868:	dc800217 	ldw	r18,8(sp)
 100486c:	dc400117 	ldw	r17,4(sp)
 1004870:	dc000017 	ldw	r16,0(sp)
 1004874:	dec00404 	addi	sp,sp,16
 1004878:	f800283a 	ret

0100487c <__sfp>:
 100487c:	defffb04 	addi	sp,sp,-20
 1004880:	dc000015 	stw	r16,0(sp)
 1004884:	04004074 	movhi	r16,257
 1004888:	8406fd04 	addi	r16,r16,7156
 100488c:	dcc00315 	stw	r19,12(sp)
 1004890:	2027883a 	mov	r19,r4
 1004894:	81000017 	ldw	r4,0(r16)
 1004898:	dfc00415 	stw	ra,16(sp)
 100489c:	dc800215 	stw	r18,8(sp)
 10048a0:	20800e17 	ldw	r2,56(r4)
 10048a4:	dc400115 	stw	r17,4(sp)
 10048a8:	1000021e 	bne	r2,zero,10048b4 <__sfp+0x38>
 10048ac:	10046700 	call	1004670 <__sinit.part.1>
 10048b0:	81000017 	ldw	r4,0(r16)
 10048b4:	2480b804 	addi	r18,r4,736
 10048b8:	047fffc4 	movi	r17,-1
 10048bc:	91000117 	ldw	r4,4(r18)
 10048c0:	94000217 	ldw	r16,8(r18)
 10048c4:	213fffc4 	addi	r4,r4,-1
 10048c8:	20000a16 	blt	r4,zero,10048f4 <__sfp+0x78>
 10048cc:	8080030f 	ldh	r2,12(r16)
 10048d0:	10000c26 	beq	r2,zero,1004904 <__sfp+0x88>
 10048d4:	80c01d04 	addi	r3,r16,116
 10048d8:	00000206 	br	10048e4 <__sfp+0x68>
 10048dc:	18bfe60f 	ldh	r2,-104(r3)
 10048e0:	10000826 	beq	r2,zero,1004904 <__sfp+0x88>
 10048e4:	213fffc4 	addi	r4,r4,-1
 10048e8:	1c3ffd04 	addi	r16,r3,-12
 10048ec:	18c01a04 	addi	r3,r3,104
 10048f0:	247ffa1e 	bne	r4,r17,10048dc <__alt_mem_TCDM+0xff0038dc>
 10048f4:	90800017 	ldw	r2,0(r18)
 10048f8:	10001d26 	beq	r2,zero,1004970 <__sfp+0xf4>
 10048fc:	1025883a 	mov	r18,r2
 1004900:	003fee06 	br	10048bc <__alt_mem_TCDM+0xff0038bc>
 1004904:	00bfffc4 	movi	r2,-1
 1004908:	8080038d 	sth	r2,14(r16)
 100490c:	00800044 	movi	r2,1
 1004910:	8080030d 	sth	r2,12(r16)
 1004914:	80001915 	stw	zero,100(r16)
 1004918:	80000015 	stw	zero,0(r16)
 100491c:	80000215 	stw	zero,8(r16)
 1004920:	80000115 	stw	zero,4(r16)
 1004924:	80000415 	stw	zero,16(r16)
 1004928:	80000515 	stw	zero,20(r16)
 100492c:	80000615 	stw	zero,24(r16)
 1004930:	01800204 	movi	r6,8
 1004934:	000b883a 	mov	r5,zero
 1004938:	81001704 	addi	r4,r16,92
 100493c:	10062a00 	call	10062a0 <memset>
 1004940:	8005883a 	mov	r2,r16
 1004944:	80000c15 	stw	zero,48(r16)
 1004948:	80000d15 	stw	zero,52(r16)
 100494c:	80001115 	stw	zero,68(r16)
 1004950:	80001215 	stw	zero,72(r16)
 1004954:	dfc00417 	ldw	ra,16(sp)
 1004958:	dcc00317 	ldw	r19,12(sp)
 100495c:	dc800217 	ldw	r18,8(sp)
 1004960:	dc400117 	ldw	r17,4(sp)
 1004964:	dc000017 	ldw	r16,0(sp)
 1004968:	dec00504 	addi	sp,sp,20
 100496c:	f800283a 	ret
 1004970:	01400104 	movi	r5,4
 1004974:	9809883a 	mov	r4,r19
 1004978:	10048140 	call	1004814 <__sfmoreglue>
 100497c:	90800015 	stw	r2,0(r18)
 1004980:	103fde1e 	bne	r2,zero,10048fc <__alt_mem_TCDM+0xff0038fc>
 1004984:	00800304 	movi	r2,12
 1004988:	98800015 	stw	r2,0(r19)
 100498c:	0005883a 	mov	r2,zero
 1004990:	003ff006 	br	1004954 <__alt_mem_TCDM+0xff003954>

01004994 <_cleanup>:
 1004994:	00804074 	movhi	r2,257
 1004998:	1086fd04 	addi	r2,r2,7156
 100499c:	11000017 	ldw	r4,0(r2)
 10049a0:	01404074 	movhi	r5,257
 10049a4:	2964f204 	addi	r5,r5,-27704
 10049a8:	10053b01 	jmpi	10053b0 <_fwalk_reent>

010049ac <__sinit>:
 10049ac:	20800e17 	ldw	r2,56(r4)
 10049b0:	10000126 	beq	r2,zero,10049b8 <__sinit+0xc>
 10049b4:	f800283a 	ret
 10049b8:	10046701 	jmpi	1004670 <__sinit.part.1>

010049bc <__sfp_lock_acquire>:
 10049bc:	f800283a 	ret

010049c0 <__sfp_lock_release>:
 10049c0:	f800283a 	ret

010049c4 <__sinit_lock_acquire>:
 10049c4:	f800283a 	ret

010049c8 <__sinit_lock_release>:
 10049c8:	f800283a 	ret

010049cc <__fp_lock_all>:
 10049cc:	00804074 	movhi	r2,257
 10049d0:	1086fe04 	addi	r2,r2,7160
 10049d4:	11000017 	ldw	r4,0(r2)
 10049d8:	01404034 	movhi	r5,256
 10049dc:	29520304 	addi	r5,r5,18444
 10049e0:	10052ec1 	jmpi	10052ec <_fwalk>

010049e4 <__fp_unlock_all>:
 10049e4:	00804074 	movhi	r2,257
 10049e8:	1086fe04 	addi	r2,r2,7160
 10049ec:	11000017 	ldw	r4,0(r2)
 10049f0:	01404034 	movhi	r5,256
 10049f4:	29519704 	addi	r5,r5,18012
 10049f8:	10052ec1 	jmpi	10052ec <_fwalk>

010049fc <_malloc_trim_r>:
 10049fc:	defffb04 	addi	sp,sp,-20
 1004a00:	dcc00315 	stw	r19,12(sp)
 1004a04:	04c04074 	movhi	r19,257
 1004a08:	dc800215 	stw	r18,8(sp)
 1004a0c:	dc400115 	stw	r17,4(sp)
 1004a10:	dc000015 	stw	r16,0(sp)
 1004a14:	dfc00415 	stw	ra,16(sp)
 1004a18:	2821883a 	mov	r16,r5
 1004a1c:	9cc17904 	addi	r19,r19,1508
 1004a20:	2025883a 	mov	r18,r4
 1004a24:	100d54c0 	call	100d54c <__malloc_lock>
 1004a28:	98800217 	ldw	r2,8(r19)
 1004a2c:	14400117 	ldw	r17,4(r2)
 1004a30:	00bfff04 	movi	r2,-4
 1004a34:	88a2703a 	and	r17,r17,r2
 1004a38:	8c21c83a 	sub	r16,r17,r16
 1004a3c:	8403fbc4 	addi	r16,r16,4079
 1004a40:	8020d33a 	srli	r16,r16,12
 1004a44:	0083ffc4 	movi	r2,4095
 1004a48:	843fffc4 	addi	r16,r16,-1
 1004a4c:	8020933a 	slli	r16,r16,12
 1004a50:	1400060e 	bge	r2,r16,1004a6c <_malloc_trim_r+0x70>
 1004a54:	000b883a 	mov	r5,zero
 1004a58:	9009883a 	mov	r4,r18
 1004a5c:	100799c0 	call	100799c <_sbrk_r>
 1004a60:	98c00217 	ldw	r3,8(r19)
 1004a64:	1c47883a 	add	r3,r3,r17
 1004a68:	10c00a26 	beq	r2,r3,1004a94 <_malloc_trim_r+0x98>
 1004a6c:	9009883a 	mov	r4,r18
 1004a70:	100d5700 	call	100d570 <__malloc_unlock>
 1004a74:	0005883a 	mov	r2,zero
 1004a78:	dfc00417 	ldw	ra,16(sp)
 1004a7c:	dcc00317 	ldw	r19,12(sp)
 1004a80:	dc800217 	ldw	r18,8(sp)
 1004a84:	dc400117 	ldw	r17,4(sp)
 1004a88:	dc000017 	ldw	r16,0(sp)
 1004a8c:	dec00504 	addi	sp,sp,20
 1004a90:	f800283a 	ret
 1004a94:	040bc83a 	sub	r5,zero,r16
 1004a98:	9009883a 	mov	r4,r18
 1004a9c:	100799c0 	call	100799c <_sbrk_r>
 1004aa0:	00ffffc4 	movi	r3,-1
 1004aa4:	10c00d26 	beq	r2,r3,1004adc <_malloc_trim_r+0xe0>
 1004aa8:	00c04074 	movhi	r3,257
 1004aac:	18cdd604 	addi	r3,r3,14168
 1004ab0:	18800017 	ldw	r2,0(r3)
 1004ab4:	99000217 	ldw	r4,8(r19)
 1004ab8:	8c23c83a 	sub	r17,r17,r16
 1004abc:	8c400054 	ori	r17,r17,1
 1004ac0:	1421c83a 	sub	r16,r2,r16
 1004ac4:	24400115 	stw	r17,4(r4)
 1004ac8:	9009883a 	mov	r4,r18
 1004acc:	1c000015 	stw	r16,0(r3)
 1004ad0:	100d5700 	call	100d570 <__malloc_unlock>
 1004ad4:	00800044 	movi	r2,1
 1004ad8:	003fe706 	br	1004a78 <__alt_mem_TCDM+0xff003a78>
 1004adc:	000b883a 	mov	r5,zero
 1004ae0:	9009883a 	mov	r4,r18
 1004ae4:	100799c0 	call	100799c <_sbrk_r>
 1004ae8:	99000217 	ldw	r4,8(r19)
 1004aec:	014003c4 	movi	r5,15
 1004af0:	1107c83a 	sub	r3,r2,r4
 1004af4:	28ffdd0e 	bge	r5,r3,1004a6c <__alt_mem_TCDM+0xff003a6c>
 1004af8:	01404074 	movhi	r5,257
 1004afc:	29470004 	addi	r5,r5,7168
 1004b00:	29400017 	ldw	r5,0(r5)
 1004b04:	18c00054 	ori	r3,r3,1
 1004b08:	20c00115 	stw	r3,4(r4)
 1004b0c:	00c04074 	movhi	r3,257
 1004b10:	1145c83a 	sub	r2,r2,r5
 1004b14:	18cdd604 	addi	r3,r3,14168
 1004b18:	18800015 	stw	r2,0(r3)
 1004b1c:	003fd306 	br	1004a6c <__alt_mem_TCDM+0xff003a6c>

01004b20 <_free_r>:
 1004b20:	28004126 	beq	r5,zero,1004c28 <_free_r+0x108>
 1004b24:	defffd04 	addi	sp,sp,-12
 1004b28:	dc400115 	stw	r17,4(sp)
 1004b2c:	dc000015 	stw	r16,0(sp)
 1004b30:	2023883a 	mov	r17,r4
 1004b34:	2821883a 	mov	r16,r5
 1004b38:	dfc00215 	stw	ra,8(sp)
 1004b3c:	100d54c0 	call	100d54c <__malloc_lock>
 1004b40:	81ffff17 	ldw	r7,-4(r16)
 1004b44:	00bfff84 	movi	r2,-2
 1004b48:	01004074 	movhi	r4,257
 1004b4c:	81bffe04 	addi	r6,r16,-8
 1004b50:	3884703a 	and	r2,r7,r2
 1004b54:	21017904 	addi	r4,r4,1508
 1004b58:	308b883a 	add	r5,r6,r2
 1004b5c:	2a400117 	ldw	r9,4(r5)
 1004b60:	22000217 	ldw	r8,8(r4)
 1004b64:	00ffff04 	movi	r3,-4
 1004b68:	48c6703a 	and	r3,r9,r3
 1004b6c:	2a005726 	beq	r5,r8,1004ccc <_free_r+0x1ac>
 1004b70:	28c00115 	stw	r3,4(r5)
 1004b74:	39c0004c 	andi	r7,r7,1
 1004b78:	3800091e 	bne	r7,zero,1004ba0 <_free_r+0x80>
 1004b7c:	823ffe17 	ldw	r8,-8(r16)
 1004b80:	22400204 	addi	r9,r4,8
 1004b84:	320dc83a 	sub	r6,r6,r8
 1004b88:	31c00217 	ldw	r7,8(r6)
 1004b8c:	1205883a 	add	r2,r2,r8
 1004b90:	3a406526 	beq	r7,r9,1004d28 <_free_r+0x208>
 1004b94:	32000317 	ldw	r8,12(r6)
 1004b98:	3a000315 	stw	r8,12(r7)
 1004b9c:	41c00215 	stw	r7,8(r8)
 1004ba0:	28cf883a 	add	r7,r5,r3
 1004ba4:	39c00117 	ldw	r7,4(r7)
 1004ba8:	39c0004c 	andi	r7,r7,1
 1004bac:	38003a26 	beq	r7,zero,1004c98 <_free_r+0x178>
 1004bb0:	10c00054 	ori	r3,r2,1
 1004bb4:	30c00115 	stw	r3,4(r6)
 1004bb8:	3087883a 	add	r3,r6,r2
 1004bbc:	18800015 	stw	r2,0(r3)
 1004bc0:	00c07fc4 	movi	r3,511
 1004bc4:	18801936 	bltu	r3,r2,1004c2c <_free_r+0x10c>
 1004bc8:	1004d0fa 	srli	r2,r2,3
 1004bcc:	01c00044 	movi	r7,1
 1004bd0:	21400117 	ldw	r5,4(r4)
 1004bd4:	10c00044 	addi	r3,r2,1
 1004bd8:	18c7883a 	add	r3,r3,r3
 1004bdc:	1005d0ba 	srai	r2,r2,2
 1004be0:	18c7883a 	add	r3,r3,r3
 1004be4:	18c7883a 	add	r3,r3,r3
 1004be8:	1907883a 	add	r3,r3,r4
 1004bec:	3884983a 	sll	r2,r7,r2
 1004bf0:	19c00017 	ldw	r7,0(r3)
 1004bf4:	1a3ffe04 	addi	r8,r3,-8
 1004bf8:	1144b03a 	or	r2,r2,r5
 1004bfc:	32000315 	stw	r8,12(r6)
 1004c00:	31c00215 	stw	r7,8(r6)
 1004c04:	20800115 	stw	r2,4(r4)
 1004c08:	19800015 	stw	r6,0(r3)
 1004c0c:	39800315 	stw	r6,12(r7)
 1004c10:	8809883a 	mov	r4,r17
 1004c14:	dfc00217 	ldw	ra,8(sp)
 1004c18:	dc400117 	ldw	r17,4(sp)
 1004c1c:	dc000017 	ldw	r16,0(sp)
 1004c20:	dec00304 	addi	sp,sp,12
 1004c24:	100d5701 	jmpi	100d570 <__malloc_unlock>
 1004c28:	f800283a 	ret
 1004c2c:	100ad27a 	srli	r5,r2,9
 1004c30:	00c00104 	movi	r3,4
 1004c34:	19404a36 	bltu	r3,r5,1004d60 <_free_r+0x240>
 1004c38:	100ad1ba 	srli	r5,r2,6
 1004c3c:	28c00e44 	addi	r3,r5,57
 1004c40:	18c7883a 	add	r3,r3,r3
 1004c44:	29400e04 	addi	r5,r5,56
 1004c48:	18c7883a 	add	r3,r3,r3
 1004c4c:	18c7883a 	add	r3,r3,r3
 1004c50:	1909883a 	add	r4,r3,r4
 1004c54:	20c00017 	ldw	r3,0(r4)
 1004c58:	01c04074 	movhi	r7,257
 1004c5c:	213ffe04 	addi	r4,r4,-8
 1004c60:	39c17904 	addi	r7,r7,1508
 1004c64:	20c04426 	beq	r4,r3,1004d78 <_free_r+0x258>
 1004c68:	01ffff04 	movi	r7,-4
 1004c6c:	19400117 	ldw	r5,4(r3)
 1004c70:	29ca703a 	and	r5,r5,r7
 1004c74:	1140022e 	bgeu	r2,r5,1004c80 <_free_r+0x160>
 1004c78:	18c00217 	ldw	r3,8(r3)
 1004c7c:	20fffb1e 	bne	r4,r3,1004c6c <__alt_mem_TCDM+0xff003c6c>
 1004c80:	19000317 	ldw	r4,12(r3)
 1004c84:	31000315 	stw	r4,12(r6)
 1004c88:	30c00215 	stw	r3,8(r6)
 1004c8c:	21800215 	stw	r6,8(r4)
 1004c90:	19800315 	stw	r6,12(r3)
 1004c94:	003fde06 	br	1004c10 <__alt_mem_TCDM+0xff003c10>
 1004c98:	29c00217 	ldw	r7,8(r5)
 1004c9c:	10c5883a 	add	r2,r2,r3
 1004ca0:	00c04074 	movhi	r3,257
 1004ca4:	18c17b04 	addi	r3,r3,1516
 1004ca8:	38c03b26 	beq	r7,r3,1004d98 <_free_r+0x278>
 1004cac:	2a000317 	ldw	r8,12(r5)
 1004cb0:	11400054 	ori	r5,r2,1
 1004cb4:	3087883a 	add	r3,r6,r2
 1004cb8:	3a000315 	stw	r8,12(r7)
 1004cbc:	41c00215 	stw	r7,8(r8)
 1004cc0:	31400115 	stw	r5,4(r6)
 1004cc4:	18800015 	stw	r2,0(r3)
 1004cc8:	003fbd06 	br	1004bc0 <__alt_mem_TCDM+0xff003bc0>
 1004ccc:	39c0004c 	andi	r7,r7,1
 1004cd0:	10c5883a 	add	r2,r2,r3
 1004cd4:	3800071e 	bne	r7,zero,1004cf4 <_free_r+0x1d4>
 1004cd8:	81fffe17 	ldw	r7,-8(r16)
 1004cdc:	31cdc83a 	sub	r6,r6,r7
 1004ce0:	30c00317 	ldw	r3,12(r6)
 1004ce4:	31400217 	ldw	r5,8(r6)
 1004ce8:	11c5883a 	add	r2,r2,r7
 1004cec:	28c00315 	stw	r3,12(r5)
 1004cf0:	19400215 	stw	r5,8(r3)
 1004cf4:	10c00054 	ori	r3,r2,1
 1004cf8:	30c00115 	stw	r3,4(r6)
 1004cfc:	00c04074 	movhi	r3,257
 1004d00:	18c70104 	addi	r3,r3,7172
 1004d04:	18c00017 	ldw	r3,0(r3)
 1004d08:	21800215 	stw	r6,8(r4)
 1004d0c:	10ffc036 	bltu	r2,r3,1004c10 <__alt_mem_TCDM+0xff003c10>
 1004d10:	00804074 	movhi	r2,257
 1004d14:	108dcd04 	addi	r2,r2,14132
 1004d18:	11400017 	ldw	r5,0(r2)
 1004d1c:	8809883a 	mov	r4,r17
 1004d20:	10049fc0 	call	10049fc <_malloc_trim_r>
 1004d24:	003fba06 	br	1004c10 <__alt_mem_TCDM+0xff003c10>
 1004d28:	28c9883a 	add	r4,r5,r3
 1004d2c:	21000117 	ldw	r4,4(r4)
 1004d30:	2100004c 	andi	r4,r4,1
 1004d34:	2000391e 	bne	r4,zero,1004e1c <_free_r+0x2fc>
 1004d38:	29c00217 	ldw	r7,8(r5)
 1004d3c:	29000317 	ldw	r4,12(r5)
 1004d40:	1885883a 	add	r2,r3,r2
 1004d44:	10c00054 	ori	r3,r2,1
 1004d48:	39000315 	stw	r4,12(r7)
 1004d4c:	21c00215 	stw	r7,8(r4)
 1004d50:	30c00115 	stw	r3,4(r6)
 1004d54:	308d883a 	add	r6,r6,r2
 1004d58:	30800015 	stw	r2,0(r6)
 1004d5c:	003fac06 	br	1004c10 <__alt_mem_TCDM+0xff003c10>
 1004d60:	00c00504 	movi	r3,20
 1004d64:	19401536 	bltu	r3,r5,1004dbc <_free_r+0x29c>
 1004d68:	28c01704 	addi	r3,r5,92
 1004d6c:	18c7883a 	add	r3,r3,r3
 1004d70:	294016c4 	addi	r5,r5,91
 1004d74:	003fb406 	br	1004c48 <__alt_mem_TCDM+0xff003c48>
 1004d78:	280bd0ba 	srai	r5,r5,2
 1004d7c:	00c00044 	movi	r3,1
 1004d80:	38800117 	ldw	r2,4(r7)
 1004d84:	194a983a 	sll	r5,r3,r5
 1004d88:	2007883a 	mov	r3,r4
 1004d8c:	2884b03a 	or	r2,r5,r2
 1004d90:	38800115 	stw	r2,4(r7)
 1004d94:	003fbb06 	br	1004c84 <__alt_mem_TCDM+0xff003c84>
 1004d98:	21800515 	stw	r6,20(r4)
 1004d9c:	21800415 	stw	r6,16(r4)
 1004da0:	10c00054 	ori	r3,r2,1
 1004da4:	31c00315 	stw	r7,12(r6)
 1004da8:	31c00215 	stw	r7,8(r6)
 1004dac:	30c00115 	stw	r3,4(r6)
 1004db0:	308d883a 	add	r6,r6,r2
 1004db4:	30800015 	stw	r2,0(r6)
 1004db8:	003f9506 	br	1004c10 <__alt_mem_TCDM+0xff003c10>
 1004dbc:	00c01504 	movi	r3,84
 1004dc0:	19400536 	bltu	r3,r5,1004dd8 <_free_r+0x2b8>
 1004dc4:	100ad33a 	srli	r5,r2,12
 1004dc8:	28c01bc4 	addi	r3,r5,111
 1004dcc:	18c7883a 	add	r3,r3,r3
 1004dd0:	29401b84 	addi	r5,r5,110
 1004dd4:	003f9c06 	br	1004c48 <__alt_mem_TCDM+0xff003c48>
 1004dd8:	00c05504 	movi	r3,340
 1004ddc:	19400536 	bltu	r3,r5,1004df4 <_free_r+0x2d4>
 1004de0:	100ad3fa 	srli	r5,r2,15
 1004de4:	28c01e04 	addi	r3,r5,120
 1004de8:	18c7883a 	add	r3,r3,r3
 1004dec:	29401dc4 	addi	r5,r5,119
 1004df0:	003f9506 	br	1004c48 <__alt_mem_TCDM+0xff003c48>
 1004df4:	00c15504 	movi	r3,1364
 1004df8:	19400536 	bltu	r3,r5,1004e10 <_free_r+0x2f0>
 1004dfc:	100ad4ba 	srli	r5,r2,18
 1004e00:	28c01f44 	addi	r3,r5,125
 1004e04:	18c7883a 	add	r3,r3,r3
 1004e08:	29401f04 	addi	r5,r5,124
 1004e0c:	003f8e06 	br	1004c48 <__alt_mem_TCDM+0xff003c48>
 1004e10:	00c03f84 	movi	r3,254
 1004e14:	01401f84 	movi	r5,126
 1004e18:	003f8b06 	br	1004c48 <__alt_mem_TCDM+0xff003c48>
 1004e1c:	10c00054 	ori	r3,r2,1
 1004e20:	30c00115 	stw	r3,4(r6)
 1004e24:	308d883a 	add	r6,r6,r2
 1004e28:	30800015 	stw	r2,0(r6)
 1004e2c:	003f7806 	br	1004c10 <__alt_mem_TCDM+0xff003c10>

01004e30 <__sfvwrite_r>:
 1004e30:	30800217 	ldw	r2,8(r6)
 1004e34:	10006726 	beq	r2,zero,1004fd4 <__sfvwrite_r+0x1a4>
 1004e38:	28c0030b 	ldhu	r3,12(r5)
 1004e3c:	defff404 	addi	sp,sp,-48
 1004e40:	dd400715 	stw	r21,28(sp)
 1004e44:	dd000615 	stw	r20,24(sp)
 1004e48:	dc000215 	stw	r16,8(sp)
 1004e4c:	dfc00b15 	stw	ra,44(sp)
 1004e50:	df000a15 	stw	fp,40(sp)
 1004e54:	ddc00915 	stw	r23,36(sp)
 1004e58:	dd800815 	stw	r22,32(sp)
 1004e5c:	dcc00515 	stw	r19,20(sp)
 1004e60:	dc800415 	stw	r18,16(sp)
 1004e64:	dc400315 	stw	r17,12(sp)
 1004e68:	1880020c 	andi	r2,r3,8
 1004e6c:	2821883a 	mov	r16,r5
 1004e70:	202b883a 	mov	r21,r4
 1004e74:	3029883a 	mov	r20,r6
 1004e78:	10002726 	beq	r2,zero,1004f18 <__sfvwrite_r+0xe8>
 1004e7c:	28800417 	ldw	r2,16(r5)
 1004e80:	10002526 	beq	r2,zero,1004f18 <__sfvwrite_r+0xe8>
 1004e84:	1880008c 	andi	r2,r3,2
 1004e88:	a4400017 	ldw	r17,0(r20)
 1004e8c:	10002a26 	beq	r2,zero,1004f38 <__sfvwrite_r+0x108>
 1004e90:	05a00034 	movhi	r22,32768
 1004e94:	0027883a 	mov	r19,zero
 1004e98:	0025883a 	mov	r18,zero
 1004e9c:	b5bf0004 	addi	r22,r22,-1024
 1004ea0:	980d883a 	mov	r6,r19
 1004ea4:	a809883a 	mov	r4,r21
 1004ea8:	90004626 	beq	r18,zero,1004fc4 <__sfvwrite_r+0x194>
 1004eac:	900f883a 	mov	r7,r18
 1004eb0:	b480022e 	bgeu	r22,r18,1004ebc <__sfvwrite_r+0x8c>
 1004eb4:	01e00034 	movhi	r7,32768
 1004eb8:	39ff0004 	addi	r7,r7,-1024
 1004ebc:	80800917 	ldw	r2,36(r16)
 1004ec0:	81400717 	ldw	r5,28(r16)
 1004ec4:	103ee83a 	callr	r2
 1004ec8:	0080570e 	bge	zero,r2,1005028 <__sfvwrite_r+0x1f8>
 1004ecc:	a0c00217 	ldw	r3,8(r20)
 1004ed0:	98a7883a 	add	r19,r19,r2
 1004ed4:	90a5c83a 	sub	r18,r18,r2
 1004ed8:	1885c83a 	sub	r2,r3,r2
 1004edc:	a0800215 	stw	r2,8(r20)
 1004ee0:	103fef1e 	bne	r2,zero,1004ea0 <__alt_mem_TCDM+0xff003ea0>
 1004ee4:	0005883a 	mov	r2,zero
 1004ee8:	dfc00b17 	ldw	ra,44(sp)
 1004eec:	df000a17 	ldw	fp,40(sp)
 1004ef0:	ddc00917 	ldw	r23,36(sp)
 1004ef4:	dd800817 	ldw	r22,32(sp)
 1004ef8:	dd400717 	ldw	r21,28(sp)
 1004efc:	dd000617 	ldw	r20,24(sp)
 1004f00:	dcc00517 	ldw	r19,20(sp)
 1004f04:	dc800417 	ldw	r18,16(sp)
 1004f08:	dc400317 	ldw	r17,12(sp)
 1004f0c:	dc000217 	ldw	r16,8(sp)
 1004f10:	dec00c04 	addi	sp,sp,48
 1004f14:	f800283a 	ret
 1004f18:	800b883a 	mov	r5,r16
 1004f1c:	a809883a 	mov	r4,r21
 1004f20:	10029d80 	call	10029d8 <__swsetup_r>
 1004f24:	1000eb1e 	bne	r2,zero,10052d4 <__sfvwrite_r+0x4a4>
 1004f28:	80c0030b 	ldhu	r3,12(r16)
 1004f2c:	a4400017 	ldw	r17,0(r20)
 1004f30:	1880008c 	andi	r2,r3,2
 1004f34:	103fd61e 	bne	r2,zero,1004e90 <__alt_mem_TCDM+0xff003e90>
 1004f38:	1880004c 	andi	r2,r3,1
 1004f3c:	10003f1e 	bne	r2,zero,100503c <__sfvwrite_r+0x20c>
 1004f40:	0039883a 	mov	fp,zero
 1004f44:	0025883a 	mov	r18,zero
 1004f48:	90001a26 	beq	r18,zero,1004fb4 <__sfvwrite_r+0x184>
 1004f4c:	1880800c 	andi	r2,r3,512
 1004f50:	84c00217 	ldw	r19,8(r16)
 1004f54:	10002126 	beq	r2,zero,1004fdc <__sfvwrite_r+0x1ac>
 1004f58:	982f883a 	mov	r23,r19
 1004f5c:	94c09336 	bltu	r18,r19,10051ac <__sfvwrite_r+0x37c>
 1004f60:	1881200c 	andi	r2,r3,1152
 1004f64:	10009e1e 	bne	r2,zero,10051e0 <__sfvwrite_r+0x3b0>
 1004f68:	81000017 	ldw	r4,0(r16)
 1004f6c:	b80d883a 	mov	r6,r23
 1004f70:	e00b883a 	mov	r5,fp
 1004f74:	10061440 	call	1006144 <memmove>
 1004f78:	80c00217 	ldw	r3,8(r16)
 1004f7c:	81000017 	ldw	r4,0(r16)
 1004f80:	9005883a 	mov	r2,r18
 1004f84:	1ce7c83a 	sub	r19,r3,r19
 1004f88:	25cf883a 	add	r7,r4,r23
 1004f8c:	84c00215 	stw	r19,8(r16)
 1004f90:	81c00015 	stw	r7,0(r16)
 1004f94:	a0c00217 	ldw	r3,8(r20)
 1004f98:	e0b9883a 	add	fp,fp,r2
 1004f9c:	90a5c83a 	sub	r18,r18,r2
 1004fa0:	18a7c83a 	sub	r19,r3,r2
 1004fa4:	a4c00215 	stw	r19,8(r20)
 1004fa8:	983fce26 	beq	r19,zero,1004ee4 <__alt_mem_TCDM+0xff003ee4>
 1004fac:	80c0030b 	ldhu	r3,12(r16)
 1004fb0:	903fe61e 	bne	r18,zero,1004f4c <__alt_mem_TCDM+0xff003f4c>
 1004fb4:	8f000017 	ldw	fp,0(r17)
 1004fb8:	8c800117 	ldw	r18,4(r17)
 1004fbc:	8c400204 	addi	r17,r17,8
 1004fc0:	003fe106 	br	1004f48 <__alt_mem_TCDM+0xff003f48>
 1004fc4:	8cc00017 	ldw	r19,0(r17)
 1004fc8:	8c800117 	ldw	r18,4(r17)
 1004fcc:	8c400204 	addi	r17,r17,8
 1004fd0:	003fb306 	br	1004ea0 <__alt_mem_TCDM+0xff003ea0>
 1004fd4:	0005883a 	mov	r2,zero
 1004fd8:	f800283a 	ret
 1004fdc:	81000017 	ldw	r4,0(r16)
 1004fe0:	80800417 	ldw	r2,16(r16)
 1004fe4:	11005736 	bltu	r2,r4,1005144 <__sfvwrite_r+0x314>
 1004fe8:	85c00517 	ldw	r23,20(r16)
 1004fec:	95c05536 	bltu	r18,r23,1005144 <__sfvwrite_r+0x314>
 1004ff0:	00a00034 	movhi	r2,32768
 1004ff4:	10bfffc4 	addi	r2,r2,-1
 1004ff8:	9009883a 	mov	r4,r18
 1004ffc:	1480012e 	bgeu	r2,r18,1005004 <__sfvwrite_r+0x1d4>
 1005000:	1009883a 	mov	r4,r2
 1005004:	b80b883a 	mov	r5,r23
 1005008:	100a6340 	call	100a634 <__divsi3>
 100500c:	15cf383a 	mul	r7,r2,r23
 1005010:	81400717 	ldw	r5,28(r16)
 1005014:	80800917 	ldw	r2,36(r16)
 1005018:	e00d883a 	mov	r6,fp
 100501c:	a809883a 	mov	r4,r21
 1005020:	103ee83a 	callr	r2
 1005024:	00bfdb16 	blt	zero,r2,1004f94 <__alt_mem_TCDM+0xff003f94>
 1005028:	8080030b 	ldhu	r2,12(r16)
 100502c:	10801014 	ori	r2,r2,64
 1005030:	8080030d 	sth	r2,12(r16)
 1005034:	00bfffc4 	movi	r2,-1
 1005038:	003fab06 	br	1004ee8 <__alt_mem_TCDM+0xff003ee8>
 100503c:	0027883a 	mov	r19,zero
 1005040:	0011883a 	mov	r8,zero
 1005044:	0039883a 	mov	fp,zero
 1005048:	0025883a 	mov	r18,zero
 100504c:	90001f26 	beq	r18,zero,10050cc <__sfvwrite_r+0x29c>
 1005050:	40005a26 	beq	r8,zero,10051bc <__sfvwrite_r+0x38c>
 1005054:	982d883a 	mov	r22,r19
 1005058:	94c0012e 	bgeu	r18,r19,1005060 <__sfvwrite_r+0x230>
 100505c:	902d883a 	mov	r22,r18
 1005060:	81000017 	ldw	r4,0(r16)
 1005064:	80800417 	ldw	r2,16(r16)
 1005068:	b02f883a 	mov	r23,r22
 100506c:	81c00517 	ldw	r7,20(r16)
 1005070:	1100032e 	bgeu	r2,r4,1005080 <__sfvwrite_r+0x250>
 1005074:	80c00217 	ldw	r3,8(r16)
 1005078:	38c7883a 	add	r3,r7,r3
 100507c:	1d801816 	blt	r3,r22,10050e0 <__sfvwrite_r+0x2b0>
 1005080:	b1c03e16 	blt	r22,r7,100517c <__sfvwrite_r+0x34c>
 1005084:	80800917 	ldw	r2,36(r16)
 1005088:	81400717 	ldw	r5,28(r16)
 100508c:	e00d883a 	mov	r6,fp
 1005090:	da000115 	stw	r8,4(sp)
 1005094:	a809883a 	mov	r4,r21
 1005098:	103ee83a 	callr	r2
 100509c:	102f883a 	mov	r23,r2
 10050a0:	da000117 	ldw	r8,4(sp)
 10050a4:	00bfe00e 	bge	zero,r2,1005028 <__alt_mem_TCDM+0xff004028>
 10050a8:	9de7c83a 	sub	r19,r19,r23
 10050ac:	98001f26 	beq	r19,zero,100512c <__sfvwrite_r+0x2fc>
 10050b0:	a0800217 	ldw	r2,8(r20)
 10050b4:	e5f9883a 	add	fp,fp,r23
 10050b8:	95e5c83a 	sub	r18,r18,r23
 10050bc:	15efc83a 	sub	r23,r2,r23
 10050c0:	a5c00215 	stw	r23,8(r20)
 10050c4:	b83f8726 	beq	r23,zero,1004ee4 <__alt_mem_TCDM+0xff003ee4>
 10050c8:	903fe11e 	bne	r18,zero,1005050 <__alt_mem_TCDM+0xff004050>
 10050cc:	8f000017 	ldw	fp,0(r17)
 10050d0:	8c800117 	ldw	r18,4(r17)
 10050d4:	0011883a 	mov	r8,zero
 10050d8:	8c400204 	addi	r17,r17,8
 10050dc:	003fdb06 	br	100504c <__alt_mem_TCDM+0xff00404c>
 10050e0:	180d883a 	mov	r6,r3
 10050e4:	e00b883a 	mov	r5,fp
 10050e8:	da000115 	stw	r8,4(sp)
 10050ec:	d8c00015 	stw	r3,0(sp)
 10050f0:	10061440 	call	1006144 <memmove>
 10050f4:	d8c00017 	ldw	r3,0(sp)
 10050f8:	80800017 	ldw	r2,0(r16)
 10050fc:	800b883a 	mov	r5,r16
 1005100:	a809883a 	mov	r4,r21
 1005104:	10c5883a 	add	r2,r2,r3
 1005108:	80800015 	stw	r2,0(r16)
 100510c:	d8c00015 	stw	r3,0(sp)
 1005110:	10045d00 	call	10045d0 <_fflush_r>
 1005114:	d8c00017 	ldw	r3,0(sp)
 1005118:	da000117 	ldw	r8,4(sp)
 100511c:	103fc21e 	bne	r2,zero,1005028 <__alt_mem_TCDM+0xff004028>
 1005120:	182f883a 	mov	r23,r3
 1005124:	9de7c83a 	sub	r19,r19,r23
 1005128:	983fe11e 	bne	r19,zero,10050b0 <__alt_mem_TCDM+0xff0040b0>
 100512c:	800b883a 	mov	r5,r16
 1005130:	a809883a 	mov	r4,r21
 1005134:	10045d00 	call	10045d0 <_fflush_r>
 1005138:	103fbb1e 	bne	r2,zero,1005028 <__alt_mem_TCDM+0xff004028>
 100513c:	0011883a 	mov	r8,zero
 1005140:	003fdb06 	br	10050b0 <__alt_mem_TCDM+0xff0040b0>
 1005144:	94c0012e 	bgeu	r18,r19,100514c <__sfvwrite_r+0x31c>
 1005148:	9027883a 	mov	r19,r18
 100514c:	980d883a 	mov	r6,r19
 1005150:	e00b883a 	mov	r5,fp
 1005154:	10061440 	call	1006144 <memmove>
 1005158:	80800217 	ldw	r2,8(r16)
 100515c:	80c00017 	ldw	r3,0(r16)
 1005160:	14c5c83a 	sub	r2,r2,r19
 1005164:	1cc7883a 	add	r3,r3,r19
 1005168:	80800215 	stw	r2,8(r16)
 100516c:	80c00015 	stw	r3,0(r16)
 1005170:	10004326 	beq	r2,zero,1005280 <__sfvwrite_r+0x450>
 1005174:	9805883a 	mov	r2,r19
 1005178:	003f8606 	br	1004f94 <__alt_mem_TCDM+0xff003f94>
 100517c:	b00d883a 	mov	r6,r22
 1005180:	e00b883a 	mov	r5,fp
 1005184:	da000115 	stw	r8,4(sp)
 1005188:	10061440 	call	1006144 <memmove>
 100518c:	80800217 	ldw	r2,8(r16)
 1005190:	80c00017 	ldw	r3,0(r16)
 1005194:	da000117 	ldw	r8,4(sp)
 1005198:	1585c83a 	sub	r2,r2,r22
 100519c:	1dad883a 	add	r22,r3,r22
 10051a0:	80800215 	stw	r2,8(r16)
 10051a4:	85800015 	stw	r22,0(r16)
 10051a8:	003fbf06 	br	10050a8 <__alt_mem_TCDM+0xff0040a8>
 10051ac:	81000017 	ldw	r4,0(r16)
 10051b0:	9027883a 	mov	r19,r18
 10051b4:	902f883a 	mov	r23,r18
 10051b8:	003f6c06 	br	1004f6c <__alt_mem_TCDM+0xff003f6c>
 10051bc:	900d883a 	mov	r6,r18
 10051c0:	01400284 	movi	r5,10
 10051c4:	e009883a 	mov	r4,fp
 10051c8:	1005f180 	call	1005f18 <memchr>
 10051cc:	10003e26 	beq	r2,zero,10052c8 <__sfvwrite_r+0x498>
 10051d0:	10800044 	addi	r2,r2,1
 10051d4:	1727c83a 	sub	r19,r2,fp
 10051d8:	02000044 	movi	r8,1
 10051dc:	003f9d06 	br	1005054 <__alt_mem_TCDM+0xff004054>
 10051e0:	80800517 	ldw	r2,20(r16)
 10051e4:	81400417 	ldw	r5,16(r16)
 10051e8:	81c00017 	ldw	r7,0(r16)
 10051ec:	10a7883a 	add	r19,r2,r2
 10051f0:	9885883a 	add	r2,r19,r2
 10051f4:	1026d7fa 	srli	r19,r2,31
 10051f8:	396dc83a 	sub	r22,r7,r5
 10051fc:	b1000044 	addi	r4,r22,1
 1005200:	9885883a 	add	r2,r19,r2
 1005204:	1027d07a 	srai	r19,r2,1
 1005208:	2485883a 	add	r2,r4,r18
 100520c:	980d883a 	mov	r6,r19
 1005210:	9880022e 	bgeu	r19,r2,100521c <__sfvwrite_r+0x3ec>
 1005214:	1027883a 	mov	r19,r2
 1005218:	100d883a 	mov	r6,r2
 100521c:	18c1000c 	andi	r3,r3,1024
 1005220:	18001c26 	beq	r3,zero,1005294 <__sfvwrite_r+0x464>
 1005224:	300b883a 	mov	r5,r6
 1005228:	a809883a 	mov	r4,r21
 100522c:	100570c0 	call	100570c <_malloc_r>
 1005230:	102f883a 	mov	r23,r2
 1005234:	10002926 	beq	r2,zero,10052dc <__sfvwrite_r+0x4ac>
 1005238:	81400417 	ldw	r5,16(r16)
 100523c:	b00d883a 	mov	r6,r22
 1005240:	1009883a 	mov	r4,r2
 1005244:	1005ffc0 	call	1005ffc <memcpy>
 1005248:	8080030b 	ldhu	r2,12(r16)
 100524c:	00fedfc4 	movi	r3,-1153
 1005250:	10c4703a 	and	r2,r2,r3
 1005254:	10802014 	ori	r2,r2,128
 1005258:	8080030d 	sth	r2,12(r16)
 100525c:	bd89883a 	add	r4,r23,r22
 1005260:	9d8fc83a 	sub	r7,r19,r22
 1005264:	85c00415 	stw	r23,16(r16)
 1005268:	84c00515 	stw	r19,20(r16)
 100526c:	81000015 	stw	r4,0(r16)
 1005270:	9027883a 	mov	r19,r18
 1005274:	81c00215 	stw	r7,8(r16)
 1005278:	902f883a 	mov	r23,r18
 100527c:	003f3b06 	br	1004f6c <__alt_mem_TCDM+0xff003f6c>
 1005280:	800b883a 	mov	r5,r16
 1005284:	a809883a 	mov	r4,r21
 1005288:	10045d00 	call	10045d0 <_fflush_r>
 100528c:	103fb926 	beq	r2,zero,1005174 <__alt_mem_TCDM+0xff004174>
 1005290:	003f6506 	br	1005028 <__alt_mem_TCDM+0xff004028>
 1005294:	a809883a 	mov	r4,r21
 1005298:	10073c40 	call	10073c4 <_realloc_r>
 100529c:	102f883a 	mov	r23,r2
 10052a0:	103fee1e 	bne	r2,zero,100525c <__alt_mem_TCDM+0xff00425c>
 10052a4:	81400417 	ldw	r5,16(r16)
 10052a8:	a809883a 	mov	r4,r21
 10052ac:	1004b200 	call	1004b20 <_free_r>
 10052b0:	8080030b 	ldhu	r2,12(r16)
 10052b4:	00ffdfc4 	movi	r3,-129
 10052b8:	1884703a 	and	r2,r3,r2
 10052bc:	00c00304 	movi	r3,12
 10052c0:	a8c00015 	stw	r3,0(r21)
 10052c4:	003f5906 	br	100502c <__alt_mem_TCDM+0xff00402c>
 10052c8:	94c00044 	addi	r19,r18,1
 10052cc:	02000044 	movi	r8,1
 10052d0:	003f6006 	br	1005054 <__alt_mem_TCDM+0xff004054>
 10052d4:	00bfffc4 	movi	r2,-1
 10052d8:	003f0306 	br	1004ee8 <__alt_mem_TCDM+0xff003ee8>
 10052dc:	00800304 	movi	r2,12
 10052e0:	a8800015 	stw	r2,0(r21)
 10052e4:	8080030b 	ldhu	r2,12(r16)
 10052e8:	003f5006 	br	100502c <__alt_mem_TCDM+0xff00402c>

010052ec <_fwalk>:
 10052ec:	defff704 	addi	sp,sp,-36
 10052f0:	dd000415 	stw	r20,16(sp)
 10052f4:	dfc00815 	stw	ra,32(sp)
 10052f8:	ddc00715 	stw	r23,28(sp)
 10052fc:	dd800615 	stw	r22,24(sp)
 1005300:	dd400515 	stw	r21,20(sp)
 1005304:	dcc00315 	stw	r19,12(sp)
 1005308:	dc800215 	stw	r18,8(sp)
 100530c:	dc400115 	stw	r17,4(sp)
 1005310:	dc000015 	stw	r16,0(sp)
 1005314:	2500b804 	addi	r20,r4,736
 1005318:	a0002326 	beq	r20,zero,10053a8 <_fwalk+0xbc>
 100531c:	282b883a 	mov	r21,r5
 1005320:	002f883a 	mov	r23,zero
 1005324:	05800044 	movi	r22,1
 1005328:	04ffffc4 	movi	r19,-1
 100532c:	a4400117 	ldw	r17,4(r20)
 1005330:	a4800217 	ldw	r18,8(r20)
 1005334:	8c7fffc4 	addi	r17,r17,-1
 1005338:	88000d16 	blt	r17,zero,1005370 <_fwalk+0x84>
 100533c:	94000304 	addi	r16,r18,12
 1005340:	94800384 	addi	r18,r18,14
 1005344:	8080000b 	ldhu	r2,0(r16)
 1005348:	8c7fffc4 	addi	r17,r17,-1
 100534c:	813ffd04 	addi	r4,r16,-12
 1005350:	b080042e 	bgeu	r22,r2,1005364 <_fwalk+0x78>
 1005354:	9080000f 	ldh	r2,0(r18)
 1005358:	14c00226 	beq	r2,r19,1005364 <_fwalk+0x78>
 100535c:	a83ee83a 	callr	r21
 1005360:	b8aeb03a 	or	r23,r23,r2
 1005364:	84001a04 	addi	r16,r16,104
 1005368:	94801a04 	addi	r18,r18,104
 100536c:	8cfff51e 	bne	r17,r19,1005344 <__alt_mem_TCDM+0xff004344>
 1005370:	a5000017 	ldw	r20,0(r20)
 1005374:	a03fed1e 	bne	r20,zero,100532c <__alt_mem_TCDM+0xff00432c>
 1005378:	b805883a 	mov	r2,r23
 100537c:	dfc00817 	ldw	ra,32(sp)
 1005380:	ddc00717 	ldw	r23,28(sp)
 1005384:	dd800617 	ldw	r22,24(sp)
 1005388:	dd400517 	ldw	r21,20(sp)
 100538c:	dd000417 	ldw	r20,16(sp)
 1005390:	dcc00317 	ldw	r19,12(sp)
 1005394:	dc800217 	ldw	r18,8(sp)
 1005398:	dc400117 	ldw	r17,4(sp)
 100539c:	dc000017 	ldw	r16,0(sp)
 10053a0:	dec00904 	addi	sp,sp,36
 10053a4:	f800283a 	ret
 10053a8:	002f883a 	mov	r23,zero
 10053ac:	003ff206 	br	1005378 <__alt_mem_TCDM+0xff004378>

010053b0 <_fwalk_reent>:
 10053b0:	defff704 	addi	sp,sp,-36
 10053b4:	dd000415 	stw	r20,16(sp)
 10053b8:	dfc00815 	stw	ra,32(sp)
 10053bc:	ddc00715 	stw	r23,28(sp)
 10053c0:	dd800615 	stw	r22,24(sp)
 10053c4:	dd400515 	stw	r21,20(sp)
 10053c8:	dcc00315 	stw	r19,12(sp)
 10053cc:	dc800215 	stw	r18,8(sp)
 10053d0:	dc400115 	stw	r17,4(sp)
 10053d4:	dc000015 	stw	r16,0(sp)
 10053d8:	2500b804 	addi	r20,r4,736
 10053dc:	a0002326 	beq	r20,zero,100546c <_fwalk_reent+0xbc>
 10053e0:	282b883a 	mov	r21,r5
 10053e4:	2027883a 	mov	r19,r4
 10053e8:	002f883a 	mov	r23,zero
 10053ec:	05800044 	movi	r22,1
 10053f0:	04bfffc4 	movi	r18,-1
 10053f4:	a4400117 	ldw	r17,4(r20)
 10053f8:	a4000217 	ldw	r16,8(r20)
 10053fc:	8c7fffc4 	addi	r17,r17,-1
 1005400:	88000c16 	blt	r17,zero,1005434 <_fwalk_reent+0x84>
 1005404:	84000304 	addi	r16,r16,12
 1005408:	8080000b 	ldhu	r2,0(r16)
 100540c:	8c7fffc4 	addi	r17,r17,-1
 1005410:	817ffd04 	addi	r5,r16,-12
 1005414:	b080052e 	bgeu	r22,r2,100542c <_fwalk_reent+0x7c>
 1005418:	8080008f 	ldh	r2,2(r16)
 100541c:	9809883a 	mov	r4,r19
 1005420:	14800226 	beq	r2,r18,100542c <_fwalk_reent+0x7c>
 1005424:	a83ee83a 	callr	r21
 1005428:	b8aeb03a 	or	r23,r23,r2
 100542c:	84001a04 	addi	r16,r16,104
 1005430:	8cbff51e 	bne	r17,r18,1005408 <__alt_mem_TCDM+0xff004408>
 1005434:	a5000017 	ldw	r20,0(r20)
 1005438:	a03fee1e 	bne	r20,zero,10053f4 <__alt_mem_TCDM+0xff0043f4>
 100543c:	b805883a 	mov	r2,r23
 1005440:	dfc00817 	ldw	ra,32(sp)
 1005444:	ddc00717 	ldw	r23,28(sp)
 1005448:	dd800617 	ldw	r22,24(sp)
 100544c:	dd400517 	ldw	r21,20(sp)
 1005450:	dd000417 	ldw	r20,16(sp)
 1005454:	dcc00317 	ldw	r19,12(sp)
 1005458:	dc800217 	ldw	r18,8(sp)
 100545c:	dc400117 	ldw	r17,4(sp)
 1005460:	dc000017 	ldw	r16,0(sp)
 1005464:	dec00904 	addi	sp,sp,36
 1005468:	f800283a 	ret
 100546c:	002f883a 	mov	r23,zero
 1005470:	003ff206 	br	100543c <__alt_mem_TCDM+0xff00443c>

01005474 <_setlocale_r>:
 1005474:	30001b26 	beq	r6,zero,10054e4 <_setlocale_r+0x70>
 1005478:	01404074 	movhi	r5,257
 100547c:	defffe04 	addi	sp,sp,-8
 1005480:	297f7304 	addi	r5,r5,-564
 1005484:	3009883a 	mov	r4,r6
 1005488:	dc000015 	stw	r16,0(sp)
 100548c:	dfc00115 	stw	ra,4(sp)
 1005490:	3021883a 	mov	r16,r6
 1005494:	1007b2c0 	call	1007b2c <strcmp>
 1005498:	1000061e 	bne	r2,zero,10054b4 <_setlocale_r+0x40>
 100549c:	00804074 	movhi	r2,257
 10054a0:	10bf7204 	addi	r2,r2,-568
 10054a4:	dfc00117 	ldw	ra,4(sp)
 10054a8:	dc000017 	ldw	r16,0(sp)
 10054ac:	dec00204 	addi	sp,sp,8
 10054b0:	f800283a 	ret
 10054b4:	01404074 	movhi	r5,257
 10054b8:	297f7204 	addi	r5,r5,-568
 10054bc:	8009883a 	mov	r4,r16
 10054c0:	1007b2c0 	call	1007b2c <strcmp>
 10054c4:	103ff526 	beq	r2,zero,100549c <__alt_mem_TCDM+0xff00449c>
 10054c8:	01404074 	movhi	r5,257
 10054cc:	297f5d04 	addi	r5,r5,-652
 10054d0:	8009883a 	mov	r4,r16
 10054d4:	1007b2c0 	call	1007b2c <strcmp>
 10054d8:	103ff026 	beq	r2,zero,100549c <__alt_mem_TCDM+0xff00449c>
 10054dc:	0005883a 	mov	r2,zero
 10054e0:	003ff006 	br	10054a4 <__alt_mem_TCDM+0xff0044a4>
 10054e4:	00804074 	movhi	r2,257
 10054e8:	10bf7204 	addi	r2,r2,-568
 10054ec:	f800283a 	ret

010054f0 <__locale_charset>:
 10054f0:	00804074 	movhi	r2,257
 10054f4:	10816304 	addi	r2,r2,1420
 10054f8:	f800283a 	ret

010054fc <__locale_mb_cur_max>:
 10054fc:	00804074 	movhi	r2,257
 1005500:	1086ff04 	addi	r2,r2,7164
 1005504:	10800017 	ldw	r2,0(r2)
 1005508:	f800283a 	ret

0100550c <__locale_msgcharset>:
 100550c:	00804074 	movhi	r2,257
 1005510:	10815b04 	addi	r2,r2,1388
 1005514:	f800283a 	ret

01005518 <__locale_cjk_lang>:
 1005518:	0005883a 	mov	r2,zero
 100551c:	f800283a 	ret

01005520 <_localeconv_r>:
 1005520:	00804074 	movhi	r2,257
 1005524:	10816b04 	addi	r2,r2,1452
 1005528:	f800283a 	ret

0100552c <setlocale>:
 100552c:	00804074 	movhi	r2,257
 1005530:	1086fe04 	addi	r2,r2,7160
 1005534:	280d883a 	mov	r6,r5
 1005538:	200b883a 	mov	r5,r4
 100553c:	11000017 	ldw	r4,0(r2)
 1005540:	10054741 	jmpi	1005474 <_setlocale_r>

01005544 <localeconv>:
 1005544:	00804074 	movhi	r2,257
 1005548:	10816b04 	addi	r2,r2,1452
 100554c:	f800283a 	ret

01005550 <__smakebuf_r>:
 1005550:	2880030b 	ldhu	r2,12(r5)
 1005554:	10c0008c 	andi	r3,r2,2
 1005558:	1800411e 	bne	r3,zero,1005660 <__smakebuf_r+0x110>
 100555c:	deffec04 	addi	sp,sp,-80
 1005560:	dc000f15 	stw	r16,60(sp)
 1005564:	2821883a 	mov	r16,r5
 1005568:	2940038f 	ldh	r5,14(r5)
 100556c:	dc401015 	stw	r17,64(sp)
 1005570:	dfc01315 	stw	ra,76(sp)
 1005574:	dcc01215 	stw	r19,72(sp)
 1005578:	dc801115 	stw	r18,68(sp)
 100557c:	2023883a 	mov	r17,r4
 1005580:	28001c16 	blt	r5,zero,10055f4 <__smakebuf_r+0xa4>
 1005584:	d80d883a 	mov	r6,sp
 1005588:	10096d40 	call	10096d4 <_fstat_r>
 100558c:	10001816 	blt	r2,zero,10055f0 <__smakebuf_r+0xa0>
 1005590:	d8800117 	ldw	r2,4(sp)
 1005594:	00e00014 	movui	r3,32768
 1005598:	10bc000c 	andi	r2,r2,61440
 100559c:	14c80020 	cmpeqi	r19,r2,8192
 10055a0:	10c03726 	beq	r2,r3,1005680 <__smakebuf_r+0x130>
 10055a4:	80c0030b 	ldhu	r3,12(r16)
 10055a8:	18c20014 	ori	r3,r3,2048
 10055ac:	80c0030d 	sth	r3,12(r16)
 10055b0:	00c80004 	movi	r3,8192
 10055b4:	10c0521e 	bne	r2,r3,1005700 <__smakebuf_r+0x1b0>
 10055b8:	8140038f 	ldh	r5,14(r16)
 10055bc:	8809883a 	mov	r4,r17
 10055c0:	10097300 	call	1009730 <_isatty_r>
 10055c4:	10004c26 	beq	r2,zero,10056f8 <__smakebuf_r+0x1a8>
 10055c8:	8080030b 	ldhu	r2,12(r16)
 10055cc:	80c010c4 	addi	r3,r16,67
 10055d0:	80c00015 	stw	r3,0(r16)
 10055d4:	10800054 	ori	r2,r2,1
 10055d8:	8080030d 	sth	r2,12(r16)
 10055dc:	00800044 	movi	r2,1
 10055e0:	80c00415 	stw	r3,16(r16)
 10055e4:	80800515 	stw	r2,20(r16)
 10055e8:	04810004 	movi	r18,1024
 10055ec:	00000706 	br	100560c <__smakebuf_r+0xbc>
 10055f0:	8080030b 	ldhu	r2,12(r16)
 10055f4:	10c0200c 	andi	r3,r2,128
 10055f8:	18001f1e 	bne	r3,zero,1005678 <__smakebuf_r+0x128>
 10055fc:	04810004 	movi	r18,1024
 1005600:	10820014 	ori	r2,r2,2048
 1005604:	8080030d 	sth	r2,12(r16)
 1005608:	0027883a 	mov	r19,zero
 100560c:	900b883a 	mov	r5,r18
 1005610:	8809883a 	mov	r4,r17
 1005614:	100570c0 	call	100570c <_malloc_r>
 1005618:	10002c26 	beq	r2,zero,10056cc <__smakebuf_r+0x17c>
 100561c:	80c0030b 	ldhu	r3,12(r16)
 1005620:	01004034 	movhi	r4,256
 1005624:	21119904 	addi	r4,r4,18020
 1005628:	89000f15 	stw	r4,60(r17)
 100562c:	18c02014 	ori	r3,r3,128
 1005630:	80c0030d 	sth	r3,12(r16)
 1005634:	80800015 	stw	r2,0(r16)
 1005638:	80800415 	stw	r2,16(r16)
 100563c:	84800515 	stw	r18,20(r16)
 1005640:	98001a1e 	bne	r19,zero,10056ac <__smakebuf_r+0x15c>
 1005644:	dfc01317 	ldw	ra,76(sp)
 1005648:	dcc01217 	ldw	r19,72(sp)
 100564c:	dc801117 	ldw	r18,68(sp)
 1005650:	dc401017 	ldw	r17,64(sp)
 1005654:	dc000f17 	ldw	r16,60(sp)
 1005658:	dec01404 	addi	sp,sp,80
 100565c:	f800283a 	ret
 1005660:	288010c4 	addi	r2,r5,67
 1005664:	28800015 	stw	r2,0(r5)
 1005668:	28800415 	stw	r2,16(r5)
 100566c:	00800044 	movi	r2,1
 1005670:	28800515 	stw	r2,20(r5)
 1005674:	f800283a 	ret
 1005678:	04801004 	movi	r18,64
 100567c:	003fe006 	br	1005600 <__alt_mem_TCDM+0xff004600>
 1005680:	81000a17 	ldw	r4,40(r16)
 1005684:	00c04034 	movhi	r3,256
 1005688:	18deb204 	addi	r3,r3,31432
 100568c:	20ffc51e 	bne	r4,r3,10055a4 <__alt_mem_TCDM+0xff0045a4>
 1005690:	8080030b 	ldhu	r2,12(r16)
 1005694:	04810004 	movi	r18,1024
 1005698:	84801315 	stw	r18,76(r16)
 100569c:	1484b03a 	or	r2,r2,r18
 10056a0:	8080030d 	sth	r2,12(r16)
 10056a4:	0027883a 	mov	r19,zero
 10056a8:	003fd806 	br	100560c <__alt_mem_TCDM+0xff00460c>
 10056ac:	8140038f 	ldh	r5,14(r16)
 10056b0:	8809883a 	mov	r4,r17
 10056b4:	10097300 	call	1009730 <_isatty_r>
 10056b8:	103fe226 	beq	r2,zero,1005644 <__alt_mem_TCDM+0xff004644>
 10056bc:	8080030b 	ldhu	r2,12(r16)
 10056c0:	10800054 	ori	r2,r2,1
 10056c4:	8080030d 	sth	r2,12(r16)
 10056c8:	003fde06 	br	1005644 <__alt_mem_TCDM+0xff004644>
 10056cc:	8080030b 	ldhu	r2,12(r16)
 10056d0:	10c0800c 	andi	r3,r2,512
 10056d4:	183fdb1e 	bne	r3,zero,1005644 <__alt_mem_TCDM+0xff004644>
 10056d8:	10800094 	ori	r2,r2,2
 10056dc:	80c010c4 	addi	r3,r16,67
 10056e0:	8080030d 	sth	r2,12(r16)
 10056e4:	00800044 	movi	r2,1
 10056e8:	80c00015 	stw	r3,0(r16)
 10056ec:	80c00415 	stw	r3,16(r16)
 10056f0:	80800515 	stw	r2,20(r16)
 10056f4:	003fd306 	br	1005644 <__alt_mem_TCDM+0xff004644>
 10056f8:	04810004 	movi	r18,1024
 10056fc:	003fc306 	br	100560c <__alt_mem_TCDM+0xff00460c>
 1005700:	0027883a 	mov	r19,zero
 1005704:	04810004 	movi	r18,1024
 1005708:	003fc006 	br	100560c <__alt_mem_TCDM+0xff00460c>

0100570c <_malloc_r>:
 100570c:	defff504 	addi	sp,sp,-44
 1005710:	dc800315 	stw	r18,12(sp)
 1005714:	dfc00a15 	stw	ra,40(sp)
 1005718:	df000915 	stw	fp,36(sp)
 100571c:	ddc00815 	stw	r23,32(sp)
 1005720:	dd800715 	stw	r22,28(sp)
 1005724:	dd400615 	stw	r21,24(sp)
 1005728:	dd000515 	stw	r20,20(sp)
 100572c:	dcc00415 	stw	r19,16(sp)
 1005730:	dc400215 	stw	r17,8(sp)
 1005734:	dc000115 	stw	r16,4(sp)
 1005738:	288002c4 	addi	r2,r5,11
 100573c:	00c00584 	movi	r3,22
 1005740:	2025883a 	mov	r18,r4
 1005744:	18807f2e 	bgeu	r3,r2,1005944 <_malloc_r+0x238>
 1005748:	047ffe04 	movi	r17,-8
 100574c:	1462703a 	and	r17,r2,r17
 1005750:	8800a316 	blt	r17,zero,10059e0 <_malloc_r+0x2d4>
 1005754:	8940a236 	bltu	r17,r5,10059e0 <_malloc_r+0x2d4>
 1005758:	100d54c0 	call	100d54c <__malloc_lock>
 100575c:	00807dc4 	movi	r2,503
 1005760:	1441e92e 	bgeu	r2,r17,1005f08 <_malloc_r+0x7fc>
 1005764:	8804d27a 	srli	r2,r17,9
 1005768:	1000a126 	beq	r2,zero,10059f0 <_malloc_r+0x2e4>
 100576c:	00c00104 	movi	r3,4
 1005770:	18811e36 	bltu	r3,r2,1005bec <_malloc_r+0x4e0>
 1005774:	8804d1ba 	srli	r2,r17,6
 1005778:	12000e44 	addi	r8,r2,57
 100577c:	11c00e04 	addi	r7,r2,56
 1005780:	4209883a 	add	r4,r8,r8
 1005784:	04c04074 	movhi	r19,257
 1005788:	2109883a 	add	r4,r4,r4
 100578c:	9cc17904 	addi	r19,r19,1508
 1005790:	2109883a 	add	r4,r4,r4
 1005794:	9909883a 	add	r4,r19,r4
 1005798:	24000117 	ldw	r16,4(r4)
 100579c:	213ffe04 	addi	r4,r4,-8
 10057a0:	24009726 	beq	r4,r16,1005a00 <_malloc_r+0x2f4>
 10057a4:	80800117 	ldw	r2,4(r16)
 10057a8:	01bfff04 	movi	r6,-4
 10057ac:	014003c4 	movi	r5,15
 10057b0:	1184703a 	and	r2,r2,r6
 10057b4:	1447c83a 	sub	r3,r2,r17
 10057b8:	28c00716 	blt	r5,r3,10057d8 <_malloc_r+0xcc>
 10057bc:	1800920e 	bge	r3,zero,1005a08 <_malloc_r+0x2fc>
 10057c0:	84000317 	ldw	r16,12(r16)
 10057c4:	24008e26 	beq	r4,r16,1005a00 <_malloc_r+0x2f4>
 10057c8:	80800117 	ldw	r2,4(r16)
 10057cc:	1184703a 	and	r2,r2,r6
 10057d0:	1447c83a 	sub	r3,r2,r17
 10057d4:	28fff90e 	bge	r5,r3,10057bc <__alt_mem_TCDM+0xff0047bc>
 10057d8:	3809883a 	mov	r4,r7
 10057dc:	01804074 	movhi	r6,257
 10057e0:	9c000417 	ldw	r16,16(r19)
 10057e4:	31817904 	addi	r6,r6,1508
 10057e8:	32000204 	addi	r8,r6,8
 10057ec:	82013426 	beq	r16,r8,1005cc0 <_malloc_r+0x5b4>
 10057f0:	80c00117 	ldw	r3,4(r16)
 10057f4:	00bfff04 	movi	r2,-4
 10057f8:	188e703a 	and	r7,r3,r2
 10057fc:	3c45c83a 	sub	r2,r7,r17
 1005800:	00c003c4 	movi	r3,15
 1005804:	18811f16 	blt	r3,r2,1005c84 <_malloc_r+0x578>
 1005808:	32000515 	stw	r8,20(r6)
 100580c:	32000415 	stw	r8,16(r6)
 1005810:	10007f0e 	bge	r2,zero,1005a10 <_malloc_r+0x304>
 1005814:	00807fc4 	movi	r2,511
 1005818:	11c0fd36 	bltu	r2,r7,1005c10 <_malloc_r+0x504>
 100581c:	3806d0fa 	srli	r3,r7,3
 1005820:	01c00044 	movi	r7,1
 1005824:	30800117 	ldw	r2,4(r6)
 1005828:	19400044 	addi	r5,r3,1
 100582c:	294b883a 	add	r5,r5,r5
 1005830:	1807d0ba 	srai	r3,r3,2
 1005834:	294b883a 	add	r5,r5,r5
 1005838:	294b883a 	add	r5,r5,r5
 100583c:	298b883a 	add	r5,r5,r6
 1005840:	38c6983a 	sll	r3,r7,r3
 1005844:	29c00017 	ldw	r7,0(r5)
 1005848:	2a7ffe04 	addi	r9,r5,-8
 100584c:	1886b03a 	or	r3,r3,r2
 1005850:	82400315 	stw	r9,12(r16)
 1005854:	81c00215 	stw	r7,8(r16)
 1005858:	30c00115 	stw	r3,4(r6)
 100585c:	2c000015 	stw	r16,0(r5)
 1005860:	3c000315 	stw	r16,12(r7)
 1005864:	2005d0ba 	srai	r2,r4,2
 1005868:	01400044 	movi	r5,1
 100586c:	288a983a 	sll	r5,r5,r2
 1005870:	19406f36 	bltu	r3,r5,1005a30 <_malloc_r+0x324>
 1005874:	28c4703a 	and	r2,r5,r3
 1005878:	10000a1e 	bne	r2,zero,10058a4 <_malloc_r+0x198>
 100587c:	00bfff04 	movi	r2,-4
 1005880:	294b883a 	add	r5,r5,r5
 1005884:	2088703a 	and	r4,r4,r2
 1005888:	28c4703a 	and	r2,r5,r3
 100588c:	21000104 	addi	r4,r4,4
 1005890:	1000041e 	bne	r2,zero,10058a4 <_malloc_r+0x198>
 1005894:	294b883a 	add	r5,r5,r5
 1005898:	28c4703a 	and	r2,r5,r3
 100589c:	21000104 	addi	r4,r4,4
 10058a0:	103ffc26 	beq	r2,zero,1005894 <__alt_mem_TCDM+0xff004894>
 10058a4:	02bfff04 	movi	r10,-4
 10058a8:	024003c4 	movi	r9,15
 10058ac:	21800044 	addi	r6,r4,1
 10058b0:	318d883a 	add	r6,r6,r6
 10058b4:	318d883a 	add	r6,r6,r6
 10058b8:	318d883a 	add	r6,r6,r6
 10058bc:	998d883a 	add	r6,r19,r6
 10058c0:	333ffe04 	addi	r12,r6,-8
 10058c4:	2017883a 	mov	r11,r4
 10058c8:	31800104 	addi	r6,r6,4
 10058cc:	34000017 	ldw	r16,0(r6)
 10058d0:	31fffd04 	addi	r7,r6,-12
 10058d4:	81c0041e 	bne	r16,r7,10058e8 <_malloc_r+0x1dc>
 10058d8:	0000fb06 	br	1005cc8 <_malloc_r+0x5bc>
 10058dc:	1801030e 	bge	r3,zero,1005cec <_malloc_r+0x5e0>
 10058e0:	84000317 	ldw	r16,12(r16)
 10058e4:	81c0f826 	beq	r16,r7,1005cc8 <_malloc_r+0x5bc>
 10058e8:	80800117 	ldw	r2,4(r16)
 10058ec:	1284703a 	and	r2,r2,r10
 10058f0:	1447c83a 	sub	r3,r2,r17
 10058f4:	48fff90e 	bge	r9,r3,10058dc <__alt_mem_TCDM+0xff0048dc>
 10058f8:	80800317 	ldw	r2,12(r16)
 10058fc:	81000217 	ldw	r4,8(r16)
 1005900:	89400054 	ori	r5,r17,1
 1005904:	81400115 	stw	r5,4(r16)
 1005908:	20800315 	stw	r2,12(r4)
 100590c:	11000215 	stw	r4,8(r2)
 1005910:	8463883a 	add	r17,r16,r17
 1005914:	9c400515 	stw	r17,20(r19)
 1005918:	9c400415 	stw	r17,16(r19)
 100591c:	18800054 	ori	r2,r3,1
 1005920:	88800115 	stw	r2,4(r17)
 1005924:	8a000315 	stw	r8,12(r17)
 1005928:	8a000215 	stw	r8,8(r17)
 100592c:	88e3883a 	add	r17,r17,r3
 1005930:	88c00015 	stw	r3,0(r17)
 1005934:	9009883a 	mov	r4,r18
 1005938:	100d5700 	call	100d570 <__malloc_unlock>
 100593c:	80800204 	addi	r2,r16,8
 1005940:	00001b06 	br	10059b0 <_malloc_r+0x2a4>
 1005944:	04400404 	movi	r17,16
 1005948:	89402536 	bltu	r17,r5,10059e0 <_malloc_r+0x2d4>
 100594c:	100d54c0 	call	100d54c <__malloc_lock>
 1005950:	00800184 	movi	r2,6
 1005954:	01000084 	movi	r4,2
 1005958:	04c04074 	movhi	r19,257
 100595c:	1085883a 	add	r2,r2,r2
 1005960:	9cc17904 	addi	r19,r19,1508
 1005964:	1085883a 	add	r2,r2,r2
 1005968:	9885883a 	add	r2,r19,r2
 100596c:	14000117 	ldw	r16,4(r2)
 1005970:	10fffe04 	addi	r3,r2,-8
 1005974:	80c0d926 	beq	r16,r3,1005cdc <_malloc_r+0x5d0>
 1005978:	80c00117 	ldw	r3,4(r16)
 100597c:	81000317 	ldw	r4,12(r16)
 1005980:	00bfff04 	movi	r2,-4
 1005984:	1884703a 	and	r2,r3,r2
 1005988:	81400217 	ldw	r5,8(r16)
 100598c:	8085883a 	add	r2,r16,r2
 1005990:	10c00117 	ldw	r3,4(r2)
 1005994:	29000315 	stw	r4,12(r5)
 1005998:	21400215 	stw	r5,8(r4)
 100599c:	18c00054 	ori	r3,r3,1
 10059a0:	10c00115 	stw	r3,4(r2)
 10059a4:	9009883a 	mov	r4,r18
 10059a8:	100d5700 	call	100d570 <__malloc_unlock>
 10059ac:	80800204 	addi	r2,r16,8
 10059b0:	dfc00a17 	ldw	ra,40(sp)
 10059b4:	df000917 	ldw	fp,36(sp)
 10059b8:	ddc00817 	ldw	r23,32(sp)
 10059bc:	dd800717 	ldw	r22,28(sp)
 10059c0:	dd400617 	ldw	r21,24(sp)
 10059c4:	dd000517 	ldw	r20,20(sp)
 10059c8:	dcc00417 	ldw	r19,16(sp)
 10059cc:	dc800317 	ldw	r18,12(sp)
 10059d0:	dc400217 	ldw	r17,8(sp)
 10059d4:	dc000117 	ldw	r16,4(sp)
 10059d8:	dec00b04 	addi	sp,sp,44
 10059dc:	f800283a 	ret
 10059e0:	00800304 	movi	r2,12
 10059e4:	90800015 	stw	r2,0(r18)
 10059e8:	0005883a 	mov	r2,zero
 10059ec:	003ff006 	br	10059b0 <__alt_mem_TCDM+0xff0049b0>
 10059f0:	01002004 	movi	r4,128
 10059f4:	02001004 	movi	r8,64
 10059f8:	01c00fc4 	movi	r7,63
 10059fc:	003f6106 	br	1005784 <__alt_mem_TCDM+0xff004784>
 1005a00:	4009883a 	mov	r4,r8
 1005a04:	003f7506 	br	10057dc <__alt_mem_TCDM+0xff0047dc>
 1005a08:	81000317 	ldw	r4,12(r16)
 1005a0c:	003fde06 	br	1005988 <__alt_mem_TCDM+0xff004988>
 1005a10:	81c5883a 	add	r2,r16,r7
 1005a14:	11400117 	ldw	r5,4(r2)
 1005a18:	9009883a 	mov	r4,r18
 1005a1c:	29400054 	ori	r5,r5,1
 1005a20:	11400115 	stw	r5,4(r2)
 1005a24:	100d5700 	call	100d570 <__malloc_unlock>
 1005a28:	80800204 	addi	r2,r16,8
 1005a2c:	003fe006 	br	10059b0 <__alt_mem_TCDM+0xff0049b0>
 1005a30:	9c000217 	ldw	r16,8(r19)
 1005a34:	00bfff04 	movi	r2,-4
 1005a38:	85800117 	ldw	r22,4(r16)
 1005a3c:	b0ac703a 	and	r22,r22,r2
 1005a40:	b4400336 	bltu	r22,r17,1005a50 <_malloc_r+0x344>
 1005a44:	b445c83a 	sub	r2,r22,r17
 1005a48:	00c003c4 	movi	r3,15
 1005a4c:	18805d16 	blt	r3,r2,1005bc4 <_malloc_r+0x4b8>
 1005a50:	05c04074 	movhi	r23,257
 1005a54:	00804074 	movhi	r2,257
 1005a58:	108dcd04 	addi	r2,r2,14132
 1005a5c:	bdc70004 	addi	r23,r23,7168
 1005a60:	15400017 	ldw	r21,0(r2)
 1005a64:	b8c00017 	ldw	r3,0(r23)
 1005a68:	00bfffc4 	movi	r2,-1
 1005a6c:	858d883a 	add	r6,r16,r22
 1005a70:	8d6b883a 	add	r21,r17,r21
 1005a74:	1880ea26 	beq	r3,r2,1005e20 <_malloc_r+0x714>
 1005a78:	ad4403c4 	addi	r21,r21,4111
 1005a7c:	00bc0004 	movi	r2,-4096
 1005a80:	a8aa703a 	and	r21,r21,r2
 1005a84:	a80b883a 	mov	r5,r21
 1005a88:	9009883a 	mov	r4,r18
 1005a8c:	d9800015 	stw	r6,0(sp)
 1005a90:	100799c0 	call	100799c <_sbrk_r>
 1005a94:	1029883a 	mov	r20,r2
 1005a98:	00bfffc4 	movi	r2,-1
 1005a9c:	d9800017 	ldw	r6,0(sp)
 1005aa0:	a080e826 	beq	r20,r2,1005e44 <_malloc_r+0x738>
 1005aa4:	a180a636 	bltu	r20,r6,1005d40 <_malloc_r+0x634>
 1005aa8:	07004074 	movhi	fp,257
 1005aac:	e70dd604 	addi	fp,fp,14168
 1005ab0:	e0800017 	ldw	r2,0(fp)
 1005ab4:	a887883a 	add	r3,r21,r2
 1005ab8:	e0c00015 	stw	r3,0(fp)
 1005abc:	3500e626 	beq	r6,r20,1005e58 <_malloc_r+0x74c>
 1005ac0:	b9000017 	ldw	r4,0(r23)
 1005ac4:	00bfffc4 	movi	r2,-1
 1005ac8:	2080ee26 	beq	r4,r2,1005e84 <_malloc_r+0x778>
 1005acc:	a185c83a 	sub	r2,r20,r6
 1005ad0:	10c5883a 	add	r2,r2,r3
 1005ad4:	e0800015 	stw	r2,0(fp)
 1005ad8:	a0c001cc 	andi	r3,r20,7
 1005adc:	1800bc26 	beq	r3,zero,1005dd0 <_malloc_r+0x6c4>
 1005ae0:	a0e9c83a 	sub	r20,r20,r3
 1005ae4:	00840204 	movi	r2,4104
 1005ae8:	a5000204 	addi	r20,r20,8
 1005aec:	10c7c83a 	sub	r3,r2,r3
 1005af0:	a545883a 	add	r2,r20,r21
 1005af4:	1083ffcc 	andi	r2,r2,4095
 1005af8:	18abc83a 	sub	r21,r3,r2
 1005afc:	a80b883a 	mov	r5,r21
 1005b00:	9009883a 	mov	r4,r18
 1005b04:	100799c0 	call	100799c <_sbrk_r>
 1005b08:	00ffffc4 	movi	r3,-1
 1005b0c:	10c0e126 	beq	r2,r3,1005e94 <_malloc_r+0x788>
 1005b10:	1505c83a 	sub	r2,r2,r20
 1005b14:	1545883a 	add	r2,r2,r21
 1005b18:	10800054 	ori	r2,r2,1
 1005b1c:	e0c00017 	ldw	r3,0(fp)
 1005b20:	9d000215 	stw	r20,8(r19)
 1005b24:	a0800115 	stw	r2,4(r20)
 1005b28:	a8c7883a 	add	r3,r21,r3
 1005b2c:	e0c00015 	stw	r3,0(fp)
 1005b30:	84c00e26 	beq	r16,r19,1005b6c <_malloc_r+0x460>
 1005b34:	018003c4 	movi	r6,15
 1005b38:	3580a72e 	bgeu	r6,r22,1005dd8 <_malloc_r+0x6cc>
 1005b3c:	81400117 	ldw	r5,4(r16)
 1005b40:	013ffe04 	movi	r4,-8
 1005b44:	b0bffd04 	addi	r2,r22,-12
 1005b48:	1104703a 	and	r2,r2,r4
 1005b4c:	2900004c 	andi	r4,r5,1
 1005b50:	2088b03a 	or	r4,r4,r2
 1005b54:	81000115 	stw	r4,4(r16)
 1005b58:	01400144 	movi	r5,5
 1005b5c:	8089883a 	add	r4,r16,r2
 1005b60:	21400115 	stw	r5,4(r4)
 1005b64:	21400215 	stw	r5,8(r4)
 1005b68:	3080cd36 	bltu	r6,r2,1005ea0 <_malloc_r+0x794>
 1005b6c:	00804074 	movhi	r2,257
 1005b70:	108dcc04 	addi	r2,r2,14128
 1005b74:	11000017 	ldw	r4,0(r2)
 1005b78:	20c0012e 	bgeu	r4,r3,1005b80 <_malloc_r+0x474>
 1005b7c:	10c00015 	stw	r3,0(r2)
 1005b80:	00804074 	movhi	r2,257
 1005b84:	108dcb04 	addi	r2,r2,14124
 1005b88:	11000017 	ldw	r4,0(r2)
 1005b8c:	9c000217 	ldw	r16,8(r19)
 1005b90:	20c0012e 	bgeu	r4,r3,1005b98 <_malloc_r+0x48c>
 1005b94:	10c00015 	stw	r3,0(r2)
 1005b98:	80c00117 	ldw	r3,4(r16)
 1005b9c:	00bfff04 	movi	r2,-4
 1005ba0:	1886703a 	and	r3,r3,r2
 1005ba4:	1c45c83a 	sub	r2,r3,r17
 1005ba8:	1c400236 	bltu	r3,r17,1005bb4 <_malloc_r+0x4a8>
 1005bac:	00c003c4 	movi	r3,15
 1005bb0:	18800416 	blt	r3,r2,1005bc4 <_malloc_r+0x4b8>
 1005bb4:	9009883a 	mov	r4,r18
 1005bb8:	100d5700 	call	100d570 <__malloc_unlock>
 1005bbc:	0005883a 	mov	r2,zero
 1005bc0:	003f7b06 	br	10059b0 <__alt_mem_TCDM+0xff0049b0>
 1005bc4:	88c00054 	ori	r3,r17,1
 1005bc8:	80c00115 	stw	r3,4(r16)
 1005bcc:	8463883a 	add	r17,r16,r17
 1005bd0:	10800054 	ori	r2,r2,1
 1005bd4:	9c400215 	stw	r17,8(r19)
 1005bd8:	88800115 	stw	r2,4(r17)
 1005bdc:	9009883a 	mov	r4,r18
 1005be0:	100d5700 	call	100d570 <__malloc_unlock>
 1005be4:	80800204 	addi	r2,r16,8
 1005be8:	003f7106 	br	10059b0 <__alt_mem_TCDM+0xff0049b0>
 1005bec:	00c00504 	movi	r3,20
 1005bf0:	18804a2e 	bgeu	r3,r2,1005d1c <_malloc_r+0x610>
 1005bf4:	00c01504 	movi	r3,84
 1005bf8:	18806e36 	bltu	r3,r2,1005db4 <_malloc_r+0x6a8>
 1005bfc:	8804d33a 	srli	r2,r17,12
 1005c00:	12001bc4 	addi	r8,r2,111
 1005c04:	11c01b84 	addi	r7,r2,110
 1005c08:	4209883a 	add	r4,r8,r8
 1005c0c:	003edd06 	br	1005784 <__alt_mem_TCDM+0xff004784>
 1005c10:	3804d27a 	srli	r2,r7,9
 1005c14:	00c00104 	movi	r3,4
 1005c18:	1880442e 	bgeu	r3,r2,1005d2c <_malloc_r+0x620>
 1005c1c:	00c00504 	movi	r3,20
 1005c20:	18808136 	bltu	r3,r2,1005e28 <_malloc_r+0x71c>
 1005c24:	11401704 	addi	r5,r2,92
 1005c28:	10c016c4 	addi	r3,r2,91
 1005c2c:	294b883a 	add	r5,r5,r5
 1005c30:	294b883a 	add	r5,r5,r5
 1005c34:	294b883a 	add	r5,r5,r5
 1005c38:	994b883a 	add	r5,r19,r5
 1005c3c:	28800017 	ldw	r2,0(r5)
 1005c40:	01804074 	movhi	r6,257
 1005c44:	297ffe04 	addi	r5,r5,-8
 1005c48:	31817904 	addi	r6,r6,1508
 1005c4c:	28806526 	beq	r5,r2,1005de4 <_malloc_r+0x6d8>
 1005c50:	01bfff04 	movi	r6,-4
 1005c54:	10c00117 	ldw	r3,4(r2)
 1005c58:	1986703a 	and	r3,r3,r6
 1005c5c:	38c0022e 	bgeu	r7,r3,1005c68 <_malloc_r+0x55c>
 1005c60:	10800217 	ldw	r2,8(r2)
 1005c64:	28bffb1e 	bne	r5,r2,1005c54 <__alt_mem_TCDM+0xff004c54>
 1005c68:	11400317 	ldw	r5,12(r2)
 1005c6c:	98c00117 	ldw	r3,4(r19)
 1005c70:	81400315 	stw	r5,12(r16)
 1005c74:	80800215 	stw	r2,8(r16)
 1005c78:	2c000215 	stw	r16,8(r5)
 1005c7c:	14000315 	stw	r16,12(r2)
 1005c80:	003ef806 	br	1005864 <__alt_mem_TCDM+0xff004864>
 1005c84:	88c00054 	ori	r3,r17,1
 1005c88:	80c00115 	stw	r3,4(r16)
 1005c8c:	8463883a 	add	r17,r16,r17
 1005c90:	34400515 	stw	r17,20(r6)
 1005c94:	34400415 	stw	r17,16(r6)
 1005c98:	10c00054 	ori	r3,r2,1
 1005c9c:	8a000315 	stw	r8,12(r17)
 1005ca0:	8a000215 	stw	r8,8(r17)
 1005ca4:	88c00115 	stw	r3,4(r17)
 1005ca8:	88a3883a 	add	r17,r17,r2
 1005cac:	88800015 	stw	r2,0(r17)
 1005cb0:	9009883a 	mov	r4,r18
 1005cb4:	100d5700 	call	100d570 <__malloc_unlock>
 1005cb8:	80800204 	addi	r2,r16,8
 1005cbc:	003f3c06 	br	10059b0 <__alt_mem_TCDM+0xff0049b0>
 1005cc0:	30c00117 	ldw	r3,4(r6)
 1005cc4:	003ee706 	br	1005864 <__alt_mem_TCDM+0xff004864>
 1005cc8:	5ac00044 	addi	r11,r11,1
 1005ccc:	588000cc 	andi	r2,r11,3
 1005cd0:	31800204 	addi	r6,r6,8
 1005cd4:	103efd1e 	bne	r2,zero,10058cc <__alt_mem_TCDM+0xff0048cc>
 1005cd8:	00002406 	br	1005d6c <_malloc_r+0x660>
 1005cdc:	14000317 	ldw	r16,12(r2)
 1005ce0:	143f251e 	bne	r2,r16,1005978 <__alt_mem_TCDM+0xff004978>
 1005ce4:	21000084 	addi	r4,r4,2
 1005ce8:	003ebc06 	br	10057dc <__alt_mem_TCDM+0xff0047dc>
 1005cec:	8085883a 	add	r2,r16,r2
 1005cf0:	10c00117 	ldw	r3,4(r2)
 1005cf4:	81000317 	ldw	r4,12(r16)
 1005cf8:	81400217 	ldw	r5,8(r16)
 1005cfc:	18c00054 	ori	r3,r3,1
 1005d00:	10c00115 	stw	r3,4(r2)
 1005d04:	29000315 	stw	r4,12(r5)
 1005d08:	21400215 	stw	r5,8(r4)
 1005d0c:	9009883a 	mov	r4,r18
 1005d10:	100d5700 	call	100d570 <__malloc_unlock>
 1005d14:	80800204 	addi	r2,r16,8
 1005d18:	003f2506 	br	10059b0 <__alt_mem_TCDM+0xff0049b0>
 1005d1c:	12001704 	addi	r8,r2,92
 1005d20:	11c016c4 	addi	r7,r2,91
 1005d24:	4209883a 	add	r4,r8,r8
 1005d28:	003e9606 	br	1005784 <__alt_mem_TCDM+0xff004784>
 1005d2c:	3804d1ba 	srli	r2,r7,6
 1005d30:	11400e44 	addi	r5,r2,57
 1005d34:	10c00e04 	addi	r3,r2,56
 1005d38:	294b883a 	add	r5,r5,r5
 1005d3c:	003fbc06 	br	1005c30 <__alt_mem_TCDM+0xff004c30>
 1005d40:	84ff5926 	beq	r16,r19,1005aa8 <__alt_mem_TCDM+0xff004aa8>
 1005d44:	00804074 	movhi	r2,257
 1005d48:	10817904 	addi	r2,r2,1508
 1005d4c:	14000217 	ldw	r16,8(r2)
 1005d50:	00bfff04 	movi	r2,-4
 1005d54:	80c00117 	ldw	r3,4(r16)
 1005d58:	1886703a 	and	r3,r3,r2
 1005d5c:	003f9106 	br	1005ba4 <__alt_mem_TCDM+0xff004ba4>
 1005d60:	60800217 	ldw	r2,8(r12)
 1005d64:	213fffc4 	addi	r4,r4,-1
 1005d68:	1300651e 	bne	r2,r12,1005f00 <_malloc_r+0x7f4>
 1005d6c:	208000cc 	andi	r2,r4,3
 1005d70:	633ffe04 	addi	r12,r12,-8
 1005d74:	103ffa1e 	bne	r2,zero,1005d60 <__alt_mem_TCDM+0xff004d60>
 1005d78:	98800117 	ldw	r2,4(r19)
 1005d7c:	0146303a 	nor	r3,zero,r5
 1005d80:	1884703a 	and	r2,r3,r2
 1005d84:	98800115 	stw	r2,4(r19)
 1005d88:	294b883a 	add	r5,r5,r5
 1005d8c:	117f2836 	bltu	r2,r5,1005a30 <__alt_mem_TCDM+0xff004a30>
 1005d90:	283f2726 	beq	r5,zero,1005a30 <__alt_mem_TCDM+0xff004a30>
 1005d94:	2886703a 	and	r3,r5,r2
 1005d98:	5809883a 	mov	r4,r11
 1005d9c:	183ec31e 	bne	r3,zero,10058ac <__alt_mem_TCDM+0xff0048ac>
 1005da0:	294b883a 	add	r5,r5,r5
 1005da4:	2886703a 	and	r3,r5,r2
 1005da8:	21000104 	addi	r4,r4,4
 1005dac:	183ffc26 	beq	r3,zero,1005da0 <__alt_mem_TCDM+0xff004da0>
 1005db0:	003ebe06 	br	10058ac <__alt_mem_TCDM+0xff0048ac>
 1005db4:	00c05504 	movi	r3,340
 1005db8:	18801236 	bltu	r3,r2,1005e04 <_malloc_r+0x6f8>
 1005dbc:	8804d3fa 	srli	r2,r17,15
 1005dc0:	12001e04 	addi	r8,r2,120
 1005dc4:	11c01dc4 	addi	r7,r2,119
 1005dc8:	4209883a 	add	r4,r8,r8
 1005dcc:	003e6d06 	br	1005784 <__alt_mem_TCDM+0xff004784>
 1005dd0:	00c40004 	movi	r3,4096
 1005dd4:	003f4606 	br	1005af0 <__alt_mem_TCDM+0xff004af0>
 1005dd8:	00800044 	movi	r2,1
 1005ddc:	a0800115 	stw	r2,4(r20)
 1005de0:	003f7406 	br	1005bb4 <__alt_mem_TCDM+0xff004bb4>
 1005de4:	1805d0ba 	srai	r2,r3,2
 1005de8:	01c00044 	movi	r7,1
 1005dec:	30c00117 	ldw	r3,4(r6)
 1005df0:	388e983a 	sll	r7,r7,r2
 1005df4:	2805883a 	mov	r2,r5
 1005df8:	38c6b03a 	or	r3,r7,r3
 1005dfc:	30c00115 	stw	r3,4(r6)
 1005e00:	003f9b06 	br	1005c70 <__alt_mem_TCDM+0xff004c70>
 1005e04:	00c15504 	movi	r3,1364
 1005e08:	18801a36 	bltu	r3,r2,1005e74 <_malloc_r+0x768>
 1005e0c:	8804d4ba 	srli	r2,r17,18
 1005e10:	12001f44 	addi	r8,r2,125
 1005e14:	11c01f04 	addi	r7,r2,124
 1005e18:	4209883a 	add	r4,r8,r8
 1005e1c:	003e5906 	br	1005784 <__alt_mem_TCDM+0xff004784>
 1005e20:	ad400404 	addi	r21,r21,16
 1005e24:	003f1706 	br	1005a84 <__alt_mem_TCDM+0xff004a84>
 1005e28:	00c01504 	movi	r3,84
 1005e2c:	18802336 	bltu	r3,r2,1005ebc <_malloc_r+0x7b0>
 1005e30:	3804d33a 	srli	r2,r7,12
 1005e34:	11401bc4 	addi	r5,r2,111
 1005e38:	10c01b84 	addi	r3,r2,110
 1005e3c:	294b883a 	add	r5,r5,r5
 1005e40:	003f7b06 	br	1005c30 <__alt_mem_TCDM+0xff004c30>
 1005e44:	9c000217 	ldw	r16,8(r19)
 1005e48:	00bfff04 	movi	r2,-4
 1005e4c:	80c00117 	ldw	r3,4(r16)
 1005e50:	1886703a 	and	r3,r3,r2
 1005e54:	003f5306 	br	1005ba4 <__alt_mem_TCDM+0xff004ba4>
 1005e58:	3083ffcc 	andi	r2,r6,4095
 1005e5c:	103f181e 	bne	r2,zero,1005ac0 <__alt_mem_TCDM+0xff004ac0>
 1005e60:	99000217 	ldw	r4,8(r19)
 1005e64:	b545883a 	add	r2,r22,r21
 1005e68:	10800054 	ori	r2,r2,1
 1005e6c:	20800115 	stw	r2,4(r4)
 1005e70:	003f3e06 	br	1005b6c <__alt_mem_TCDM+0xff004b6c>
 1005e74:	01003f84 	movi	r4,254
 1005e78:	02001fc4 	movi	r8,127
 1005e7c:	01c01f84 	movi	r7,126
 1005e80:	003e4006 	br	1005784 <__alt_mem_TCDM+0xff004784>
 1005e84:	00804074 	movhi	r2,257
 1005e88:	10870004 	addi	r2,r2,7168
 1005e8c:	15000015 	stw	r20,0(r2)
 1005e90:	003f1106 	br	1005ad8 <__alt_mem_TCDM+0xff004ad8>
 1005e94:	00800044 	movi	r2,1
 1005e98:	002b883a 	mov	r21,zero
 1005e9c:	003f1f06 	br	1005b1c <__alt_mem_TCDM+0xff004b1c>
 1005ea0:	81400204 	addi	r5,r16,8
 1005ea4:	9009883a 	mov	r4,r18
 1005ea8:	1004b200 	call	1004b20 <_free_r>
 1005eac:	00804074 	movhi	r2,257
 1005eb0:	108dd604 	addi	r2,r2,14168
 1005eb4:	10c00017 	ldw	r3,0(r2)
 1005eb8:	003f2c06 	br	1005b6c <__alt_mem_TCDM+0xff004b6c>
 1005ebc:	00c05504 	movi	r3,340
 1005ec0:	18800536 	bltu	r3,r2,1005ed8 <_malloc_r+0x7cc>
 1005ec4:	3804d3fa 	srli	r2,r7,15
 1005ec8:	11401e04 	addi	r5,r2,120
 1005ecc:	10c01dc4 	addi	r3,r2,119
 1005ed0:	294b883a 	add	r5,r5,r5
 1005ed4:	003f5606 	br	1005c30 <__alt_mem_TCDM+0xff004c30>
 1005ed8:	00c15504 	movi	r3,1364
 1005edc:	18800536 	bltu	r3,r2,1005ef4 <_malloc_r+0x7e8>
 1005ee0:	3804d4ba 	srli	r2,r7,18
 1005ee4:	11401f44 	addi	r5,r2,125
 1005ee8:	10c01f04 	addi	r3,r2,124
 1005eec:	294b883a 	add	r5,r5,r5
 1005ef0:	003f4f06 	br	1005c30 <__alt_mem_TCDM+0xff004c30>
 1005ef4:	01403f84 	movi	r5,254
 1005ef8:	00c01f84 	movi	r3,126
 1005efc:	003f4c06 	br	1005c30 <__alt_mem_TCDM+0xff004c30>
 1005f00:	98800117 	ldw	r2,4(r19)
 1005f04:	003fa006 	br	1005d88 <__alt_mem_TCDM+0xff004d88>
 1005f08:	8808d0fa 	srli	r4,r17,3
 1005f0c:	20800044 	addi	r2,r4,1
 1005f10:	1085883a 	add	r2,r2,r2
 1005f14:	003e9006 	br	1005958 <__alt_mem_TCDM+0xff004958>

01005f18 <memchr>:
 1005f18:	208000cc 	andi	r2,r4,3
 1005f1c:	280f883a 	mov	r7,r5
 1005f20:	10003426 	beq	r2,zero,1005ff4 <memchr+0xdc>
 1005f24:	30bfffc4 	addi	r2,r6,-1
 1005f28:	30001a26 	beq	r6,zero,1005f94 <memchr+0x7c>
 1005f2c:	20c00003 	ldbu	r3,0(r4)
 1005f30:	29803fcc 	andi	r6,r5,255
 1005f34:	30c0051e 	bne	r6,r3,1005f4c <memchr+0x34>
 1005f38:	00001806 	br	1005f9c <memchr+0x84>
 1005f3c:	10001526 	beq	r2,zero,1005f94 <memchr+0x7c>
 1005f40:	20c00003 	ldbu	r3,0(r4)
 1005f44:	10bfffc4 	addi	r2,r2,-1
 1005f48:	30c01426 	beq	r6,r3,1005f9c <memchr+0x84>
 1005f4c:	21000044 	addi	r4,r4,1
 1005f50:	20c000cc 	andi	r3,r4,3
 1005f54:	183ff91e 	bne	r3,zero,1005f3c <__alt_mem_TCDM+0xff004f3c>
 1005f58:	020000c4 	movi	r8,3
 1005f5c:	40801136 	bltu	r8,r2,1005fa4 <memchr+0x8c>
 1005f60:	10000c26 	beq	r2,zero,1005f94 <memchr+0x7c>
 1005f64:	20c00003 	ldbu	r3,0(r4)
 1005f68:	29403fcc 	andi	r5,r5,255
 1005f6c:	28c00b26 	beq	r5,r3,1005f9c <memchr+0x84>
 1005f70:	20c00044 	addi	r3,r4,1
 1005f74:	39803fcc 	andi	r6,r7,255
 1005f78:	2089883a 	add	r4,r4,r2
 1005f7c:	00000306 	br	1005f8c <memchr+0x74>
 1005f80:	18c00044 	addi	r3,r3,1
 1005f84:	197fffc3 	ldbu	r5,-1(r3)
 1005f88:	31400526 	beq	r6,r5,1005fa0 <memchr+0x88>
 1005f8c:	1805883a 	mov	r2,r3
 1005f90:	20fffb1e 	bne	r4,r3,1005f80 <__alt_mem_TCDM+0xff004f80>
 1005f94:	0005883a 	mov	r2,zero
 1005f98:	f800283a 	ret
 1005f9c:	2005883a 	mov	r2,r4
 1005fa0:	f800283a 	ret
 1005fa4:	28c03fcc 	andi	r3,r5,255
 1005fa8:	1812923a 	slli	r9,r3,8
 1005fac:	02ffbff4 	movhi	r11,65279
 1005fb0:	02a02074 	movhi	r10,32897
 1005fb4:	48d2b03a 	or	r9,r9,r3
 1005fb8:	4806943a 	slli	r3,r9,16
 1005fbc:	5affbfc4 	addi	r11,r11,-257
 1005fc0:	52a02004 	addi	r10,r10,-32640
 1005fc4:	48d2b03a 	or	r9,r9,r3
 1005fc8:	20c00017 	ldw	r3,0(r4)
 1005fcc:	48c6f03a 	xor	r3,r9,r3
 1005fd0:	1acd883a 	add	r6,r3,r11
 1005fd4:	00c6303a 	nor	r3,zero,r3
 1005fd8:	30c6703a 	and	r3,r6,r3
 1005fdc:	1a86703a 	and	r3,r3,r10
 1005fe0:	183fe01e 	bne	r3,zero,1005f64 <__alt_mem_TCDM+0xff004f64>
 1005fe4:	10bfff04 	addi	r2,r2,-4
 1005fe8:	21000104 	addi	r4,r4,4
 1005fec:	40bff636 	bltu	r8,r2,1005fc8 <__alt_mem_TCDM+0xff004fc8>
 1005ff0:	003fdb06 	br	1005f60 <__alt_mem_TCDM+0xff004f60>
 1005ff4:	3005883a 	mov	r2,r6
 1005ff8:	003fd706 	br	1005f58 <__alt_mem_TCDM+0xff004f58>

01005ffc <memcpy>:
 1005ffc:	defffd04 	addi	sp,sp,-12
 1006000:	dfc00215 	stw	ra,8(sp)
 1006004:	dc400115 	stw	r17,4(sp)
 1006008:	dc000015 	stw	r16,0(sp)
 100600c:	00c003c4 	movi	r3,15
 1006010:	2005883a 	mov	r2,r4
 1006014:	1980452e 	bgeu	r3,r6,100612c <memcpy+0x130>
 1006018:	2906b03a 	or	r3,r5,r4
 100601c:	18c000cc 	andi	r3,r3,3
 1006020:	1800441e 	bne	r3,zero,1006134 <memcpy+0x138>
 1006024:	347ffc04 	addi	r17,r6,-16
 1006028:	8822d13a 	srli	r17,r17,4
 100602c:	28c00104 	addi	r3,r5,4
 1006030:	23400104 	addi	r13,r4,4
 1006034:	8820913a 	slli	r16,r17,4
 1006038:	2b000204 	addi	r12,r5,8
 100603c:	22c00204 	addi	r11,r4,8
 1006040:	84000504 	addi	r16,r16,20
 1006044:	2a800304 	addi	r10,r5,12
 1006048:	22400304 	addi	r9,r4,12
 100604c:	2c21883a 	add	r16,r5,r16
 1006050:	2811883a 	mov	r8,r5
 1006054:	200f883a 	mov	r7,r4
 1006058:	41000017 	ldw	r4,0(r8)
 100605c:	1fc00017 	ldw	ra,0(r3)
 1006060:	63c00017 	ldw	r15,0(r12)
 1006064:	39000015 	stw	r4,0(r7)
 1006068:	53800017 	ldw	r14,0(r10)
 100606c:	6fc00015 	stw	ra,0(r13)
 1006070:	5bc00015 	stw	r15,0(r11)
 1006074:	4b800015 	stw	r14,0(r9)
 1006078:	18c00404 	addi	r3,r3,16
 100607c:	39c00404 	addi	r7,r7,16
 1006080:	42000404 	addi	r8,r8,16
 1006084:	6b400404 	addi	r13,r13,16
 1006088:	63000404 	addi	r12,r12,16
 100608c:	5ac00404 	addi	r11,r11,16
 1006090:	52800404 	addi	r10,r10,16
 1006094:	4a400404 	addi	r9,r9,16
 1006098:	1c3fef1e 	bne	r3,r16,1006058 <__alt_mem_TCDM+0xff005058>
 100609c:	89c00044 	addi	r7,r17,1
 10060a0:	380e913a 	slli	r7,r7,4
 10060a4:	310003cc 	andi	r4,r6,15
 10060a8:	02c000c4 	movi	r11,3
 10060ac:	11c7883a 	add	r3,r2,r7
 10060b0:	29cb883a 	add	r5,r5,r7
 10060b4:	5900212e 	bgeu	r11,r4,100613c <memcpy+0x140>
 10060b8:	1813883a 	mov	r9,r3
 10060bc:	2811883a 	mov	r8,r5
 10060c0:	200f883a 	mov	r7,r4
 10060c4:	42800017 	ldw	r10,0(r8)
 10060c8:	4a400104 	addi	r9,r9,4
 10060cc:	39ffff04 	addi	r7,r7,-4
 10060d0:	4abfff15 	stw	r10,-4(r9)
 10060d4:	42000104 	addi	r8,r8,4
 10060d8:	59fffa36 	bltu	r11,r7,10060c4 <__alt_mem_TCDM+0xff0050c4>
 10060dc:	213fff04 	addi	r4,r4,-4
 10060e0:	2008d0ba 	srli	r4,r4,2
 10060e4:	318000cc 	andi	r6,r6,3
 10060e8:	21000044 	addi	r4,r4,1
 10060ec:	2109883a 	add	r4,r4,r4
 10060f0:	2109883a 	add	r4,r4,r4
 10060f4:	1907883a 	add	r3,r3,r4
 10060f8:	290b883a 	add	r5,r5,r4
 10060fc:	30000626 	beq	r6,zero,1006118 <memcpy+0x11c>
 1006100:	198d883a 	add	r6,r3,r6
 1006104:	29c00003 	ldbu	r7,0(r5)
 1006108:	18c00044 	addi	r3,r3,1
 100610c:	29400044 	addi	r5,r5,1
 1006110:	19ffffc5 	stb	r7,-1(r3)
 1006114:	19bffb1e 	bne	r3,r6,1006104 <__alt_mem_TCDM+0xff005104>
 1006118:	dfc00217 	ldw	ra,8(sp)
 100611c:	dc400117 	ldw	r17,4(sp)
 1006120:	dc000017 	ldw	r16,0(sp)
 1006124:	dec00304 	addi	sp,sp,12
 1006128:	f800283a 	ret
 100612c:	2007883a 	mov	r3,r4
 1006130:	003ff206 	br	10060fc <__alt_mem_TCDM+0xff0050fc>
 1006134:	2007883a 	mov	r3,r4
 1006138:	003ff106 	br	1006100 <__alt_mem_TCDM+0xff005100>
 100613c:	200d883a 	mov	r6,r4
 1006140:	003fee06 	br	10060fc <__alt_mem_TCDM+0xff0050fc>

01006144 <memmove>:
 1006144:	2005883a 	mov	r2,r4
 1006148:	29000b2e 	bgeu	r5,r4,1006178 <memmove+0x34>
 100614c:	298f883a 	add	r7,r5,r6
 1006150:	21c0092e 	bgeu	r4,r7,1006178 <memmove+0x34>
 1006154:	2187883a 	add	r3,r4,r6
 1006158:	198bc83a 	sub	r5,r3,r6
 100615c:	30004826 	beq	r6,zero,1006280 <memmove+0x13c>
 1006160:	39ffffc4 	addi	r7,r7,-1
 1006164:	39000003 	ldbu	r4,0(r7)
 1006168:	18ffffc4 	addi	r3,r3,-1
 100616c:	19000005 	stb	r4,0(r3)
 1006170:	28fffb1e 	bne	r5,r3,1006160 <__alt_mem_TCDM+0xff005160>
 1006174:	f800283a 	ret
 1006178:	00c003c4 	movi	r3,15
 100617c:	1980412e 	bgeu	r3,r6,1006284 <memmove+0x140>
 1006180:	2886b03a 	or	r3,r5,r2
 1006184:	18c000cc 	andi	r3,r3,3
 1006188:	1800401e 	bne	r3,zero,100628c <memmove+0x148>
 100618c:	33fffc04 	addi	r15,r6,-16
 1006190:	781ed13a 	srli	r15,r15,4
 1006194:	28c00104 	addi	r3,r5,4
 1006198:	13400104 	addi	r13,r2,4
 100619c:	781c913a 	slli	r14,r15,4
 10061a0:	2b000204 	addi	r12,r5,8
 10061a4:	12c00204 	addi	r11,r2,8
 10061a8:	73800504 	addi	r14,r14,20
 10061ac:	2a800304 	addi	r10,r5,12
 10061b0:	12400304 	addi	r9,r2,12
 10061b4:	2b9d883a 	add	r14,r5,r14
 10061b8:	2811883a 	mov	r8,r5
 10061bc:	100f883a 	mov	r7,r2
 10061c0:	41000017 	ldw	r4,0(r8)
 10061c4:	39c00404 	addi	r7,r7,16
 10061c8:	18c00404 	addi	r3,r3,16
 10061cc:	393ffc15 	stw	r4,-16(r7)
 10061d0:	193ffc17 	ldw	r4,-16(r3)
 10061d4:	6b400404 	addi	r13,r13,16
 10061d8:	5ac00404 	addi	r11,r11,16
 10061dc:	693ffc15 	stw	r4,-16(r13)
 10061e0:	61000017 	ldw	r4,0(r12)
 10061e4:	4a400404 	addi	r9,r9,16
 10061e8:	42000404 	addi	r8,r8,16
 10061ec:	593ffc15 	stw	r4,-16(r11)
 10061f0:	51000017 	ldw	r4,0(r10)
 10061f4:	63000404 	addi	r12,r12,16
 10061f8:	52800404 	addi	r10,r10,16
 10061fc:	493ffc15 	stw	r4,-16(r9)
 1006200:	1bbfef1e 	bne	r3,r14,10061c0 <__alt_mem_TCDM+0xff0051c0>
 1006204:	79000044 	addi	r4,r15,1
 1006208:	2008913a 	slli	r4,r4,4
 100620c:	328003cc 	andi	r10,r6,15
 1006210:	02c000c4 	movi	r11,3
 1006214:	1107883a 	add	r3,r2,r4
 1006218:	290b883a 	add	r5,r5,r4
 100621c:	5a801e2e 	bgeu	r11,r10,1006298 <memmove+0x154>
 1006220:	1813883a 	mov	r9,r3
 1006224:	2811883a 	mov	r8,r5
 1006228:	500f883a 	mov	r7,r10
 100622c:	41000017 	ldw	r4,0(r8)
 1006230:	4a400104 	addi	r9,r9,4
 1006234:	39ffff04 	addi	r7,r7,-4
 1006238:	493fff15 	stw	r4,-4(r9)
 100623c:	42000104 	addi	r8,r8,4
 1006240:	59fffa36 	bltu	r11,r7,100622c <__alt_mem_TCDM+0xff00522c>
 1006244:	513fff04 	addi	r4,r10,-4
 1006248:	2008d0ba 	srli	r4,r4,2
 100624c:	318000cc 	andi	r6,r6,3
 1006250:	21000044 	addi	r4,r4,1
 1006254:	2109883a 	add	r4,r4,r4
 1006258:	2109883a 	add	r4,r4,r4
 100625c:	1907883a 	add	r3,r3,r4
 1006260:	290b883a 	add	r5,r5,r4
 1006264:	30000b26 	beq	r6,zero,1006294 <memmove+0x150>
 1006268:	198d883a 	add	r6,r3,r6
 100626c:	29c00003 	ldbu	r7,0(r5)
 1006270:	18c00044 	addi	r3,r3,1
 1006274:	29400044 	addi	r5,r5,1
 1006278:	19ffffc5 	stb	r7,-1(r3)
 100627c:	19bffb1e 	bne	r3,r6,100626c <__alt_mem_TCDM+0xff00526c>
 1006280:	f800283a 	ret
 1006284:	1007883a 	mov	r3,r2
 1006288:	003ff606 	br	1006264 <__alt_mem_TCDM+0xff005264>
 100628c:	1007883a 	mov	r3,r2
 1006290:	003ff506 	br	1006268 <__alt_mem_TCDM+0xff005268>
 1006294:	f800283a 	ret
 1006298:	500d883a 	mov	r6,r10
 100629c:	003ff106 	br	1006264 <__alt_mem_TCDM+0xff005264>

010062a0 <memset>:
 10062a0:	20c000cc 	andi	r3,r4,3
 10062a4:	2005883a 	mov	r2,r4
 10062a8:	18004426 	beq	r3,zero,10063bc <memset+0x11c>
 10062ac:	31ffffc4 	addi	r7,r6,-1
 10062b0:	30004026 	beq	r6,zero,10063b4 <memset+0x114>
 10062b4:	2813883a 	mov	r9,r5
 10062b8:	200d883a 	mov	r6,r4
 10062bc:	2007883a 	mov	r3,r4
 10062c0:	00000406 	br	10062d4 <memset+0x34>
 10062c4:	3a3fffc4 	addi	r8,r7,-1
 10062c8:	31800044 	addi	r6,r6,1
 10062cc:	38003926 	beq	r7,zero,10063b4 <memset+0x114>
 10062d0:	400f883a 	mov	r7,r8
 10062d4:	18c00044 	addi	r3,r3,1
 10062d8:	32400005 	stb	r9,0(r6)
 10062dc:	1a0000cc 	andi	r8,r3,3
 10062e0:	403ff81e 	bne	r8,zero,10062c4 <__alt_mem_TCDM+0xff0052c4>
 10062e4:	010000c4 	movi	r4,3
 10062e8:	21c02d2e 	bgeu	r4,r7,10063a0 <memset+0x100>
 10062ec:	29003fcc 	andi	r4,r5,255
 10062f0:	200c923a 	slli	r6,r4,8
 10062f4:	3108b03a 	or	r4,r6,r4
 10062f8:	200c943a 	slli	r6,r4,16
 10062fc:	218cb03a 	or	r6,r4,r6
 1006300:	010003c4 	movi	r4,15
 1006304:	21c0182e 	bgeu	r4,r7,1006368 <memset+0xc8>
 1006308:	3b3ffc04 	addi	r12,r7,-16
 100630c:	6018d13a 	srli	r12,r12,4
 1006310:	1a000104 	addi	r8,r3,4
 1006314:	1ac00204 	addi	r11,r3,8
 1006318:	6008913a 	slli	r4,r12,4
 100631c:	1a800304 	addi	r10,r3,12
 1006320:	1813883a 	mov	r9,r3
 1006324:	21000504 	addi	r4,r4,20
 1006328:	1909883a 	add	r4,r3,r4
 100632c:	49800015 	stw	r6,0(r9)
 1006330:	41800015 	stw	r6,0(r8)
 1006334:	59800015 	stw	r6,0(r11)
 1006338:	51800015 	stw	r6,0(r10)
 100633c:	42000404 	addi	r8,r8,16
 1006340:	4a400404 	addi	r9,r9,16
 1006344:	5ac00404 	addi	r11,r11,16
 1006348:	52800404 	addi	r10,r10,16
 100634c:	413ff71e 	bne	r8,r4,100632c <__alt_mem_TCDM+0xff00532c>
 1006350:	63000044 	addi	r12,r12,1
 1006354:	6018913a 	slli	r12,r12,4
 1006358:	39c003cc 	andi	r7,r7,15
 100635c:	010000c4 	movi	r4,3
 1006360:	1b07883a 	add	r3,r3,r12
 1006364:	21c00e2e 	bgeu	r4,r7,10063a0 <memset+0x100>
 1006368:	1813883a 	mov	r9,r3
 100636c:	3811883a 	mov	r8,r7
 1006370:	010000c4 	movi	r4,3
 1006374:	49800015 	stw	r6,0(r9)
 1006378:	423fff04 	addi	r8,r8,-4
 100637c:	4a400104 	addi	r9,r9,4
 1006380:	223ffc36 	bltu	r4,r8,1006374 <__alt_mem_TCDM+0xff005374>
 1006384:	393fff04 	addi	r4,r7,-4
 1006388:	2008d0ba 	srli	r4,r4,2
 100638c:	39c000cc 	andi	r7,r7,3
 1006390:	21000044 	addi	r4,r4,1
 1006394:	2109883a 	add	r4,r4,r4
 1006398:	2109883a 	add	r4,r4,r4
 100639c:	1907883a 	add	r3,r3,r4
 10063a0:	38000526 	beq	r7,zero,10063b8 <memset+0x118>
 10063a4:	19cf883a 	add	r7,r3,r7
 10063a8:	19400005 	stb	r5,0(r3)
 10063ac:	18c00044 	addi	r3,r3,1
 10063b0:	38fffd1e 	bne	r7,r3,10063a8 <__alt_mem_TCDM+0xff0053a8>
 10063b4:	f800283a 	ret
 10063b8:	f800283a 	ret
 10063bc:	2007883a 	mov	r3,r4
 10063c0:	300f883a 	mov	r7,r6
 10063c4:	003fc706 	br	10062e4 <__alt_mem_TCDM+0xff0052e4>

010063c8 <_Balloc>:
 10063c8:	20801317 	ldw	r2,76(r4)
 10063cc:	defffc04 	addi	sp,sp,-16
 10063d0:	dc400115 	stw	r17,4(sp)
 10063d4:	dc000015 	stw	r16,0(sp)
 10063d8:	dfc00315 	stw	ra,12(sp)
 10063dc:	dc800215 	stw	r18,8(sp)
 10063e0:	2023883a 	mov	r17,r4
 10063e4:	2821883a 	mov	r16,r5
 10063e8:	10000f26 	beq	r2,zero,1006428 <_Balloc+0x60>
 10063ec:	8407883a 	add	r3,r16,r16
 10063f0:	18c7883a 	add	r3,r3,r3
 10063f4:	10c7883a 	add	r3,r2,r3
 10063f8:	18800017 	ldw	r2,0(r3)
 10063fc:	10001126 	beq	r2,zero,1006444 <_Balloc+0x7c>
 1006400:	11000017 	ldw	r4,0(r2)
 1006404:	19000015 	stw	r4,0(r3)
 1006408:	10000415 	stw	zero,16(r2)
 100640c:	10000315 	stw	zero,12(r2)
 1006410:	dfc00317 	ldw	ra,12(sp)
 1006414:	dc800217 	ldw	r18,8(sp)
 1006418:	dc400117 	ldw	r17,4(sp)
 100641c:	dc000017 	ldw	r16,0(sp)
 1006420:	dec00404 	addi	sp,sp,16
 1006424:	f800283a 	ret
 1006428:	01800844 	movi	r6,33
 100642c:	01400104 	movi	r5,4
 1006430:	10093040 	call	1009304 <_calloc_r>
 1006434:	88801315 	stw	r2,76(r17)
 1006438:	103fec1e 	bne	r2,zero,10063ec <__alt_mem_TCDM+0xff0053ec>
 100643c:	0005883a 	mov	r2,zero
 1006440:	003ff306 	br	1006410 <__alt_mem_TCDM+0xff005410>
 1006444:	01400044 	movi	r5,1
 1006448:	2c24983a 	sll	r18,r5,r16
 100644c:	8809883a 	mov	r4,r17
 1006450:	91800144 	addi	r6,r18,5
 1006454:	318d883a 	add	r6,r6,r6
 1006458:	318d883a 	add	r6,r6,r6
 100645c:	10093040 	call	1009304 <_calloc_r>
 1006460:	103ff626 	beq	r2,zero,100643c <__alt_mem_TCDM+0xff00543c>
 1006464:	14000115 	stw	r16,4(r2)
 1006468:	14800215 	stw	r18,8(r2)
 100646c:	003fe606 	br	1006408 <__alt_mem_TCDM+0xff005408>

01006470 <_Bfree>:
 1006470:	28000826 	beq	r5,zero,1006494 <_Bfree+0x24>
 1006474:	28c00117 	ldw	r3,4(r5)
 1006478:	20801317 	ldw	r2,76(r4)
 100647c:	18c7883a 	add	r3,r3,r3
 1006480:	18c7883a 	add	r3,r3,r3
 1006484:	10c5883a 	add	r2,r2,r3
 1006488:	10c00017 	ldw	r3,0(r2)
 100648c:	28c00015 	stw	r3,0(r5)
 1006490:	11400015 	stw	r5,0(r2)
 1006494:	f800283a 	ret

01006498 <__multadd>:
 1006498:	defffa04 	addi	sp,sp,-24
 100649c:	dc800315 	stw	r18,12(sp)
 10064a0:	dc400215 	stw	r17,8(sp)
 10064a4:	dc000115 	stw	r16,4(sp)
 10064a8:	2823883a 	mov	r17,r5
 10064ac:	2c000417 	ldw	r16,16(r5)
 10064b0:	dfc00515 	stw	ra,20(sp)
 10064b4:	dcc00415 	stw	r19,16(sp)
 10064b8:	2025883a 	mov	r18,r4
 10064bc:	29400504 	addi	r5,r5,20
 10064c0:	0011883a 	mov	r8,zero
 10064c4:	28c00017 	ldw	r3,0(r5)
 10064c8:	29400104 	addi	r5,r5,4
 10064cc:	42000044 	addi	r8,r8,1
 10064d0:	18bfffcc 	andi	r2,r3,65535
 10064d4:	1185383a 	mul	r2,r2,r6
 10064d8:	1806d43a 	srli	r3,r3,16
 10064dc:	11cf883a 	add	r7,r2,r7
 10064e0:	3808d43a 	srli	r4,r7,16
 10064e4:	1987383a 	mul	r3,r3,r6
 10064e8:	38bfffcc 	andi	r2,r7,65535
 10064ec:	1907883a 	add	r3,r3,r4
 10064f0:	1808943a 	slli	r4,r3,16
 10064f4:	180ed43a 	srli	r7,r3,16
 10064f8:	2085883a 	add	r2,r4,r2
 10064fc:	28bfff15 	stw	r2,-4(r5)
 1006500:	443ff016 	blt	r8,r16,10064c4 <__alt_mem_TCDM+0xff0054c4>
 1006504:	38000926 	beq	r7,zero,100652c <__multadd+0x94>
 1006508:	88800217 	ldw	r2,8(r17)
 100650c:	80800f0e 	bge	r16,r2,100654c <__multadd+0xb4>
 1006510:	80800144 	addi	r2,r16,5
 1006514:	1085883a 	add	r2,r2,r2
 1006518:	1085883a 	add	r2,r2,r2
 100651c:	8885883a 	add	r2,r17,r2
 1006520:	11c00015 	stw	r7,0(r2)
 1006524:	84000044 	addi	r16,r16,1
 1006528:	8c000415 	stw	r16,16(r17)
 100652c:	8805883a 	mov	r2,r17
 1006530:	dfc00517 	ldw	ra,20(sp)
 1006534:	dcc00417 	ldw	r19,16(sp)
 1006538:	dc800317 	ldw	r18,12(sp)
 100653c:	dc400217 	ldw	r17,8(sp)
 1006540:	dc000117 	ldw	r16,4(sp)
 1006544:	dec00604 	addi	sp,sp,24
 1006548:	f800283a 	ret
 100654c:	89400117 	ldw	r5,4(r17)
 1006550:	9009883a 	mov	r4,r18
 1006554:	d9c00015 	stw	r7,0(sp)
 1006558:	29400044 	addi	r5,r5,1
 100655c:	10063c80 	call	10063c8 <_Balloc>
 1006560:	89800417 	ldw	r6,16(r17)
 1006564:	89400304 	addi	r5,r17,12
 1006568:	11000304 	addi	r4,r2,12
 100656c:	31800084 	addi	r6,r6,2
 1006570:	318d883a 	add	r6,r6,r6
 1006574:	318d883a 	add	r6,r6,r6
 1006578:	1027883a 	mov	r19,r2
 100657c:	1005ffc0 	call	1005ffc <memcpy>
 1006580:	d9c00017 	ldw	r7,0(sp)
 1006584:	88000a26 	beq	r17,zero,10065b0 <__multadd+0x118>
 1006588:	88c00117 	ldw	r3,4(r17)
 100658c:	90801317 	ldw	r2,76(r18)
 1006590:	18c7883a 	add	r3,r3,r3
 1006594:	18c7883a 	add	r3,r3,r3
 1006598:	10c5883a 	add	r2,r2,r3
 100659c:	10c00017 	ldw	r3,0(r2)
 10065a0:	88c00015 	stw	r3,0(r17)
 10065a4:	14400015 	stw	r17,0(r2)
 10065a8:	9823883a 	mov	r17,r19
 10065ac:	003fd806 	br	1006510 <__alt_mem_TCDM+0xff005510>
 10065b0:	9823883a 	mov	r17,r19
 10065b4:	003fd606 	br	1006510 <__alt_mem_TCDM+0xff005510>

010065b8 <__s2b>:
 10065b8:	defff904 	addi	sp,sp,-28
 10065bc:	dc400115 	stw	r17,4(sp)
 10065c0:	dc000015 	stw	r16,0(sp)
 10065c4:	2023883a 	mov	r17,r4
 10065c8:	2821883a 	mov	r16,r5
 10065cc:	39000204 	addi	r4,r7,8
 10065d0:	01400244 	movi	r5,9
 10065d4:	dcc00315 	stw	r19,12(sp)
 10065d8:	dc800215 	stw	r18,8(sp)
 10065dc:	dfc00615 	stw	ra,24(sp)
 10065e0:	dd400515 	stw	r21,20(sp)
 10065e4:	dd000415 	stw	r20,16(sp)
 10065e8:	3825883a 	mov	r18,r7
 10065ec:	3027883a 	mov	r19,r6
 10065f0:	100a6340 	call	100a634 <__divsi3>
 10065f4:	00c00044 	movi	r3,1
 10065f8:	000b883a 	mov	r5,zero
 10065fc:	1880030e 	bge	r3,r2,100660c <__s2b+0x54>
 1006600:	18c7883a 	add	r3,r3,r3
 1006604:	29400044 	addi	r5,r5,1
 1006608:	18bffd16 	blt	r3,r2,1006600 <__alt_mem_TCDM+0xff005600>
 100660c:	8809883a 	mov	r4,r17
 1006610:	10063c80 	call	10063c8 <_Balloc>
 1006614:	d8c00717 	ldw	r3,28(sp)
 1006618:	10c00515 	stw	r3,20(r2)
 100661c:	00c00044 	movi	r3,1
 1006620:	10c00415 	stw	r3,16(r2)
 1006624:	00c00244 	movi	r3,9
 1006628:	1cc0210e 	bge	r3,r19,10066b0 <__s2b+0xf8>
 100662c:	80eb883a 	add	r21,r16,r3
 1006630:	a829883a 	mov	r20,r21
 1006634:	84e1883a 	add	r16,r16,r19
 1006638:	a1c00007 	ldb	r7,0(r20)
 100663c:	01800284 	movi	r6,10
 1006640:	a5000044 	addi	r20,r20,1
 1006644:	100b883a 	mov	r5,r2
 1006648:	39fff404 	addi	r7,r7,-48
 100664c:	8809883a 	mov	r4,r17
 1006650:	10064980 	call	1006498 <__multadd>
 1006654:	a43ff81e 	bne	r20,r16,1006638 <__alt_mem_TCDM+0xff005638>
 1006658:	ace1883a 	add	r16,r21,r19
 100665c:	843ffe04 	addi	r16,r16,-8
 1006660:	9c800a0e 	bge	r19,r18,100668c <__s2b+0xd4>
 1006664:	94e5c83a 	sub	r18,r18,r19
 1006668:	84a5883a 	add	r18,r16,r18
 100666c:	81c00007 	ldb	r7,0(r16)
 1006670:	01800284 	movi	r6,10
 1006674:	84000044 	addi	r16,r16,1
 1006678:	100b883a 	mov	r5,r2
 100667c:	39fff404 	addi	r7,r7,-48
 1006680:	8809883a 	mov	r4,r17
 1006684:	10064980 	call	1006498 <__multadd>
 1006688:	84bff81e 	bne	r16,r18,100666c <__alt_mem_TCDM+0xff00566c>
 100668c:	dfc00617 	ldw	ra,24(sp)
 1006690:	dd400517 	ldw	r21,20(sp)
 1006694:	dd000417 	ldw	r20,16(sp)
 1006698:	dcc00317 	ldw	r19,12(sp)
 100669c:	dc800217 	ldw	r18,8(sp)
 10066a0:	dc400117 	ldw	r17,4(sp)
 10066a4:	dc000017 	ldw	r16,0(sp)
 10066a8:	dec00704 	addi	sp,sp,28
 10066ac:	f800283a 	ret
 10066b0:	84000284 	addi	r16,r16,10
 10066b4:	1827883a 	mov	r19,r3
 10066b8:	003fe906 	br	1006660 <__alt_mem_TCDM+0xff005660>

010066bc <__hi0bits>:
 10066bc:	20bfffec 	andhi	r2,r4,65535
 10066c0:	1000141e 	bne	r2,zero,1006714 <__hi0bits+0x58>
 10066c4:	2008943a 	slli	r4,r4,16
 10066c8:	00800404 	movi	r2,16
 10066cc:	20ffc02c 	andhi	r3,r4,65280
 10066d0:	1800021e 	bne	r3,zero,10066dc <__hi0bits+0x20>
 10066d4:	2008923a 	slli	r4,r4,8
 10066d8:	10800204 	addi	r2,r2,8
 10066dc:	20fc002c 	andhi	r3,r4,61440
 10066e0:	1800021e 	bne	r3,zero,10066ec <__hi0bits+0x30>
 10066e4:	2008913a 	slli	r4,r4,4
 10066e8:	10800104 	addi	r2,r2,4
 10066ec:	20f0002c 	andhi	r3,r4,49152
 10066f0:	1800031e 	bne	r3,zero,1006700 <__hi0bits+0x44>
 10066f4:	2109883a 	add	r4,r4,r4
 10066f8:	10800084 	addi	r2,r2,2
 10066fc:	2109883a 	add	r4,r4,r4
 1006700:	20000316 	blt	r4,zero,1006710 <__hi0bits+0x54>
 1006704:	2110002c 	andhi	r4,r4,16384
 1006708:	2000041e 	bne	r4,zero,100671c <__hi0bits+0x60>
 100670c:	00800804 	movi	r2,32
 1006710:	f800283a 	ret
 1006714:	0005883a 	mov	r2,zero
 1006718:	003fec06 	br	10066cc <__alt_mem_TCDM+0xff0056cc>
 100671c:	10800044 	addi	r2,r2,1
 1006720:	f800283a 	ret

01006724 <__lo0bits>:
 1006724:	20c00017 	ldw	r3,0(r4)
 1006728:	188001cc 	andi	r2,r3,7
 100672c:	10000826 	beq	r2,zero,1006750 <__lo0bits+0x2c>
 1006730:	1880004c 	andi	r2,r3,1
 1006734:	1000211e 	bne	r2,zero,10067bc <__lo0bits+0x98>
 1006738:	1880008c 	andi	r2,r3,2
 100673c:	1000211e 	bne	r2,zero,10067c4 <__lo0bits+0xa0>
 1006740:	1806d0ba 	srli	r3,r3,2
 1006744:	00800084 	movi	r2,2
 1006748:	20c00015 	stw	r3,0(r4)
 100674c:	f800283a 	ret
 1006750:	18bfffcc 	andi	r2,r3,65535
 1006754:	10001326 	beq	r2,zero,10067a4 <__lo0bits+0x80>
 1006758:	0005883a 	mov	r2,zero
 100675c:	19403fcc 	andi	r5,r3,255
 1006760:	2800021e 	bne	r5,zero,100676c <__lo0bits+0x48>
 1006764:	1806d23a 	srli	r3,r3,8
 1006768:	10800204 	addi	r2,r2,8
 100676c:	194003cc 	andi	r5,r3,15
 1006770:	2800021e 	bne	r5,zero,100677c <__lo0bits+0x58>
 1006774:	1806d13a 	srli	r3,r3,4
 1006778:	10800104 	addi	r2,r2,4
 100677c:	194000cc 	andi	r5,r3,3
 1006780:	2800021e 	bne	r5,zero,100678c <__lo0bits+0x68>
 1006784:	1806d0ba 	srli	r3,r3,2
 1006788:	10800084 	addi	r2,r2,2
 100678c:	1940004c 	andi	r5,r3,1
 1006790:	2800081e 	bne	r5,zero,10067b4 <__lo0bits+0x90>
 1006794:	1806d07a 	srli	r3,r3,1
 1006798:	1800051e 	bne	r3,zero,10067b0 <__lo0bits+0x8c>
 100679c:	00800804 	movi	r2,32
 10067a0:	f800283a 	ret
 10067a4:	1806d43a 	srli	r3,r3,16
 10067a8:	00800404 	movi	r2,16
 10067ac:	003feb06 	br	100675c <__alt_mem_TCDM+0xff00575c>
 10067b0:	10800044 	addi	r2,r2,1
 10067b4:	20c00015 	stw	r3,0(r4)
 10067b8:	f800283a 	ret
 10067bc:	0005883a 	mov	r2,zero
 10067c0:	f800283a 	ret
 10067c4:	1806d07a 	srli	r3,r3,1
 10067c8:	00800044 	movi	r2,1
 10067cc:	20c00015 	stw	r3,0(r4)
 10067d0:	f800283a 	ret

010067d4 <__i2b>:
 10067d4:	defffd04 	addi	sp,sp,-12
 10067d8:	dc000015 	stw	r16,0(sp)
 10067dc:	04000044 	movi	r16,1
 10067e0:	dc400115 	stw	r17,4(sp)
 10067e4:	2823883a 	mov	r17,r5
 10067e8:	800b883a 	mov	r5,r16
 10067ec:	dfc00215 	stw	ra,8(sp)
 10067f0:	10063c80 	call	10063c8 <_Balloc>
 10067f4:	14400515 	stw	r17,20(r2)
 10067f8:	14000415 	stw	r16,16(r2)
 10067fc:	dfc00217 	ldw	ra,8(sp)
 1006800:	dc400117 	ldw	r17,4(sp)
 1006804:	dc000017 	ldw	r16,0(sp)
 1006808:	dec00304 	addi	sp,sp,12
 100680c:	f800283a 	ret

01006810 <__multiply>:
 1006810:	defffa04 	addi	sp,sp,-24
 1006814:	dcc00315 	stw	r19,12(sp)
 1006818:	dc800215 	stw	r18,8(sp)
 100681c:	34c00417 	ldw	r19,16(r6)
 1006820:	2c800417 	ldw	r18,16(r5)
 1006824:	dd000415 	stw	r20,16(sp)
 1006828:	dc400115 	stw	r17,4(sp)
 100682c:	dfc00515 	stw	ra,20(sp)
 1006830:	dc000015 	stw	r16,0(sp)
 1006834:	2829883a 	mov	r20,r5
 1006838:	3023883a 	mov	r17,r6
 100683c:	94c0050e 	bge	r18,r19,1006854 <__multiply+0x44>
 1006840:	9007883a 	mov	r3,r18
 1006844:	3029883a 	mov	r20,r6
 1006848:	9825883a 	mov	r18,r19
 100684c:	2823883a 	mov	r17,r5
 1006850:	1827883a 	mov	r19,r3
 1006854:	a0800217 	ldw	r2,8(r20)
 1006858:	94e1883a 	add	r16,r18,r19
 100685c:	a1400117 	ldw	r5,4(r20)
 1006860:	1400010e 	bge	r2,r16,1006868 <__multiply+0x58>
 1006864:	29400044 	addi	r5,r5,1
 1006868:	10063c80 	call	10063c8 <_Balloc>
 100686c:	8415883a 	add	r10,r16,r16
 1006870:	12c00504 	addi	r11,r2,20
 1006874:	5295883a 	add	r10,r10,r10
 1006878:	5a95883a 	add	r10,r11,r10
 100687c:	5807883a 	mov	r3,r11
 1006880:	5a80032e 	bgeu	r11,r10,1006890 <__multiply+0x80>
 1006884:	18000015 	stw	zero,0(r3)
 1006888:	18c00104 	addi	r3,r3,4
 100688c:	1abffd36 	bltu	r3,r10,1006884 <__alt_mem_TCDM+0xff005884>
 1006890:	9ce7883a 	add	r19,r19,r19
 1006894:	94a5883a 	add	r18,r18,r18
 1006898:	89800504 	addi	r6,r17,20
 100689c:	9ce7883a 	add	r19,r19,r19
 10068a0:	a3400504 	addi	r13,r20,20
 10068a4:	94a5883a 	add	r18,r18,r18
 10068a8:	34d9883a 	add	r12,r6,r19
 10068ac:	6c93883a 	add	r9,r13,r18
 10068b0:	3300422e 	bgeu	r6,r12,10069bc <__multiply+0x1ac>
 10068b4:	37c00017 	ldw	ra,0(r6)
 10068b8:	fbffffcc 	andi	r15,ra,65535
 10068bc:	78001b26 	beq	r15,zero,100692c <__multiply+0x11c>
 10068c0:	5811883a 	mov	r8,r11
 10068c4:	681d883a 	mov	r14,r13
 10068c8:	000f883a 	mov	r7,zero
 10068cc:	71000017 	ldw	r4,0(r14)
 10068d0:	40c00017 	ldw	r3,0(r8)
 10068d4:	73800104 	addi	r14,r14,4
 10068d8:	217fffcc 	andi	r5,r4,65535
 10068dc:	2bcb383a 	mul	r5,r5,r15
 10068e0:	2008d43a 	srli	r4,r4,16
 10068e4:	1c7fffcc 	andi	r17,r3,65535
 10068e8:	2c4b883a 	add	r5,r5,r17
 10068ec:	29cb883a 	add	r5,r5,r7
 10068f0:	23c9383a 	mul	r4,r4,r15
 10068f4:	1806d43a 	srli	r3,r3,16
 10068f8:	280ed43a 	srli	r7,r5,16
 10068fc:	297fffcc 	andi	r5,r5,65535
 1006900:	20c7883a 	add	r3,r4,r3
 1006904:	19c7883a 	add	r3,r3,r7
 1006908:	1808943a 	slli	r4,r3,16
 100690c:	4023883a 	mov	r17,r8
 1006910:	180ed43a 	srli	r7,r3,16
 1006914:	214ab03a 	or	r5,r4,r5
 1006918:	41400015 	stw	r5,0(r8)
 100691c:	42000104 	addi	r8,r8,4
 1006920:	727fea36 	bltu	r14,r9,10068cc <__alt_mem_TCDM+0xff0058cc>
 1006924:	89c00115 	stw	r7,4(r17)
 1006928:	37c00017 	ldw	ra,0(r6)
 100692c:	f83ed43a 	srli	ra,ra,16
 1006930:	f8001f26 	beq	ra,zero,10069b0 <__multiply+0x1a0>
 1006934:	58c00017 	ldw	r3,0(r11)
 1006938:	681d883a 	mov	r14,r13
 100693c:	581f883a 	mov	r15,r11
 1006940:	1811883a 	mov	r8,r3
 1006944:	5825883a 	mov	r18,r11
 1006948:	000f883a 	mov	r7,zero
 100694c:	00000106 	br	1006954 <__multiply+0x144>
 1006950:	8825883a 	mov	r18,r17
 1006954:	7140000b 	ldhu	r5,0(r14)
 1006958:	4010d43a 	srli	r8,r8,16
 100695c:	193fffcc 	andi	r4,r3,65535
 1006960:	2fcb383a 	mul	r5,r5,ra
 1006964:	7bc00104 	addi	r15,r15,4
 1006968:	73800104 	addi	r14,r14,4
 100696c:	2a0b883a 	add	r5,r5,r8
 1006970:	29cb883a 	add	r5,r5,r7
 1006974:	2806943a 	slli	r3,r5,16
 1006978:	94400104 	addi	r17,r18,4
 100697c:	280ad43a 	srli	r5,r5,16
 1006980:	1908b03a 	or	r4,r3,r4
 1006984:	793fff15 	stw	r4,-4(r15)
 1006988:	70ffff17 	ldw	r3,-4(r14)
 100698c:	8a000017 	ldw	r8,0(r17)
 1006990:	1806d43a 	srli	r3,r3,16
 1006994:	413fffcc 	andi	r4,r8,65535
 1006998:	1fc7383a 	mul	r3,r3,ra
 100699c:	1907883a 	add	r3,r3,r4
 10069a0:	1947883a 	add	r3,r3,r5
 10069a4:	180ed43a 	srli	r7,r3,16
 10069a8:	727fe936 	bltu	r14,r9,1006950 <__alt_mem_TCDM+0xff005950>
 10069ac:	90c00115 	stw	r3,4(r18)
 10069b0:	31800104 	addi	r6,r6,4
 10069b4:	5ac00104 	addi	r11,r11,4
 10069b8:	333fbe36 	bltu	r6,r12,10068b4 <__alt_mem_TCDM+0xff0058b4>
 10069bc:	0400090e 	bge	zero,r16,10069e4 <__multiply+0x1d4>
 10069c0:	50ffff17 	ldw	r3,-4(r10)
 10069c4:	52bfff04 	addi	r10,r10,-4
 10069c8:	18000326 	beq	r3,zero,10069d8 <__multiply+0x1c8>
 10069cc:	00000506 	br	10069e4 <__multiply+0x1d4>
 10069d0:	50c00017 	ldw	r3,0(r10)
 10069d4:	1800031e 	bne	r3,zero,10069e4 <__multiply+0x1d4>
 10069d8:	843fffc4 	addi	r16,r16,-1
 10069dc:	52bfff04 	addi	r10,r10,-4
 10069e0:	803ffb1e 	bne	r16,zero,10069d0 <__alt_mem_TCDM+0xff0059d0>
 10069e4:	14000415 	stw	r16,16(r2)
 10069e8:	dfc00517 	ldw	ra,20(sp)
 10069ec:	dd000417 	ldw	r20,16(sp)
 10069f0:	dcc00317 	ldw	r19,12(sp)
 10069f4:	dc800217 	ldw	r18,8(sp)
 10069f8:	dc400117 	ldw	r17,4(sp)
 10069fc:	dc000017 	ldw	r16,0(sp)
 1006a00:	dec00604 	addi	sp,sp,24
 1006a04:	f800283a 	ret

01006a08 <__pow5mult>:
 1006a08:	defffa04 	addi	sp,sp,-24
 1006a0c:	dcc00315 	stw	r19,12(sp)
 1006a10:	dc000015 	stw	r16,0(sp)
 1006a14:	dfc00515 	stw	ra,20(sp)
 1006a18:	dd000415 	stw	r20,16(sp)
 1006a1c:	dc800215 	stw	r18,8(sp)
 1006a20:	dc400115 	stw	r17,4(sp)
 1006a24:	308000cc 	andi	r2,r6,3
 1006a28:	3021883a 	mov	r16,r6
 1006a2c:	2027883a 	mov	r19,r4
 1006a30:	10002f1e 	bne	r2,zero,1006af0 <__pow5mult+0xe8>
 1006a34:	2825883a 	mov	r18,r5
 1006a38:	8021d0ba 	srai	r16,r16,2
 1006a3c:	80001a26 	beq	r16,zero,1006aa8 <__pow5mult+0xa0>
 1006a40:	9c401217 	ldw	r17,72(r19)
 1006a44:	8800061e 	bne	r17,zero,1006a60 <__pow5mult+0x58>
 1006a48:	00003406 	br	1006b1c <__pow5mult+0x114>
 1006a4c:	8021d07a 	srai	r16,r16,1
 1006a50:	80001526 	beq	r16,zero,1006aa8 <__pow5mult+0xa0>
 1006a54:	88800017 	ldw	r2,0(r17)
 1006a58:	10001c26 	beq	r2,zero,1006acc <__pow5mult+0xc4>
 1006a5c:	1023883a 	mov	r17,r2
 1006a60:	8080004c 	andi	r2,r16,1
 1006a64:	103ff926 	beq	r2,zero,1006a4c <__alt_mem_TCDM+0xff005a4c>
 1006a68:	880d883a 	mov	r6,r17
 1006a6c:	900b883a 	mov	r5,r18
 1006a70:	9809883a 	mov	r4,r19
 1006a74:	10068100 	call	1006810 <__multiply>
 1006a78:	90001b26 	beq	r18,zero,1006ae8 <__pow5mult+0xe0>
 1006a7c:	91000117 	ldw	r4,4(r18)
 1006a80:	98c01317 	ldw	r3,76(r19)
 1006a84:	8021d07a 	srai	r16,r16,1
 1006a88:	2109883a 	add	r4,r4,r4
 1006a8c:	2109883a 	add	r4,r4,r4
 1006a90:	1907883a 	add	r3,r3,r4
 1006a94:	19000017 	ldw	r4,0(r3)
 1006a98:	91000015 	stw	r4,0(r18)
 1006a9c:	1c800015 	stw	r18,0(r3)
 1006aa0:	1025883a 	mov	r18,r2
 1006aa4:	803feb1e 	bne	r16,zero,1006a54 <__alt_mem_TCDM+0xff005a54>
 1006aa8:	9005883a 	mov	r2,r18
 1006aac:	dfc00517 	ldw	ra,20(sp)
 1006ab0:	dd000417 	ldw	r20,16(sp)
 1006ab4:	dcc00317 	ldw	r19,12(sp)
 1006ab8:	dc800217 	ldw	r18,8(sp)
 1006abc:	dc400117 	ldw	r17,4(sp)
 1006ac0:	dc000017 	ldw	r16,0(sp)
 1006ac4:	dec00604 	addi	sp,sp,24
 1006ac8:	f800283a 	ret
 1006acc:	880d883a 	mov	r6,r17
 1006ad0:	880b883a 	mov	r5,r17
 1006ad4:	9809883a 	mov	r4,r19
 1006ad8:	10068100 	call	1006810 <__multiply>
 1006adc:	88800015 	stw	r2,0(r17)
 1006ae0:	10000015 	stw	zero,0(r2)
 1006ae4:	003fdd06 	br	1006a5c <__alt_mem_TCDM+0xff005a5c>
 1006ae8:	1025883a 	mov	r18,r2
 1006aec:	003fd706 	br	1006a4c <__alt_mem_TCDM+0xff005a4c>
 1006af0:	10bfffc4 	addi	r2,r2,-1
 1006af4:	1085883a 	add	r2,r2,r2
 1006af8:	00c04074 	movhi	r3,257
 1006afc:	18ff7604 	addi	r3,r3,-552
 1006b00:	1085883a 	add	r2,r2,r2
 1006b04:	1885883a 	add	r2,r3,r2
 1006b08:	11800017 	ldw	r6,0(r2)
 1006b0c:	000f883a 	mov	r7,zero
 1006b10:	10064980 	call	1006498 <__multadd>
 1006b14:	1025883a 	mov	r18,r2
 1006b18:	003fc706 	br	1006a38 <__alt_mem_TCDM+0xff005a38>
 1006b1c:	05000044 	movi	r20,1
 1006b20:	a00b883a 	mov	r5,r20
 1006b24:	9809883a 	mov	r4,r19
 1006b28:	10063c80 	call	10063c8 <_Balloc>
 1006b2c:	1023883a 	mov	r17,r2
 1006b30:	00809c44 	movi	r2,625
 1006b34:	88800515 	stw	r2,20(r17)
 1006b38:	8d000415 	stw	r20,16(r17)
 1006b3c:	9c401215 	stw	r17,72(r19)
 1006b40:	88000015 	stw	zero,0(r17)
 1006b44:	003fc606 	br	1006a60 <__alt_mem_TCDM+0xff005a60>

01006b48 <__lshift>:
 1006b48:	defff904 	addi	sp,sp,-28
 1006b4c:	dd400515 	stw	r21,20(sp)
 1006b50:	dcc00315 	stw	r19,12(sp)
 1006b54:	302bd17a 	srai	r21,r6,5
 1006b58:	2cc00417 	ldw	r19,16(r5)
 1006b5c:	28800217 	ldw	r2,8(r5)
 1006b60:	dd000415 	stw	r20,16(sp)
 1006b64:	ace7883a 	add	r19,r21,r19
 1006b68:	dc800215 	stw	r18,8(sp)
 1006b6c:	dc400115 	stw	r17,4(sp)
 1006b70:	dc000015 	stw	r16,0(sp)
 1006b74:	dfc00615 	stw	ra,24(sp)
 1006b78:	9c000044 	addi	r16,r19,1
 1006b7c:	2823883a 	mov	r17,r5
 1006b80:	3029883a 	mov	r20,r6
 1006b84:	2025883a 	mov	r18,r4
 1006b88:	29400117 	ldw	r5,4(r5)
 1006b8c:	1400030e 	bge	r2,r16,1006b9c <__lshift+0x54>
 1006b90:	1085883a 	add	r2,r2,r2
 1006b94:	29400044 	addi	r5,r5,1
 1006b98:	143ffd16 	blt	r2,r16,1006b90 <__alt_mem_TCDM+0xff005b90>
 1006b9c:	9009883a 	mov	r4,r18
 1006ba0:	10063c80 	call	10063c8 <_Balloc>
 1006ba4:	10c00504 	addi	r3,r2,20
 1006ba8:	0540070e 	bge	zero,r21,1006bc8 <__lshift+0x80>
 1006bac:	ad6b883a 	add	r21,r21,r21
 1006bb0:	ad6b883a 	add	r21,r21,r21
 1006bb4:	1809883a 	mov	r4,r3
 1006bb8:	1d47883a 	add	r3,r3,r21
 1006bbc:	20000015 	stw	zero,0(r4)
 1006bc0:	21000104 	addi	r4,r4,4
 1006bc4:	193ffd1e 	bne	r3,r4,1006bbc <__alt_mem_TCDM+0xff005bbc>
 1006bc8:	8a000417 	ldw	r8,16(r17)
 1006bcc:	89000504 	addi	r4,r17,20
 1006bd0:	a18007cc 	andi	r6,r20,31
 1006bd4:	4211883a 	add	r8,r8,r8
 1006bd8:	4211883a 	add	r8,r8,r8
 1006bdc:	2211883a 	add	r8,r4,r8
 1006be0:	30002326 	beq	r6,zero,1006c70 <__lshift+0x128>
 1006be4:	02400804 	movi	r9,32
 1006be8:	4993c83a 	sub	r9,r9,r6
 1006bec:	000b883a 	mov	r5,zero
 1006bf0:	21c00017 	ldw	r7,0(r4)
 1006bf4:	1815883a 	mov	r10,r3
 1006bf8:	18c00104 	addi	r3,r3,4
 1006bfc:	398e983a 	sll	r7,r7,r6
 1006c00:	21000104 	addi	r4,r4,4
 1006c04:	394ab03a 	or	r5,r7,r5
 1006c08:	197fff15 	stw	r5,-4(r3)
 1006c0c:	217fff17 	ldw	r5,-4(r4)
 1006c10:	2a4ad83a 	srl	r5,r5,r9
 1006c14:	223ff636 	bltu	r4,r8,1006bf0 <__alt_mem_TCDM+0xff005bf0>
 1006c18:	51400115 	stw	r5,4(r10)
 1006c1c:	28001a1e 	bne	r5,zero,1006c88 <__lshift+0x140>
 1006c20:	843fffc4 	addi	r16,r16,-1
 1006c24:	14000415 	stw	r16,16(r2)
 1006c28:	88000826 	beq	r17,zero,1006c4c <__lshift+0x104>
 1006c2c:	89000117 	ldw	r4,4(r17)
 1006c30:	90c01317 	ldw	r3,76(r18)
 1006c34:	2109883a 	add	r4,r4,r4
 1006c38:	2109883a 	add	r4,r4,r4
 1006c3c:	1907883a 	add	r3,r3,r4
 1006c40:	19000017 	ldw	r4,0(r3)
 1006c44:	89000015 	stw	r4,0(r17)
 1006c48:	1c400015 	stw	r17,0(r3)
 1006c4c:	dfc00617 	ldw	ra,24(sp)
 1006c50:	dd400517 	ldw	r21,20(sp)
 1006c54:	dd000417 	ldw	r20,16(sp)
 1006c58:	dcc00317 	ldw	r19,12(sp)
 1006c5c:	dc800217 	ldw	r18,8(sp)
 1006c60:	dc400117 	ldw	r17,4(sp)
 1006c64:	dc000017 	ldw	r16,0(sp)
 1006c68:	dec00704 	addi	sp,sp,28
 1006c6c:	f800283a 	ret
 1006c70:	21400017 	ldw	r5,0(r4)
 1006c74:	18c00104 	addi	r3,r3,4
 1006c78:	21000104 	addi	r4,r4,4
 1006c7c:	197fff15 	stw	r5,-4(r3)
 1006c80:	223ffb36 	bltu	r4,r8,1006c70 <__alt_mem_TCDM+0xff005c70>
 1006c84:	003fe606 	br	1006c20 <__alt_mem_TCDM+0xff005c20>
 1006c88:	9c000084 	addi	r16,r19,2
 1006c8c:	003fe406 	br	1006c20 <__alt_mem_TCDM+0xff005c20>

01006c90 <__mcmp>:
 1006c90:	20800417 	ldw	r2,16(r4)
 1006c94:	28c00417 	ldw	r3,16(r5)
 1006c98:	10c5c83a 	sub	r2,r2,r3
 1006c9c:	1000111e 	bne	r2,zero,1006ce4 <__mcmp+0x54>
 1006ca0:	18c7883a 	add	r3,r3,r3
 1006ca4:	18c7883a 	add	r3,r3,r3
 1006ca8:	21000504 	addi	r4,r4,20
 1006cac:	29400504 	addi	r5,r5,20
 1006cb0:	20c5883a 	add	r2,r4,r3
 1006cb4:	28cb883a 	add	r5,r5,r3
 1006cb8:	00000106 	br	1006cc0 <__mcmp+0x30>
 1006cbc:	20800a2e 	bgeu	r4,r2,1006ce8 <__mcmp+0x58>
 1006cc0:	10bfff04 	addi	r2,r2,-4
 1006cc4:	297fff04 	addi	r5,r5,-4
 1006cc8:	11800017 	ldw	r6,0(r2)
 1006ccc:	28c00017 	ldw	r3,0(r5)
 1006cd0:	30fffa26 	beq	r6,r3,1006cbc <__alt_mem_TCDM+0xff005cbc>
 1006cd4:	30c00236 	bltu	r6,r3,1006ce0 <__mcmp+0x50>
 1006cd8:	00800044 	movi	r2,1
 1006cdc:	f800283a 	ret
 1006ce0:	00bfffc4 	movi	r2,-1
 1006ce4:	f800283a 	ret
 1006ce8:	0005883a 	mov	r2,zero
 1006cec:	f800283a 	ret

01006cf0 <__mdiff>:
 1006cf0:	28c00417 	ldw	r3,16(r5)
 1006cf4:	30800417 	ldw	r2,16(r6)
 1006cf8:	defffa04 	addi	sp,sp,-24
 1006cfc:	dcc00315 	stw	r19,12(sp)
 1006d00:	dc800215 	stw	r18,8(sp)
 1006d04:	dfc00515 	stw	ra,20(sp)
 1006d08:	dd000415 	stw	r20,16(sp)
 1006d0c:	dc400115 	stw	r17,4(sp)
 1006d10:	dc000015 	stw	r16,0(sp)
 1006d14:	1887c83a 	sub	r3,r3,r2
 1006d18:	2825883a 	mov	r18,r5
 1006d1c:	3027883a 	mov	r19,r6
 1006d20:	1800141e 	bne	r3,zero,1006d74 <__mdiff+0x84>
 1006d24:	1085883a 	add	r2,r2,r2
 1006d28:	1085883a 	add	r2,r2,r2
 1006d2c:	2a000504 	addi	r8,r5,20
 1006d30:	34000504 	addi	r16,r6,20
 1006d34:	4087883a 	add	r3,r8,r2
 1006d38:	8085883a 	add	r2,r16,r2
 1006d3c:	00000106 	br	1006d44 <__mdiff+0x54>
 1006d40:	40c0592e 	bgeu	r8,r3,1006ea8 <__mdiff+0x1b8>
 1006d44:	18ffff04 	addi	r3,r3,-4
 1006d48:	10bfff04 	addi	r2,r2,-4
 1006d4c:	19c00017 	ldw	r7,0(r3)
 1006d50:	11400017 	ldw	r5,0(r2)
 1006d54:	397ffa26 	beq	r7,r5,1006d40 <__alt_mem_TCDM+0xff005d40>
 1006d58:	3940592e 	bgeu	r7,r5,1006ec0 <__mdiff+0x1d0>
 1006d5c:	9005883a 	mov	r2,r18
 1006d60:	4023883a 	mov	r17,r8
 1006d64:	9825883a 	mov	r18,r19
 1006d68:	05000044 	movi	r20,1
 1006d6c:	1027883a 	mov	r19,r2
 1006d70:	00000406 	br	1006d84 <__mdiff+0x94>
 1006d74:	18005616 	blt	r3,zero,1006ed0 <__mdiff+0x1e0>
 1006d78:	34400504 	addi	r17,r6,20
 1006d7c:	2c000504 	addi	r16,r5,20
 1006d80:	0029883a 	mov	r20,zero
 1006d84:	91400117 	ldw	r5,4(r18)
 1006d88:	10063c80 	call	10063c8 <_Balloc>
 1006d8c:	92400417 	ldw	r9,16(r18)
 1006d90:	9b000417 	ldw	r12,16(r19)
 1006d94:	12c00504 	addi	r11,r2,20
 1006d98:	4a51883a 	add	r8,r9,r9
 1006d9c:	6319883a 	add	r12,r12,r12
 1006da0:	4211883a 	add	r8,r8,r8
 1006da4:	6319883a 	add	r12,r12,r12
 1006da8:	15000315 	stw	r20,12(r2)
 1006dac:	8211883a 	add	r8,r16,r8
 1006db0:	8b19883a 	add	r12,r17,r12
 1006db4:	0007883a 	mov	r3,zero
 1006db8:	81400017 	ldw	r5,0(r16)
 1006dbc:	89c00017 	ldw	r7,0(r17)
 1006dc0:	59800104 	addi	r6,r11,4
 1006dc4:	293fffcc 	andi	r4,r5,65535
 1006dc8:	20c7883a 	add	r3,r4,r3
 1006dcc:	393fffcc 	andi	r4,r7,65535
 1006dd0:	1909c83a 	sub	r4,r3,r4
 1006dd4:	280ad43a 	srli	r5,r5,16
 1006dd8:	380ed43a 	srli	r7,r7,16
 1006ddc:	2007d43a 	srai	r3,r4,16
 1006de0:	213fffcc 	andi	r4,r4,65535
 1006de4:	29cbc83a 	sub	r5,r5,r7
 1006de8:	28c7883a 	add	r3,r5,r3
 1006dec:	180a943a 	slli	r5,r3,16
 1006df0:	8c400104 	addi	r17,r17,4
 1006df4:	84000104 	addi	r16,r16,4
 1006df8:	2908b03a 	or	r4,r5,r4
 1006dfc:	59000015 	stw	r4,0(r11)
 1006e00:	1807d43a 	srai	r3,r3,16
 1006e04:	3015883a 	mov	r10,r6
 1006e08:	3017883a 	mov	r11,r6
 1006e0c:	8b3fea36 	bltu	r17,r12,1006db8 <__alt_mem_TCDM+0xff005db8>
 1006e10:	8200162e 	bgeu	r16,r8,1006e6c <__mdiff+0x17c>
 1006e14:	8017883a 	mov	r11,r16
 1006e18:	59400017 	ldw	r5,0(r11)
 1006e1c:	31800104 	addi	r6,r6,4
 1006e20:	5ac00104 	addi	r11,r11,4
 1006e24:	293fffcc 	andi	r4,r5,65535
 1006e28:	20c7883a 	add	r3,r4,r3
 1006e2c:	280ed43a 	srli	r7,r5,16
 1006e30:	180bd43a 	srai	r5,r3,16
 1006e34:	193fffcc 	andi	r4,r3,65535
 1006e38:	3947883a 	add	r3,r7,r5
 1006e3c:	180a943a 	slli	r5,r3,16
 1006e40:	1807d43a 	srai	r3,r3,16
 1006e44:	2908b03a 	or	r4,r5,r4
 1006e48:	313fff15 	stw	r4,-4(r6)
 1006e4c:	5a3ff236 	bltu	r11,r8,1006e18 <__alt_mem_TCDM+0xff005e18>
 1006e50:	0406303a 	nor	r3,zero,r16
 1006e54:	1a07883a 	add	r3,r3,r8
 1006e58:	1806d0ba 	srli	r3,r3,2
 1006e5c:	18c00044 	addi	r3,r3,1
 1006e60:	18c7883a 	add	r3,r3,r3
 1006e64:	18c7883a 	add	r3,r3,r3
 1006e68:	50d5883a 	add	r10,r10,r3
 1006e6c:	50ffff04 	addi	r3,r10,-4
 1006e70:	2000041e 	bne	r4,zero,1006e84 <__mdiff+0x194>
 1006e74:	18ffff04 	addi	r3,r3,-4
 1006e78:	19000017 	ldw	r4,0(r3)
 1006e7c:	4a7fffc4 	addi	r9,r9,-1
 1006e80:	203ffc26 	beq	r4,zero,1006e74 <__alt_mem_TCDM+0xff005e74>
 1006e84:	12400415 	stw	r9,16(r2)
 1006e88:	dfc00517 	ldw	ra,20(sp)
 1006e8c:	dd000417 	ldw	r20,16(sp)
 1006e90:	dcc00317 	ldw	r19,12(sp)
 1006e94:	dc800217 	ldw	r18,8(sp)
 1006e98:	dc400117 	ldw	r17,4(sp)
 1006e9c:	dc000017 	ldw	r16,0(sp)
 1006ea0:	dec00604 	addi	sp,sp,24
 1006ea4:	f800283a 	ret
 1006ea8:	000b883a 	mov	r5,zero
 1006eac:	10063c80 	call	10063c8 <_Balloc>
 1006eb0:	00c00044 	movi	r3,1
 1006eb4:	10c00415 	stw	r3,16(r2)
 1006eb8:	10000515 	stw	zero,20(r2)
 1006ebc:	003ff206 	br	1006e88 <__alt_mem_TCDM+0xff005e88>
 1006ec0:	8023883a 	mov	r17,r16
 1006ec4:	0029883a 	mov	r20,zero
 1006ec8:	4021883a 	mov	r16,r8
 1006ecc:	003fad06 	br	1006d84 <__alt_mem_TCDM+0xff005d84>
 1006ed0:	9005883a 	mov	r2,r18
 1006ed4:	94400504 	addi	r17,r18,20
 1006ed8:	9c000504 	addi	r16,r19,20
 1006edc:	9825883a 	mov	r18,r19
 1006ee0:	05000044 	movi	r20,1
 1006ee4:	1027883a 	mov	r19,r2
 1006ee8:	003fa606 	br	1006d84 <__alt_mem_TCDM+0xff005d84>

01006eec <__ulp>:
 1006eec:	295ffc2c 	andhi	r5,r5,32752
 1006ef0:	00bf3034 	movhi	r2,64704
 1006ef4:	2887883a 	add	r3,r5,r2
 1006ef8:	00c0020e 	bge	zero,r3,1006f04 <__ulp+0x18>
 1006efc:	0005883a 	mov	r2,zero
 1006f00:	f800283a 	ret
 1006f04:	00c7c83a 	sub	r3,zero,r3
 1006f08:	1807d53a 	srai	r3,r3,20
 1006f0c:	008004c4 	movi	r2,19
 1006f10:	10c00b0e 	bge	r2,r3,1006f40 <__ulp+0x54>
 1006f14:	18bffb04 	addi	r2,r3,-20
 1006f18:	01000784 	movi	r4,30
 1006f1c:	0007883a 	mov	r3,zero
 1006f20:	20800516 	blt	r4,r2,1006f38 <__ulp+0x4c>
 1006f24:	010007c4 	movi	r4,31
 1006f28:	2089c83a 	sub	r4,r4,r2
 1006f2c:	00800044 	movi	r2,1
 1006f30:	1104983a 	sll	r2,r2,r4
 1006f34:	f800283a 	ret
 1006f38:	00800044 	movi	r2,1
 1006f3c:	f800283a 	ret
 1006f40:	01400234 	movhi	r5,8
 1006f44:	28c7d83a 	sra	r3,r5,r3
 1006f48:	0005883a 	mov	r2,zero
 1006f4c:	f800283a 	ret

01006f50 <__b2d>:
 1006f50:	defffa04 	addi	sp,sp,-24
 1006f54:	dc000015 	stw	r16,0(sp)
 1006f58:	24000417 	ldw	r16,16(r4)
 1006f5c:	dc400115 	stw	r17,4(sp)
 1006f60:	24400504 	addi	r17,r4,20
 1006f64:	8421883a 	add	r16,r16,r16
 1006f68:	8421883a 	add	r16,r16,r16
 1006f6c:	8c21883a 	add	r16,r17,r16
 1006f70:	dc800215 	stw	r18,8(sp)
 1006f74:	84bfff17 	ldw	r18,-4(r16)
 1006f78:	dd000415 	stw	r20,16(sp)
 1006f7c:	dcc00315 	stw	r19,12(sp)
 1006f80:	9009883a 	mov	r4,r18
 1006f84:	2829883a 	mov	r20,r5
 1006f88:	dfc00515 	stw	ra,20(sp)
 1006f8c:	10066bc0 	call	10066bc <__hi0bits>
 1006f90:	00c00804 	movi	r3,32
 1006f94:	1889c83a 	sub	r4,r3,r2
 1006f98:	a1000015 	stw	r4,0(r20)
 1006f9c:	01000284 	movi	r4,10
 1006fa0:	84ffff04 	addi	r19,r16,-4
 1006fa4:	20801216 	blt	r4,r2,1006ff0 <__b2d+0xa0>
 1006fa8:	018002c4 	movi	r6,11
 1006fac:	308dc83a 	sub	r6,r6,r2
 1006fb0:	9186d83a 	srl	r3,r18,r6
 1006fb4:	18cffc34 	orhi	r3,r3,16368
 1006fb8:	8cc0212e 	bgeu	r17,r19,1007040 <__b2d+0xf0>
 1006fbc:	813ffe17 	ldw	r4,-8(r16)
 1006fc0:	218cd83a 	srl	r6,r4,r6
 1006fc4:	10800544 	addi	r2,r2,21
 1006fc8:	9084983a 	sll	r2,r18,r2
 1006fcc:	1184b03a 	or	r2,r2,r6
 1006fd0:	dfc00517 	ldw	ra,20(sp)
 1006fd4:	dd000417 	ldw	r20,16(sp)
 1006fd8:	dcc00317 	ldw	r19,12(sp)
 1006fdc:	dc800217 	ldw	r18,8(sp)
 1006fe0:	dc400117 	ldw	r17,4(sp)
 1006fe4:	dc000017 	ldw	r16,0(sp)
 1006fe8:	dec00604 	addi	sp,sp,24
 1006fec:	f800283a 	ret
 1006ff0:	8cc00f2e 	bgeu	r17,r19,1007030 <__b2d+0xe0>
 1006ff4:	117ffd44 	addi	r5,r2,-11
 1006ff8:	80bffe17 	ldw	r2,-8(r16)
 1006ffc:	28000e26 	beq	r5,zero,1007038 <__b2d+0xe8>
 1007000:	1949c83a 	sub	r4,r3,r5
 1007004:	9164983a 	sll	r18,r18,r5
 1007008:	1106d83a 	srl	r3,r2,r4
 100700c:	81bffe04 	addi	r6,r16,-8
 1007010:	948ffc34 	orhi	r18,r18,16368
 1007014:	90c6b03a 	or	r3,r18,r3
 1007018:	89800e2e 	bgeu	r17,r6,1007054 <__b2d+0x104>
 100701c:	81bffd17 	ldw	r6,-12(r16)
 1007020:	1144983a 	sll	r2,r2,r5
 1007024:	310ad83a 	srl	r5,r6,r4
 1007028:	2884b03a 	or	r2,r5,r2
 100702c:	003fe806 	br	1006fd0 <__alt_mem_TCDM+0xff005fd0>
 1007030:	10bffd44 	addi	r2,r2,-11
 1007034:	1000041e 	bne	r2,zero,1007048 <__b2d+0xf8>
 1007038:	90cffc34 	orhi	r3,r18,16368
 100703c:	003fe406 	br	1006fd0 <__alt_mem_TCDM+0xff005fd0>
 1007040:	000d883a 	mov	r6,zero
 1007044:	003fdf06 	br	1006fc4 <__alt_mem_TCDM+0xff005fc4>
 1007048:	90a4983a 	sll	r18,r18,r2
 100704c:	0005883a 	mov	r2,zero
 1007050:	003ff906 	br	1007038 <__alt_mem_TCDM+0xff006038>
 1007054:	1144983a 	sll	r2,r2,r5
 1007058:	003fdd06 	br	1006fd0 <__alt_mem_TCDM+0xff005fd0>

0100705c <__d2b>:
 100705c:	defff804 	addi	sp,sp,-32
 1007060:	dc000215 	stw	r16,8(sp)
 1007064:	3021883a 	mov	r16,r6
 1007068:	dc400315 	stw	r17,12(sp)
 100706c:	8022907a 	slli	r17,r16,1
 1007070:	dd000615 	stw	r20,24(sp)
 1007074:	2829883a 	mov	r20,r5
 1007078:	01400044 	movi	r5,1
 100707c:	dcc00515 	stw	r19,20(sp)
 1007080:	dc800415 	stw	r18,16(sp)
 1007084:	dfc00715 	stw	ra,28(sp)
 1007088:	3825883a 	mov	r18,r7
 100708c:	8822d57a 	srli	r17,r17,21
 1007090:	10063c80 	call	10063c8 <_Balloc>
 1007094:	1027883a 	mov	r19,r2
 1007098:	00800434 	movhi	r2,16
 100709c:	10bfffc4 	addi	r2,r2,-1
 10070a0:	808c703a 	and	r6,r16,r2
 10070a4:	88000126 	beq	r17,zero,10070ac <__d2b+0x50>
 10070a8:	31800434 	orhi	r6,r6,16
 10070ac:	d9800015 	stw	r6,0(sp)
 10070b0:	a0002426 	beq	r20,zero,1007144 <__d2b+0xe8>
 10070b4:	d9000104 	addi	r4,sp,4
 10070b8:	dd000115 	stw	r20,4(sp)
 10070bc:	10067240 	call	1006724 <__lo0bits>
 10070c0:	d8c00017 	ldw	r3,0(sp)
 10070c4:	10002f1e 	bne	r2,zero,1007184 <__d2b+0x128>
 10070c8:	d9000117 	ldw	r4,4(sp)
 10070cc:	99000515 	stw	r4,20(r19)
 10070d0:	1821003a 	cmpeq	r16,r3,zero
 10070d4:	01000084 	movi	r4,2
 10070d8:	2421c83a 	sub	r16,r4,r16
 10070dc:	98c00615 	stw	r3,24(r19)
 10070e0:	9c000415 	stw	r16,16(r19)
 10070e4:	88001f1e 	bne	r17,zero,1007164 <__d2b+0x108>
 10070e8:	10bef384 	addi	r2,r2,-1074
 10070ec:	90800015 	stw	r2,0(r18)
 10070f0:	00900034 	movhi	r2,16384
 10070f4:	10bfffc4 	addi	r2,r2,-1
 10070f8:	8085883a 	add	r2,r16,r2
 10070fc:	1085883a 	add	r2,r2,r2
 1007100:	1085883a 	add	r2,r2,r2
 1007104:	9885883a 	add	r2,r19,r2
 1007108:	11000517 	ldw	r4,20(r2)
 100710c:	8020917a 	slli	r16,r16,5
 1007110:	10066bc0 	call	10066bc <__hi0bits>
 1007114:	d8c00817 	ldw	r3,32(sp)
 1007118:	8085c83a 	sub	r2,r16,r2
 100711c:	18800015 	stw	r2,0(r3)
 1007120:	9805883a 	mov	r2,r19
 1007124:	dfc00717 	ldw	ra,28(sp)
 1007128:	dd000617 	ldw	r20,24(sp)
 100712c:	dcc00517 	ldw	r19,20(sp)
 1007130:	dc800417 	ldw	r18,16(sp)
 1007134:	dc400317 	ldw	r17,12(sp)
 1007138:	dc000217 	ldw	r16,8(sp)
 100713c:	dec00804 	addi	sp,sp,32
 1007140:	f800283a 	ret
 1007144:	d809883a 	mov	r4,sp
 1007148:	10067240 	call	1006724 <__lo0bits>
 100714c:	d8c00017 	ldw	r3,0(sp)
 1007150:	04000044 	movi	r16,1
 1007154:	9c000415 	stw	r16,16(r19)
 1007158:	98c00515 	stw	r3,20(r19)
 100715c:	10800804 	addi	r2,r2,32
 1007160:	883fe126 	beq	r17,zero,10070e8 <__alt_mem_TCDM+0xff0060e8>
 1007164:	00c00d44 	movi	r3,53
 1007168:	8c7ef344 	addi	r17,r17,-1075
 100716c:	88a3883a 	add	r17,r17,r2
 1007170:	1885c83a 	sub	r2,r3,r2
 1007174:	d8c00817 	ldw	r3,32(sp)
 1007178:	94400015 	stw	r17,0(r18)
 100717c:	18800015 	stw	r2,0(r3)
 1007180:	003fe706 	br	1007120 <__alt_mem_TCDM+0xff006120>
 1007184:	01000804 	movi	r4,32
 1007188:	2089c83a 	sub	r4,r4,r2
 100718c:	1908983a 	sll	r4,r3,r4
 1007190:	d9400117 	ldw	r5,4(sp)
 1007194:	1886d83a 	srl	r3,r3,r2
 1007198:	2148b03a 	or	r4,r4,r5
 100719c:	99000515 	stw	r4,20(r19)
 10071a0:	d8c00015 	stw	r3,0(sp)
 10071a4:	003fca06 	br	10070d0 <__alt_mem_TCDM+0xff0060d0>

010071a8 <__ratio>:
 10071a8:	defff904 	addi	sp,sp,-28
 10071ac:	dc400315 	stw	r17,12(sp)
 10071b0:	2823883a 	mov	r17,r5
 10071b4:	d9400104 	addi	r5,sp,4
 10071b8:	dfc00615 	stw	ra,24(sp)
 10071bc:	dcc00515 	stw	r19,20(sp)
 10071c0:	dc800415 	stw	r18,16(sp)
 10071c4:	2027883a 	mov	r19,r4
 10071c8:	dc000215 	stw	r16,8(sp)
 10071cc:	1006f500 	call	1006f50 <__b2d>
 10071d0:	d80b883a 	mov	r5,sp
 10071d4:	8809883a 	mov	r4,r17
 10071d8:	1025883a 	mov	r18,r2
 10071dc:	1821883a 	mov	r16,r3
 10071e0:	1006f500 	call	1006f50 <__b2d>
 10071e4:	8a000417 	ldw	r8,16(r17)
 10071e8:	99000417 	ldw	r4,16(r19)
 10071ec:	d9400117 	ldw	r5,4(sp)
 10071f0:	2209c83a 	sub	r4,r4,r8
 10071f4:	2010917a 	slli	r8,r4,5
 10071f8:	d9000017 	ldw	r4,0(sp)
 10071fc:	2909c83a 	sub	r4,r5,r4
 1007200:	4109883a 	add	r4,r8,r4
 1007204:	01000e0e 	bge	zero,r4,1007240 <__ratio+0x98>
 1007208:	2008953a 	slli	r4,r4,20
 100720c:	2421883a 	add	r16,r4,r16
 1007210:	100d883a 	mov	r6,r2
 1007214:	180f883a 	mov	r7,r3
 1007218:	9009883a 	mov	r4,r18
 100721c:	800b883a 	mov	r5,r16
 1007220:	100b0940 	call	100b094 <__divdf3>
 1007224:	dfc00617 	ldw	ra,24(sp)
 1007228:	dcc00517 	ldw	r19,20(sp)
 100722c:	dc800417 	ldw	r18,16(sp)
 1007230:	dc400317 	ldw	r17,12(sp)
 1007234:	dc000217 	ldw	r16,8(sp)
 1007238:	dec00704 	addi	sp,sp,28
 100723c:	f800283a 	ret
 1007240:	2008953a 	slli	r4,r4,20
 1007244:	1907c83a 	sub	r3,r3,r4
 1007248:	003ff106 	br	1007210 <__alt_mem_TCDM+0xff006210>

0100724c <_mprec_log10>:
 100724c:	defffe04 	addi	sp,sp,-8
 1007250:	dc000015 	stw	r16,0(sp)
 1007254:	dfc00115 	stw	ra,4(sp)
 1007258:	008005c4 	movi	r2,23
 100725c:	2021883a 	mov	r16,r4
 1007260:	11000d0e 	bge	r2,r4,1007298 <_mprec_log10+0x4c>
 1007264:	0005883a 	mov	r2,zero
 1007268:	00cffc34 	movhi	r3,16368
 100726c:	843fffc4 	addi	r16,r16,-1
 1007270:	000d883a 	mov	r6,zero
 1007274:	01d00934 	movhi	r7,16420
 1007278:	1009883a 	mov	r4,r2
 100727c:	180b883a 	mov	r5,r3
 1007280:	100bbd40 	call	100bbd4 <__muldf3>
 1007284:	803ff91e 	bne	r16,zero,100726c <__alt_mem_TCDM+0xff00626c>
 1007288:	dfc00117 	ldw	ra,4(sp)
 100728c:	dc000017 	ldw	r16,0(sp)
 1007290:	dec00204 	addi	sp,sp,8
 1007294:	f800283a 	ret
 1007298:	202090fa 	slli	r16,r4,3
 100729c:	00804074 	movhi	r2,257
 10072a0:	10bf8d04 	addi	r2,r2,-460
 10072a4:	1421883a 	add	r16,r2,r16
 10072a8:	80800017 	ldw	r2,0(r16)
 10072ac:	80c00117 	ldw	r3,4(r16)
 10072b0:	dfc00117 	ldw	ra,4(sp)
 10072b4:	dc000017 	ldw	r16,0(sp)
 10072b8:	dec00204 	addi	sp,sp,8
 10072bc:	f800283a 	ret

010072c0 <__copybits>:
 10072c0:	297fffc4 	addi	r5,r5,-1
 10072c4:	280fd17a 	srai	r7,r5,5
 10072c8:	30c00417 	ldw	r3,16(r6)
 10072cc:	30800504 	addi	r2,r6,20
 10072d0:	39c00044 	addi	r7,r7,1
 10072d4:	18c7883a 	add	r3,r3,r3
 10072d8:	39cf883a 	add	r7,r7,r7
 10072dc:	18c7883a 	add	r3,r3,r3
 10072e0:	39cf883a 	add	r7,r7,r7
 10072e4:	10c7883a 	add	r3,r2,r3
 10072e8:	21cf883a 	add	r7,r4,r7
 10072ec:	10c00d2e 	bgeu	r2,r3,1007324 <__copybits+0x64>
 10072f0:	200b883a 	mov	r5,r4
 10072f4:	12000017 	ldw	r8,0(r2)
 10072f8:	29400104 	addi	r5,r5,4
 10072fc:	10800104 	addi	r2,r2,4
 1007300:	2a3fff15 	stw	r8,-4(r5)
 1007304:	10fffb36 	bltu	r2,r3,10072f4 <__alt_mem_TCDM+0xff0062f4>
 1007308:	1985c83a 	sub	r2,r3,r6
 100730c:	10bffac4 	addi	r2,r2,-21
 1007310:	1004d0ba 	srli	r2,r2,2
 1007314:	10800044 	addi	r2,r2,1
 1007318:	1085883a 	add	r2,r2,r2
 100731c:	1085883a 	add	r2,r2,r2
 1007320:	2089883a 	add	r4,r4,r2
 1007324:	21c0032e 	bgeu	r4,r7,1007334 <__copybits+0x74>
 1007328:	20000015 	stw	zero,0(r4)
 100732c:	21000104 	addi	r4,r4,4
 1007330:	21fffd36 	bltu	r4,r7,1007328 <__alt_mem_TCDM+0xff006328>
 1007334:	f800283a 	ret

01007338 <__any_on>:
 1007338:	20c00417 	ldw	r3,16(r4)
 100733c:	2805d17a 	srai	r2,r5,5
 1007340:	21000504 	addi	r4,r4,20
 1007344:	18800d0e 	bge	r3,r2,100737c <__any_on+0x44>
 1007348:	18c7883a 	add	r3,r3,r3
 100734c:	18c7883a 	add	r3,r3,r3
 1007350:	20c7883a 	add	r3,r4,r3
 1007354:	20c0192e 	bgeu	r4,r3,10073bc <__any_on+0x84>
 1007358:	18bfff17 	ldw	r2,-4(r3)
 100735c:	18ffff04 	addi	r3,r3,-4
 1007360:	1000041e 	bne	r2,zero,1007374 <__any_on+0x3c>
 1007364:	20c0142e 	bgeu	r4,r3,10073b8 <__any_on+0x80>
 1007368:	18ffff04 	addi	r3,r3,-4
 100736c:	19400017 	ldw	r5,0(r3)
 1007370:	283ffc26 	beq	r5,zero,1007364 <__alt_mem_TCDM+0xff006364>
 1007374:	00800044 	movi	r2,1
 1007378:	f800283a 	ret
 100737c:	10c00a0e 	bge	r2,r3,10073a8 <__any_on+0x70>
 1007380:	1085883a 	add	r2,r2,r2
 1007384:	1085883a 	add	r2,r2,r2
 1007388:	294007cc 	andi	r5,r5,31
 100738c:	2087883a 	add	r3,r4,r2
 1007390:	283ff026 	beq	r5,zero,1007354 <__alt_mem_TCDM+0xff006354>
 1007394:	19800017 	ldw	r6,0(r3)
 1007398:	3144d83a 	srl	r2,r6,r5
 100739c:	114a983a 	sll	r5,r2,r5
 10073a0:	317ff41e 	bne	r6,r5,1007374 <__alt_mem_TCDM+0xff006374>
 10073a4:	003feb06 	br	1007354 <__alt_mem_TCDM+0xff006354>
 10073a8:	1085883a 	add	r2,r2,r2
 10073ac:	1085883a 	add	r2,r2,r2
 10073b0:	2087883a 	add	r3,r4,r2
 10073b4:	003fe706 	br	1007354 <__alt_mem_TCDM+0xff006354>
 10073b8:	f800283a 	ret
 10073bc:	0005883a 	mov	r2,zero
 10073c0:	f800283a 	ret

010073c4 <_realloc_r>:
 10073c4:	defff604 	addi	sp,sp,-40
 10073c8:	dc800215 	stw	r18,8(sp)
 10073cc:	dfc00915 	stw	ra,36(sp)
 10073d0:	df000815 	stw	fp,32(sp)
 10073d4:	ddc00715 	stw	r23,28(sp)
 10073d8:	dd800615 	stw	r22,24(sp)
 10073dc:	dd400515 	stw	r21,20(sp)
 10073e0:	dd000415 	stw	r20,16(sp)
 10073e4:	dcc00315 	stw	r19,12(sp)
 10073e8:	dc400115 	stw	r17,4(sp)
 10073ec:	dc000015 	stw	r16,0(sp)
 10073f0:	3025883a 	mov	r18,r6
 10073f4:	2800b726 	beq	r5,zero,10076d4 <_realloc_r+0x310>
 10073f8:	282b883a 	mov	r21,r5
 10073fc:	2029883a 	mov	r20,r4
 1007400:	100d54c0 	call	100d54c <__malloc_lock>
 1007404:	a8bfff17 	ldw	r2,-4(r21)
 1007408:	043fff04 	movi	r16,-4
 100740c:	90c002c4 	addi	r3,r18,11
 1007410:	01000584 	movi	r4,22
 1007414:	acfffe04 	addi	r19,r21,-8
 1007418:	1420703a 	and	r16,r2,r16
 100741c:	20c0332e 	bgeu	r4,r3,10074ec <_realloc_r+0x128>
 1007420:	047ffe04 	movi	r17,-8
 1007424:	1c62703a 	and	r17,r3,r17
 1007428:	8807883a 	mov	r3,r17
 100742c:	88005816 	blt	r17,zero,1007590 <_realloc_r+0x1cc>
 1007430:	8c805736 	bltu	r17,r18,1007590 <_realloc_r+0x1cc>
 1007434:	80c0300e 	bge	r16,r3,10074f8 <_realloc_r+0x134>
 1007438:	07004074 	movhi	fp,257
 100743c:	e7017904 	addi	fp,fp,1508
 1007440:	e1c00217 	ldw	r7,8(fp)
 1007444:	9c09883a 	add	r4,r19,r16
 1007448:	22000117 	ldw	r8,4(r4)
 100744c:	21c06326 	beq	r4,r7,10075dc <_realloc_r+0x218>
 1007450:	017fff84 	movi	r5,-2
 1007454:	414a703a 	and	r5,r8,r5
 1007458:	214b883a 	add	r5,r4,r5
 100745c:	29800117 	ldw	r6,4(r5)
 1007460:	3180004c 	andi	r6,r6,1
 1007464:	30003f26 	beq	r6,zero,1007564 <_realloc_r+0x1a0>
 1007468:	1080004c 	andi	r2,r2,1
 100746c:	10008326 	beq	r2,zero,100767c <_realloc_r+0x2b8>
 1007470:	900b883a 	mov	r5,r18
 1007474:	a009883a 	mov	r4,r20
 1007478:	100570c0 	call	100570c <_malloc_r>
 100747c:	1025883a 	mov	r18,r2
 1007480:	10011e26 	beq	r2,zero,10078fc <_realloc_r+0x538>
 1007484:	a93fff17 	ldw	r4,-4(r21)
 1007488:	10fffe04 	addi	r3,r2,-8
 100748c:	00bfff84 	movi	r2,-2
 1007490:	2084703a 	and	r2,r4,r2
 1007494:	9885883a 	add	r2,r19,r2
 1007498:	1880ee26 	beq	r3,r2,1007854 <_realloc_r+0x490>
 100749c:	81bfff04 	addi	r6,r16,-4
 10074a0:	00800904 	movi	r2,36
 10074a4:	1180b836 	bltu	r2,r6,1007788 <_realloc_r+0x3c4>
 10074a8:	00c004c4 	movi	r3,19
 10074ac:	19809636 	bltu	r3,r6,1007708 <_realloc_r+0x344>
 10074b0:	9005883a 	mov	r2,r18
 10074b4:	a807883a 	mov	r3,r21
 10074b8:	19000017 	ldw	r4,0(r3)
 10074bc:	11000015 	stw	r4,0(r2)
 10074c0:	19000117 	ldw	r4,4(r3)
 10074c4:	11000115 	stw	r4,4(r2)
 10074c8:	18c00217 	ldw	r3,8(r3)
 10074cc:	10c00215 	stw	r3,8(r2)
 10074d0:	a80b883a 	mov	r5,r21
 10074d4:	a009883a 	mov	r4,r20
 10074d8:	1004b200 	call	1004b20 <_free_r>
 10074dc:	a009883a 	mov	r4,r20
 10074e0:	100d5700 	call	100d570 <__malloc_unlock>
 10074e4:	9005883a 	mov	r2,r18
 10074e8:	00001206 	br	1007534 <_realloc_r+0x170>
 10074ec:	00c00404 	movi	r3,16
 10074f0:	1823883a 	mov	r17,r3
 10074f4:	003fce06 	br	1007430 <__alt_mem_TCDM+0xff006430>
 10074f8:	a825883a 	mov	r18,r21
 10074fc:	8445c83a 	sub	r2,r16,r17
 1007500:	00c003c4 	movi	r3,15
 1007504:	18802636 	bltu	r3,r2,10075a0 <_realloc_r+0x1dc>
 1007508:	99800117 	ldw	r6,4(r19)
 100750c:	9c07883a 	add	r3,r19,r16
 1007510:	3180004c 	andi	r6,r6,1
 1007514:	3420b03a 	or	r16,r6,r16
 1007518:	9c000115 	stw	r16,4(r19)
 100751c:	18800117 	ldw	r2,4(r3)
 1007520:	10800054 	ori	r2,r2,1
 1007524:	18800115 	stw	r2,4(r3)
 1007528:	a009883a 	mov	r4,r20
 100752c:	100d5700 	call	100d570 <__malloc_unlock>
 1007530:	9005883a 	mov	r2,r18
 1007534:	dfc00917 	ldw	ra,36(sp)
 1007538:	df000817 	ldw	fp,32(sp)
 100753c:	ddc00717 	ldw	r23,28(sp)
 1007540:	dd800617 	ldw	r22,24(sp)
 1007544:	dd400517 	ldw	r21,20(sp)
 1007548:	dd000417 	ldw	r20,16(sp)
 100754c:	dcc00317 	ldw	r19,12(sp)
 1007550:	dc800217 	ldw	r18,8(sp)
 1007554:	dc400117 	ldw	r17,4(sp)
 1007558:	dc000017 	ldw	r16,0(sp)
 100755c:	dec00a04 	addi	sp,sp,40
 1007560:	f800283a 	ret
 1007564:	017fff04 	movi	r5,-4
 1007568:	414a703a 	and	r5,r8,r5
 100756c:	814d883a 	add	r6,r16,r5
 1007570:	30c01f16 	blt	r6,r3,10075f0 <_realloc_r+0x22c>
 1007574:	20800317 	ldw	r2,12(r4)
 1007578:	20c00217 	ldw	r3,8(r4)
 100757c:	a825883a 	mov	r18,r21
 1007580:	3021883a 	mov	r16,r6
 1007584:	18800315 	stw	r2,12(r3)
 1007588:	10c00215 	stw	r3,8(r2)
 100758c:	003fdb06 	br	10074fc <__alt_mem_TCDM+0xff0064fc>
 1007590:	00800304 	movi	r2,12
 1007594:	a0800015 	stw	r2,0(r20)
 1007598:	0005883a 	mov	r2,zero
 100759c:	003fe506 	br	1007534 <__alt_mem_TCDM+0xff006534>
 10075a0:	98c00117 	ldw	r3,4(r19)
 10075a4:	9c4b883a 	add	r5,r19,r17
 10075a8:	11000054 	ori	r4,r2,1
 10075ac:	18c0004c 	andi	r3,r3,1
 10075b0:	1c62b03a 	or	r17,r3,r17
 10075b4:	9c400115 	stw	r17,4(r19)
 10075b8:	29000115 	stw	r4,4(r5)
 10075bc:	2885883a 	add	r2,r5,r2
 10075c0:	10c00117 	ldw	r3,4(r2)
 10075c4:	29400204 	addi	r5,r5,8
 10075c8:	a009883a 	mov	r4,r20
 10075cc:	18c00054 	ori	r3,r3,1
 10075d0:	10c00115 	stw	r3,4(r2)
 10075d4:	1004b200 	call	1004b20 <_free_r>
 10075d8:	003fd306 	br	1007528 <__alt_mem_TCDM+0xff006528>
 10075dc:	017fff04 	movi	r5,-4
 10075e0:	414a703a 	and	r5,r8,r5
 10075e4:	89800404 	addi	r6,r17,16
 10075e8:	8151883a 	add	r8,r16,r5
 10075ec:	4180590e 	bge	r8,r6,1007754 <_realloc_r+0x390>
 10075f0:	1080004c 	andi	r2,r2,1
 10075f4:	103f9e1e 	bne	r2,zero,1007470 <__alt_mem_TCDM+0xff006470>
 10075f8:	adbffe17 	ldw	r22,-8(r21)
 10075fc:	00bfff04 	movi	r2,-4
 1007600:	9dadc83a 	sub	r22,r19,r22
 1007604:	b1800117 	ldw	r6,4(r22)
 1007608:	3084703a 	and	r2,r6,r2
 100760c:	20002026 	beq	r4,zero,1007690 <_realloc_r+0x2cc>
 1007610:	80af883a 	add	r23,r16,r2
 1007614:	b96f883a 	add	r23,r23,r5
 1007618:	21c05f26 	beq	r4,r7,1007798 <_realloc_r+0x3d4>
 100761c:	b8c01c16 	blt	r23,r3,1007690 <_realloc_r+0x2cc>
 1007620:	20800317 	ldw	r2,12(r4)
 1007624:	20c00217 	ldw	r3,8(r4)
 1007628:	81bfff04 	addi	r6,r16,-4
 100762c:	01000904 	movi	r4,36
 1007630:	18800315 	stw	r2,12(r3)
 1007634:	10c00215 	stw	r3,8(r2)
 1007638:	b0c00217 	ldw	r3,8(r22)
 100763c:	b0800317 	ldw	r2,12(r22)
 1007640:	b4800204 	addi	r18,r22,8
 1007644:	18800315 	stw	r2,12(r3)
 1007648:	10c00215 	stw	r3,8(r2)
 100764c:	21801b36 	bltu	r4,r6,10076bc <_realloc_r+0x2f8>
 1007650:	008004c4 	movi	r2,19
 1007654:	1180352e 	bgeu	r2,r6,100772c <_realloc_r+0x368>
 1007658:	a8800017 	ldw	r2,0(r21)
 100765c:	b0800215 	stw	r2,8(r22)
 1007660:	a8800117 	ldw	r2,4(r21)
 1007664:	b0800315 	stw	r2,12(r22)
 1007668:	008006c4 	movi	r2,27
 100766c:	11807f36 	bltu	r2,r6,100786c <_realloc_r+0x4a8>
 1007670:	b0800404 	addi	r2,r22,16
 1007674:	ad400204 	addi	r21,r21,8
 1007678:	00002d06 	br	1007730 <_realloc_r+0x36c>
 100767c:	adbffe17 	ldw	r22,-8(r21)
 1007680:	00bfff04 	movi	r2,-4
 1007684:	9dadc83a 	sub	r22,r19,r22
 1007688:	b1000117 	ldw	r4,4(r22)
 100768c:	2084703a 	and	r2,r4,r2
 1007690:	b03f7726 	beq	r22,zero,1007470 <__alt_mem_TCDM+0xff006470>
 1007694:	80af883a 	add	r23,r16,r2
 1007698:	b8ff7516 	blt	r23,r3,1007470 <__alt_mem_TCDM+0xff006470>
 100769c:	b0800317 	ldw	r2,12(r22)
 10076a0:	b0c00217 	ldw	r3,8(r22)
 10076a4:	81bfff04 	addi	r6,r16,-4
 10076a8:	01000904 	movi	r4,36
 10076ac:	18800315 	stw	r2,12(r3)
 10076b0:	10c00215 	stw	r3,8(r2)
 10076b4:	b4800204 	addi	r18,r22,8
 10076b8:	21bfe52e 	bgeu	r4,r6,1007650 <__alt_mem_TCDM+0xff006650>
 10076bc:	a80b883a 	mov	r5,r21
 10076c0:	9009883a 	mov	r4,r18
 10076c4:	10061440 	call	1006144 <memmove>
 10076c8:	b821883a 	mov	r16,r23
 10076cc:	b027883a 	mov	r19,r22
 10076d0:	003f8a06 	br	10074fc <__alt_mem_TCDM+0xff0064fc>
 10076d4:	300b883a 	mov	r5,r6
 10076d8:	dfc00917 	ldw	ra,36(sp)
 10076dc:	df000817 	ldw	fp,32(sp)
 10076e0:	ddc00717 	ldw	r23,28(sp)
 10076e4:	dd800617 	ldw	r22,24(sp)
 10076e8:	dd400517 	ldw	r21,20(sp)
 10076ec:	dd000417 	ldw	r20,16(sp)
 10076f0:	dcc00317 	ldw	r19,12(sp)
 10076f4:	dc800217 	ldw	r18,8(sp)
 10076f8:	dc400117 	ldw	r17,4(sp)
 10076fc:	dc000017 	ldw	r16,0(sp)
 1007700:	dec00a04 	addi	sp,sp,40
 1007704:	100570c1 	jmpi	100570c <_malloc_r>
 1007708:	a8c00017 	ldw	r3,0(r21)
 100770c:	90c00015 	stw	r3,0(r18)
 1007710:	a8c00117 	ldw	r3,4(r21)
 1007714:	90c00115 	stw	r3,4(r18)
 1007718:	00c006c4 	movi	r3,27
 100771c:	19804536 	bltu	r3,r6,1007834 <_realloc_r+0x470>
 1007720:	90800204 	addi	r2,r18,8
 1007724:	a8c00204 	addi	r3,r21,8
 1007728:	003f6306 	br	10074b8 <__alt_mem_TCDM+0xff0064b8>
 100772c:	9005883a 	mov	r2,r18
 1007730:	a8c00017 	ldw	r3,0(r21)
 1007734:	b821883a 	mov	r16,r23
 1007738:	b027883a 	mov	r19,r22
 100773c:	10c00015 	stw	r3,0(r2)
 1007740:	a8c00117 	ldw	r3,4(r21)
 1007744:	10c00115 	stw	r3,4(r2)
 1007748:	a8c00217 	ldw	r3,8(r21)
 100774c:	10c00215 	stw	r3,8(r2)
 1007750:	003f6a06 	br	10074fc <__alt_mem_TCDM+0xff0064fc>
 1007754:	9c67883a 	add	r19,r19,r17
 1007758:	4445c83a 	sub	r2,r8,r17
 100775c:	e4c00215 	stw	r19,8(fp)
 1007760:	10800054 	ori	r2,r2,1
 1007764:	98800115 	stw	r2,4(r19)
 1007768:	a8bfff17 	ldw	r2,-4(r21)
 100776c:	a009883a 	mov	r4,r20
 1007770:	1080004c 	andi	r2,r2,1
 1007774:	1462b03a 	or	r17,r2,r17
 1007778:	ac7fff15 	stw	r17,-4(r21)
 100777c:	100d5700 	call	100d570 <__malloc_unlock>
 1007780:	a805883a 	mov	r2,r21
 1007784:	003f6b06 	br	1007534 <__alt_mem_TCDM+0xff006534>
 1007788:	a80b883a 	mov	r5,r21
 100778c:	9009883a 	mov	r4,r18
 1007790:	10061440 	call	1006144 <memmove>
 1007794:	003f4e06 	br	10074d0 <__alt_mem_TCDM+0xff0064d0>
 1007798:	89000404 	addi	r4,r17,16
 100779c:	b93fbc16 	blt	r23,r4,1007690 <__alt_mem_TCDM+0xff006690>
 10077a0:	b0800317 	ldw	r2,12(r22)
 10077a4:	b0c00217 	ldw	r3,8(r22)
 10077a8:	81bfff04 	addi	r6,r16,-4
 10077ac:	01000904 	movi	r4,36
 10077b0:	18800315 	stw	r2,12(r3)
 10077b4:	10c00215 	stw	r3,8(r2)
 10077b8:	b4800204 	addi	r18,r22,8
 10077bc:	21804336 	bltu	r4,r6,10078cc <_realloc_r+0x508>
 10077c0:	008004c4 	movi	r2,19
 10077c4:	11803f2e 	bgeu	r2,r6,10078c4 <_realloc_r+0x500>
 10077c8:	a8800017 	ldw	r2,0(r21)
 10077cc:	b0800215 	stw	r2,8(r22)
 10077d0:	a8800117 	ldw	r2,4(r21)
 10077d4:	b0800315 	stw	r2,12(r22)
 10077d8:	008006c4 	movi	r2,27
 10077dc:	11803f36 	bltu	r2,r6,10078dc <_realloc_r+0x518>
 10077e0:	b0800404 	addi	r2,r22,16
 10077e4:	ad400204 	addi	r21,r21,8
 10077e8:	a8c00017 	ldw	r3,0(r21)
 10077ec:	10c00015 	stw	r3,0(r2)
 10077f0:	a8c00117 	ldw	r3,4(r21)
 10077f4:	10c00115 	stw	r3,4(r2)
 10077f8:	a8c00217 	ldw	r3,8(r21)
 10077fc:	10c00215 	stw	r3,8(r2)
 1007800:	b447883a 	add	r3,r22,r17
 1007804:	bc45c83a 	sub	r2,r23,r17
 1007808:	e0c00215 	stw	r3,8(fp)
 100780c:	10800054 	ori	r2,r2,1
 1007810:	18800115 	stw	r2,4(r3)
 1007814:	b0800117 	ldw	r2,4(r22)
 1007818:	a009883a 	mov	r4,r20
 100781c:	1080004c 	andi	r2,r2,1
 1007820:	1462b03a 	or	r17,r2,r17
 1007824:	b4400115 	stw	r17,4(r22)
 1007828:	100d5700 	call	100d570 <__malloc_unlock>
 100782c:	9005883a 	mov	r2,r18
 1007830:	003f4006 	br	1007534 <__alt_mem_TCDM+0xff006534>
 1007834:	a8c00217 	ldw	r3,8(r21)
 1007838:	90c00215 	stw	r3,8(r18)
 100783c:	a8c00317 	ldw	r3,12(r21)
 1007840:	90c00315 	stw	r3,12(r18)
 1007844:	30801126 	beq	r6,r2,100788c <_realloc_r+0x4c8>
 1007848:	90800404 	addi	r2,r18,16
 100784c:	a8c00404 	addi	r3,r21,16
 1007850:	003f1906 	br	10074b8 <__alt_mem_TCDM+0xff0064b8>
 1007854:	90ffff17 	ldw	r3,-4(r18)
 1007858:	00bfff04 	movi	r2,-4
 100785c:	a825883a 	mov	r18,r21
 1007860:	1884703a 	and	r2,r3,r2
 1007864:	80a1883a 	add	r16,r16,r2
 1007868:	003f2406 	br	10074fc <__alt_mem_TCDM+0xff0064fc>
 100786c:	a8800217 	ldw	r2,8(r21)
 1007870:	b0800415 	stw	r2,16(r22)
 1007874:	a8800317 	ldw	r2,12(r21)
 1007878:	b0800515 	stw	r2,20(r22)
 100787c:	31000a26 	beq	r6,r4,10078a8 <_realloc_r+0x4e4>
 1007880:	b0800604 	addi	r2,r22,24
 1007884:	ad400404 	addi	r21,r21,16
 1007888:	003fa906 	br	1007730 <__alt_mem_TCDM+0xff006730>
 100788c:	a9000417 	ldw	r4,16(r21)
 1007890:	90800604 	addi	r2,r18,24
 1007894:	a8c00604 	addi	r3,r21,24
 1007898:	91000415 	stw	r4,16(r18)
 100789c:	a9000517 	ldw	r4,20(r21)
 10078a0:	91000515 	stw	r4,20(r18)
 10078a4:	003f0406 	br	10074b8 <__alt_mem_TCDM+0xff0064b8>
 10078a8:	a8c00417 	ldw	r3,16(r21)
 10078ac:	ad400604 	addi	r21,r21,24
 10078b0:	b0800804 	addi	r2,r22,32
 10078b4:	b0c00615 	stw	r3,24(r22)
 10078b8:	a8ffff17 	ldw	r3,-4(r21)
 10078bc:	b0c00715 	stw	r3,28(r22)
 10078c0:	003f9b06 	br	1007730 <__alt_mem_TCDM+0xff006730>
 10078c4:	9005883a 	mov	r2,r18
 10078c8:	003fc706 	br	10077e8 <__alt_mem_TCDM+0xff0067e8>
 10078cc:	a80b883a 	mov	r5,r21
 10078d0:	9009883a 	mov	r4,r18
 10078d4:	10061440 	call	1006144 <memmove>
 10078d8:	003fc906 	br	1007800 <__alt_mem_TCDM+0xff006800>
 10078dc:	a8800217 	ldw	r2,8(r21)
 10078e0:	b0800415 	stw	r2,16(r22)
 10078e4:	a8800317 	ldw	r2,12(r21)
 10078e8:	b0800515 	stw	r2,20(r22)
 10078ec:	31000726 	beq	r6,r4,100790c <_realloc_r+0x548>
 10078f0:	b0800604 	addi	r2,r22,24
 10078f4:	ad400404 	addi	r21,r21,16
 10078f8:	003fbb06 	br	10077e8 <__alt_mem_TCDM+0xff0067e8>
 10078fc:	a009883a 	mov	r4,r20
 1007900:	100d5700 	call	100d570 <__malloc_unlock>
 1007904:	0005883a 	mov	r2,zero
 1007908:	003f0a06 	br	1007534 <__alt_mem_TCDM+0xff006534>
 100790c:	a8c00417 	ldw	r3,16(r21)
 1007910:	ad400604 	addi	r21,r21,24
 1007914:	b0800804 	addi	r2,r22,32
 1007918:	b0c00615 	stw	r3,24(r22)
 100791c:	a8ffff17 	ldw	r3,-4(r21)
 1007920:	b0c00715 	stw	r3,28(r22)
 1007924:	003fb006 	br	10077e8 <__alt_mem_TCDM+0xff0067e8>

01007928 <__fpclassifyd>:
 1007928:	00a00034 	movhi	r2,32768
 100792c:	10bfffc4 	addi	r2,r2,-1
 1007930:	2884703a 	and	r2,r5,r2
 1007934:	10000726 	beq	r2,zero,1007954 <__fpclassifyd+0x2c>
 1007938:	00fffc34 	movhi	r3,65520
 100793c:	019ff834 	movhi	r6,32736
 1007940:	28c7883a 	add	r3,r5,r3
 1007944:	31bfffc4 	addi	r6,r6,-1
 1007948:	30c00536 	bltu	r6,r3,1007960 <__fpclassifyd+0x38>
 100794c:	00800104 	movi	r2,4
 1007950:	f800283a 	ret
 1007954:	2000021e 	bne	r4,zero,1007960 <__fpclassifyd+0x38>
 1007958:	00800084 	movi	r2,2
 100795c:	f800283a 	ret
 1007960:	00dffc34 	movhi	r3,32752
 1007964:	019ff834 	movhi	r6,32736
 1007968:	28cb883a 	add	r5,r5,r3
 100796c:	31bfffc4 	addi	r6,r6,-1
 1007970:	317ff62e 	bgeu	r6,r5,100794c <__alt_mem_TCDM+0xff00694c>
 1007974:	01400434 	movhi	r5,16
 1007978:	297fffc4 	addi	r5,r5,-1
 100797c:	28800236 	bltu	r5,r2,1007988 <__fpclassifyd+0x60>
 1007980:	008000c4 	movi	r2,3
 1007984:	f800283a 	ret
 1007988:	10c00226 	beq	r2,r3,1007994 <__fpclassifyd+0x6c>
 100798c:	0005883a 	mov	r2,zero
 1007990:	f800283a 	ret
 1007994:	2005003a 	cmpeq	r2,r4,zero
 1007998:	f800283a 	ret

0100799c <_sbrk_r>:
 100799c:	defffd04 	addi	sp,sp,-12
 10079a0:	dc000015 	stw	r16,0(sp)
 10079a4:	04004074 	movhi	r16,257
 10079a8:	dc400115 	stw	r17,4(sp)
 10079ac:	840dce04 	addi	r16,r16,14136
 10079b0:	2023883a 	mov	r17,r4
 10079b4:	2809883a 	mov	r4,r5
 10079b8:	dfc00215 	stw	ra,8(sp)
 10079bc:	80000015 	stw	zero,0(r16)
 10079c0:	100d7300 	call	100d730 <sbrk>
 10079c4:	00ffffc4 	movi	r3,-1
 10079c8:	10c00526 	beq	r2,r3,10079e0 <_sbrk_r+0x44>
 10079cc:	dfc00217 	ldw	ra,8(sp)
 10079d0:	dc400117 	ldw	r17,4(sp)
 10079d4:	dc000017 	ldw	r16,0(sp)
 10079d8:	dec00304 	addi	sp,sp,12
 10079dc:	f800283a 	ret
 10079e0:	80c00017 	ldw	r3,0(r16)
 10079e4:	183ff926 	beq	r3,zero,10079cc <__alt_mem_TCDM+0xff0069cc>
 10079e8:	88c00015 	stw	r3,0(r17)
 10079ec:	003ff706 	br	10079cc <__alt_mem_TCDM+0xff0069cc>

010079f0 <__sread>:
 10079f0:	defffe04 	addi	sp,sp,-8
 10079f4:	dc000015 	stw	r16,0(sp)
 10079f8:	2821883a 	mov	r16,r5
 10079fc:	2940038f 	ldh	r5,14(r5)
 1007a00:	dfc00115 	stw	ra,4(sp)
 1007a04:	10097e40 	call	10097e4 <_read_r>
 1007a08:	10000716 	blt	r2,zero,1007a28 <__sread+0x38>
 1007a0c:	80c01417 	ldw	r3,80(r16)
 1007a10:	1887883a 	add	r3,r3,r2
 1007a14:	80c01415 	stw	r3,80(r16)
 1007a18:	dfc00117 	ldw	ra,4(sp)
 1007a1c:	dc000017 	ldw	r16,0(sp)
 1007a20:	dec00204 	addi	sp,sp,8
 1007a24:	f800283a 	ret
 1007a28:	80c0030b 	ldhu	r3,12(r16)
 1007a2c:	18fbffcc 	andi	r3,r3,61439
 1007a30:	80c0030d 	sth	r3,12(r16)
 1007a34:	dfc00117 	ldw	ra,4(sp)
 1007a38:	dc000017 	ldw	r16,0(sp)
 1007a3c:	dec00204 	addi	sp,sp,8
 1007a40:	f800283a 	ret

01007a44 <__seofread>:
 1007a44:	0005883a 	mov	r2,zero
 1007a48:	f800283a 	ret

01007a4c <__swrite>:
 1007a4c:	2880030b 	ldhu	r2,12(r5)
 1007a50:	defffb04 	addi	sp,sp,-20
 1007a54:	dcc00315 	stw	r19,12(sp)
 1007a58:	dc800215 	stw	r18,8(sp)
 1007a5c:	dc400115 	stw	r17,4(sp)
 1007a60:	dc000015 	stw	r16,0(sp)
 1007a64:	dfc00415 	stw	ra,16(sp)
 1007a68:	10c0400c 	andi	r3,r2,256
 1007a6c:	2821883a 	mov	r16,r5
 1007a70:	2023883a 	mov	r17,r4
 1007a74:	3025883a 	mov	r18,r6
 1007a78:	3827883a 	mov	r19,r7
 1007a7c:	18000526 	beq	r3,zero,1007a94 <__swrite+0x48>
 1007a80:	2940038f 	ldh	r5,14(r5)
 1007a84:	01c00084 	movi	r7,2
 1007a88:	000d883a 	mov	r6,zero
 1007a8c:	10097840 	call	1009784 <_lseek_r>
 1007a90:	8080030b 	ldhu	r2,12(r16)
 1007a94:	8140038f 	ldh	r5,14(r16)
 1007a98:	10bbffcc 	andi	r2,r2,61439
 1007a9c:	980f883a 	mov	r7,r19
 1007aa0:	900d883a 	mov	r6,r18
 1007aa4:	8809883a 	mov	r4,r17
 1007aa8:	8080030d 	sth	r2,12(r16)
 1007aac:	dfc00417 	ldw	ra,16(sp)
 1007ab0:	dcc00317 	ldw	r19,12(sp)
 1007ab4:	dc800217 	ldw	r18,8(sp)
 1007ab8:	dc400117 	ldw	r17,4(sp)
 1007abc:	dc000017 	ldw	r16,0(sp)
 1007ac0:	dec00504 	addi	sp,sp,20
 1007ac4:	10092501 	jmpi	1009250 <_write_r>

01007ac8 <__sseek>:
 1007ac8:	defffe04 	addi	sp,sp,-8
 1007acc:	dc000015 	stw	r16,0(sp)
 1007ad0:	2821883a 	mov	r16,r5
 1007ad4:	2940038f 	ldh	r5,14(r5)
 1007ad8:	dfc00115 	stw	ra,4(sp)
 1007adc:	10097840 	call	1009784 <_lseek_r>
 1007ae0:	00ffffc4 	movi	r3,-1
 1007ae4:	10c00826 	beq	r2,r3,1007b08 <__sseek+0x40>
 1007ae8:	80c0030b 	ldhu	r3,12(r16)
 1007aec:	80801415 	stw	r2,80(r16)
 1007af0:	18c40014 	ori	r3,r3,4096
 1007af4:	80c0030d 	sth	r3,12(r16)
 1007af8:	dfc00117 	ldw	ra,4(sp)
 1007afc:	dc000017 	ldw	r16,0(sp)
 1007b00:	dec00204 	addi	sp,sp,8
 1007b04:	f800283a 	ret
 1007b08:	80c0030b 	ldhu	r3,12(r16)
 1007b0c:	18fbffcc 	andi	r3,r3,61439
 1007b10:	80c0030d 	sth	r3,12(r16)
 1007b14:	dfc00117 	ldw	ra,4(sp)
 1007b18:	dc000017 	ldw	r16,0(sp)
 1007b1c:	dec00204 	addi	sp,sp,8
 1007b20:	f800283a 	ret

01007b24 <__sclose>:
 1007b24:	2940038f 	ldh	r5,14(r5)
 1007b28:	10092b01 	jmpi	10092b0 <_close_r>

01007b2c <strcmp>:
 1007b2c:	2144b03a 	or	r2,r4,r5
 1007b30:	108000cc 	andi	r2,r2,3
 1007b34:	1000171e 	bne	r2,zero,1007b94 <strcmp+0x68>
 1007b38:	20800017 	ldw	r2,0(r4)
 1007b3c:	28c00017 	ldw	r3,0(r5)
 1007b40:	10c0141e 	bne	r2,r3,1007b94 <strcmp+0x68>
 1007b44:	027fbff4 	movhi	r9,65279
 1007b48:	4a7fbfc4 	addi	r9,r9,-257
 1007b4c:	0086303a 	nor	r3,zero,r2
 1007b50:	02202074 	movhi	r8,32897
 1007b54:	1245883a 	add	r2,r2,r9
 1007b58:	42202004 	addi	r8,r8,-32640
 1007b5c:	10c4703a 	and	r2,r2,r3
 1007b60:	1204703a 	and	r2,r2,r8
 1007b64:	10000226 	beq	r2,zero,1007b70 <strcmp+0x44>
 1007b68:	00002306 	br	1007bf8 <strcmp+0xcc>
 1007b6c:	1000221e 	bne	r2,zero,1007bf8 <strcmp+0xcc>
 1007b70:	21000104 	addi	r4,r4,4
 1007b74:	20c00017 	ldw	r3,0(r4)
 1007b78:	29400104 	addi	r5,r5,4
 1007b7c:	29800017 	ldw	r6,0(r5)
 1007b80:	1a4f883a 	add	r7,r3,r9
 1007b84:	00c4303a 	nor	r2,zero,r3
 1007b88:	3884703a 	and	r2,r7,r2
 1007b8c:	1204703a 	and	r2,r2,r8
 1007b90:	19bff626 	beq	r3,r6,1007b6c <__alt_mem_TCDM+0xff006b6c>
 1007b94:	20800003 	ldbu	r2,0(r4)
 1007b98:	10c03fcc 	andi	r3,r2,255
 1007b9c:	18c0201c 	xori	r3,r3,128
 1007ba0:	18ffe004 	addi	r3,r3,-128
 1007ba4:	18000c26 	beq	r3,zero,1007bd8 <strcmp+0xac>
 1007ba8:	29800007 	ldb	r6,0(r5)
 1007bac:	19800326 	beq	r3,r6,1007bbc <strcmp+0x90>
 1007bb0:	00001306 	br	1007c00 <strcmp+0xd4>
 1007bb4:	29800007 	ldb	r6,0(r5)
 1007bb8:	11800b1e 	bne	r2,r6,1007be8 <strcmp+0xbc>
 1007bbc:	21000044 	addi	r4,r4,1
 1007bc0:	20c00003 	ldbu	r3,0(r4)
 1007bc4:	29400044 	addi	r5,r5,1
 1007bc8:	18803fcc 	andi	r2,r3,255
 1007bcc:	1080201c 	xori	r2,r2,128
 1007bd0:	10bfe004 	addi	r2,r2,-128
 1007bd4:	103ff71e 	bne	r2,zero,1007bb4 <__alt_mem_TCDM+0xff006bb4>
 1007bd8:	0007883a 	mov	r3,zero
 1007bdc:	28800003 	ldbu	r2,0(r5)
 1007be0:	1885c83a 	sub	r2,r3,r2
 1007be4:	f800283a 	ret
 1007be8:	28800003 	ldbu	r2,0(r5)
 1007bec:	18c03fcc 	andi	r3,r3,255
 1007bf0:	1885c83a 	sub	r2,r3,r2
 1007bf4:	f800283a 	ret
 1007bf8:	0005883a 	mov	r2,zero
 1007bfc:	f800283a 	ret
 1007c00:	10c03fcc 	andi	r3,r2,255
 1007c04:	003ff506 	br	1007bdc <__alt_mem_TCDM+0xff006bdc>

01007c08 <__sprint_r.part.0>:
 1007c08:	28801917 	ldw	r2,100(r5)
 1007c0c:	defff604 	addi	sp,sp,-40
 1007c10:	dd400515 	stw	r21,20(sp)
 1007c14:	dfc00915 	stw	ra,36(sp)
 1007c18:	df000815 	stw	fp,32(sp)
 1007c1c:	ddc00715 	stw	r23,28(sp)
 1007c20:	dd800615 	stw	r22,24(sp)
 1007c24:	dd000415 	stw	r20,16(sp)
 1007c28:	dcc00315 	stw	r19,12(sp)
 1007c2c:	dc800215 	stw	r18,8(sp)
 1007c30:	dc400115 	stw	r17,4(sp)
 1007c34:	dc000015 	stw	r16,0(sp)
 1007c38:	1088000c 	andi	r2,r2,8192
 1007c3c:	302b883a 	mov	r21,r6
 1007c40:	10002e26 	beq	r2,zero,1007cfc <__sprint_r.part.0+0xf4>
 1007c44:	30800217 	ldw	r2,8(r6)
 1007c48:	35800017 	ldw	r22,0(r6)
 1007c4c:	10002926 	beq	r2,zero,1007cf4 <__sprint_r.part.0+0xec>
 1007c50:	2827883a 	mov	r19,r5
 1007c54:	2029883a 	mov	r20,r4
 1007c58:	b5c00104 	addi	r23,r22,4
 1007c5c:	04bfffc4 	movi	r18,-1
 1007c60:	bc400017 	ldw	r17,0(r23)
 1007c64:	b4000017 	ldw	r16,0(r22)
 1007c68:	0039883a 	mov	fp,zero
 1007c6c:	8822d0ba 	srli	r17,r17,2
 1007c70:	8800031e 	bne	r17,zero,1007c80 <__sprint_r.part.0+0x78>
 1007c74:	00001806 	br	1007cd8 <__sprint_r.part.0+0xd0>
 1007c78:	84000104 	addi	r16,r16,4
 1007c7c:	8f001526 	beq	r17,fp,1007cd4 <__sprint_r.part.0+0xcc>
 1007c80:	81400017 	ldw	r5,0(r16)
 1007c84:	980d883a 	mov	r6,r19
 1007c88:	a009883a 	mov	r4,r20
 1007c8c:	10096300 	call	1009630 <_fputwc_r>
 1007c90:	e7000044 	addi	fp,fp,1
 1007c94:	14bff81e 	bne	r2,r18,1007c78 <__alt_mem_TCDM+0xff006c78>
 1007c98:	9005883a 	mov	r2,r18
 1007c9c:	a8000215 	stw	zero,8(r21)
 1007ca0:	a8000115 	stw	zero,4(r21)
 1007ca4:	dfc00917 	ldw	ra,36(sp)
 1007ca8:	df000817 	ldw	fp,32(sp)
 1007cac:	ddc00717 	ldw	r23,28(sp)
 1007cb0:	dd800617 	ldw	r22,24(sp)
 1007cb4:	dd400517 	ldw	r21,20(sp)
 1007cb8:	dd000417 	ldw	r20,16(sp)
 1007cbc:	dcc00317 	ldw	r19,12(sp)
 1007cc0:	dc800217 	ldw	r18,8(sp)
 1007cc4:	dc400117 	ldw	r17,4(sp)
 1007cc8:	dc000017 	ldw	r16,0(sp)
 1007ccc:	dec00a04 	addi	sp,sp,40
 1007cd0:	f800283a 	ret
 1007cd4:	a8800217 	ldw	r2,8(r21)
 1007cd8:	8c63883a 	add	r17,r17,r17
 1007cdc:	8c63883a 	add	r17,r17,r17
 1007ce0:	1445c83a 	sub	r2,r2,r17
 1007ce4:	a8800215 	stw	r2,8(r21)
 1007ce8:	b5800204 	addi	r22,r22,8
 1007cec:	bdc00204 	addi	r23,r23,8
 1007cf0:	103fdb1e 	bne	r2,zero,1007c60 <__alt_mem_TCDM+0xff006c60>
 1007cf4:	0005883a 	mov	r2,zero
 1007cf8:	003fe806 	br	1007c9c <__alt_mem_TCDM+0xff006c9c>
 1007cfc:	1004e300 	call	1004e30 <__sfvwrite_r>
 1007d00:	003fe606 	br	1007c9c <__alt_mem_TCDM+0xff006c9c>

01007d04 <__sprint_r>:
 1007d04:	30c00217 	ldw	r3,8(r6)
 1007d08:	18000126 	beq	r3,zero,1007d10 <__sprint_r+0xc>
 1007d0c:	1007c081 	jmpi	1007c08 <__sprint_r.part.0>
 1007d10:	30000115 	stw	zero,4(r6)
 1007d14:	0005883a 	mov	r2,zero
 1007d18:	f800283a 	ret

01007d1c <___vfiprintf_internal_r>:
 1007d1c:	deffc904 	addi	sp,sp,-220
 1007d20:	df003515 	stw	fp,212(sp)
 1007d24:	dd003115 	stw	r20,196(sp)
 1007d28:	dfc03615 	stw	ra,216(sp)
 1007d2c:	ddc03415 	stw	r23,208(sp)
 1007d30:	dd803315 	stw	r22,204(sp)
 1007d34:	dd403215 	stw	r21,200(sp)
 1007d38:	dcc03015 	stw	r19,192(sp)
 1007d3c:	dc802f15 	stw	r18,188(sp)
 1007d40:	dc402e15 	stw	r17,184(sp)
 1007d44:	dc002d15 	stw	r16,180(sp)
 1007d48:	d9002015 	stw	r4,128(sp)
 1007d4c:	d9c02215 	stw	r7,136(sp)
 1007d50:	2829883a 	mov	r20,r5
 1007d54:	3039883a 	mov	fp,r6
 1007d58:	20000226 	beq	r4,zero,1007d64 <___vfiprintf_internal_r+0x48>
 1007d5c:	20800e17 	ldw	r2,56(r4)
 1007d60:	1000cf26 	beq	r2,zero,10080a0 <___vfiprintf_internal_r+0x384>
 1007d64:	a080030b 	ldhu	r2,12(r20)
 1007d68:	10c8000c 	andi	r3,r2,8192
 1007d6c:	1800061e 	bne	r3,zero,1007d88 <___vfiprintf_internal_r+0x6c>
 1007d70:	a1001917 	ldw	r4,100(r20)
 1007d74:	00f7ffc4 	movi	r3,-8193
 1007d78:	10880014 	ori	r2,r2,8192
 1007d7c:	20c6703a 	and	r3,r4,r3
 1007d80:	a080030d 	sth	r2,12(r20)
 1007d84:	a0c01915 	stw	r3,100(r20)
 1007d88:	10c0020c 	andi	r3,r2,8
 1007d8c:	1800a926 	beq	r3,zero,1008034 <___vfiprintf_internal_r+0x318>
 1007d90:	a0c00417 	ldw	r3,16(r20)
 1007d94:	1800a726 	beq	r3,zero,1008034 <___vfiprintf_internal_r+0x318>
 1007d98:	1080068c 	andi	r2,r2,26
 1007d9c:	00c00284 	movi	r3,10
 1007da0:	10c0ac26 	beq	r2,r3,1008054 <___vfiprintf_internal_r+0x338>
 1007da4:	da801a04 	addi	r10,sp,104
 1007da8:	da801e15 	stw	r10,120(sp)
 1007dac:	d8801e17 	ldw	r2,120(sp)
 1007db0:	da8019c4 	addi	r10,sp,103
 1007db4:	05804074 	movhi	r22,257
 1007db8:	05c04074 	movhi	r23,257
 1007dbc:	da801f15 	stw	r10,124(sp)
 1007dc0:	1295c83a 	sub	r10,r2,r10
 1007dc4:	b5bfc304 	addi	r22,r22,-244
 1007dc8:	bdffbf04 	addi	r23,r23,-260
 1007dcc:	dec01a15 	stw	sp,104(sp)
 1007dd0:	d8001c15 	stw	zero,112(sp)
 1007dd4:	d8001b15 	stw	zero,108(sp)
 1007dd8:	d8002615 	stw	zero,152(sp)
 1007ddc:	d8002315 	stw	zero,140(sp)
 1007de0:	da802715 	stw	r10,156(sp)
 1007de4:	d811883a 	mov	r8,sp
 1007de8:	dd002115 	stw	r20,132(sp)
 1007dec:	e021883a 	mov	r16,fp
 1007df0:	80800007 	ldb	r2,0(r16)
 1007df4:	1003ea26 	beq	r2,zero,1008da0 <___vfiprintf_internal_r+0x1084>
 1007df8:	00c00944 	movi	r3,37
 1007dfc:	8025883a 	mov	r18,r16
 1007e00:	10c0021e 	bne	r2,r3,1007e0c <___vfiprintf_internal_r+0xf0>
 1007e04:	00001606 	br	1007e60 <___vfiprintf_internal_r+0x144>
 1007e08:	10c00326 	beq	r2,r3,1007e18 <___vfiprintf_internal_r+0xfc>
 1007e0c:	94800044 	addi	r18,r18,1
 1007e10:	90800007 	ldb	r2,0(r18)
 1007e14:	103ffc1e 	bne	r2,zero,1007e08 <__alt_mem_TCDM+0xff006e08>
 1007e18:	9423c83a 	sub	r17,r18,r16
 1007e1c:	88001026 	beq	r17,zero,1007e60 <___vfiprintf_internal_r+0x144>
 1007e20:	d8c01c17 	ldw	r3,112(sp)
 1007e24:	d8801b17 	ldw	r2,108(sp)
 1007e28:	44000015 	stw	r16,0(r8)
 1007e2c:	88c7883a 	add	r3,r17,r3
 1007e30:	10800044 	addi	r2,r2,1
 1007e34:	44400115 	stw	r17,4(r8)
 1007e38:	d8c01c15 	stw	r3,112(sp)
 1007e3c:	d8801b15 	stw	r2,108(sp)
 1007e40:	010001c4 	movi	r4,7
 1007e44:	2080760e 	bge	r4,r2,1008020 <___vfiprintf_internal_r+0x304>
 1007e48:	1803821e 	bne	r3,zero,1008c54 <___vfiprintf_internal_r+0xf38>
 1007e4c:	da802317 	ldw	r10,140(sp)
 1007e50:	d8001b15 	stw	zero,108(sp)
 1007e54:	d811883a 	mov	r8,sp
 1007e58:	5455883a 	add	r10,r10,r17
 1007e5c:	da802315 	stw	r10,140(sp)
 1007e60:	90800007 	ldb	r2,0(r18)
 1007e64:	10044626 	beq	r2,zero,1008f80 <___vfiprintf_internal_r+0x1264>
 1007e68:	90c00047 	ldb	r3,1(r18)
 1007e6c:	94000044 	addi	r16,r18,1
 1007e70:	d8001d85 	stb	zero,118(sp)
 1007e74:	0009883a 	mov	r4,zero
 1007e78:	000f883a 	mov	r7,zero
 1007e7c:	027fffc4 	movi	r9,-1
 1007e80:	0023883a 	mov	r17,zero
 1007e84:	0029883a 	mov	r20,zero
 1007e88:	01401604 	movi	r5,88
 1007e8c:	01800244 	movi	r6,9
 1007e90:	03400a84 	movi	r13,42
 1007e94:	03001b04 	movi	r12,108
 1007e98:	84000044 	addi	r16,r16,1
 1007e9c:	18bff804 	addi	r2,r3,-32
 1007ea0:	28827336 	bltu	r5,r2,1008870 <___vfiprintf_internal_r+0xb54>
 1007ea4:	100490ba 	slli	r2,r2,2
 1007ea8:	02804034 	movhi	r10,256
 1007eac:	529faf04 	addi	r10,r10,32444
 1007eb0:	1285883a 	add	r2,r2,r10
 1007eb4:	10800017 	ldw	r2,0(r2)
 1007eb8:	1000683a 	jmp	r2
 1007ebc:	010085a4 	muli	r4,zero,534
 1007ec0:	01008870 	cmpltui	r4,zero,545
 1007ec4:	01008870 	cmpltui	r4,zero,545
 1007ec8:	010085c4 	movi	r4,535
 1007ecc:	01008870 	cmpltui	r4,zero,545
 1007ed0:	01008870 	cmpltui	r4,zero,545
 1007ed4:	01008870 	cmpltui	r4,zero,545
 1007ed8:	01008870 	cmpltui	r4,zero,545
 1007edc:	01008870 	cmpltui	r4,zero,545
 1007ee0:	01008870 	cmpltui	r4,zero,545
 1007ee4:	010087ac 	andhi	r4,zero,542
 1007ee8:	010087c8 	cmpgei	r4,zero,543
 1007eec:	01008870 	cmpltui	r4,zero,545
 1007ef0:	010080b0 	cmpltui	r4,zero,514
 1007ef4:	010087d8 	cmpnei	r4,zero,543
 1007ef8:	01008870 	cmpltui	r4,zero,545
 1007efc:	010085d0 	cmplti	r4,zero,535
 1007f00:	010085dc 	xori	r4,zero,535
 1007f04:	010085dc 	xori	r4,zero,535
 1007f08:	010085dc 	xori	r4,zero,535
 1007f0c:	010085dc 	xori	r4,zero,535
 1007f10:	010085dc 	xori	r4,zero,535
 1007f14:	010085dc 	xori	r4,zero,535
 1007f18:	010085dc 	xori	r4,zero,535
 1007f1c:	010085dc 	xori	r4,zero,535
 1007f20:	010085dc 	xori	r4,zero,535
 1007f24:	01008870 	cmpltui	r4,zero,545
 1007f28:	01008870 	cmpltui	r4,zero,545
 1007f2c:	01008870 	cmpltui	r4,zero,545
 1007f30:	01008870 	cmpltui	r4,zero,545
 1007f34:	01008870 	cmpltui	r4,zero,545
 1007f38:	01008870 	cmpltui	r4,zero,545
 1007f3c:	01008870 	cmpltui	r4,zero,545
 1007f40:	01008870 	cmpltui	r4,zero,545
 1007f44:	01008870 	cmpltui	r4,zero,545
 1007f48:	01008870 	cmpltui	r4,zero,545
 1007f4c:	01008608 	cmpgei	r4,zero,536
 1007f50:	01008870 	cmpltui	r4,zero,545
 1007f54:	01008870 	cmpltui	r4,zero,545
 1007f58:	01008870 	cmpltui	r4,zero,545
 1007f5c:	01008870 	cmpltui	r4,zero,545
 1007f60:	01008870 	cmpltui	r4,zero,545
 1007f64:	01008870 	cmpltui	r4,zero,545
 1007f68:	01008870 	cmpltui	r4,zero,545
 1007f6c:	01008870 	cmpltui	r4,zero,545
 1007f70:	01008870 	cmpltui	r4,zero,545
 1007f74:	01008870 	cmpltui	r4,zero,545
 1007f78:	01008640 	call	100864 <__reset-0xeff79c>
 1007f7c:	01008870 	cmpltui	r4,zero,545
 1007f80:	01008870 	cmpltui	r4,zero,545
 1007f84:	01008870 	cmpltui	r4,zero,545
 1007f88:	01008870 	cmpltui	r4,zero,545
 1007f8c:	01008870 	cmpltui	r4,zero,545
 1007f90:	01008698 	cmpnei	r4,zero,538
 1007f94:	01008870 	cmpltui	r4,zero,545
 1007f98:	01008870 	cmpltui	r4,zero,545
 1007f9c:	01008708 	cmpgei	r4,zero,540
 1007fa0:	01008870 	cmpltui	r4,zero,545
 1007fa4:	01008870 	cmpltui	r4,zero,545
 1007fa8:	01008870 	cmpltui	r4,zero,545
 1007fac:	01008870 	cmpltui	r4,zero,545
 1007fb0:	01008870 	cmpltui	r4,zero,545
 1007fb4:	01008870 	cmpltui	r4,zero,545
 1007fb8:	01008870 	cmpltui	r4,zero,545
 1007fbc:	01008870 	cmpltui	r4,zero,545
 1007fc0:	01008870 	cmpltui	r4,zero,545
 1007fc4:	01008870 	cmpltui	r4,zero,545
 1007fc8:	010084b4 	movhi	r4,530
 1007fcc:	010084e0 	cmpeqi	r4,zero,531
 1007fd0:	01008870 	cmpltui	r4,zero,545
 1007fd4:	01008870 	cmpltui	r4,zero,545
 1007fd8:	01008870 	cmpltui	r4,zero,545
 1007fdc:	01008818 	cmpnei	r4,zero,544
 1007fe0:	010084e0 	cmpeqi	r4,zero,531
 1007fe4:	01008870 	cmpltui	r4,zero,545
 1007fe8:	01008870 	cmpltui	r4,zero,545
 1007fec:	01008374 	movhi	r4,525
 1007ff0:	01008870 	cmpltui	r4,zero,545
 1007ff4:	01008384 	movi	r4,526
 1007ff8:	010083c0 	call	10083c <__reset-0xeff7c4>
 1007ffc:	010080bc 	xorhi	r4,zero,514
 1008000:	01008368 	cmpgeui	r4,zero,525
 1008004:	01008870 	cmpltui	r4,zero,545
 1008008:	01008744 	movi	r4,541
 100800c:	01008870 	cmpltui	r4,zero,545
 1008010:	0100879c 	xori	r4,zero,542
 1008014:	01008870 	cmpltui	r4,zero,545
 1008018:	01008870 	cmpltui	r4,zero,545
 100801c:	01008460 	cmpeqi	r4,zero,529
 1008020:	42000204 	addi	r8,r8,8
 1008024:	da802317 	ldw	r10,140(sp)
 1008028:	5455883a 	add	r10,r10,r17
 100802c:	da802315 	stw	r10,140(sp)
 1008030:	003f8b06 	br	1007e60 <__alt_mem_TCDM+0xff006e60>
 1008034:	d9002017 	ldw	r4,128(sp)
 1008038:	a00b883a 	mov	r5,r20
 100803c:	10029d80 	call	10029d8 <__swsetup_r>
 1008040:	1003b11e 	bne	r2,zero,1008f08 <___vfiprintf_internal_r+0x11ec>
 1008044:	a080030b 	ldhu	r2,12(r20)
 1008048:	00c00284 	movi	r3,10
 100804c:	1080068c 	andi	r2,r2,26
 1008050:	10ff541e 	bne	r2,r3,1007da4 <__alt_mem_TCDM+0xff006da4>
 1008054:	a080038f 	ldh	r2,14(r20)
 1008058:	103f5216 	blt	r2,zero,1007da4 <__alt_mem_TCDM+0xff006da4>
 100805c:	d9c02217 	ldw	r7,136(sp)
 1008060:	d9002017 	ldw	r4,128(sp)
 1008064:	e00d883a 	mov	r6,fp
 1008068:	a00b883a 	mov	r5,r20
 100806c:	10091940 	call	1009194 <__sbprintf>
 1008070:	dfc03617 	ldw	ra,216(sp)
 1008074:	df003517 	ldw	fp,212(sp)
 1008078:	ddc03417 	ldw	r23,208(sp)
 100807c:	dd803317 	ldw	r22,204(sp)
 1008080:	dd403217 	ldw	r21,200(sp)
 1008084:	dd003117 	ldw	r20,196(sp)
 1008088:	dcc03017 	ldw	r19,192(sp)
 100808c:	dc802f17 	ldw	r18,188(sp)
 1008090:	dc402e17 	ldw	r17,184(sp)
 1008094:	dc002d17 	ldw	r16,180(sp)
 1008098:	dec03704 	addi	sp,sp,220
 100809c:	f800283a 	ret
 10080a0:	10049ac0 	call	10049ac <__sinit>
 10080a4:	003f2f06 	br	1007d64 <__alt_mem_TCDM+0xff006d64>
 10080a8:	0463c83a 	sub	r17,zero,r17
 10080ac:	d8802215 	stw	r2,136(sp)
 10080b0:	a5000114 	ori	r20,r20,4
 10080b4:	80c00007 	ldb	r3,0(r16)
 10080b8:	003f7706 	br	1007e98 <__alt_mem_TCDM+0xff006e98>
 10080bc:	00800c04 	movi	r2,48
 10080c0:	da802217 	ldw	r10,136(sp)
 10080c4:	d8801d05 	stb	r2,116(sp)
 10080c8:	00801e04 	movi	r2,120
 10080cc:	d8801d45 	stb	r2,117(sp)
 10080d0:	d8001d85 	stb	zero,118(sp)
 10080d4:	50c00104 	addi	r3,r10,4
 10080d8:	54800017 	ldw	r18,0(r10)
 10080dc:	0027883a 	mov	r19,zero
 10080e0:	a0800094 	ori	r2,r20,2
 10080e4:	48030b16 	blt	r9,zero,1008d14 <___vfiprintf_internal_r+0xff8>
 10080e8:	00bfdfc4 	movi	r2,-129
 10080ec:	a096703a 	and	r11,r20,r2
 10080f0:	d8c02215 	stw	r3,136(sp)
 10080f4:	5d000094 	ori	r20,r11,2
 10080f8:	90032b1e 	bne	r18,zero,1008da8 <___vfiprintf_internal_r+0x108c>
 10080fc:	00804074 	movhi	r2,257
 1008100:	10bf5e04 	addi	r2,r2,-648
 1008104:	d8802615 	stw	r2,152(sp)
 1008108:	0039883a 	mov	fp,zero
 100810c:	48017b1e 	bne	r9,zero,10086fc <___vfiprintf_internal_r+0x9e0>
 1008110:	0013883a 	mov	r9,zero
 1008114:	0027883a 	mov	r19,zero
 1008118:	dd401a04 	addi	r21,sp,104
 100811c:	4825883a 	mov	r18,r9
 1008120:	4cc0010e 	bge	r9,r19,1008128 <___vfiprintf_internal_r+0x40c>
 1008124:	9825883a 	mov	r18,r19
 1008128:	e7003fcc 	andi	fp,fp,255
 100812c:	e700201c 	xori	fp,fp,128
 1008130:	e73fe004 	addi	fp,fp,-128
 1008134:	e0000126 	beq	fp,zero,100813c <___vfiprintf_internal_r+0x420>
 1008138:	94800044 	addi	r18,r18,1
 100813c:	a380008c 	andi	r14,r20,2
 1008140:	70000126 	beq	r14,zero,1008148 <___vfiprintf_internal_r+0x42c>
 1008144:	94800084 	addi	r18,r18,2
 1008148:	a700210c 	andi	fp,r20,132
 100814c:	e001df1e 	bne	fp,zero,10088cc <___vfiprintf_internal_r+0xbb0>
 1008150:	8c87c83a 	sub	r3,r17,r18
 1008154:	00c1dd0e 	bge	zero,r3,10088cc <___vfiprintf_internal_r+0xbb0>
 1008158:	01c00404 	movi	r7,16
 100815c:	d8801c17 	ldw	r2,112(sp)
 1008160:	38c3ad0e 	bge	r7,r3,1009018 <___vfiprintf_internal_r+0x12fc>
 1008164:	02804074 	movhi	r10,257
 1008168:	52bfc304 	addi	r10,r10,-244
 100816c:	dc002915 	stw	r16,164(sp)
 1008170:	d9801b17 	ldw	r6,108(sp)
 1008174:	da802415 	stw	r10,144(sp)
 1008178:	03c001c4 	movi	r15,7
 100817c:	da402515 	stw	r9,148(sp)
 1008180:	db802815 	stw	r14,160(sp)
 1008184:	1821883a 	mov	r16,r3
 1008188:	00000506 	br	10081a0 <___vfiprintf_internal_r+0x484>
 100818c:	31400084 	addi	r5,r6,2
 1008190:	42000204 	addi	r8,r8,8
 1008194:	200d883a 	mov	r6,r4
 1008198:	843ffc04 	addi	r16,r16,-16
 100819c:	3c000d0e 	bge	r7,r16,10081d4 <___vfiprintf_internal_r+0x4b8>
 10081a0:	10800404 	addi	r2,r2,16
 10081a4:	31000044 	addi	r4,r6,1
 10081a8:	45800015 	stw	r22,0(r8)
 10081ac:	41c00115 	stw	r7,4(r8)
 10081b0:	d8801c15 	stw	r2,112(sp)
 10081b4:	d9001b15 	stw	r4,108(sp)
 10081b8:	793ff40e 	bge	r15,r4,100818c <__alt_mem_TCDM+0xff00718c>
 10081bc:	1001b51e 	bne	r2,zero,1008894 <___vfiprintf_internal_r+0xb78>
 10081c0:	843ffc04 	addi	r16,r16,-16
 10081c4:	000d883a 	mov	r6,zero
 10081c8:	01400044 	movi	r5,1
 10081cc:	d811883a 	mov	r8,sp
 10081d0:	3c3ff316 	blt	r7,r16,10081a0 <__alt_mem_TCDM+0xff0071a0>
 10081d4:	8007883a 	mov	r3,r16
 10081d8:	da402517 	ldw	r9,148(sp)
 10081dc:	db802817 	ldw	r14,160(sp)
 10081e0:	dc002917 	ldw	r16,164(sp)
 10081e4:	da802417 	ldw	r10,144(sp)
 10081e8:	1885883a 	add	r2,r3,r2
 10081ec:	40c00115 	stw	r3,4(r8)
 10081f0:	42800015 	stw	r10,0(r8)
 10081f4:	d8801c15 	stw	r2,112(sp)
 10081f8:	d9401b15 	stw	r5,108(sp)
 10081fc:	00c001c4 	movi	r3,7
 1008200:	19426016 	blt	r3,r5,1008b84 <___vfiprintf_internal_r+0xe68>
 1008204:	d8c01d87 	ldb	r3,118(sp)
 1008208:	42000204 	addi	r8,r8,8
 100820c:	29000044 	addi	r4,r5,1
 1008210:	1801b31e 	bne	r3,zero,10088e0 <___vfiprintf_internal_r+0xbc4>
 1008214:	7001c026 	beq	r14,zero,1008918 <___vfiprintf_internal_r+0xbfc>
 1008218:	d8c01d04 	addi	r3,sp,116
 100821c:	10800084 	addi	r2,r2,2
 1008220:	40c00015 	stw	r3,0(r8)
 1008224:	00c00084 	movi	r3,2
 1008228:	40c00115 	stw	r3,4(r8)
 100822c:	d8801c15 	stw	r2,112(sp)
 1008230:	d9001b15 	stw	r4,108(sp)
 1008234:	00c001c4 	movi	r3,7
 1008238:	1902650e 	bge	r3,r4,1008bd0 <___vfiprintf_internal_r+0xeb4>
 100823c:	10029a1e 	bne	r2,zero,1008ca8 <___vfiprintf_internal_r+0xf8c>
 1008240:	00c02004 	movi	r3,128
 1008244:	01000044 	movi	r4,1
 1008248:	000b883a 	mov	r5,zero
 100824c:	d811883a 	mov	r8,sp
 1008250:	e0c1b31e 	bne	fp,r3,1008920 <___vfiprintf_internal_r+0xc04>
 1008254:	8cb9c83a 	sub	fp,r17,r18
 1008258:	0701b10e 	bge	zero,fp,1008920 <___vfiprintf_internal_r+0xc04>
 100825c:	01c00404 	movi	r7,16
 1008260:	3f03890e 	bge	r7,fp,1009088 <___vfiprintf_internal_r+0x136c>
 1008264:	00c04074 	movhi	r3,257
 1008268:	18ffbf04 	addi	r3,r3,-260
 100826c:	d8c02415 	stw	r3,144(sp)
 1008270:	8007883a 	mov	r3,r16
 1008274:	034001c4 	movi	r13,7
 1008278:	e021883a 	mov	r16,fp
 100827c:	da402515 	stw	r9,148(sp)
 1008280:	1839883a 	mov	fp,r3
 1008284:	00000506 	br	100829c <___vfiprintf_internal_r+0x580>
 1008288:	29800084 	addi	r6,r5,2
 100828c:	42000204 	addi	r8,r8,8
 1008290:	180b883a 	mov	r5,r3
 1008294:	843ffc04 	addi	r16,r16,-16
 1008298:	3c000d0e 	bge	r7,r16,10082d0 <___vfiprintf_internal_r+0x5b4>
 100829c:	10800404 	addi	r2,r2,16
 10082a0:	28c00044 	addi	r3,r5,1
 10082a4:	45c00015 	stw	r23,0(r8)
 10082a8:	41c00115 	stw	r7,4(r8)
 10082ac:	d8801c15 	stw	r2,112(sp)
 10082b0:	d8c01b15 	stw	r3,108(sp)
 10082b4:	68fff40e 	bge	r13,r3,1008288 <__alt_mem_TCDM+0xff007288>
 10082b8:	1002241e 	bne	r2,zero,1008b4c <___vfiprintf_internal_r+0xe30>
 10082bc:	843ffc04 	addi	r16,r16,-16
 10082c0:	01800044 	movi	r6,1
 10082c4:	000b883a 	mov	r5,zero
 10082c8:	d811883a 	mov	r8,sp
 10082cc:	3c3ff316 	blt	r7,r16,100829c <__alt_mem_TCDM+0xff00729c>
 10082d0:	da402517 	ldw	r9,148(sp)
 10082d4:	e007883a 	mov	r3,fp
 10082d8:	8039883a 	mov	fp,r16
 10082dc:	1821883a 	mov	r16,r3
 10082e0:	d8c02417 	ldw	r3,144(sp)
 10082e4:	1705883a 	add	r2,r2,fp
 10082e8:	47000115 	stw	fp,4(r8)
 10082ec:	40c00015 	stw	r3,0(r8)
 10082f0:	d8801c15 	stw	r2,112(sp)
 10082f4:	d9801b15 	stw	r6,108(sp)
 10082f8:	00c001c4 	movi	r3,7
 10082fc:	19827616 	blt	r3,r6,1008cd8 <___vfiprintf_internal_r+0xfbc>
 1008300:	4cf9c83a 	sub	fp,r9,r19
 1008304:	42000204 	addi	r8,r8,8
 1008308:	31000044 	addi	r4,r6,1
 100830c:	300b883a 	mov	r5,r6
 1008310:	07018516 	blt	zero,fp,1008928 <___vfiprintf_internal_r+0xc0c>
 1008314:	9885883a 	add	r2,r19,r2
 1008318:	45400015 	stw	r21,0(r8)
 100831c:	44c00115 	stw	r19,4(r8)
 1008320:	d8801c15 	stw	r2,112(sp)
 1008324:	d9001b15 	stw	r4,108(sp)
 1008328:	00c001c4 	movi	r3,7
 100832c:	1901dd0e 	bge	r3,r4,1008aa4 <___vfiprintf_internal_r+0xd88>
 1008330:	1002401e 	bne	r2,zero,1008c34 <___vfiprintf_internal_r+0xf18>
 1008334:	d8001b15 	stw	zero,108(sp)
 1008338:	a2c0010c 	andi	r11,r20,4
 100833c:	58000226 	beq	r11,zero,1008348 <___vfiprintf_internal_r+0x62c>
 1008340:	8ca7c83a 	sub	r19,r17,r18
 1008344:	04c2f216 	blt	zero,r19,1008f10 <___vfiprintf_internal_r+0x11f4>
 1008348:	8c80010e 	bge	r17,r18,1008350 <___vfiprintf_internal_r+0x634>
 100834c:	9023883a 	mov	r17,r18
 1008350:	da802317 	ldw	r10,140(sp)
 1008354:	5455883a 	add	r10,r10,r17
 1008358:	da802315 	stw	r10,140(sp)
 100835c:	d8001b15 	stw	zero,108(sp)
 1008360:	d811883a 	mov	r8,sp
 1008364:	003ea206 	br	1007df0 <__alt_mem_TCDM+0xff006df0>
 1008368:	a5000814 	ori	r20,r20,32
 100836c:	80c00007 	ldb	r3,0(r16)
 1008370:	003ec906 	br	1007e98 <__alt_mem_TCDM+0xff006e98>
 1008374:	80c00007 	ldb	r3,0(r16)
 1008378:	1b030926 	beq	r3,r12,1008fa0 <___vfiprintf_internal_r+0x1284>
 100837c:	a5000414 	ori	r20,r20,16
 1008380:	003ec506 	br	1007e98 <__alt_mem_TCDM+0xff006e98>
 1008384:	21003fcc 	andi	r4,r4,255
 1008388:	20035e1e 	bne	r4,zero,1009104 <___vfiprintf_internal_r+0x13e8>
 100838c:	a080080c 	andi	r2,r20,32
 1008390:	1002a526 	beq	r2,zero,1008e28 <___vfiprintf_internal_r+0x110c>
 1008394:	da802217 	ldw	r10,136(sp)
 1008398:	50800017 	ldw	r2,0(r10)
 100839c:	da802317 	ldw	r10,140(sp)
 10083a0:	5007d7fa 	srai	r3,r10,31
 10083a4:	da802217 	ldw	r10,136(sp)
 10083a8:	10c00115 	stw	r3,4(r2)
 10083ac:	52800104 	addi	r10,r10,4
 10083b0:	da802215 	stw	r10,136(sp)
 10083b4:	da802317 	ldw	r10,140(sp)
 10083b8:	12800015 	stw	r10,0(r2)
 10083bc:	003e8c06 	br	1007df0 <__alt_mem_TCDM+0xff006df0>
 10083c0:	21003fcc 	andi	r4,r4,255
 10083c4:	2003511e 	bne	r4,zero,100910c <___vfiprintf_internal_r+0x13f0>
 10083c8:	a080080c 	andi	r2,r20,32
 10083cc:	1000a126 	beq	r2,zero,1008654 <___vfiprintf_internal_r+0x938>
 10083d0:	da802217 	ldw	r10,136(sp)
 10083d4:	d8001d85 	stb	zero,118(sp)
 10083d8:	50800204 	addi	r2,r10,8
 10083dc:	54800017 	ldw	r18,0(r10)
 10083e0:	54c00117 	ldw	r19,4(r10)
 10083e4:	4802b416 	blt	r9,zero,1008eb8 <___vfiprintf_internal_r+0x119c>
 10083e8:	013fdfc4 	movi	r4,-129
 10083ec:	94c6b03a 	or	r3,r18,r19
 10083f0:	d8802215 	stw	r2,136(sp)
 10083f4:	a128703a 	and	r20,r20,r4
 10083f8:	1800a226 	beq	r3,zero,1008684 <___vfiprintf_internal_r+0x968>
 10083fc:	0039883a 	mov	fp,zero
 1008400:	dd401a04 	addi	r21,sp,104
 1008404:	9006d0fa 	srli	r3,r18,3
 1008408:	9808977a 	slli	r4,r19,29
 100840c:	9826d0fa 	srli	r19,r19,3
 1008410:	948001cc 	andi	r18,r18,7
 1008414:	90800c04 	addi	r2,r18,48
 1008418:	ad7fffc4 	addi	r21,r21,-1
 100841c:	20e4b03a 	or	r18,r4,r3
 1008420:	a8800005 	stb	r2,0(r21)
 1008424:	94c6b03a 	or	r3,r18,r19
 1008428:	183ff61e 	bne	r3,zero,1008404 <__alt_mem_TCDM+0xff007404>
 100842c:	a0c0004c 	andi	r3,r20,1
 1008430:	18005926 	beq	r3,zero,1008598 <___vfiprintf_internal_r+0x87c>
 1008434:	10803fcc 	andi	r2,r2,255
 1008438:	1080201c 	xori	r2,r2,128
 100843c:	10bfe004 	addi	r2,r2,-128
 1008440:	00c00c04 	movi	r3,48
 1008444:	10c05426 	beq	r2,r3,1008598 <___vfiprintf_internal_r+0x87c>
 1008448:	da801e17 	ldw	r10,120(sp)
 100844c:	a8bfffc4 	addi	r2,r21,-1
 1008450:	a8ffffc5 	stb	r3,-1(r21)
 1008454:	50a7c83a 	sub	r19,r10,r2
 1008458:	102b883a 	mov	r21,r2
 100845c:	003f2f06 	br	100811c <__alt_mem_TCDM+0xff00711c>
 1008460:	21003fcc 	andi	r4,r4,255
 1008464:	2003421e 	bne	r4,zero,1009170 <___vfiprintf_internal_r+0x1454>
 1008468:	00804074 	movhi	r2,257
 100846c:	10bf5e04 	addi	r2,r2,-648
 1008470:	d8802615 	stw	r2,152(sp)
 1008474:	a080080c 	andi	r2,r20,32
 1008478:	1000aa26 	beq	r2,zero,1008724 <___vfiprintf_internal_r+0xa08>
 100847c:	da802217 	ldw	r10,136(sp)
 1008480:	54800017 	ldw	r18,0(r10)
 1008484:	54c00117 	ldw	r19,4(r10)
 1008488:	52800204 	addi	r10,r10,8
 100848c:	da802215 	stw	r10,136(sp)
 1008490:	a080004c 	andi	r2,r20,1
 1008494:	1001d226 	beq	r2,zero,1008be0 <___vfiprintf_internal_r+0xec4>
 1008498:	94c4b03a 	or	r2,r18,r19
 100849c:	1002351e 	bne	r2,zero,1008d74 <___vfiprintf_internal_r+0x1058>
 10084a0:	d8001d85 	stb	zero,118(sp)
 10084a4:	48022216 	blt	r9,zero,1008d30 <___vfiprintf_internal_r+0x1014>
 10084a8:	00bfdfc4 	movi	r2,-129
 10084ac:	a0a8703a 	and	r20,r20,r2
 10084b0:	003f1506 	br	1008108 <__alt_mem_TCDM+0xff007108>
 10084b4:	da802217 	ldw	r10,136(sp)
 10084b8:	04800044 	movi	r18,1
 10084bc:	d8001d85 	stb	zero,118(sp)
 10084c0:	50800017 	ldw	r2,0(r10)
 10084c4:	52800104 	addi	r10,r10,4
 10084c8:	da802215 	stw	r10,136(sp)
 10084cc:	d8801005 	stb	r2,64(sp)
 10084d0:	9027883a 	mov	r19,r18
 10084d4:	dd401004 	addi	r21,sp,64
 10084d8:	0013883a 	mov	r9,zero
 10084dc:	003f1706 	br	100813c <__alt_mem_TCDM+0xff00713c>
 10084e0:	21003fcc 	andi	r4,r4,255
 10084e4:	2003201e 	bne	r4,zero,1009168 <___vfiprintf_internal_r+0x144c>
 10084e8:	a080080c 	andi	r2,r20,32
 10084ec:	10004b26 	beq	r2,zero,100861c <___vfiprintf_internal_r+0x900>
 10084f0:	da802217 	ldw	r10,136(sp)
 10084f4:	50800117 	ldw	r2,4(r10)
 10084f8:	54800017 	ldw	r18,0(r10)
 10084fc:	52800204 	addi	r10,r10,8
 1008500:	da802215 	stw	r10,136(sp)
 1008504:	1027883a 	mov	r19,r2
 1008508:	10022c16 	blt	r2,zero,1008dbc <___vfiprintf_internal_r+0x10a0>
 100850c:	df001d83 	ldbu	fp,118(sp)
 1008510:	48007216 	blt	r9,zero,10086dc <___vfiprintf_internal_r+0x9c0>
 1008514:	00ffdfc4 	movi	r3,-129
 1008518:	94c4b03a 	or	r2,r18,r19
 100851c:	a0e8703a 	and	r20,r20,r3
 1008520:	1000cc26 	beq	r2,zero,1008854 <___vfiprintf_internal_r+0xb38>
 1008524:	98021026 	beq	r19,zero,1008d68 <___vfiprintf_internal_r+0x104c>
 1008528:	dc402415 	stw	r17,144(sp)
 100852c:	dc002515 	stw	r16,148(sp)
 1008530:	9823883a 	mov	r17,r19
 1008534:	9021883a 	mov	r16,r18
 1008538:	dd401a04 	addi	r21,sp,104
 100853c:	4825883a 	mov	r18,r9
 1008540:	4027883a 	mov	r19,r8
 1008544:	8009883a 	mov	r4,r16
 1008548:	880b883a 	mov	r5,r17
 100854c:	01800284 	movi	r6,10
 1008550:	000f883a 	mov	r7,zero
 1008554:	100a0fc0 	call	100a0fc <__umoddi3>
 1008558:	10800c04 	addi	r2,r2,48
 100855c:	ad7fffc4 	addi	r21,r21,-1
 1008560:	8009883a 	mov	r4,r16
 1008564:	880b883a 	mov	r5,r17
 1008568:	a8800005 	stb	r2,0(r21)
 100856c:	01800284 	movi	r6,10
 1008570:	000f883a 	mov	r7,zero
 1008574:	1009b840 	call	1009b84 <__udivdi3>
 1008578:	1021883a 	mov	r16,r2
 100857c:	10c4b03a 	or	r2,r2,r3
 1008580:	1823883a 	mov	r17,r3
 1008584:	103fef1e 	bne	r2,zero,1008544 <__alt_mem_TCDM+0xff007544>
 1008588:	dc402417 	ldw	r17,144(sp)
 100858c:	dc002517 	ldw	r16,148(sp)
 1008590:	9013883a 	mov	r9,r18
 1008594:	9811883a 	mov	r8,r19
 1008598:	da801e17 	ldw	r10,120(sp)
 100859c:	5567c83a 	sub	r19,r10,r21
 10085a0:	003ede06 	br	100811c <__alt_mem_TCDM+0xff00711c>
 10085a4:	38803fcc 	andi	r2,r7,255
 10085a8:	1080201c 	xori	r2,r2,128
 10085ac:	10bfe004 	addi	r2,r2,-128
 10085b0:	1002371e 	bne	r2,zero,1008e90 <___vfiprintf_internal_r+0x1174>
 10085b4:	01000044 	movi	r4,1
 10085b8:	01c00804 	movi	r7,32
 10085bc:	80c00007 	ldb	r3,0(r16)
 10085c0:	003e3506 	br	1007e98 <__alt_mem_TCDM+0xff006e98>
 10085c4:	a5000054 	ori	r20,r20,1
 10085c8:	80c00007 	ldb	r3,0(r16)
 10085cc:	003e3206 	br	1007e98 <__alt_mem_TCDM+0xff006e98>
 10085d0:	a5002014 	ori	r20,r20,128
 10085d4:	80c00007 	ldb	r3,0(r16)
 10085d8:	003e2f06 	br	1007e98 <__alt_mem_TCDM+0xff006e98>
 10085dc:	8015883a 	mov	r10,r16
 10085e0:	0023883a 	mov	r17,zero
 10085e4:	18bff404 	addi	r2,r3,-48
 10085e8:	50c00007 	ldb	r3,0(r10)
 10085ec:	8c4002a4 	muli	r17,r17,10
 10085f0:	84000044 	addi	r16,r16,1
 10085f4:	8015883a 	mov	r10,r16
 10085f8:	1463883a 	add	r17,r2,r17
 10085fc:	18bff404 	addi	r2,r3,-48
 1008600:	30bff92e 	bgeu	r6,r2,10085e8 <__alt_mem_TCDM+0xff0075e8>
 1008604:	003e2506 	br	1007e9c <__alt_mem_TCDM+0xff006e9c>
 1008608:	21003fcc 	andi	r4,r4,255
 100860c:	2002d41e 	bne	r4,zero,1009160 <___vfiprintf_internal_r+0x1444>
 1008610:	a5000414 	ori	r20,r20,16
 1008614:	a080080c 	andi	r2,r20,32
 1008618:	103fb51e 	bne	r2,zero,10084f0 <__alt_mem_TCDM+0xff0074f0>
 100861c:	a080040c 	andi	r2,r20,16
 1008620:	1001f826 	beq	r2,zero,1008e04 <___vfiprintf_internal_r+0x10e8>
 1008624:	da802217 	ldw	r10,136(sp)
 1008628:	54800017 	ldw	r18,0(r10)
 100862c:	52800104 	addi	r10,r10,4
 1008630:	da802215 	stw	r10,136(sp)
 1008634:	9027d7fa 	srai	r19,r18,31
 1008638:	9805883a 	mov	r2,r19
 100863c:	003fb206 	br	1008508 <__alt_mem_TCDM+0xff007508>
 1008640:	21003fcc 	andi	r4,r4,255
 1008644:	2002c41e 	bne	r4,zero,1009158 <___vfiprintf_internal_r+0x143c>
 1008648:	a5000414 	ori	r20,r20,16
 100864c:	a080080c 	andi	r2,r20,32
 1008650:	103f5f1e 	bne	r2,zero,10083d0 <__alt_mem_TCDM+0xff0073d0>
 1008654:	a080040c 	andi	r2,r20,16
 1008658:	10020f26 	beq	r2,zero,1008e98 <___vfiprintf_internal_r+0x117c>
 100865c:	da802217 	ldw	r10,136(sp)
 1008660:	d8001d85 	stb	zero,118(sp)
 1008664:	0027883a 	mov	r19,zero
 1008668:	50800104 	addi	r2,r10,4
 100866c:	54800017 	ldw	r18,0(r10)
 1008670:	48021116 	blt	r9,zero,1008eb8 <___vfiprintf_internal_r+0x119c>
 1008674:	00ffdfc4 	movi	r3,-129
 1008678:	d8802215 	stw	r2,136(sp)
 100867c:	a0e8703a 	and	r20,r20,r3
 1008680:	903f5e1e 	bne	r18,zero,10083fc <__alt_mem_TCDM+0xff0073fc>
 1008684:	0039883a 	mov	fp,zero
 1008688:	4802a626 	beq	r9,zero,1009124 <___vfiprintf_internal_r+0x1408>
 100868c:	0025883a 	mov	r18,zero
 1008690:	0027883a 	mov	r19,zero
 1008694:	003f5a06 	br	1008400 <__alt_mem_TCDM+0xff007400>
 1008698:	21003fcc 	andi	r4,r4,255
 100869c:	20029f1e 	bne	r4,zero,100911c <___vfiprintf_internal_r+0x1400>
 10086a0:	a5000414 	ori	r20,r20,16
 10086a4:	a080080c 	andi	r2,r20,32
 10086a8:	10005e1e 	bne	r2,zero,1008824 <___vfiprintf_internal_r+0xb08>
 10086ac:	a080040c 	andi	r2,r20,16
 10086b0:	1001a21e 	bne	r2,zero,1008d3c <___vfiprintf_internal_r+0x1020>
 10086b4:	a080100c 	andi	r2,r20,64
 10086b8:	d8001d85 	stb	zero,118(sp)
 10086bc:	da802217 	ldw	r10,136(sp)
 10086c0:	1002231e 	bne	r2,zero,1008f50 <___vfiprintf_internal_r+0x1234>
 10086c4:	50800104 	addi	r2,r10,4
 10086c8:	54800017 	ldw	r18,0(r10)
 10086cc:	0027883a 	mov	r19,zero
 10086d0:	4801a00e 	bge	r9,zero,1008d54 <___vfiprintf_internal_r+0x1038>
 10086d4:	d8802215 	stw	r2,136(sp)
 10086d8:	0039883a 	mov	fp,zero
 10086dc:	94c4b03a 	or	r2,r18,r19
 10086e0:	103f901e 	bne	r2,zero,1008524 <__alt_mem_TCDM+0xff007524>
 10086e4:	00800044 	movi	r2,1
 10086e8:	10803fcc 	andi	r2,r2,255
 10086ec:	00c00044 	movi	r3,1
 10086f0:	10c05926 	beq	r2,r3,1008858 <___vfiprintf_internal_r+0xb3c>
 10086f4:	00c00084 	movi	r3,2
 10086f8:	10ffe41e 	bne	r2,r3,100868c <__alt_mem_TCDM+0xff00768c>
 10086fc:	0025883a 	mov	r18,zero
 1008700:	0027883a 	mov	r19,zero
 1008704:	00013d06 	br	1008bfc <___vfiprintf_internal_r+0xee0>
 1008708:	21003fcc 	andi	r4,r4,255
 100870c:	2002811e 	bne	r4,zero,1009114 <___vfiprintf_internal_r+0x13f8>
 1008710:	00804074 	movhi	r2,257
 1008714:	10bf5904 	addi	r2,r2,-668
 1008718:	d8802615 	stw	r2,152(sp)
 100871c:	a080080c 	andi	r2,r20,32
 1008720:	103f561e 	bne	r2,zero,100847c <__alt_mem_TCDM+0xff00747c>
 1008724:	a080040c 	andi	r2,r20,16
 1008728:	1001d126 	beq	r2,zero,1008e70 <___vfiprintf_internal_r+0x1154>
 100872c:	da802217 	ldw	r10,136(sp)
 1008730:	0027883a 	mov	r19,zero
 1008734:	54800017 	ldw	r18,0(r10)
 1008738:	52800104 	addi	r10,r10,4
 100873c:	da802215 	stw	r10,136(sp)
 1008740:	003f5306 	br	1008490 <__alt_mem_TCDM+0xff007490>
 1008744:	da802217 	ldw	r10,136(sp)
 1008748:	d8001d85 	stb	zero,118(sp)
 100874c:	55400017 	ldw	r21,0(r10)
 1008750:	50c00104 	addi	r3,r10,4
 1008754:	a8024226 	beq	r21,zero,1009060 <___vfiprintf_internal_r+0x1344>
 1008758:	48021816 	blt	r9,zero,1008fbc <___vfiprintf_internal_r+0x12a0>
 100875c:	480d883a 	mov	r6,r9
 1008760:	000b883a 	mov	r5,zero
 1008764:	a809883a 	mov	r4,r21
 1008768:	d8c02a15 	stw	r3,168(sp)
 100876c:	da002b15 	stw	r8,172(sp)
 1008770:	da402c15 	stw	r9,176(sp)
 1008774:	1005f180 	call	1005f18 <memchr>
 1008778:	d8c02a17 	ldw	r3,168(sp)
 100877c:	da002b17 	ldw	r8,172(sp)
 1008780:	da402c17 	ldw	r9,176(sp)
 1008784:	10024826 	beq	r2,zero,10090a8 <___vfiprintf_internal_r+0x138c>
 1008788:	1567c83a 	sub	r19,r2,r21
 100878c:	df001d83 	ldbu	fp,118(sp)
 1008790:	d8c02215 	stw	r3,136(sp)
 1008794:	0013883a 	mov	r9,zero
 1008798:	003e6006 	br	100811c <__alt_mem_TCDM+0xff00711c>
 100879c:	21003fcc 	andi	r4,r4,255
 10087a0:	203fc026 	beq	r4,zero,10086a4 <__alt_mem_TCDM+0xff0076a4>
 10087a4:	d9c01d85 	stb	r7,118(sp)
 10087a8:	003fbe06 	br	10086a4 <__alt_mem_TCDM+0xff0076a4>
 10087ac:	da802217 	ldw	r10,136(sp)
 10087b0:	54400017 	ldw	r17,0(r10)
 10087b4:	50800104 	addi	r2,r10,4
 10087b8:	883e3b16 	blt	r17,zero,10080a8 <__alt_mem_TCDM+0xff0070a8>
 10087bc:	d8802215 	stw	r2,136(sp)
 10087c0:	80c00007 	ldb	r3,0(r16)
 10087c4:	003db406 	br	1007e98 <__alt_mem_TCDM+0xff006e98>
 10087c8:	01000044 	movi	r4,1
 10087cc:	01c00ac4 	movi	r7,43
 10087d0:	80c00007 	ldb	r3,0(r16)
 10087d4:	003db006 	br	1007e98 <__alt_mem_TCDM+0xff006e98>
 10087d8:	80c00007 	ldb	r3,0(r16)
 10087dc:	82800044 	addi	r10,r16,1
 10087e0:	1b423c26 	beq	r3,r13,10090d4 <___vfiprintf_internal_r+0x13b8>
 10087e4:	18bff404 	addi	r2,r3,-48
 10087e8:	0013883a 	mov	r9,zero
 10087ec:	30822b36 	bltu	r6,r2,100909c <___vfiprintf_internal_r+0x1380>
 10087f0:	50c00007 	ldb	r3,0(r10)
 10087f4:	4a4002a4 	muli	r9,r9,10
 10087f8:	54000044 	addi	r16,r10,1
 10087fc:	8015883a 	mov	r10,r16
 1008800:	4893883a 	add	r9,r9,r2
 1008804:	18bff404 	addi	r2,r3,-48
 1008808:	30bff92e 	bgeu	r6,r2,10087f0 <__alt_mem_TCDM+0xff0077f0>
 100880c:	483da30e 	bge	r9,zero,1007e9c <__alt_mem_TCDM+0xff006e9c>
 1008810:	027fffc4 	movi	r9,-1
 1008814:	003da106 	br	1007e9c <__alt_mem_TCDM+0xff006e9c>
 1008818:	a5001014 	ori	r20,r20,64
 100881c:	80c00007 	ldb	r3,0(r16)
 1008820:	003d9d06 	br	1007e98 <__alt_mem_TCDM+0xff006e98>
 1008824:	da802217 	ldw	r10,136(sp)
 1008828:	d8001d85 	stb	zero,118(sp)
 100882c:	50c00204 	addi	r3,r10,8
 1008830:	54800017 	ldw	r18,0(r10)
 1008834:	54c00117 	ldw	r19,4(r10)
 1008838:	4801ca16 	blt	r9,zero,1008f64 <___vfiprintf_internal_r+0x1248>
 100883c:	013fdfc4 	movi	r4,-129
 1008840:	94c4b03a 	or	r2,r18,r19
 1008844:	d8c02215 	stw	r3,136(sp)
 1008848:	a128703a 	and	r20,r20,r4
 100884c:	0039883a 	mov	fp,zero
 1008850:	103f341e 	bne	r2,zero,1008524 <__alt_mem_TCDM+0xff007524>
 1008854:	483e2e26 	beq	r9,zero,1008110 <__alt_mem_TCDM+0xff007110>
 1008858:	0025883a 	mov	r18,zero
 100885c:	94800c04 	addi	r18,r18,48
 1008860:	dc8019c5 	stb	r18,103(sp)
 1008864:	dcc02717 	ldw	r19,156(sp)
 1008868:	dd4019c4 	addi	r21,sp,103
 100886c:	003e2b06 	br	100811c <__alt_mem_TCDM+0xff00711c>
 1008870:	21003fcc 	andi	r4,r4,255
 1008874:	2002361e 	bne	r4,zero,1009150 <___vfiprintf_internal_r+0x1434>
 1008878:	1801c126 	beq	r3,zero,1008f80 <___vfiprintf_internal_r+0x1264>
 100887c:	04800044 	movi	r18,1
 1008880:	d8c01005 	stb	r3,64(sp)
 1008884:	d8001d85 	stb	zero,118(sp)
 1008888:	9027883a 	mov	r19,r18
 100888c:	dd401004 	addi	r21,sp,64
 1008890:	003f1106 	br	10084d8 <__alt_mem_TCDM+0xff0074d8>
 1008894:	d9402117 	ldw	r5,132(sp)
 1008898:	d9002017 	ldw	r4,128(sp)
 100889c:	d9801a04 	addi	r6,sp,104
 10088a0:	d9c02b15 	stw	r7,172(sp)
 10088a4:	dbc02a15 	stw	r15,168(sp)
 10088a8:	1007c080 	call	1007c08 <__sprint_r.part.0>
 10088ac:	d9c02b17 	ldw	r7,172(sp)
 10088b0:	dbc02a17 	ldw	r15,168(sp)
 10088b4:	10006d1e 	bne	r2,zero,1008a6c <___vfiprintf_internal_r+0xd50>
 10088b8:	d9801b17 	ldw	r6,108(sp)
 10088bc:	d8801c17 	ldw	r2,112(sp)
 10088c0:	d811883a 	mov	r8,sp
 10088c4:	31400044 	addi	r5,r6,1
 10088c8:	003e3306 	br	1008198 <__alt_mem_TCDM+0xff007198>
 10088cc:	d9401b17 	ldw	r5,108(sp)
 10088d0:	d8801c17 	ldw	r2,112(sp)
 10088d4:	29000044 	addi	r4,r5,1
 10088d8:	d8c01d87 	ldb	r3,118(sp)
 10088dc:	183e4d26 	beq	r3,zero,1008214 <__alt_mem_TCDM+0xff007214>
 10088e0:	00c00044 	movi	r3,1
 10088e4:	d9401d84 	addi	r5,sp,118
 10088e8:	10c5883a 	add	r2,r2,r3
 10088ec:	41400015 	stw	r5,0(r8)
 10088f0:	40c00115 	stw	r3,4(r8)
 10088f4:	d8801c15 	stw	r2,112(sp)
 10088f8:	d9001b15 	stw	r4,108(sp)
 10088fc:	014001c4 	movi	r5,7
 1008900:	2900a90e 	bge	r5,r4,1008ba8 <___vfiprintf_internal_r+0xe8c>
 1008904:	1000da1e 	bne	r2,zero,1008c70 <___vfiprintf_internal_r+0xf54>
 1008908:	7000ab1e 	bne	r14,zero,1008bb8 <___vfiprintf_internal_r+0xe9c>
 100890c:	000b883a 	mov	r5,zero
 1008910:	1809883a 	mov	r4,r3
 1008914:	d811883a 	mov	r8,sp
 1008918:	00c02004 	movi	r3,128
 100891c:	e0fe4d26 	beq	fp,r3,1008254 <__alt_mem_TCDM+0xff007254>
 1008920:	4cf9c83a 	sub	fp,r9,r19
 1008924:	073e7b0e 	bge	zero,fp,1008314 <__alt_mem_TCDM+0xff007314>
 1008928:	01c00404 	movi	r7,16
 100892c:	3f01900e 	bge	r7,fp,1008f70 <___vfiprintf_internal_r+0x1254>
 1008930:	00c04074 	movhi	r3,257
 1008934:	18ffbf04 	addi	r3,r3,-260
 1008938:	d8c02415 	stw	r3,144(sp)
 100893c:	034001c4 	movi	r13,7
 1008940:	00000506 	br	1008958 <___vfiprintf_internal_r+0xc3c>
 1008944:	29000084 	addi	r4,r5,2
 1008948:	42000204 	addi	r8,r8,8
 100894c:	180b883a 	mov	r5,r3
 1008950:	e73ffc04 	addi	fp,fp,-16
 1008954:	3f000d0e 	bge	r7,fp,100898c <___vfiprintf_internal_r+0xc70>
 1008958:	10800404 	addi	r2,r2,16
 100895c:	28c00044 	addi	r3,r5,1
 1008960:	45c00015 	stw	r23,0(r8)
 1008964:	41c00115 	stw	r7,4(r8)
 1008968:	d8801c15 	stw	r2,112(sp)
 100896c:	d8c01b15 	stw	r3,108(sp)
 1008970:	68fff40e 	bge	r13,r3,1008944 <__alt_mem_TCDM+0xff007944>
 1008974:	1000101e 	bne	r2,zero,10089b8 <___vfiprintf_internal_r+0xc9c>
 1008978:	e73ffc04 	addi	fp,fp,-16
 100897c:	01000044 	movi	r4,1
 1008980:	000b883a 	mov	r5,zero
 1008984:	d811883a 	mov	r8,sp
 1008988:	3f3ff316 	blt	r7,fp,1008958 <__alt_mem_TCDM+0xff007958>
 100898c:	da802417 	ldw	r10,144(sp)
 1008990:	1705883a 	add	r2,r2,fp
 1008994:	47000115 	stw	fp,4(r8)
 1008998:	42800015 	stw	r10,0(r8)
 100899c:	d8801c15 	stw	r2,112(sp)
 10089a0:	d9001b15 	stw	r4,108(sp)
 10089a4:	00c001c4 	movi	r3,7
 10089a8:	19003616 	blt	r3,r4,1008a84 <___vfiprintf_internal_r+0xd68>
 10089ac:	42000204 	addi	r8,r8,8
 10089b0:	21000044 	addi	r4,r4,1
 10089b4:	003e5706 	br	1008314 <__alt_mem_TCDM+0xff007314>
 10089b8:	d9402117 	ldw	r5,132(sp)
 10089bc:	d9002017 	ldw	r4,128(sp)
 10089c0:	d9801a04 	addi	r6,sp,104
 10089c4:	d9c02b15 	stw	r7,172(sp)
 10089c8:	db402a15 	stw	r13,168(sp)
 10089cc:	1007c080 	call	1007c08 <__sprint_r.part.0>
 10089d0:	d9c02b17 	ldw	r7,172(sp)
 10089d4:	db402a17 	ldw	r13,168(sp)
 10089d8:	1000241e 	bne	r2,zero,1008a6c <___vfiprintf_internal_r+0xd50>
 10089dc:	d9401b17 	ldw	r5,108(sp)
 10089e0:	d8801c17 	ldw	r2,112(sp)
 10089e4:	d811883a 	mov	r8,sp
 10089e8:	29000044 	addi	r4,r5,1
 10089ec:	003fd806 	br	1008950 <__alt_mem_TCDM+0xff007950>
 10089f0:	d9401b17 	ldw	r5,108(sp)
 10089f4:	00c04074 	movhi	r3,257
 10089f8:	18ffc304 	addi	r3,r3,-244
 10089fc:	d8c02415 	stw	r3,144(sp)
 1008a00:	29400044 	addi	r5,r5,1
 1008a04:	d8c02417 	ldw	r3,144(sp)
 1008a08:	14c5883a 	add	r2,r2,r19
 1008a0c:	44c00115 	stw	r19,4(r8)
 1008a10:	40c00015 	stw	r3,0(r8)
 1008a14:	d8801c15 	stw	r2,112(sp)
 1008a18:	d9401b15 	stw	r5,108(sp)
 1008a1c:	00c001c4 	movi	r3,7
 1008a20:	1940070e 	bge	r3,r5,1008a40 <___vfiprintf_internal_r+0xd24>
 1008a24:	103e4826 	beq	r2,zero,1008348 <__alt_mem_TCDM+0xff007348>
 1008a28:	d9402117 	ldw	r5,132(sp)
 1008a2c:	d9002017 	ldw	r4,128(sp)
 1008a30:	d9801a04 	addi	r6,sp,104
 1008a34:	1007c080 	call	1007c08 <__sprint_r.part.0>
 1008a38:	10000c1e 	bne	r2,zero,1008a6c <___vfiprintf_internal_r+0xd50>
 1008a3c:	d8801c17 	ldw	r2,112(sp)
 1008a40:	8c80010e 	bge	r17,r18,1008a48 <___vfiprintf_internal_r+0xd2c>
 1008a44:	9023883a 	mov	r17,r18
 1008a48:	da802317 	ldw	r10,140(sp)
 1008a4c:	5455883a 	add	r10,r10,r17
 1008a50:	da802315 	stw	r10,140(sp)
 1008a54:	103e4126 	beq	r2,zero,100835c <__alt_mem_TCDM+0xff00735c>
 1008a58:	d9402117 	ldw	r5,132(sp)
 1008a5c:	d9002017 	ldw	r4,128(sp)
 1008a60:	d9801a04 	addi	r6,sp,104
 1008a64:	1007c080 	call	1007c08 <__sprint_r.part.0>
 1008a68:	103e3c26 	beq	r2,zero,100835c <__alt_mem_TCDM+0xff00735c>
 1008a6c:	dd002117 	ldw	r20,132(sp)
 1008a70:	a080030b 	ldhu	r2,12(r20)
 1008a74:	1080100c 	andi	r2,r2,64
 1008a78:	1001231e 	bne	r2,zero,1008f08 <___vfiprintf_internal_r+0x11ec>
 1008a7c:	d8802317 	ldw	r2,140(sp)
 1008a80:	003d7b06 	br	1008070 <__alt_mem_TCDM+0xff007070>
 1008a84:	1000991e 	bne	r2,zero,1008cec <___vfiprintf_internal_r+0xfd0>
 1008a88:	00c00044 	movi	r3,1
 1008a8c:	9805883a 	mov	r2,r19
 1008a90:	dd400015 	stw	r21,0(sp)
 1008a94:	dcc00115 	stw	r19,4(sp)
 1008a98:	dcc01c15 	stw	r19,112(sp)
 1008a9c:	d8c01b15 	stw	r3,108(sp)
 1008aa0:	d811883a 	mov	r8,sp
 1008aa4:	42000204 	addi	r8,r8,8
 1008aa8:	a2c0010c 	andi	r11,r20,4
 1008aac:	583fe426 	beq	r11,zero,1008a40 <__alt_mem_TCDM+0xff007a40>
 1008ab0:	8ca7c83a 	sub	r19,r17,r18
 1008ab4:	04ffe20e 	bge	zero,r19,1008a40 <__alt_mem_TCDM+0xff007a40>
 1008ab8:	01c00404 	movi	r7,16
 1008abc:	3cffcc0e 	bge	r7,r19,10089f0 <__alt_mem_TCDM+0xff0079f0>
 1008ac0:	02804074 	movhi	r10,257
 1008ac4:	52bfc304 	addi	r10,r10,-244
 1008ac8:	d9001b17 	ldw	r4,108(sp)
 1008acc:	da802415 	stw	r10,144(sp)
 1008ad0:	382b883a 	mov	r21,r7
 1008ad4:	050001c4 	movi	r20,7
 1008ad8:	df002017 	ldw	fp,128(sp)
 1008adc:	00000506 	br	1008af4 <___vfiprintf_internal_r+0xdd8>
 1008ae0:	21400084 	addi	r5,r4,2
 1008ae4:	42000204 	addi	r8,r8,8
 1008ae8:	1809883a 	mov	r4,r3
 1008aec:	9cfffc04 	addi	r19,r19,-16
 1008af0:	acffc40e 	bge	r21,r19,1008a04 <__alt_mem_TCDM+0xff007a04>
 1008af4:	10800404 	addi	r2,r2,16
 1008af8:	20c00044 	addi	r3,r4,1
 1008afc:	45800015 	stw	r22,0(r8)
 1008b00:	45400115 	stw	r21,4(r8)
 1008b04:	d8801c15 	stw	r2,112(sp)
 1008b08:	d8c01b15 	stw	r3,108(sp)
 1008b0c:	a0fff40e 	bge	r20,r3,1008ae0 <__alt_mem_TCDM+0xff007ae0>
 1008b10:	1000041e 	bne	r2,zero,1008b24 <___vfiprintf_internal_r+0xe08>
 1008b14:	01400044 	movi	r5,1
 1008b18:	0009883a 	mov	r4,zero
 1008b1c:	d811883a 	mov	r8,sp
 1008b20:	003ff206 	br	1008aec <__alt_mem_TCDM+0xff007aec>
 1008b24:	d9402117 	ldw	r5,132(sp)
 1008b28:	d9801a04 	addi	r6,sp,104
 1008b2c:	e009883a 	mov	r4,fp
 1008b30:	1007c080 	call	1007c08 <__sprint_r.part.0>
 1008b34:	103fcd1e 	bne	r2,zero,1008a6c <__alt_mem_TCDM+0xff007a6c>
 1008b38:	d9001b17 	ldw	r4,108(sp)
 1008b3c:	d8801c17 	ldw	r2,112(sp)
 1008b40:	d811883a 	mov	r8,sp
 1008b44:	21400044 	addi	r5,r4,1
 1008b48:	003fe806 	br	1008aec <__alt_mem_TCDM+0xff007aec>
 1008b4c:	d9402117 	ldw	r5,132(sp)
 1008b50:	d9002017 	ldw	r4,128(sp)
 1008b54:	d9801a04 	addi	r6,sp,104
 1008b58:	d9c02b15 	stw	r7,172(sp)
 1008b5c:	db402a15 	stw	r13,168(sp)
 1008b60:	1007c080 	call	1007c08 <__sprint_r.part.0>
 1008b64:	d9c02b17 	ldw	r7,172(sp)
 1008b68:	db402a17 	ldw	r13,168(sp)
 1008b6c:	103fbf1e 	bne	r2,zero,1008a6c <__alt_mem_TCDM+0xff007a6c>
 1008b70:	d9401b17 	ldw	r5,108(sp)
 1008b74:	d8801c17 	ldw	r2,112(sp)
 1008b78:	d811883a 	mov	r8,sp
 1008b7c:	29800044 	addi	r6,r5,1
 1008b80:	003dc406 	br	1008294 <__alt_mem_TCDM+0xff007294>
 1008b84:	1000d21e 	bne	r2,zero,1008ed0 <___vfiprintf_internal_r+0x11b4>
 1008b88:	d8c01d87 	ldb	r3,118(sp)
 1008b8c:	18009526 	beq	r3,zero,1008de4 <___vfiprintf_internal_r+0x10c8>
 1008b90:	00800044 	movi	r2,1
 1008b94:	d8c01d84 	addi	r3,sp,118
 1008b98:	1009883a 	mov	r4,r2
 1008b9c:	d8c00015 	stw	r3,0(sp)
 1008ba0:	d8800115 	stw	r2,4(sp)
 1008ba4:	d811883a 	mov	r8,sp
 1008ba8:	200b883a 	mov	r5,r4
 1008bac:	42000204 	addi	r8,r8,8
 1008bb0:	21000044 	addi	r4,r4,1
 1008bb4:	003d9706 	br	1008214 <__alt_mem_TCDM+0xff007214>
 1008bb8:	d9001d04 	addi	r4,sp,116
 1008bbc:	00800084 	movi	r2,2
 1008bc0:	d9000015 	stw	r4,0(sp)
 1008bc4:	d8800115 	stw	r2,4(sp)
 1008bc8:	1809883a 	mov	r4,r3
 1008bcc:	d811883a 	mov	r8,sp
 1008bd0:	200b883a 	mov	r5,r4
 1008bd4:	42000204 	addi	r8,r8,8
 1008bd8:	21000044 	addi	r4,r4,1
 1008bdc:	003f4e06 	br	1008918 <__alt_mem_TCDM+0xff007918>
 1008be0:	d8001d85 	stb	zero,118(sp)
 1008be4:	48005016 	blt	r9,zero,1008d28 <___vfiprintf_internal_r+0x100c>
 1008be8:	00ffdfc4 	movi	r3,-129
 1008bec:	94c4b03a 	or	r2,r18,r19
 1008bf0:	a0e8703a 	and	r20,r20,r3
 1008bf4:	103d4426 	beq	r2,zero,1008108 <__alt_mem_TCDM+0xff007108>
 1008bf8:	0039883a 	mov	fp,zero
 1008bfc:	d9002617 	ldw	r4,152(sp)
 1008c00:	dd401a04 	addi	r21,sp,104
 1008c04:	908003cc 	andi	r2,r18,15
 1008c08:	9806973a 	slli	r3,r19,28
 1008c0c:	2085883a 	add	r2,r4,r2
 1008c10:	9024d13a 	srli	r18,r18,4
 1008c14:	10800003 	ldbu	r2,0(r2)
 1008c18:	9826d13a 	srli	r19,r19,4
 1008c1c:	ad7fffc4 	addi	r21,r21,-1
 1008c20:	1ca4b03a 	or	r18,r3,r18
 1008c24:	a8800005 	stb	r2,0(r21)
 1008c28:	94c4b03a 	or	r2,r18,r19
 1008c2c:	103ff51e 	bne	r2,zero,1008c04 <__alt_mem_TCDM+0xff007c04>
 1008c30:	003e5906 	br	1008598 <__alt_mem_TCDM+0xff007598>
 1008c34:	d9402117 	ldw	r5,132(sp)
 1008c38:	d9002017 	ldw	r4,128(sp)
 1008c3c:	d9801a04 	addi	r6,sp,104
 1008c40:	1007c080 	call	1007c08 <__sprint_r.part.0>
 1008c44:	103f891e 	bne	r2,zero,1008a6c <__alt_mem_TCDM+0xff007a6c>
 1008c48:	d8801c17 	ldw	r2,112(sp)
 1008c4c:	d811883a 	mov	r8,sp
 1008c50:	003f9506 	br	1008aa8 <__alt_mem_TCDM+0xff007aa8>
 1008c54:	d9402117 	ldw	r5,132(sp)
 1008c58:	d9002017 	ldw	r4,128(sp)
 1008c5c:	d9801a04 	addi	r6,sp,104
 1008c60:	1007c080 	call	1007c08 <__sprint_r.part.0>
 1008c64:	103f811e 	bne	r2,zero,1008a6c <__alt_mem_TCDM+0xff007a6c>
 1008c68:	d811883a 	mov	r8,sp
 1008c6c:	003ced06 	br	1008024 <__alt_mem_TCDM+0xff007024>
 1008c70:	d9402117 	ldw	r5,132(sp)
 1008c74:	d9002017 	ldw	r4,128(sp)
 1008c78:	d9801a04 	addi	r6,sp,104
 1008c7c:	da402c15 	stw	r9,176(sp)
 1008c80:	db802a15 	stw	r14,168(sp)
 1008c84:	1007c080 	call	1007c08 <__sprint_r.part.0>
 1008c88:	da402c17 	ldw	r9,176(sp)
 1008c8c:	db802a17 	ldw	r14,168(sp)
 1008c90:	103f761e 	bne	r2,zero,1008a6c <__alt_mem_TCDM+0xff007a6c>
 1008c94:	d9401b17 	ldw	r5,108(sp)
 1008c98:	d8801c17 	ldw	r2,112(sp)
 1008c9c:	d811883a 	mov	r8,sp
 1008ca0:	29000044 	addi	r4,r5,1
 1008ca4:	003d5b06 	br	1008214 <__alt_mem_TCDM+0xff007214>
 1008ca8:	d9402117 	ldw	r5,132(sp)
 1008cac:	d9002017 	ldw	r4,128(sp)
 1008cb0:	d9801a04 	addi	r6,sp,104
 1008cb4:	da402c15 	stw	r9,176(sp)
 1008cb8:	1007c080 	call	1007c08 <__sprint_r.part.0>
 1008cbc:	da402c17 	ldw	r9,176(sp)
 1008cc0:	103f6a1e 	bne	r2,zero,1008a6c <__alt_mem_TCDM+0xff007a6c>
 1008cc4:	d9401b17 	ldw	r5,108(sp)
 1008cc8:	d8801c17 	ldw	r2,112(sp)
 1008ccc:	d811883a 	mov	r8,sp
 1008cd0:	29000044 	addi	r4,r5,1
 1008cd4:	003f1006 	br	1008918 <__alt_mem_TCDM+0xff007918>
 1008cd8:	1000c31e 	bne	r2,zero,1008fe8 <___vfiprintf_internal_r+0x12cc>
 1008cdc:	01000044 	movi	r4,1
 1008ce0:	000b883a 	mov	r5,zero
 1008ce4:	d811883a 	mov	r8,sp
 1008ce8:	003f0d06 	br	1008920 <__alt_mem_TCDM+0xff007920>
 1008cec:	d9402117 	ldw	r5,132(sp)
 1008cf0:	d9002017 	ldw	r4,128(sp)
 1008cf4:	d9801a04 	addi	r6,sp,104
 1008cf8:	1007c080 	call	1007c08 <__sprint_r.part.0>
 1008cfc:	103f5b1e 	bne	r2,zero,1008a6c <__alt_mem_TCDM+0xff007a6c>
 1008d00:	d9001b17 	ldw	r4,108(sp)
 1008d04:	d8801c17 	ldw	r2,112(sp)
 1008d08:	d811883a 	mov	r8,sp
 1008d0c:	21000044 	addi	r4,r4,1
 1008d10:	003d8006 	br	1008314 <__alt_mem_TCDM+0xff007314>
 1008d14:	01004074 	movhi	r4,257
 1008d18:	213f5e04 	addi	r4,r4,-648
 1008d1c:	d9002615 	stw	r4,152(sp)
 1008d20:	d8c02215 	stw	r3,136(sp)
 1008d24:	1029883a 	mov	r20,r2
 1008d28:	94c4b03a 	or	r2,r18,r19
 1008d2c:	103fb21e 	bne	r2,zero,1008bf8 <__alt_mem_TCDM+0xff007bf8>
 1008d30:	0039883a 	mov	fp,zero
 1008d34:	00800084 	movi	r2,2
 1008d38:	003e6b06 	br	10086e8 <__alt_mem_TCDM+0xff0076e8>
 1008d3c:	da802217 	ldw	r10,136(sp)
 1008d40:	d8001d85 	stb	zero,118(sp)
 1008d44:	0027883a 	mov	r19,zero
 1008d48:	50800104 	addi	r2,r10,4
 1008d4c:	54800017 	ldw	r18,0(r10)
 1008d50:	483e6016 	blt	r9,zero,10086d4 <__alt_mem_TCDM+0xff0076d4>
 1008d54:	00ffdfc4 	movi	r3,-129
 1008d58:	d8802215 	stw	r2,136(sp)
 1008d5c:	a0e8703a 	and	r20,r20,r3
 1008d60:	0039883a 	mov	fp,zero
 1008d64:	903ebb26 	beq	r18,zero,1008854 <__alt_mem_TCDM+0xff007854>
 1008d68:	00800244 	movi	r2,9
 1008d6c:	14bdee36 	bltu	r2,r18,1008528 <__alt_mem_TCDM+0xff007528>
 1008d70:	003eba06 	br	100885c <__alt_mem_TCDM+0xff00785c>
 1008d74:	00800c04 	movi	r2,48
 1008d78:	d8c01d45 	stb	r3,117(sp)
 1008d7c:	d8801d05 	stb	r2,116(sp)
 1008d80:	d8001d85 	stb	zero,118(sp)
 1008d84:	a0c00094 	ori	r3,r20,2
 1008d88:	4800a916 	blt	r9,zero,1009030 <___vfiprintf_internal_r+0x1314>
 1008d8c:	00bfdfc4 	movi	r2,-129
 1008d90:	a096703a 	and	r11,r20,r2
 1008d94:	5d000094 	ori	r20,r11,2
 1008d98:	0039883a 	mov	fp,zero
 1008d9c:	003f9706 	br	1008bfc <__alt_mem_TCDM+0xff007bfc>
 1008da0:	8025883a 	mov	r18,r16
 1008da4:	003c2e06 	br	1007e60 <__alt_mem_TCDM+0xff006e60>
 1008da8:	00804074 	movhi	r2,257
 1008dac:	10bf5e04 	addi	r2,r2,-648
 1008db0:	0039883a 	mov	fp,zero
 1008db4:	d8802615 	stw	r2,152(sp)
 1008db8:	003f9006 	br	1008bfc <__alt_mem_TCDM+0xff007bfc>
 1008dbc:	04a5c83a 	sub	r18,zero,r18
 1008dc0:	07000b44 	movi	fp,45
 1008dc4:	9004c03a 	cmpne	r2,r18,zero
 1008dc8:	04e7c83a 	sub	r19,zero,r19
 1008dcc:	df001d85 	stb	fp,118(sp)
 1008dd0:	98a7c83a 	sub	r19,r19,r2
 1008dd4:	48009f16 	blt	r9,zero,1009054 <___vfiprintf_internal_r+0x1338>
 1008dd8:	00bfdfc4 	movi	r2,-129
 1008ddc:	a0a8703a 	and	r20,r20,r2
 1008de0:	003dd006 	br	1008524 <__alt_mem_TCDM+0xff007524>
 1008de4:	70004c26 	beq	r14,zero,1008f18 <___vfiprintf_internal_r+0x11fc>
 1008de8:	00800084 	movi	r2,2
 1008dec:	d8c01d04 	addi	r3,sp,116
 1008df0:	d8c00015 	stw	r3,0(sp)
 1008df4:	d8800115 	stw	r2,4(sp)
 1008df8:	01000044 	movi	r4,1
 1008dfc:	d811883a 	mov	r8,sp
 1008e00:	003f7306 	br	1008bd0 <__alt_mem_TCDM+0xff007bd0>
 1008e04:	a080100c 	andi	r2,r20,64
 1008e08:	da802217 	ldw	r10,136(sp)
 1008e0c:	103e0626 	beq	r2,zero,1008628 <__alt_mem_TCDM+0xff007628>
 1008e10:	5480000f 	ldh	r18,0(r10)
 1008e14:	52800104 	addi	r10,r10,4
 1008e18:	da802215 	stw	r10,136(sp)
 1008e1c:	9027d7fa 	srai	r19,r18,31
 1008e20:	9805883a 	mov	r2,r19
 1008e24:	003db806 	br	1008508 <__alt_mem_TCDM+0xff007508>
 1008e28:	a080040c 	andi	r2,r20,16
 1008e2c:	1000091e 	bne	r2,zero,1008e54 <___vfiprintf_internal_r+0x1138>
 1008e30:	a2c0100c 	andi	r11,r20,64
 1008e34:	58000726 	beq	r11,zero,1008e54 <___vfiprintf_internal_r+0x1138>
 1008e38:	da802217 	ldw	r10,136(sp)
 1008e3c:	50800017 	ldw	r2,0(r10)
 1008e40:	52800104 	addi	r10,r10,4
 1008e44:	da802215 	stw	r10,136(sp)
 1008e48:	da802317 	ldw	r10,140(sp)
 1008e4c:	1280000d 	sth	r10,0(r2)
 1008e50:	003be706 	br	1007df0 <__alt_mem_TCDM+0xff006df0>
 1008e54:	da802217 	ldw	r10,136(sp)
 1008e58:	50800017 	ldw	r2,0(r10)
 1008e5c:	52800104 	addi	r10,r10,4
 1008e60:	da802215 	stw	r10,136(sp)
 1008e64:	da802317 	ldw	r10,140(sp)
 1008e68:	12800015 	stw	r10,0(r2)
 1008e6c:	003be006 	br	1007df0 <__alt_mem_TCDM+0xff006df0>
 1008e70:	a080100c 	andi	r2,r20,64
 1008e74:	da802217 	ldw	r10,136(sp)
 1008e78:	10003026 	beq	r2,zero,1008f3c <___vfiprintf_internal_r+0x1220>
 1008e7c:	5480000b 	ldhu	r18,0(r10)
 1008e80:	52800104 	addi	r10,r10,4
 1008e84:	0027883a 	mov	r19,zero
 1008e88:	da802215 	stw	r10,136(sp)
 1008e8c:	003d8006 	br	1008490 <__alt_mem_TCDM+0xff007490>
 1008e90:	80c00007 	ldb	r3,0(r16)
 1008e94:	003c0006 	br	1007e98 <__alt_mem_TCDM+0xff006e98>
 1008e98:	a080100c 	andi	r2,r20,64
 1008e9c:	d8001d85 	stb	zero,118(sp)
 1008ea0:	da802217 	ldw	r10,136(sp)
 1008ea4:	1000201e 	bne	r2,zero,1008f28 <___vfiprintf_internal_r+0x120c>
 1008ea8:	50800104 	addi	r2,r10,4
 1008eac:	54800017 	ldw	r18,0(r10)
 1008eb0:	0027883a 	mov	r19,zero
 1008eb4:	483def0e 	bge	r9,zero,1008674 <__alt_mem_TCDM+0xff007674>
 1008eb8:	94c6b03a 	or	r3,r18,r19
 1008ebc:	d8802215 	stw	r2,136(sp)
 1008ec0:	183d4e1e 	bne	r3,zero,10083fc <__alt_mem_TCDM+0xff0073fc>
 1008ec4:	0039883a 	mov	fp,zero
 1008ec8:	0005883a 	mov	r2,zero
 1008ecc:	003e0606 	br	10086e8 <__alt_mem_TCDM+0xff0076e8>
 1008ed0:	d9402117 	ldw	r5,132(sp)
 1008ed4:	d9002017 	ldw	r4,128(sp)
 1008ed8:	d9801a04 	addi	r6,sp,104
 1008edc:	da402c15 	stw	r9,176(sp)
 1008ee0:	db802a15 	stw	r14,168(sp)
 1008ee4:	1007c080 	call	1007c08 <__sprint_r.part.0>
 1008ee8:	da402c17 	ldw	r9,176(sp)
 1008eec:	db802a17 	ldw	r14,168(sp)
 1008ef0:	103ede1e 	bne	r2,zero,1008a6c <__alt_mem_TCDM+0xff007a6c>
 1008ef4:	d9401b17 	ldw	r5,108(sp)
 1008ef8:	d8801c17 	ldw	r2,112(sp)
 1008efc:	d811883a 	mov	r8,sp
 1008f00:	29000044 	addi	r4,r5,1
 1008f04:	003e7406 	br	10088d8 <__alt_mem_TCDM+0xff0078d8>
 1008f08:	00bfffc4 	movi	r2,-1
 1008f0c:	003c5806 	br	1008070 <__alt_mem_TCDM+0xff007070>
 1008f10:	d811883a 	mov	r8,sp
 1008f14:	003ee806 	br	1008ab8 <__alt_mem_TCDM+0xff007ab8>
 1008f18:	000b883a 	mov	r5,zero
 1008f1c:	01000044 	movi	r4,1
 1008f20:	d811883a 	mov	r8,sp
 1008f24:	003e7c06 	br	1008918 <__alt_mem_TCDM+0xff007918>
 1008f28:	50800104 	addi	r2,r10,4
 1008f2c:	5480000b 	ldhu	r18,0(r10)
 1008f30:	0027883a 	mov	r19,zero
 1008f34:	483dcf0e 	bge	r9,zero,1008674 <__alt_mem_TCDM+0xff007674>
 1008f38:	003fdf06 	br	1008eb8 <__alt_mem_TCDM+0xff007eb8>
 1008f3c:	54800017 	ldw	r18,0(r10)
 1008f40:	52800104 	addi	r10,r10,4
 1008f44:	0027883a 	mov	r19,zero
 1008f48:	da802215 	stw	r10,136(sp)
 1008f4c:	003d5006 	br	1008490 <__alt_mem_TCDM+0xff007490>
 1008f50:	50800104 	addi	r2,r10,4
 1008f54:	5480000b 	ldhu	r18,0(r10)
 1008f58:	0027883a 	mov	r19,zero
 1008f5c:	483f7d0e 	bge	r9,zero,1008d54 <__alt_mem_TCDM+0xff007d54>
 1008f60:	003ddc06 	br	10086d4 <__alt_mem_TCDM+0xff0076d4>
 1008f64:	d8c02215 	stw	r3,136(sp)
 1008f68:	0039883a 	mov	fp,zero
 1008f6c:	003ddb06 	br	10086dc <__alt_mem_TCDM+0xff0076dc>
 1008f70:	02804074 	movhi	r10,257
 1008f74:	52bfbf04 	addi	r10,r10,-260
 1008f78:	da802415 	stw	r10,144(sp)
 1008f7c:	003e8306 	br	100898c <__alt_mem_TCDM+0xff00798c>
 1008f80:	d8801c17 	ldw	r2,112(sp)
 1008f84:	dd002117 	ldw	r20,132(sp)
 1008f88:	103eb926 	beq	r2,zero,1008a70 <__alt_mem_TCDM+0xff007a70>
 1008f8c:	d9002017 	ldw	r4,128(sp)
 1008f90:	d9801a04 	addi	r6,sp,104
 1008f94:	a00b883a 	mov	r5,r20
 1008f98:	1007c080 	call	1007c08 <__sprint_r.part.0>
 1008f9c:	003eb406 	br	1008a70 <__alt_mem_TCDM+0xff007a70>
 1008fa0:	80c00043 	ldbu	r3,1(r16)
 1008fa4:	a5000814 	ori	r20,r20,32
 1008fa8:	84000044 	addi	r16,r16,1
 1008fac:	18c03fcc 	andi	r3,r3,255
 1008fb0:	18c0201c 	xori	r3,r3,128
 1008fb4:	18ffe004 	addi	r3,r3,-128
 1008fb8:	003bb706 	br	1007e98 <__alt_mem_TCDM+0xff006e98>
 1008fbc:	a809883a 	mov	r4,r21
 1008fc0:	d8c02a15 	stw	r3,168(sp)
 1008fc4:	da002b15 	stw	r8,172(sp)
 1008fc8:	10006700 	call	1000670 <strlen>
 1008fcc:	d8c02a17 	ldw	r3,168(sp)
 1008fd0:	1027883a 	mov	r19,r2
 1008fd4:	df001d83 	ldbu	fp,118(sp)
 1008fd8:	d8c02215 	stw	r3,136(sp)
 1008fdc:	0013883a 	mov	r9,zero
 1008fe0:	da002b17 	ldw	r8,172(sp)
 1008fe4:	003c4d06 	br	100811c <__alt_mem_TCDM+0xff00711c>
 1008fe8:	d9402117 	ldw	r5,132(sp)
 1008fec:	d9002017 	ldw	r4,128(sp)
 1008ff0:	d9801a04 	addi	r6,sp,104
 1008ff4:	da402c15 	stw	r9,176(sp)
 1008ff8:	1007c080 	call	1007c08 <__sprint_r.part.0>
 1008ffc:	da402c17 	ldw	r9,176(sp)
 1009000:	103e9a1e 	bne	r2,zero,1008a6c <__alt_mem_TCDM+0xff007a6c>
 1009004:	d9401b17 	ldw	r5,108(sp)
 1009008:	d8801c17 	ldw	r2,112(sp)
 100900c:	d811883a 	mov	r8,sp
 1009010:	29000044 	addi	r4,r5,1
 1009014:	003e4206 	br	1008920 <__alt_mem_TCDM+0xff007920>
 1009018:	d9401b17 	ldw	r5,108(sp)
 100901c:	01004074 	movhi	r4,257
 1009020:	213fc304 	addi	r4,r4,-244
 1009024:	d9002415 	stw	r4,144(sp)
 1009028:	29400044 	addi	r5,r5,1
 100902c:	003c6d06 	br	10081e4 <__alt_mem_TCDM+0xff0071e4>
 1009030:	0039883a 	mov	fp,zero
 1009034:	00800084 	movi	r2,2
 1009038:	10803fcc 	andi	r2,r2,255
 100903c:	01000044 	movi	r4,1
 1009040:	11001e26 	beq	r2,r4,10090bc <___vfiprintf_internal_r+0x13a0>
 1009044:	01000084 	movi	r4,2
 1009048:	11001e1e 	bne	r2,r4,10090c4 <___vfiprintf_internal_r+0x13a8>
 100904c:	1829883a 	mov	r20,r3
 1009050:	003eea06 	br	1008bfc <__alt_mem_TCDM+0xff007bfc>
 1009054:	a007883a 	mov	r3,r20
 1009058:	00800044 	movi	r2,1
 100905c:	003ff606 	br	1009038 <__alt_mem_TCDM+0xff008038>
 1009060:	00800184 	movi	r2,6
 1009064:	1240012e 	bgeu	r2,r9,100906c <___vfiprintf_internal_r+0x1350>
 1009068:	1013883a 	mov	r9,r2
 100906c:	4827883a 	mov	r19,r9
 1009070:	4825883a 	mov	r18,r9
 1009074:	48001516 	blt	r9,zero,10090cc <___vfiprintf_internal_r+0x13b0>
 1009078:	05404074 	movhi	r21,257
 100907c:	d8c02215 	stw	r3,136(sp)
 1009080:	ad7f6304 	addi	r21,r21,-628
 1009084:	003d1406 	br	10084d8 <__alt_mem_TCDM+0xff0074d8>
 1009088:	02804074 	movhi	r10,257
 100908c:	52bfbf04 	addi	r10,r10,-260
 1009090:	da802415 	stw	r10,144(sp)
 1009094:	200d883a 	mov	r6,r4
 1009098:	003c9106 	br	10082e0 <__alt_mem_TCDM+0xff0072e0>
 100909c:	5021883a 	mov	r16,r10
 10090a0:	0013883a 	mov	r9,zero
 10090a4:	003b7d06 	br	1007e9c <__alt_mem_TCDM+0xff006e9c>
 10090a8:	4827883a 	mov	r19,r9
 10090ac:	df001d83 	ldbu	fp,118(sp)
 10090b0:	d8c02215 	stw	r3,136(sp)
 10090b4:	0013883a 	mov	r9,zero
 10090b8:	003c1806 	br	100811c <__alt_mem_TCDM+0xff00711c>
 10090bc:	1829883a 	mov	r20,r3
 10090c0:	003d1806 	br	1008524 <__alt_mem_TCDM+0xff007524>
 10090c4:	1829883a 	mov	r20,r3
 10090c8:	003ccd06 	br	1008400 <__alt_mem_TCDM+0xff007400>
 10090cc:	0025883a 	mov	r18,zero
 10090d0:	003fe906 	br	1009078 <__alt_mem_TCDM+0xff008078>
 10090d4:	d8802217 	ldw	r2,136(sp)
 10090d8:	80c00043 	ldbu	r3,1(r16)
 10090dc:	5021883a 	mov	r16,r10
 10090e0:	12400017 	ldw	r9,0(r2)
 10090e4:	10800104 	addi	r2,r2,4
 10090e8:	d8802215 	stw	r2,136(sp)
 10090ec:	483faf0e 	bge	r9,zero,1008fac <__alt_mem_TCDM+0xff007fac>
 10090f0:	18c03fcc 	andi	r3,r3,255
 10090f4:	18c0201c 	xori	r3,r3,128
 10090f8:	027fffc4 	movi	r9,-1
 10090fc:	18ffe004 	addi	r3,r3,-128
 1009100:	003b6506 	br	1007e98 <__alt_mem_TCDM+0xff006e98>
 1009104:	d9c01d85 	stb	r7,118(sp)
 1009108:	003ca006 	br	100838c <__alt_mem_TCDM+0xff00738c>
 100910c:	d9c01d85 	stb	r7,118(sp)
 1009110:	003cad06 	br	10083c8 <__alt_mem_TCDM+0xff0073c8>
 1009114:	d9c01d85 	stb	r7,118(sp)
 1009118:	003d7d06 	br	1008710 <__alt_mem_TCDM+0xff007710>
 100911c:	d9c01d85 	stb	r7,118(sp)
 1009120:	003d5f06 	br	10086a0 <__alt_mem_TCDM+0xff0076a0>
 1009124:	a080004c 	andi	r2,r20,1
 1009128:	0039883a 	mov	fp,zero
 100912c:	10000526 	beq	r2,zero,1009144 <___vfiprintf_internal_r+0x1428>
 1009130:	00800c04 	movi	r2,48
 1009134:	d88019c5 	stb	r2,103(sp)
 1009138:	dcc02717 	ldw	r19,156(sp)
 100913c:	dd4019c4 	addi	r21,sp,103
 1009140:	003bf606 	br	100811c <__alt_mem_TCDM+0xff00711c>
 1009144:	0027883a 	mov	r19,zero
 1009148:	dd401a04 	addi	r21,sp,104
 100914c:	003bf306 	br	100811c <__alt_mem_TCDM+0xff00711c>
 1009150:	d9c01d85 	stb	r7,118(sp)
 1009154:	003dc806 	br	1008878 <__alt_mem_TCDM+0xff007878>
 1009158:	d9c01d85 	stb	r7,118(sp)
 100915c:	003d3a06 	br	1008648 <__alt_mem_TCDM+0xff007648>
 1009160:	d9c01d85 	stb	r7,118(sp)
 1009164:	003d2a06 	br	1008610 <__alt_mem_TCDM+0xff007610>
 1009168:	d9c01d85 	stb	r7,118(sp)
 100916c:	003cde06 	br	10084e8 <__alt_mem_TCDM+0xff0074e8>
 1009170:	d9c01d85 	stb	r7,118(sp)
 1009174:	003cbc06 	br	1008468 <__alt_mem_TCDM+0xff007468>

01009178 <__vfiprintf_internal>:
 1009178:	00804074 	movhi	r2,257
 100917c:	1086fe04 	addi	r2,r2,7160
 1009180:	300f883a 	mov	r7,r6
 1009184:	280d883a 	mov	r6,r5
 1009188:	200b883a 	mov	r5,r4
 100918c:	11000017 	ldw	r4,0(r2)
 1009190:	1007d1c1 	jmpi	1007d1c <___vfiprintf_internal_r>

01009194 <__sbprintf>:
 1009194:	2880030b 	ldhu	r2,12(r5)
 1009198:	2ac01917 	ldw	r11,100(r5)
 100919c:	2a80038b 	ldhu	r10,14(r5)
 10091a0:	2a400717 	ldw	r9,28(r5)
 10091a4:	2a000917 	ldw	r8,36(r5)
 10091a8:	defee204 	addi	sp,sp,-1144
 10091ac:	00c10004 	movi	r3,1024
 10091b0:	dc011a15 	stw	r16,1128(sp)
 10091b4:	10bfff4c 	andi	r2,r2,65533
 10091b8:	2821883a 	mov	r16,r5
 10091bc:	d8cb883a 	add	r5,sp,r3
 10091c0:	dc811c15 	stw	r18,1136(sp)
 10091c4:	dc411b15 	stw	r17,1132(sp)
 10091c8:	dfc11d15 	stw	ra,1140(sp)
 10091cc:	2025883a 	mov	r18,r4
 10091d0:	d881030d 	sth	r2,1036(sp)
 10091d4:	dac11915 	stw	r11,1124(sp)
 10091d8:	da81038d 	sth	r10,1038(sp)
 10091dc:	da410715 	stw	r9,1052(sp)
 10091e0:	da010915 	stw	r8,1060(sp)
 10091e4:	dec10015 	stw	sp,1024(sp)
 10091e8:	dec10415 	stw	sp,1040(sp)
 10091ec:	d8c10215 	stw	r3,1032(sp)
 10091f0:	d8c10515 	stw	r3,1044(sp)
 10091f4:	d8010615 	stw	zero,1048(sp)
 10091f8:	1007d1c0 	call	1007d1c <___vfiprintf_internal_r>
 10091fc:	1023883a 	mov	r17,r2
 1009200:	10000416 	blt	r2,zero,1009214 <__sbprintf+0x80>
 1009204:	d9410004 	addi	r5,sp,1024
 1009208:	9009883a 	mov	r4,r18
 100920c:	10045d00 	call	10045d0 <_fflush_r>
 1009210:	10000d1e 	bne	r2,zero,1009248 <__sbprintf+0xb4>
 1009214:	d881030b 	ldhu	r2,1036(sp)
 1009218:	1080100c 	andi	r2,r2,64
 100921c:	10000326 	beq	r2,zero,100922c <__sbprintf+0x98>
 1009220:	8080030b 	ldhu	r2,12(r16)
 1009224:	10801014 	ori	r2,r2,64
 1009228:	8080030d 	sth	r2,12(r16)
 100922c:	8805883a 	mov	r2,r17
 1009230:	dfc11d17 	ldw	ra,1140(sp)
 1009234:	dc811c17 	ldw	r18,1136(sp)
 1009238:	dc411b17 	ldw	r17,1132(sp)
 100923c:	dc011a17 	ldw	r16,1128(sp)
 1009240:	dec11e04 	addi	sp,sp,1144
 1009244:	f800283a 	ret
 1009248:	047fffc4 	movi	r17,-1
 100924c:	003ff106 	br	1009214 <__alt_mem_TCDM+0xff008214>

01009250 <_write_r>:
 1009250:	defffd04 	addi	sp,sp,-12
 1009254:	2805883a 	mov	r2,r5
 1009258:	dc000015 	stw	r16,0(sp)
 100925c:	04004074 	movhi	r16,257
 1009260:	dc400115 	stw	r17,4(sp)
 1009264:	300b883a 	mov	r5,r6
 1009268:	840dce04 	addi	r16,r16,14136
 100926c:	2023883a 	mov	r17,r4
 1009270:	380d883a 	mov	r6,r7
 1009274:	1009883a 	mov	r4,r2
 1009278:	dfc00215 	stw	ra,8(sp)
 100927c:	80000015 	stw	zero,0(r16)
 1009280:	100d81c0 	call	100d81c <write>
 1009284:	00ffffc4 	movi	r3,-1
 1009288:	10c00526 	beq	r2,r3,10092a0 <_write_r+0x50>
 100928c:	dfc00217 	ldw	ra,8(sp)
 1009290:	dc400117 	ldw	r17,4(sp)
 1009294:	dc000017 	ldw	r16,0(sp)
 1009298:	dec00304 	addi	sp,sp,12
 100929c:	f800283a 	ret
 10092a0:	80c00017 	ldw	r3,0(r16)
 10092a4:	183ff926 	beq	r3,zero,100928c <__alt_mem_TCDM+0xff00828c>
 10092a8:	88c00015 	stw	r3,0(r17)
 10092ac:	003ff706 	br	100928c <__alt_mem_TCDM+0xff00828c>

010092b0 <_close_r>:
 10092b0:	defffd04 	addi	sp,sp,-12
 10092b4:	dc000015 	stw	r16,0(sp)
 10092b8:	04004074 	movhi	r16,257
 10092bc:	dc400115 	stw	r17,4(sp)
 10092c0:	840dce04 	addi	r16,r16,14136
 10092c4:	2023883a 	mov	r17,r4
 10092c8:	2809883a 	mov	r4,r5
 10092cc:	dfc00215 	stw	ra,8(sp)
 10092d0:	80000015 	stw	zero,0(r16)
 10092d4:	100ce8c0 	call	100ce8c <close>
 10092d8:	00ffffc4 	movi	r3,-1
 10092dc:	10c00526 	beq	r2,r3,10092f4 <_close_r+0x44>
 10092e0:	dfc00217 	ldw	ra,8(sp)
 10092e4:	dc400117 	ldw	r17,4(sp)
 10092e8:	dc000017 	ldw	r16,0(sp)
 10092ec:	dec00304 	addi	sp,sp,12
 10092f0:	f800283a 	ret
 10092f4:	80c00017 	ldw	r3,0(r16)
 10092f8:	183ff926 	beq	r3,zero,10092e0 <__alt_mem_TCDM+0xff0082e0>
 10092fc:	88c00015 	stw	r3,0(r17)
 1009300:	003ff706 	br	10092e0 <__alt_mem_TCDM+0xff0082e0>

01009304 <_calloc_r>:
 1009304:	298b383a 	mul	r5,r5,r6
 1009308:	defffe04 	addi	sp,sp,-8
 100930c:	dfc00115 	stw	ra,4(sp)
 1009310:	dc000015 	stw	r16,0(sp)
 1009314:	100570c0 	call	100570c <_malloc_r>
 1009318:	10002926 	beq	r2,zero,10093c0 <_calloc_r+0xbc>
 100931c:	11bfff17 	ldw	r6,-4(r2)
 1009320:	1021883a 	mov	r16,r2
 1009324:	00bfff04 	movi	r2,-4
 1009328:	308c703a 	and	r6,r6,r2
 100932c:	00c00904 	movi	r3,36
 1009330:	308d883a 	add	r6,r6,r2
 1009334:	19801636 	bltu	r3,r6,1009390 <_calloc_r+0x8c>
 1009338:	008004c4 	movi	r2,19
 100933c:	11800b2e 	bgeu	r2,r6,100936c <_calloc_r+0x68>
 1009340:	80000015 	stw	zero,0(r16)
 1009344:	80000115 	stw	zero,4(r16)
 1009348:	008006c4 	movi	r2,27
 100934c:	11801a2e 	bgeu	r2,r6,10093b8 <_calloc_r+0xb4>
 1009350:	80000215 	stw	zero,8(r16)
 1009354:	80000315 	stw	zero,12(r16)
 1009358:	30c0151e 	bne	r6,r3,10093b0 <_calloc_r+0xac>
 100935c:	80000415 	stw	zero,16(r16)
 1009360:	80800604 	addi	r2,r16,24
 1009364:	80000515 	stw	zero,20(r16)
 1009368:	00000106 	br	1009370 <_calloc_r+0x6c>
 100936c:	8005883a 	mov	r2,r16
 1009370:	10000015 	stw	zero,0(r2)
 1009374:	10000115 	stw	zero,4(r2)
 1009378:	10000215 	stw	zero,8(r2)
 100937c:	8005883a 	mov	r2,r16
 1009380:	dfc00117 	ldw	ra,4(sp)
 1009384:	dc000017 	ldw	r16,0(sp)
 1009388:	dec00204 	addi	sp,sp,8
 100938c:	f800283a 	ret
 1009390:	000b883a 	mov	r5,zero
 1009394:	8009883a 	mov	r4,r16
 1009398:	10062a00 	call	10062a0 <memset>
 100939c:	8005883a 	mov	r2,r16
 10093a0:	dfc00117 	ldw	ra,4(sp)
 10093a4:	dc000017 	ldw	r16,0(sp)
 10093a8:	dec00204 	addi	sp,sp,8
 10093ac:	f800283a 	ret
 10093b0:	80800404 	addi	r2,r16,16
 10093b4:	003fee06 	br	1009370 <__alt_mem_TCDM+0xff008370>
 10093b8:	80800204 	addi	r2,r16,8
 10093bc:	003fec06 	br	1009370 <__alt_mem_TCDM+0xff008370>
 10093c0:	0005883a 	mov	r2,zero
 10093c4:	003fee06 	br	1009380 <__alt_mem_TCDM+0xff008380>

010093c8 <_fclose_r>:
 10093c8:	28003926 	beq	r5,zero,10094b0 <_fclose_r+0xe8>
 10093cc:	defffc04 	addi	sp,sp,-16
 10093d0:	dc400115 	stw	r17,4(sp)
 10093d4:	dc000015 	stw	r16,0(sp)
 10093d8:	dfc00315 	stw	ra,12(sp)
 10093dc:	dc800215 	stw	r18,8(sp)
 10093e0:	2023883a 	mov	r17,r4
 10093e4:	2821883a 	mov	r16,r5
 10093e8:	20000226 	beq	r4,zero,10093f4 <_fclose_r+0x2c>
 10093ec:	20800e17 	ldw	r2,56(r4)
 10093f0:	10002726 	beq	r2,zero,1009490 <_fclose_r+0xc8>
 10093f4:	8080030f 	ldh	r2,12(r16)
 10093f8:	1000071e 	bne	r2,zero,1009418 <_fclose_r+0x50>
 10093fc:	0005883a 	mov	r2,zero
 1009400:	dfc00317 	ldw	ra,12(sp)
 1009404:	dc800217 	ldw	r18,8(sp)
 1009408:	dc400117 	ldw	r17,4(sp)
 100940c:	dc000017 	ldw	r16,0(sp)
 1009410:	dec00404 	addi	sp,sp,16
 1009414:	f800283a 	ret
 1009418:	800b883a 	mov	r5,r16
 100941c:	8809883a 	mov	r4,r17
 1009420:	10043b40 	call	10043b4 <__sflush_r>
 1009424:	1025883a 	mov	r18,r2
 1009428:	80800b17 	ldw	r2,44(r16)
 100942c:	10000426 	beq	r2,zero,1009440 <_fclose_r+0x78>
 1009430:	81400717 	ldw	r5,28(r16)
 1009434:	8809883a 	mov	r4,r17
 1009438:	103ee83a 	callr	r2
 100943c:	10001616 	blt	r2,zero,1009498 <_fclose_r+0xd0>
 1009440:	8080030b 	ldhu	r2,12(r16)
 1009444:	1080200c 	andi	r2,r2,128
 1009448:	1000151e 	bne	r2,zero,10094a0 <_fclose_r+0xd8>
 100944c:	81400c17 	ldw	r5,48(r16)
 1009450:	28000526 	beq	r5,zero,1009468 <_fclose_r+0xa0>
 1009454:	80801004 	addi	r2,r16,64
 1009458:	28800226 	beq	r5,r2,1009464 <_fclose_r+0x9c>
 100945c:	8809883a 	mov	r4,r17
 1009460:	1004b200 	call	1004b20 <_free_r>
 1009464:	80000c15 	stw	zero,48(r16)
 1009468:	81401117 	ldw	r5,68(r16)
 100946c:	28000326 	beq	r5,zero,100947c <_fclose_r+0xb4>
 1009470:	8809883a 	mov	r4,r17
 1009474:	1004b200 	call	1004b20 <_free_r>
 1009478:	80001115 	stw	zero,68(r16)
 100947c:	10049bc0 	call	10049bc <__sfp_lock_acquire>
 1009480:	8000030d 	sth	zero,12(r16)
 1009484:	10049c00 	call	10049c0 <__sfp_lock_release>
 1009488:	9005883a 	mov	r2,r18
 100948c:	003fdc06 	br	1009400 <__alt_mem_TCDM+0xff008400>
 1009490:	10049ac0 	call	10049ac <__sinit>
 1009494:	003fd706 	br	10093f4 <__alt_mem_TCDM+0xff0083f4>
 1009498:	04bfffc4 	movi	r18,-1
 100949c:	003fe806 	br	1009440 <__alt_mem_TCDM+0xff008440>
 10094a0:	81400417 	ldw	r5,16(r16)
 10094a4:	8809883a 	mov	r4,r17
 10094a8:	1004b200 	call	1004b20 <_free_r>
 10094ac:	003fe706 	br	100944c <__alt_mem_TCDM+0xff00844c>
 10094b0:	0005883a 	mov	r2,zero
 10094b4:	f800283a 	ret

010094b8 <fclose>:
 10094b8:	00804074 	movhi	r2,257
 10094bc:	1086fe04 	addi	r2,r2,7160
 10094c0:	200b883a 	mov	r5,r4
 10094c4:	11000017 	ldw	r4,0(r2)
 10094c8:	10093c81 	jmpi	10093c8 <_fclose_r>

010094cc <__fputwc>:
 10094cc:	defff804 	addi	sp,sp,-32
 10094d0:	dcc00415 	stw	r19,16(sp)
 10094d4:	dc800315 	stw	r18,12(sp)
 10094d8:	dc000115 	stw	r16,4(sp)
 10094dc:	dfc00715 	stw	ra,28(sp)
 10094e0:	dd400615 	stw	r21,24(sp)
 10094e4:	dd000515 	stw	r20,20(sp)
 10094e8:	dc400215 	stw	r17,8(sp)
 10094ec:	2027883a 	mov	r19,r4
 10094f0:	2825883a 	mov	r18,r5
 10094f4:	3021883a 	mov	r16,r6
 10094f8:	10054fc0 	call	10054fc <__locale_mb_cur_max>
 10094fc:	00c00044 	movi	r3,1
 1009500:	10c03e26 	beq	r2,r3,10095fc <__fputwc+0x130>
 1009504:	81c01704 	addi	r7,r16,92
 1009508:	900d883a 	mov	r6,r18
 100950c:	d80b883a 	mov	r5,sp
 1009510:	9809883a 	mov	r4,r19
 1009514:	100999c0 	call	100999c <_wcrtomb_r>
 1009518:	1029883a 	mov	r20,r2
 100951c:	00bfffc4 	movi	r2,-1
 1009520:	a0802026 	beq	r20,r2,10095a4 <__fputwc+0xd8>
 1009524:	d9400003 	ldbu	r5,0(sp)
 1009528:	a0001c26 	beq	r20,zero,100959c <__fputwc+0xd0>
 100952c:	0023883a 	mov	r17,zero
 1009530:	05400284 	movi	r21,10
 1009534:	00000906 	br	100955c <__fputwc+0x90>
 1009538:	80800017 	ldw	r2,0(r16)
 100953c:	11400005 	stb	r5,0(r2)
 1009540:	80c00017 	ldw	r3,0(r16)
 1009544:	18c00044 	addi	r3,r3,1
 1009548:	80c00015 	stw	r3,0(r16)
 100954c:	8c400044 	addi	r17,r17,1
 1009550:	dc45883a 	add	r2,sp,r17
 1009554:	8d00112e 	bgeu	r17,r20,100959c <__fputwc+0xd0>
 1009558:	11400003 	ldbu	r5,0(r2)
 100955c:	80c00217 	ldw	r3,8(r16)
 1009560:	18ffffc4 	addi	r3,r3,-1
 1009564:	80c00215 	stw	r3,8(r16)
 1009568:	183ff30e 	bge	r3,zero,1009538 <__alt_mem_TCDM+0xff008538>
 100956c:	80800617 	ldw	r2,24(r16)
 1009570:	18801916 	blt	r3,r2,10095d8 <__fputwc+0x10c>
 1009574:	80800017 	ldw	r2,0(r16)
 1009578:	11400005 	stb	r5,0(r2)
 100957c:	80800017 	ldw	r2,0(r16)
 1009580:	10c00003 	ldbu	r3,0(r2)
 1009584:	10800044 	addi	r2,r2,1
 1009588:	1d402326 	beq	r3,r21,1009618 <__fputwc+0x14c>
 100958c:	80800015 	stw	r2,0(r16)
 1009590:	8c400044 	addi	r17,r17,1
 1009594:	dc45883a 	add	r2,sp,r17
 1009598:	8d3fef36 	bltu	r17,r20,1009558 <__alt_mem_TCDM+0xff008558>
 100959c:	9005883a 	mov	r2,r18
 10095a0:	00000406 	br	10095b4 <__fputwc+0xe8>
 10095a4:	80c0030b 	ldhu	r3,12(r16)
 10095a8:	a005883a 	mov	r2,r20
 10095ac:	18c01014 	ori	r3,r3,64
 10095b0:	80c0030d 	sth	r3,12(r16)
 10095b4:	dfc00717 	ldw	ra,28(sp)
 10095b8:	dd400617 	ldw	r21,24(sp)
 10095bc:	dd000517 	ldw	r20,20(sp)
 10095c0:	dcc00417 	ldw	r19,16(sp)
 10095c4:	dc800317 	ldw	r18,12(sp)
 10095c8:	dc400217 	ldw	r17,8(sp)
 10095cc:	dc000117 	ldw	r16,4(sp)
 10095d0:	dec00804 	addi	sp,sp,32
 10095d4:	f800283a 	ret
 10095d8:	800d883a 	mov	r6,r16
 10095dc:	29403fcc 	andi	r5,r5,255
 10095e0:	9809883a 	mov	r4,r19
 10095e4:	10098440 	call	1009844 <__swbuf_r>
 10095e8:	10bfffe0 	cmpeqi	r2,r2,-1
 10095ec:	10803fcc 	andi	r2,r2,255
 10095f0:	103fd626 	beq	r2,zero,100954c <__alt_mem_TCDM+0xff00854c>
 10095f4:	00bfffc4 	movi	r2,-1
 10095f8:	003fee06 	br	10095b4 <__alt_mem_TCDM+0xff0085b4>
 10095fc:	90ffffc4 	addi	r3,r18,-1
 1009600:	01003f84 	movi	r4,254
 1009604:	20ffbf36 	bltu	r4,r3,1009504 <__alt_mem_TCDM+0xff008504>
 1009608:	900b883a 	mov	r5,r18
 100960c:	dc800005 	stb	r18,0(sp)
 1009610:	1029883a 	mov	r20,r2
 1009614:	003fc506 	br	100952c <__alt_mem_TCDM+0xff00852c>
 1009618:	800d883a 	mov	r6,r16
 100961c:	a80b883a 	mov	r5,r21
 1009620:	9809883a 	mov	r4,r19
 1009624:	10098440 	call	1009844 <__swbuf_r>
 1009628:	10bfffe0 	cmpeqi	r2,r2,-1
 100962c:	003fef06 	br	10095ec <__alt_mem_TCDM+0xff0085ec>

01009630 <_fputwc_r>:
 1009630:	3080030b 	ldhu	r2,12(r6)
 1009634:	10c8000c 	andi	r3,r2,8192
 1009638:	1800051e 	bne	r3,zero,1009650 <_fputwc_r+0x20>
 100963c:	30c01917 	ldw	r3,100(r6)
 1009640:	10880014 	ori	r2,r2,8192
 1009644:	3080030d 	sth	r2,12(r6)
 1009648:	18880014 	ori	r2,r3,8192
 100964c:	30801915 	stw	r2,100(r6)
 1009650:	10094cc1 	jmpi	10094cc <__fputwc>

01009654 <fputwc>:
 1009654:	00804074 	movhi	r2,257
 1009658:	defffc04 	addi	sp,sp,-16
 100965c:	1086fe04 	addi	r2,r2,7160
 1009660:	dc000115 	stw	r16,4(sp)
 1009664:	14000017 	ldw	r16,0(r2)
 1009668:	dc400215 	stw	r17,8(sp)
 100966c:	dfc00315 	stw	ra,12(sp)
 1009670:	2023883a 	mov	r17,r4
 1009674:	80000226 	beq	r16,zero,1009680 <fputwc+0x2c>
 1009678:	80800e17 	ldw	r2,56(r16)
 100967c:	10001026 	beq	r2,zero,10096c0 <fputwc+0x6c>
 1009680:	2880030b 	ldhu	r2,12(r5)
 1009684:	10c8000c 	andi	r3,r2,8192
 1009688:	1800051e 	bne	r3,zero,10096a0 <fputwc+0x4c>
 100968c:	28c01917 	ldw	r3,100(r5)
 1009690:	10880014 	ori	r2,r2,8192
 1009694:	2880030d 	sth	r2,12(r5)
 1009698:	18880014 	ori	r2,r3,8192
 100969c:	28801915 	stw	r2,100(r5)
 10096a0:	280d883a 	mov	r6,r5
 10096a4:	8009883a 	mov	r4,r16
 10096a8:	880b883a 	mov	r5,r17
 10096ac:	dfc00317 	ldw	ra,12(sp)
 10096b0:	dc400217 	ldw	r17,8(sp)
 10096b4:	dc000117 	ldw	r16,4(sp)
 10096b8:	dec00404 	addi	sp,sp,16
 10096bc:	10094cc1 	jmpi	10094cc <__fputwc>
 10096c0:	8009883a 	mov	r4,r16
 10096c4:	d9400015 	stw	r5,0(sp)
 10096c8:	10049ac0 	call	10049ac <__sinit>
 10096cc:	d9400017 	ldw	r5,0(sp)
 10096d0:	003feb06 	br	1009680 <__alt_mem_TCDM+0xff008680>

010096d4 <_fstat_r>:
 10096d4:	defffd04 	addi	sp,sp,-12
 10096d8:	2805883a 	mov	r2,r5
 10096dc:	dc000015 	stw	r16,0(sp)
 10096e0:	04004074 	movhi	r16,257
 10096e4:	dc400115 	stw	r17,4(sp)
 10096e8:	840dce04 	addi	r16,r16,14136
 10096ec:	2023883a 	mov	r17,r4
 10096f0:	300b883a 	mov	r5,r6
 10096f4:	1009883a 	mov	r4,r2
 10096f8:	dfc00215 	stw	ra,8(sp)
 10096fc:	80000015 	stw	zero,0(r16)
 1009700:	100cfc40 	call	100cfc4 <fstat>
 1009704:	00ffffc4 	movi	r3,-1
 1009708:	10c00526 	beq	r2,r3,1009720 <_fstat_r+0x4c>
 100970c:	dfc00217 	ldw	ra,8(sp)
 1009710:	dc400117 	ldw	r17,4(sp)
 1009714:	dc000017 	ldw	r16,0(sp)
 1009718:	dec00304 	addi	sp,sp,12
 100971c:	f800283a 	ret
 1009720:	80c00017 	ldw	r3,0(r16)
 1009724:	183ff926 	beq	r3,zero,100970c <__alt_mem_TCDM+0xff00870c>
 1009728:	88c00015 	stw	r3,0(r17)
 100972c:	003ff706 	br	100970c <__alt_mem_TCDM+0xff00870c>

01009730 <_isatty_r>:
 1009730:	defffd04 	addi	sp,sp,-12
 1009734:	dc000015 	stw	r16,0(sp)
 1009738:	04004074 	movhi	r16,257
 100973c:	dc400115 	stw	r17,4(sp)
 1009740:	840dce04 	addi	r16,r16,14136
 1009744:	2023883a 	mov	r17,r4
 1009748:	2809883a 	mov	r4,r5
 100974c:	dfc00215 	stw	ra,8(sp)
 1009750:	80000015 	stw	zero,0(r16)
 1009754:	100d2300 	call	100d230 <isatty>
 1009758:	00ffffc4 	movi	r3,-1
 100975c:	10c00526 	beq	r2,r3,1009774 <_isatty_r+0x44>
 1009760:	dfc00217 	ldw	ra,8(sp)
 1009764:	dc400117 	ldw	r17,4(sp)
 1009768:	dc000017 	ldw	r16,0(sp)
 100976c:	dec00304 	addi	sp,sp,12
 1009770:	f800283a 	ret
 1009774:	80c00017 	ldw	r3,0(r16)
 1009778:	183ff926 	beq	r3,zero,1009760 <__alt_mem_TCDM+0xff008760>
 100977c:	88c00015 	stw	r3,0(r17)
 1009780:	003ff706 	br	1009760 <__alt_mem_TCDM+0xff008760>

01009784 <_lseek_r>:
 1009784:	defffd04 	addi	sp,sp,-12
 1009788:	2805883a 	mov	r2,r5
 100978c:	dc000015 	stw	r16,0(sp)
 1009790:	04004074 	movhi	r16,257
 1009794:	dc400115 	stw	r17,4(sp)
 1009798:	300b883a 	mov	r5,r6
 100979c:	840dce04 	addi	r16,r16,14136
 10097a0:	2023883a 	mov	r17,r4
 10097a4:	380d883a 	mov	r6,r7
 10097a8:	1009883a 	mov	r4,r2
 10097ac:	dfc00215 	stw	ra,8(sp)
 10097b0:	80000015 	stw	zero,0(r16)
 10097b4:	100d3fc0 	call	100d3fc <lseek>
 10097b8:	00ffffc4 	movi	r3,-1
 10097bc:	10c00526 	beq	r2,r3,10097d4 <_lseek_r+0x50>
 10097c0:	dfc00217 	ldw	ra,8(sp)
 10097c4:	dc400117 	ldw	r17,4(sp)
 10097c8:	dc000017 	ldw	r16,0(sp)
 10097cc:	dec00304 	addi	sp,sp,12
 10097d0:	f800283a 	ret
 10097d4:	80c00017 	ldw	r3,0(r16)
 10097d8:	183ff926 	beq	r3,zero,10097c0 <__alt_mem_TCDM+0xff0087c0>
 10097dc:	88c00015 	stw	r3,0(r17)
 10097e0:	003ff706 	br	10097c0 <__alt_mem_TCDM+0xff0087c0>

010097e4 <_read_r>:
 10097e4:	defffd04 	addi	sp,sp,-12
 10097e8:	2805883a 	mov	r2,r5
 10097ec:	dc000015 	stw	r16,0(sp)
 10097f0:	04004074 	movhi	r16,257
 10097f4:	dc400115 	stw	r17,4(sp)
 10097f8:	300b883a 	mov	r5,r6
 10097fc:	840dce04 	addi	r16,r16,14136
 1009800:	2023883a 	mov	r17,r4
 1009804:	380d883a 	mov	r6,r7
 1009808:	1009883a 	mov	r4,r2
 100980c:	dfc00215 	stw	ra,8(sp)
 1009810:	80000015 	stw	zero,0(r16)
 1009814:	100d5d00 	call	100d5d0 <read>
 1009818:	00ffffc4 	movi	r3,-1
 100981c:	10c00526 	beq	r2,r3,1009834 <_read_r+0x50>
 1009820:	dfc00217 	ldw	ra,8(sp)
 1009824:	dc400117 	ldw	r17,4(sp)
 1009828:	dc000017 	ldw	r16,0(sp)
 100982c:	dec00304 	addi	sp,sp,12
 1009830:	f800283a 	ret
 1009834:	80c00017 	ldw	r3,0(r16)
 1009838:	183ff926 	beq	r3,zero,1009820 <__alt_mem_TCDM+0xff008820>
 100983c:	88c00015 	stw	r3,0(r17)
 1009840:	003ff706 	br	1009820 <__alt_mem_TCDM+0xff008820>

01009844 <__swbuf_r>:
 1009844:	defffb04 	addi	sp,sp,-20
 1009848:	dcc00315 	stw	r19,12(sp)
 100984c:	dc800215 	stw	r18,8(sp)
 1009850:	dc000015 	stw	r16,0(sp)
 1009854:	dfc00415 	stw	ra,16(sp)
 1009858:	dc400115 	stw	r17,4(sp)
 100985c:	2025883a 	mov	r18,r4
 1009860:	2827883a 	mov	r19,r5
 1009864:	3021883a 	mov	r16,r6
 1009868:	20000226 	beq	r4,zero,1009874 <__swbuf_r+0x30>
 100986c:	20800e17 	ldw	r2,56(r4)
 1009870:	10004226 	beq	r2,zero,100997c <__swbuf_r+0x138>
 1009874:	80800617 	ldw	r2,24(r16)
 1009878:	8100030b 	ldhu	r4,12(r16)
 100987c:	80800215 	stw	r2,8(r16)
 1009880:	2080020c 	andi	r2,r4,8
 1009884:	10003626 	beq	r2,zero,1009960 <__swbuf_r+0x11c>
 1009888:	80c00417 	ldw	r3,16(r16)
 100988c:	18003426 	beq	r3,zero,1009960 <__swbuf_r+0x11c>
 1009890:	2088000c 	andi	r2,r4,8192
 1009894:	9c403fcc 	andi	r17,r19,255
 1009898:	10001a26 	beq	r2,zero,1009904 <__swbuf_r+0xc0>
 100989c:	80800017 	ldw	r2,0(r16)
 10098a0:	81000517 	ldw	r4,20(r16)
 10098a4:	10c7c83a 	sub	r3,r2,r3
 10098a8:	1900200e 	bge	r3,r4,100992c <__swbuf_r+0xe8>
 10098ac:	18c00044 	addi	r3,r3,1
 10098b0:	81000217 	ldw	r4,8(r16)
 10098b4:	11400044 	addi	r5,r2,1
 10098b8:	81400015 	stw	r5,0(r16)
 10098bc:	213fffc4 	addi	r4,r4,-1
 10098c0:	81000215 	stw	r4,8(r16)
 10098c4:	14c00005 	stb	r19,0(r2)
 10098c8:	80800517 	ldw	r2,20(r16)
 10098cc:	10c01e26 	beq	r2,r3,1009948 <__swbuf_r+0x104>
 10098d0:	8080030b 	ldhu	r2,12(r16)
 10098d4:	1080004c 	andi	r2,r2,1
 10098d8:	10000226 	beq	r2,zero,10098e4 <__swbuf_r+0xa0>
 10098dc:	00800284 	movi	r2,10
 10098e0:	88801926 	beq	r17,r2,1009948 <__swbuf_r+0x104>
 10098e4:	8805883a 	mov	r2,r17
 10098e8:	dfc00417 	ldw	ra,16(sp)
 10098ec:	dcc00317 	ldw	r19,12(sp)
 10098f0:	dc800217 	ldw	r18,8(sp)
 10098f4:	dc400117 	ldw	r17,4(sp)
 10098f8:	dc000017 	ldw	r16,0(sp)
 10098fc:	dec00504 	addi	sp,sp,20
 1009900:	f800283a 	ret
 1009904:	81401917 	ldw	r5,100(r16)
 1009908:	00b7ffc4 	movi	r2,-8193
 100990c:	21080014 	ori	r4,r4,8192
 1009910:	2884703a 	and	r2,r5,r2
 1009914:	80801915 	stw	r2,100(r16)
 1009918:	80800017 	ldw	r2,0(r16)
 100991c:	8100030d 	sth	r4,12(r16)
 1009920:	81000517 	ldw	r4,20(r16)
 1009924:	10c7c83a 	sub	r3,r2,r3
 1009928:	193fe016 	blt	r3,r4,10098ac <__alt_mem_TCDM+0xff0088ac>
 100992c:	800b883a 	mov	r5,r16
 1009930:	9009883a 	mov	r4,r18
 1009934:	10045d00 	call	10045d0 <_fflush_r>
 1009938:	1000071e 	bne	r2,zero,1009958 <__swbuf_r+0x114>
 100993c:	80800017 	ldw	r2,0(r16)
 1009940:	00c00044 	movi	r3,1
 1009944:	003fda06 	br	10098b0 <__alt_mem_TCDM+0xff0088b0>
 1009948:	800b883a 	mov	r5,r16
 100994c:	9009883a 	mov	r4,r18
 1009950:	10045d00 	call	10045d0 <_fflush_r>
 1009954:	103fe326 	beq	r2,zero,10098e4 <__alt_mem_TCDM+0xff0088e4>
 1009958:	00bfffc4 	movi	r2,-1
 100995c:	003fe206 	br	10098e8 <__alt_mem_TCDM+0xff0088e8>
 1009960:	800b883a 	mov	r5,r16
 1009964:	9009883a 	mov	r4,r18
 1009968:	10029d80 	call	10029d8 <__swsetup_r>
 100996c:	103ffa1e 	bne	r2,zero,1009958 <__alt_mem_TCDM+0xff008958>
 1009970:	8100030b 	ldhu	r4,12(r16)
 1009974:	80c00417 	ldw	r3,16(r16)
 1009978:	003fc506 	br	1009890 <__alt_mem_TCDM+0xff008890>
 100997c:	10049ac0 	call	10049ac <__sinit>
 1009980:	003fbc06 	br	1009874 <__alt_mem_TCDM+0xff008874>

01009984 <__swbuf>:
 1009984:	00804074 	movhi	r2,257
 1009988:	1086fe04 	addi	r2,r2,7160
 100998c:	280d883a 	mov	r6,r5
 1009990:	200b883a 	mov	r5,r4
 1009994:	11000017 	ldw	r4,0(r2)
 1009998:	10098441 	jmpi	1009844 <__swbuf_r>

0100999c <_wcrtomb_r>:
 100999c:	defff604 	addi	sp,sp,-40
 10099a0:	00804074 	movhi	r2,257
 10099a4:	dc800815 	stw	r18,32(sp)
 10099a8:	dc400715 	stw	r17,28(sp)
 10099ac:	dc000615 	stw	r16,24(sp)
 10099b0:	10870204 	addi	r2,r2,7176
 10099b4:	dfc00915 	stw	ra,36(sp)
 10099b8:	2021883a 	mov	r16,r4
 10099bc:	3823883a 	mov	r17,r7
 10099c0:	14800017 	ldw	r18,0(r2)
 10099c4:	28001426 	beq	r5,zero,1009a18 <_wcrtomb_r+0x7c>
 10099c8:	d9400415 	stw	r5,16(sp)
 10099cc:	d9800515 	stw	r6,20(sp)
 10099d0:	10054f00 	call	10054f0 <__locale_charset>
 10099d4:	d9800517 	ldw	r6,20(sp)
 10099d8:	d9400417 	ldw	r5,16(sp)
 10099dc:	100f883a 	mov	r7,r2
 10099e0:	dc400015 	stw	r17,0(sp)
 10099e4:	8009883a 	mov	r4,r16
 10099e8:	903ee83a 	callr	r18
 10099ec:	00ffffc4 	movi	r3,-1
 10099f0:	10c0031e 	bne	r2,r3,1009a00 <_wcrtomb_r+0x64>
 10099f4:	88000015 	stw	zero,0(r17)
 10099f8:	00c02284 	movi	r3,138
 10099fc:	80c00015 	stw	r3,0(r16)
 1009a00:	dfc00917 	ldw	ra,36(sp)
 1009a04:	dc800817 	ldw	r18,32(sp)
 1009a08:	dc400717 	ldw	r17,28(sp)
 1009a0c:	dc000617 	ldw	r16,24(sp)
 1009a10:	dec00a04 	addi	sp,sp,40
 1009a14:	f800283a 	ret
 1009a18:	10054f00 	call	10054f0 <__locale_charset>
 1009a1c:	100f883a 	mov	r7,r2
 1009a20:	dc400015 	stw	r17,0(sp)
 1009a24:	000d883a 	mov	r6,zero
 1009a28:	d9400104 	addi	r5,sp,4
 1009a2c:	8009883a 	mov	r4,r16
 1009a30:	903ee83a 	callr	r18
 1009a34:	003fed06 	br	10099ec <__alt_mem_TCDM+0xff0089ec>

01009a38 <wcrtomb>:
 1009a38:	defff604 	addi	sp,sp,-40
 1009a3c:	00804074 	movhi	r2,257
 1009a40:	dc800615 	stw	r18,24(sp)
 1009a44:	dc400515 	stw	r17,20(sp)
 1009a48:	1086fe04 	addi	r2,r2,7160
 1009a4c:	dfc00915 	stw	ra,36(sp)
 1009a50:	dd000815 	stw	r20,32(sp)
 1009a54:	dcc00715 	stw	r19,28(sp)
 1009a58:	dc000415 	stw	r16,16(sp)
 1009a5c:	3025883a 	mov	r18,r6
 1009a60:	14400017 	ldw	r17,0(r2)
 1009a64:	20001926 	beq	r4,zero,1009acc <wcrtomb+0x94>
 1009a68:	00804074 	movhi	r2,257
 1009a6c:	10870204 	addi	r2,r2,7176
 1009a70:	15000017 	ldw	r20,0(r2)
 1009a74:	2021883a 	mov	r16,r4
 1009a78:	2827883a 	mov	r19,r5
 1009a7c:	10054f00 	call	10054f0 <__locale_charset>
 1009a80:	100f883a 	mov	r7,r2
 1009a84:	dc800015 	stw	r18,0(sp)
 1009a88:	980d883a 	mov	r6,r19
 1009a8c:	800b883a 	mov	r5,r16
 1009a90:	8809883a 	mov	r4,r17
 1009a94:	a03ee83a 	callr	r20
 1009a98:	00ffffc4 	movi	r3,-1
 1009a9c:	10c0031e 	bne	r2,r3,1009aac <wcrtomb+0x74>
 1009aa0:	90000015 	stw	zero,0(r18)
 1009aa4:	00c02284 	movi	r3,138
 1009aa8:	88c00015 	stw	r3,0(r17)
 1009aac:	dfc00917 	ldw	ra,36(sp)
 1009ab0:	dd000817 	ldw	r20,32(sp)
 1009ab4:	dcc00717 	ldw	r19,28(sp)
 1009ab8:	dc800617 	ldw	r18,24(sp)
 1009abc:	dc400517 	ldw	r17,20(sp)
 1009ac0:	dc000417 	ldw	r16,16(sp)
 1009ac4:	dec00a04 	addi	sp,sp,40
 1009ac8:	f800283a 	ret
 1009acc:	00804074 	movhi	r2,257
 1009ad0:	10870204 	addi	r2,r2,7176
 1009ad4:	14000017 	ldw	r16,0(r2)
 1009ad8:	10054f00 	call	10054f0 <__locale_charset>
 1009adc:	100f883a 	mov	r7,r2
 1009ae0:	dc800015 	stw	r18,0(sp)
 1009ae4:	000d883a 	mov	r6,zero
 1009ae8:	d9400104 	addi	r5,sp,4
 1009aec:	8809883a 	mov	r4,r17
 1009af0:	803ee83a 	callr	r16
 1009af4:	003fe806 	br	1009a98 <__alt_mem_TCDM+0xff008a98>

01009af8 <__ascii_wctomb>:
 1009af8:	28000526 	beq	r5,zero,1009b10 <__ascii_wctomb+0x18>
 1009afc:	00803fc4 	movi	r2,255
 1009b00:	11800536 	bltu	r2,r6,1009b18 <__ascii_wctomb+0x20>
 1009b04:	29800005 	stb	r6,0(r5)
 1009b08:	00800044 	movi	r2,1
 1009b0c:	f800283a 	ret
 1009b10:	0005883a 	mov	r2,zero
 1009b14:	f800283a 	ret
 1009b18:	00802284 	movi	r2,138
 1009b1c:	20800015 	stw	r2,0(r4)
 1009b20:	00bfffc4 	movi	r2,-1
 1009b24:	f800283a 	ret

01009b28 <_wctomb_r>:
 1009b28:	00804074 	movhi	r2,257
 1009b2c:	defff904 	addi	sp,sp,-28
 1009b30:	10870204 	addi	r2,r2,7176
 1009b34:	dfc00615 	stw	ra,24(sp)
 1009b38:	dc400515 	stw	r17,20(sp)
 1009b3c:	dc000415 	stw	r16,16(sp)
 1009b40:	3823883a 	mov	r17,r7
 1009b44:	14000017 	ldw	r16,0(r2)
 1009b48:	d9000115 	stw	r4,4(sp)
 1009b4c:	d9400215 	stw	r5,8(sp)
 1009b50:	d9800315 	stw	r6,12(sp)
 1009b54:	10054f00 	call	10054f0 <__locale_charset>
 1009b58:	d9800317 	ldw	r6,12(sp)
 1009b5c:	d9400217 	ldw	r5,8(sp)
 1009b60:	d9000117 	ldw	r4,4(sp)
 1009b64:	100f883a 	mov	r7,r2
 1009b68:	dc400015 	stw	r17,0(sp)
 1009b6c:	803ee83a 	callr	r16
 1009b70:	dfc00617 	ldw	ra,24(sp)
 1009b74:	dc400517 	ldw	r17,20(sp)
 1009b78:	dc000417 	ldw	r16,16(sp)
 1009b7c:	dec00704 	addi	sp,sp,28
 1009b80:	f800283a 	ret

01009b84 <__udivdi3>:
 1009b84:	defff504 	addi	sp,sp,-44
 1009b88:	dcc00415 	stw	r19,16(sp)
 1009b8c:	dc000115 	stw	r16,4(sp)
 1009b90:	dfc00a15 	stw	ra,40(sp)
 1009b94:	df000915 	stw	fp,36(sp)
 1009b98:	ddc00815 	stw	r23,32(sp)
 1009b9c:	dd800715 	stw	r22,28(sp)
 1009ba0:	dd400615 	stw	r21,24(sp)
 1009ba4:	dd000515 	stw	r20,20(sp)
 1009ba8:	dc800315 	stw	r18,12(sp)
 1009bac:	dc400215 	stw	r17,8(sp)
 1009bb0:	2027883a 	mov	r19,r4
 1009bb4:	2821883a 	mov	r16,r5
 1009bb8:	3800411e 	bne	r7,zero,1009cc0 <__udivdi3+0x13c>
 1009bbc:	3023883a 	mov	r17,r6
 1009bc0:	2025883a 	mov	r18,r4
 1009bc4:	2980522e 	bgeu	r5,r6,1009d10 <__udivdi3+0x18c>
 1009bc8:	00bfffd4 	movui	r2,65535
 1009bcc:	282d883a 	mov	r22,r5
 1009bd0:	1180a836 	bltu	r2,r6,1009e74 <__udivdi3+0x2f0>
 1009bd4:	00803fc4 	movi	r2,255
 1009bd8:	1185803a 	cmpltu	r2,r2,r6
 1009bdc:	100490fa 	slli	r2,r2,3
 1009be0:	3086d83a 	srl	r3,r6,r2
 1009be4:	01004074 	movhi	r4,257
 1009be8:	213fc704 	addi	r4,r4,-228
 1009bec:	20c7883a 	add	r3,r4,r3
 1009bf0:	18c00003 	ldbu	r3,0(r3)
 1009bf4:	1885883a 	add	r2,r3,r2
 1009bf8:	00c00804 	movi	r3,32
 1009bfc:	1887c83a 	sub	r3,r3,r2
 1009c00:	18000526 	beq	r3,zero,1009c18 <__udivdi3+0x94>
 1009c04:	80e0983a 	sll	r16,r16,r3
 1009c08:	9884d83a 	srl	r2,r19,r2
 1009c0c:	30e2983a 	sll	r17,r6,r3
 1009c10:	98e4983a 	sll	r18,r19,r3
 1009c14:	142cb03a 	or	r22,r2,r16
 1009c18:	882ad43a 	srli	r21,r17,16
 1009c1c:	b009883a 	mov	r4,r22
 1009c20:	8d3fffcc 	andi	r20,r17,65535
 1009c24:	a80b883a 	mov	r5,r21
 1009c28:	100a7900 	call	100a790 <__umodsi3>
 1009c2c:	b009883a 	mov	r4,r22
 1009c30:	a80b883a 	mov	r5,r21
 1009c34:	1027883a 	mov	r19,r2
 1009c38:	100a72c0 	call	100a72c <__udivsi3>
 1009c3c:	102d883a 	mov	r22,r2
 1009c40:	9826943a 	slli	r19,r19,16
 1009c44:	9004d43a 	srli	r2,r18,16
 1009c48:	a5a1383a 	mul	r16,r20,r22
 1009c4c:	14c4b03a 	or	r2,r2,r19
 1009c50:	1400052e 	bgeu	r2,r16,1009c68 <__udivdi3+0xe4>
 1009c54:	1445883a 	add	r2,r2,r17
 1009c58:	b0ffffc4 	addi	r3,r22,-1
 1009c5c:	14400136 	bltu	r2,r17,1009c64 <__udivdi3+0xe0>
 1009c60:	14012336 	bltu	r2,r16,100a0f0 <__udivdi3+0x56c>
 1009c64:	182d883a 	mov	r22,r3
 1009c68:	1421c83a 	sub	r16,r2,r16
 1009c6c:	a80b883a 	mov	r5,r21
 1009c70:	8009883a 	mov	r4,r16
 1009c74:	100a7900 	call	100a790 <__umodsi3>
 1009c78:	1027883a 	mov	r19,r2
 1009c7c:	a80b883a 	mov	r5,r21
 1009c80:	8009883a 	mov	r4,r16
 1009c84:	100a72c0 	call	100a72c <__udivsi3>
 1009c88:	9826943a 	slli	r19,r19,16
 1009c8c:	a0a9383a 	mul	r20,r20,r2
 1009c90:	94bfffcc 	andi	r18,r18,65535
 1009c94:	94e4b03a 	or	r18,r18,r19
 1009c98:	9500052e 	bgeu	r18,r20,1009cb0 <__udivdi3+0x12c>
 1009c9c:	8ca5883a 	add	r18,r17,r18
 1009ca0:	10ffffc4 	addi	r3,r2,-1
 1009ca4:	9440f136 	bltu	r18,r17,100a06c <__udivdi3+0x4e8>
 1009ca8:	9500f02e 	bgeu	r18,r20,100a06c <__udivdi3+0x4e8>
 1009cac:	10bfff84 	addi	r2,r2,-2
 1009cb0:	b00c943a 	slli	r6,r22,16
 1009cb4:	0007883a 	mov	r3,zero
 1009cb8:	3084b03a 	or	r2,r6,r2
 1009cbc:	00005906 	br	1009e24 <__udivdi3+0x2a0>
 1009cc0:	29c05636 	bltu	r5,r7,1009e1c <__udivdi3+0x298>
 1009cc4:	00bfffd4 	movui	r2,65535
 1009cc8:	11c0622e 	bgeu	r2,r7,1009e54 <__udivdi3+0x2d0>
 1009ccc:	00804034 	movhi	r2,256
 1009cd0:	10bfffc4 	addi	r2,r2,-1
 1009cd4:	11c0ee36 	bltu	r2,r7,100a090 <__udivdi3+0x50c>
 1009cd8:	00800404 	movi	r2,16
 1009cdc:	3886d83a 	srl	r3,r7,r2
 1009ce0:	01004074 	movhi	r4,257
 1009ce4:	213fc704 	addi	r4,r4,-228
 1009ce8:	20c7883a 	add	r3,r4,r3
 1009cec:	18c00003 	ldbu	r3,0(r3)
 1009cf0:	05400804 	movi	r21,32
 1009cf4:	1885883a 	add	r2,r3,r2
 1009cf8:	a8abc83a 	sub	r21,r21,r2
 1009cfc:	a800621e 	bne	r21,zero,1009e88 <__udivdi3+0x304>
 1009d00:	3c00e936 	bltu	r7,r16,100a0a8 <__udivdi3+0x524>
 1009d04:	9985403a 	cmpgeu	r2,r19,r6
 1009d08:	0007883a 	mov	r3,zero
 1009d0c:	00004506 	br	1009e24 <__udivdi3+0x2a0>
 1009d10:	3000041e 	bne	r6,zero,1009d24 <__udivdi3+0x1a0>
 1009d14:	000b883a 	mov	r5,zero
 1009d18:	01000044 	movi	r4,1
 1009d1c:	100a72c0 	call	100a72c <__udivsi3>
 1009d20:	1023883a 	mov	r17,r2
 1009d24:	00bfffd4 	movui	r2,65535
 1009d28:	14404e2e 	bgeu	r2,r17,1009e64 <__udivdi3+0x2e0>
 1009d2c:	00804034 	movhi	r2,256
 1009d30:	10bfffc4 	addi	r2,r2,-1
 1009d34:	1440d836 	bltu	r2,r17,100a098 <__udivdi3+0x514>
 1009d38:	00800404 	movi	r2,16
 1009d3c:	8886d83a 	srl	r3,r17,r2
 1009d40:	01004074 	movhi	r4,257
 1009d44:	213fc704 	addi	r4,r4,-228
 1009d48:	20c7883a 	add	r3,r4,r3
 1009d4c:	18c00003 	ldbu	r3,0(r3)
 1009d50:	1885883a 	add	r2,r3,r2
 1009d54:	00c00804 	movi	r3,32
 1009d58:	1887c83a 	sub	r3,r3,r2
 1009d5c:	18008f1e 	bne	r3,zero,1009f9c <__udivdi3+0x418>
 1009d60:	882ad43a 	srli	r21,r17,16
 1009d64:	8461c83a 	sub	r16,r16,r17
 1009d68:	8d3fffcc 	andi	r20,r17,65535
 1009d6c:	00c00044 	movi	r3,1
 1009d70:	8009883a 	mov	r4,r16
 1009d74:	a80b883a 	mov	r5,r21
 1009d78:	d8c00015 	stw	r3,0(sp)
 1009d7c:	100a7900 	call	100a790 <__umodsi3>
 1009d80:	8009883a 	mov	r4,r16
 1009d84:	a80b883a 	mov	r5,r21
 1009d88:	1027883a 	mov	r19,r2
 1009d8c:	100a72c0 	call	100a72c <__udivsi3>
 1009d90:	9826943a 	slli	r19,r19,16
 1009d94:	9008d43a 	srli	r4,r18,16
 1009d98:	1521383a 	mul	r16,r2,r20
 1009d9c:	102d883a 	mov	r22,r2
 1009da0:	24c8b03a 	or	r4,r4,r19
 1009da4:	d8c00017 	ldw	r3,0(sp)
 1009da8:	2400052e 	bgeu	r4,r16,1009dc0 <__udivdi3+0x23c>
 1009dac:	2449883a 	add	r4,r4,r17
 1009db0:	b0bfffc4 	addi	r2,r22,-1
 1009db4:	24400136 	bltu	r4,r17,1009dbc <__udivdi3+0x238>
 1009db8:	2400ca36 	bltu	r4,r16,100a0e4 <__udivdi3+0x560>
 1009dbc:	102d883a 	mov	r22,r2
 1009dc0:	2421c83a 	sub	r16,r4,r16
 1009dc4:	a80b883a 	mov	r5,r21
 1009dc8:	8009883a 	mov	r4,r16
 1009dcc:	d8c00015 	stw	r3,0(sp)
 1009dd0:	100a7900 	call	100a790 <__umodsi3>
 1009dd4:	1027883a 	mov	r19,r2
 1009dd8:	a80b883a 	mov	r5,r21
 1009ddc:	8009883a 	mov	r4,r16
 1009de0:	100a72c0 	call	100a72c <__udivsi3>
 1009de4:	9826943a 	slli	r19,r19,16
 1009de8:	1529383a 	mul	r20,r2,r20
 1009dec:	94bfffcc 	andi	r18,r18,65535
 1009df0:	94e4b03a 	or	r18,r18,r19
 1009df4:	d8c00017 	ldw	r3,0(sp)
 1009df8:	9500052e 	bgeu	r18,r20,1009e10 <__udivdi3+0x28c>
 1009dfc:	8ca5883a 	add	r18,r17,r18
 1009e00:	113fffc4 	addi	r4,r2,-1
 1009e04:	94409736 	bltu	r18,r17,100a064 <__udivdi3+0x4e0>
 1009e08:	9500962e 	bgeu	r18,r20,100a064 <__udivdi3+0x4e0>
 1009e0c:	10bfff84 	addi	r2,r2,-2
 1009e10:	b00c943a 	slli	r6,r22,16
 1009e14:	3084b03a 	or	r2,r6,r2
 1009e18:	00000206 	br	1009e24 <__udivdi3+0x2a0>
 1009e1c:	0007883a 	mov	r3,zero
 1009e20:	0005883a 	mov	r2,zero
 1009e24:	dfc00a17 	ldw	ra,40(sp)
 1009e28:	df000917 	ldw	fp,36(sp)
 1009e2c:	ddc00817 	ldw	r23,32(sp)
 1009e30:	dd800717 	ldw	r22,28(sp)
 1009e34:	dd400617 	ldw	r21,24(sp)
 1009e38:	dd000517 	ldw	r20,20(sp)
 1009e3c:	dcc00417 	ldw	r19,16(sp)
 1009e40:	dc800317 	ldw	r18,12(sp)
 1009e44:	dc400217 	ldw	r17,8(sp)
 1009e48:	dc000117 	ldw	r16,4(sp)
 1009e4c:	dec00b04 	addi	sp,sp,44
 1009e50:	f800283a 	ret
 1009e54:	00803fc4 	movi	r2,255
 1009e58:	11c5803a 	cmpltu	r2,r2,r7
 1009e5c:	100490fa 	slli	r2,r2,3
 1009e60:	003f9e06 	br	1009cdc <__alt_mem_TCDM+0xff008cdc>
 1009e64:	00803fc4 	movi	r2,255
 1009e68:	1445803a 	cmpltu	r2,r2,r17
 1009e6c:	100490fa 	slli	r2,r2,3
 1009e70:	003fb206 	br	1009d3c <__alt_mem_TCDM+0xff008d3c>
 1009e74:	00804034 	movhi	r2,256
 1009e78:	10bfffc4 	addi	r2,r2,-1
 1009e7c:	11808836 	bltu	r2,r6,100a0a0 <__udivdi3+0x51c>
 1009e80:	00800404 	movi	r2,16
 1009e84:	003f5606 	br	1009be0 <__alt_mem_TCDM+0xff008be0>
 1009e88:	30aed83a 	srl	r23,r6,r2
 1009e8c:	3d4e983a 	sll	r7,r7,r21
 1009e90:	80acd83a 	srl	r22,r16,r2
 1009e94:	9884d83a 	srl	r2,r19,r2
 1009e98:	3deeb03a 	or	r23,r7,r23
 1009e9c:	b824d43a 	srli	r18,r23,16
 1009ea0:	8560983a 	sll	r16,r16,r21
 1009ea4:	b009883a 	mov	r4,r22
 1009ea8:	900b883a 	mov	r5,r18
 1009eac:	3568983a 	sll	r20,r6,r21
 1009eb0:	1420b03a 	or	r16,r2,r16
 1009eb4:	100a7900 	call	100a790 <__umodsi3>
 1009eb8:	b009883a 	mov	r4,r22
 1009ebc:	900b883a 	mov	r5,r18
 1009ec0:	1023883a 	mov	r17,r2
 1009ec4:	100a72c0 	call	100a72c <__udivsi3>
 1009ec8:	8808943a 	slli	r4,r17,16
 1009ecc:	bf3fffcc 	andi	fp,r23,65535
 1009ed0:	8006d43a 	srli	r3,r16,16
 1009ed4:	e0a3383a 	mul	r17,fp,r2
 1009ed8:	100d883a 	mov	r6,r2
 1009edc:	1906b03a 	or	r3,r3,r4
 1009ee0:	1c40042e 	bgeu	r3,r17,1009ef4 <__udivdi3+0x370>
 1009ee4:	1dc7883a 	add	r3,r3,r23
 1009ee8:	10bfffc4 	addi	r2,r2,-1
 1009eec:	1dc0752e 	bgeu	r3,r23,100a0c4 <__udivdi3+0x540>
 1009ef0:	100d883a 	mov	r6,r2
 1009ef4:	1c63c83a 	sub	r17,r3,r17
 1009ef8:	900b883a 	mov	r5,r18
 1009efc:	8809883a 	mov	r4,r17
 1009f00:	d9800015 	stw	r6,0(sp)
 1009f04:	100a7900 	call	100a790 <__umodsi3>
 1009f08:	102d883a 	mov	r22,r2
 1009f0c:	8809883a 	mov	r4,r17
 1009f10:	900b883a 	mov	r5,r18
 1009f14:	100a72c0 	call	100a72c <__udivsi3>
 1009f18:	b02c943a 	slli	r22,r22,16
 1009f1c:	e089383a 	mul	r4,fp,r2
 1009f20:	843fffcc 	andi	r16,r16,65535
 1009f24:	85a0b03a 	or	r16,r16,r22
 1009f28:	d9800017 	ldw	r6,0(sp)
 1009f2c:	8100042e 	bgeu	r16,r4,1009f40 <__udivdi3+0x3bc>
 1009f30:	85e1883a 	add	r16,r16,r23
 1009f34:	10ffffc4 	addi	r3,r2,-1
 1009f38:	85c05e2e 	bgeu	r16,r23,100a0b4 <__udivdi3+0x530>
 1009f3c:	1805883a 	mov	r2,r3
 1009f40:	300c943a 	slli	r6,r6,16
 1009f44:	a17fffcc 	andi	r5,r20,65535
 1009f48:	a028d43a 	srli	r20,r20,16
 1009f4c:	3084b03a 	or	r2,r6,r2
 1009f50:	10ffffcc 	andi	r3,r2,65535
 1009f54:	100cd43a 	srli	r6,r2,16
 1009f58:	194f383a 	mul	r7,r3,r5
 1009f5c:	1d07383a 	mul	r3,r3,r20
 1009f60:	314b383a 	mul	r5,r6,r5
 1009f64:	3810d43a 	srli	r8,r7,16
 1009f68:	8121c83a 	sub	r16,r16,r4
 1009f6c:	1947883a 	add	r3,r3,r5
 1009f70:	40c7883a 	add	r3,r8,r3
 1009f74:	350d383a 	mul	r6,r6,r20
 1009f78:	1940022e 	bgeu	r3,r5,1009f84 <__udivdi3+0x400>
 1009f7c:	01000074 	movhi	r4,1
 1009f80:	310d883a 	add	r6,r6,r4
 1009f84:	1828d43a 	srli	r20,r3,16
 1009f88:	a18d883a 	add	r6,r20,r6
 1009f8c:	81803e36 	bltu	r16,r6,100a088 <__udivdi3+0x504>
 1009f90:	81803826 	beq	r16,r6,100a074 <__udivdi3+0x4f0>
 1009f94:	0007883a 	mov	r3,zero
 1009f98:	003fa206 	br	1009e24 <__alt_mem_TCDM+0xff008e24>
 1009f9c:	88e2983a 	sll	r17,r17,r3
 1009fa0:	80a8d83a 	srl	r20,r16,r2
 1009fa4:	80e0983a 	sll	r16,r16,r3
 1009fa8:	882ad43a 	srli	r21,r17,16
 1009fac:	9884d83a 	srl	r2,r19,r2
 1009fb0:	a009883a 	mov	r4,r20
 1009fb4:	a80b883a 	mov	r5,r21
 1009fb8:	142eb03a 	or	r23,r2,r16
 1009fbc:	98e4983a 	sll	r18,r19,r3
 1009fc0:	100a7900 	call	100a790 <__umodsi3>
 1009fc4:	a009883a 	mov	r4,r20
 1009fc8:	a80b883a 	mov	r5,r21
 1009fcc:	1021883a 	mov	r16,r2
 1009fd0:	100a72c0 	call	100a72c <__udivsi3>
 1009fd4:	1039883a 	mov	fp,r2
 1009fd8:	8d3fffcc 	andi	r20,r17,65535
 1009fdc:	8020943a 	slli	r16,r16,16
 1009fe0:	b804d43a 	srli	r2,r23,16
 1009fe4:	a72d383a 	mul	r22,r20,fp
 1009fe8:	1404b03a 	or	r2,r2,r16
 1009fec:	1580062e 	bgeu	r2,r22,100a008 <__udivdi3+0x484>
 1009ff0:	1445883a 	add	r2,r2,r17
 1009ff4:	e0ffffc4 	addi	r3,fp,-1
 1009ff8:	14403836 	bltu	r2,r17,100a0dc <__udivdi3+0x558>
 1009ffc:	1580372e 	bgeu	r2,r22,100a0dc <__udivdi3+0x558>
 100a000:	e73fff84 	addi	fp,fp,-2
 100a004:	1445883a 	add	r2,r2,r17
 100a008:	15adc83a 	sub	r22,r2,r22
 100a00c:	a80b883a 	mov	r5,r21
 100a010:	b009883a 	mov	r4,r22
 100a014:	100a7900 	call	100a790 <__umodsi3>
 100a018:	1027883a 	mov	r19,r2
 100a01c:	b009883a 	mov	r4,r22
 100a020:	a80b883a 	mov	r5,r21
 100a024:	100a72c0 	call	100a72c <__udivsi3>
 100a028:	9826943a 	slli	r19,r19,16
 100a02c:	a0a1383a 	mul	r16,r20,r2
 100a030:	b93fffcc 	andi	r4,r23,65535
 100a034:	24c8b03a 	or	r4,r4,r19
 100a038:	2400062e 	bgeu	r4,r16,100a054 <__udivdi3+0x4d0>
 100a03c:	2449883a 	add	r4,r4,r17
 100a040:	10ffffc4 	addi	r3,r2,-1
 100a044:	24402336 	bltu	r4,r17,100a0d4 <__udivdi3+0x550>
 100a048:	2400222e 	bgeu	r4,r16,100a0d4 <__udivdi3+0x550>
 100a04c:	10bfff84 	addi	r2,r2,-2
 100a050:	2449883a 	add	r4,r4,r17
 100a054:	e038943a 	slli	fp,fp,16
 100a058:	2421c83a 	sub	r16,r4,r16
 100a05c:	e086b03a 	or	r3,fp,r2
 100a060:	003f4306 	br	1009d70 <__alt_mem_TCDM+0xff008d70>
 100a064:	2005883a 	mov	r2,r4
 100a068:	003f6906 	br	1009e10 <__alt_mem_TCDM+0xff008e10>
 100a06c:	1805883a 	mov	r2,r3
 100a070:	003f0f06 	br	1009cb0 <__alt_mem_TCDM+0xff008cb0>
 100a074:	1806943a 	slli	r3,r3,16
 100a078:	9d66983a 	sll	r19,r19,r21
 100a07c:	39ffffcc 	andi	r7,r7,65535
 100a080:	19c7883a 	add	r3,r3,r7
 100a084:	98ffc32e 	bgeu	r19,r3,1009f94 <__alt_mem_TCDM+0xff008f94>
 100a088:	10bfffc4 	addi	r2,r2,-1
 100a08c:	003fc106 	br	1009f94 <__alt_mem_TCDM+0xff008f94>
 100a090:	00800604 	movi	r2,24
 100a094:	003f1106 	br	1009cdc <__alt_mem_TCDM+0xff008cdc>
 100a098:	00800604 	movi	r2,24
 100a09c:	003f2706 	br	1009d3c <__alt_mem_TCDM+0xff008d3c>
 100a0a0:	00800604 	movi	r2,24
 100a0a4:	003ece06 	br	1009be0 <__alt_mem_TCDM+0xff008be0>
 100a0a8:	0007883a 	mov	r3,zero
 100a0ac:	00800044 	movi	r2,1
 100a0b0:	003f5c06 	br	1009e24 <__alt_mem_TCDM+0xff008e24>
 100a0b4:	813fa12e 	bgeu	r16,r4,1009f3c <__alt_mem_TCDM+0xff008f3c>
 100a0b8:	10bfff84 	addi	r2,r2,-2
 100a0bc:	85e1883a 	add	r16,r16,r23
 100a0c0:	003f9f06 	br	1009f40 <__alt_mem_TCDM+0xff008f40>
 100a0c4:	1c7f8a2e 	bgeu	r3,r17,1009ef0 <__alt_mem_TCDM+0xff008ef0>
 100a0c8:	31bfff84 	addi	r6,r6,-2
 100a0cc:	1dc7883a 	add	r3,r3,r23
 100a0d0:	003f8806 	br	1009ef4 <__alt_mem_TCDM+0xff008ef4>
 100a0d4:	1805883a 	mov	r2,r3
 100a0d8:	003fde06 	br	100a054 <__alt_mem_TCDM+0xff009054>
 100a0dc:	1839883a 	mov	fp,r3
 100a0e0:	003fc906 	br	100a008 <__alt_mem_TCDM+0xff009008>
 100a0e4:	b5bfff84 	addi	r22,r22,-2
 100a0e8:	2449883a 	add	r4,r4,r17
 100a0ec:	003f3406 	br	1009dc0 <__alt_mem_TCDM+0xff008dc0>
 100a0f0:	b5bfff84 	addi	r22,r22,-2
 100a0f4:	1445883a 	add	r2,r2,r17
 100a0f8:	003edb06 	br	1009c68 <__alt_mem_TCDM+0xff008c68>

0100a0fc <__umoddi3>:
 100a0fc:	defff404 	addi	sp,sp,-48
 100a100:	df000a15 	stw	fp,40(sp)
 100a104:	dc400315 	stw	r17,12(sp)
 100a108:	dc000215 	stw	r16,8(sp)
 100a10c:	dfc00b15 	stw	ra,44(sp)
 100a110:	ddc00915 	stw	r23,36(sp)
 100a114:	dd800815 	stw	r22,32(sp)
 100a118:	dd400715 	stw	r21,28(sp)
 100a11c:	dd000615 	stw	r20,24(sp)
 100a120:	dcc00515 	stw	r19,20(sp)
 100a124:	dc800415 	stw	r18,16(sp)
 100a128:	2021883a 	mov	r16,r4
 100a12c:	2823883a 	mov	r17,r5
 100a130:	2839883a 	mov	fp,r5
 100a134:	38003c1e 	bne	r7,zero,100a228 <__umoddi3+0x12c>
 100a138:	3027883a 	mov	r19,r6
 100a13c:	2029883a 	mov	r20,r4
 100a140:	2980512e 	bgeu	r5,r6,100a288 <__umoddi3+0x18c>
 100a144:	00bfffd4 	movui	r2,65535
 100a148:	11809a36 	bltu	r2,r6,100a3b4 <__umoddi3+0x2b8>
 100a14c:	01003fc4 	movi	r4,255
 100a150:	2189803a 	cmpltu	r4,r4,r6
 100a154:	200890fa 	slli	r4,r4,3
 100a158:	3104d83a 	srl	r2,r6,r4
 100a15c:	00c04074 	movhi	r3,257
 100a160:	18ffc704 	addi	r3,r3,-228
 100a164:	1885883a 	add	r2,r3,r2
 100a168:	10c00003 	ldbu	r3,0(r2)
 100a16c:	00800804 	movi	r2,32
 100a170:	1909883a 	add	r4,r3,r4
 100a174:	1125c83a 	sub	r18,r2,r4
 100a178:	90000526 	beq	r18,zero,100a190 <__umoddi3+0x94>
 100a17c:	8ca2983a 	sll	r17,r17,r18
 100a180:	8108d83a 	srl	r4,r16,r4
 100a184:	34a6983a 	sll	r19,r6,r18
 100a188:	84a8983a 	sll	r20,r16,r18
 100a18c:	2478b03a 	or	fp,r4,r17
 100a190:	982ed43a 	srli	r23,r19,16
 100a194:	e009883a 	mov	r4,fp
 100a198:	9dbfffcc 	andi	r22,r19,65535
 100a19c:	b80b883a 	mov	r5,r23
 100a1a0:	100a7900 	call	100a790 <__umodsi3>
 100a1a4:	e009883a 	mov	r4,fp
 100a1a8:	b80b883a 	mov	r5,r23
 100a1ac:	102b883a 	mov	r21,r2
 100a1b0:	100a72c0 	call	100a72c <__udivsi3>
 100a1b4:	a806943a 	slli	r3,r21,16
 100a1b8:	a008d43a 	srli	r4,r20,16
 100a1bc:	b085383a 	mul	r2,r22,r2
 100a1c0:	20c8b03a 	or	r4,r4,r3
 100a1c4:	2080032e 	bgeu	r4,r2,100a1d4 <__umoddi3+0xd8>
 100a1c8:	24c9883a 	add	r4,r4,r19
 100a1cc:	24c00136 	bltu	r4,r19,100a1d4 <__umoddi3+0xd8>
 100a1d0:	20811036 	bltu	r4,r2,100a614 <__umoddi3+0x518>
 100a1d4:	20abc83a 	sub	r21,r4,r2
 100a1d8:	b80b883a 	mov	r5,r23
 100a1dc:	a809883a 	mov	r4,r21
 100a1e0:	100a7900 	call	100a790 <__umodsi3>
 100a1e4:	1023883a 	mov	r17,r2
 100a1e8:	b80b883a 	mov	r5,r23
 100a1ec:	a809883a 	mov	r4,r21
 100a1f0:	100a72c0 	call	100a72c <__udivsi3>
 100a1f4:	8822943a 	slli	r17,r17,16
 100a1f8:	b085383a 	mul	r2,r22,r2
 100a1fc:	a0ffffcc 	andi	r3,r20,65535
 100a200:	1c46b03a 	or	r3,r3,r17
 100a204:	1880042e 	bgeu	r3,r2,100a218 <__umoddi3+0x11c>
 100a208:	1cc7883a 	add	r3,r3,r19
 100a20c:	1cc00236 	bltu	r3,r19,100a218 <__umoddi3+0x11c>
 100a210:	1880012e 	bgeu	r3,r2,100a218 <__umoddi3+0x11c>
 100a214:	1cc7883a 	add	r3,r3,r19
 100a218:	1885c83a 	sub	r2,r3,r2
 100a21c:	1484d83a 	srl	r2,r2,r18
 100a220:	0007883a 	mov	r3,zero
 100a224:	00004f06 	br	100a364 <__umoddi3+0x268>
 100a228:	29c04c36 	bltu	r5,r7,100a35c <__umoddi3+0x260>
 100a22c:	00bfffd4 	movui	r2,65535
 100a230:	11c0582e 	bgeu	r2,r7,100a394 <__umoddi3+0x298>
 100a234:	00804034 	movhi	r2,256
 100a238:	10bfffc4 	addi	r2,r2,-1
 100a23c:	11c0e736 	bltu	r2,r7,100a5dc <__umoddi3+0x4e0>
 100a240:	01000404 	movi	r4,16
 100a244:	3904d83a 	srl	r2,r7,r4
 100a248:	00c04074 	movhi	r3,257
 100a24c:	18ffc704 	addi	r3,r3,-228
 100a250:	1885883a 	add	r2,r3,r2
 100a254:	14c00003 	ldbu	r19,0(r2)
 100a258:	00c00804 	movi	r3,32
 100a25c:	9927883a 	add	r19,r19,r4
 100a260:	1ce9c83a 	sub	r20,r3,r19
 100a264:	a000581e 	bne	r20,zero,100a3c8 <__umoddi3+0x2cc>
 100a268:	3c400136 	bltu	r7,r17,100a270 <__umoddi3+0x174>
 100a26c:	8180eb36 	bltu	r16,r6,100a61c <__umoddi3+0x520>
 100a270:	8185c83a 	sub	r2,r16,r6
 100a274:	89e3c83a 	sub	r17,r17,r7
 100a278:	8089803a 	cmpltu	r4,r16,r2
 100a27c:	8939c83a 	sub	fp,r17,r4
 100a280:	e007883a 	mov	r3,fp
 100a284:	00003706 	br	100a364 <__umoddi3+0x268>
 100a288:	3000041e 	bne	r6,zero,100a29c <__umoddi3+0x1a0>
 100a28c:	000b883a 	mov	r5,zero
 100a290:	01000044 	movi	r4,1
 100a294:	100a72c0 	call	100a72c <__udivsi3>
 100a298:	1027883a 	mov	r19,r2
 100a29c:	00bfffd4 	movui	r2,65535
 100a2a0:	14c0402e 	bgeu	r2,r19,100a3a4 <__umoddi3+0x2a8>
 100a2a4:	00804034 	movhi	r2,256
 100a2a8:	10bfffc4 	addi	r2,r2,-1
 100a2ac:	14c0cd36 	bltu	r2,r19,100a5e4 <__umoddi3+0x4e8>
 100a2b0:	00800404 	movi	r2,16
 100a2b4:	9886d83a 	srl	r3,r19,r2
 100a2b8:	01004074 	movhi	r4,257
 100a2bc:	213fc704 	addi	r4,r4,-228
 100a2c0:	20c7883a 	add	r3,r4,r3
 100a2c4:	18c00003 	ldbu	r3,0(r3)
 100a2c8:	1887883a 	add	r3,r3,r2
 100a2cc:	00800804 	movi	r2,32
 100a2d0:	10e5c83a 	sub	r18,r2,r3
 100a2d4:	9000901e 	bne	r18,zero,100a518 <__umoddi3+0x41c>
 100a2d8:	982cd43a 	srli	r22,r19,16
 100a2dc:	8ce3c83a 	sub	r17,r17,r19
 100a2e0:	9d7fffcc 	andi	r21,r19,65535
 100a2e4:	b00b883a 	mov	r5,r22
 100a2e8:	8809883a 	mov	r4,r17
 100a2ec:	100a7900 	call	100a790 <__umodsi3>
 100a2f0:	8809883a 	mov	r4,r17
 100a2f4:	b00b883a 	mov	r5,r22
 100a2f8:	1021883a 	mov	r16,r2
 100a2fc:	100a72c0 	call	100a72c <__udivsi3>
 100a300:	8006943a 	slli	r3,r16,16
 100a304:	a008d43a 	srli	r4,r20,16
 100a308:	1545383a 	mul	r2,r2,r21
 100a30c:	20c8b03a 	or	r4,r4,r3
 100a310:	2080042e 	bgeu	r4,r2,100a324 <__umoddi3+0x228>
 100a314:	24c9883a 	add	r4,r4,r19
 100a318:	24c00236 	bltu	r4,r19,100a324 <__umoddi3+0x228>
 100a31c:	2080012e 	bgeu	r4,r2,100a324 <__umoddi3+0x228>
 100a320:	24c9883a 	add	r4,r4,r19
 100a324:	20a1c83a 	sub	r16,r4,r2
 100a328:	b00b883a 	mov	r5,r22
 100a32c:	8009883a 	mov	r4,r16
 100a330:	100a7900 	call	100a790 <__umodsi3>
 100a334:	1023883a 	mov	r17,r2
 100a338:	b00b883a 	mov	r5,r22
 100a33c:	8009883a 	mov	r4,r16
 100a340:	100a72c0 	call	100a72c <__udivsi3>
 100a344:	8822943a 	slli	r17,r17,16
 100a348:	1545383a 	mul	r2,r2,r21
 100a34c:	a53fffcc 	andi	r20,r20,65535
 100a350:	a446b03a 	or	r3,r20,r17
 100a354:	18bfb02e 	bgeu	r3,r2,100a218 <__alt_mem_TCDM+0xff009218>
 100a358:	003fab06 	br	100a208 <__alt_mem_TCDM+0xff009208>
 100a35c:	2005883a 	mov	r2,r4
 100a360:	2807883a 	mov	r3,r5
 100a364:	dfc00b17 	ldw	ra,44(sp)
 100a368:	df000a17 	ldw	fp,40(sp)
 100a36c:	ddc00917 	ldw	r23,36(sp)
 100a370:	dd800817 	ldw	r22,32(sp)
 100a374:	dd400717 	ldw	r21,28(sp)
 100a378:	dd000617 	ldw	r20,24(sp)
 100a37c:	dcc00517 	ldw	r19,20(sp)
 100a380:	dc800417 	ldw	r18,16(sp)
 100a384:	dc400317 	ldw	r17,12(sp)
 100a388:	dc000217 	ldw	r16,8(sp)
 100a38c:	dec00c04 	addi	sp,sp,48
 100a390:	f800283a 	ret
 100a394:	04c03fc4 	movi	r19,255
 100a398:	99c9803a 	cmpltu	r4,r19,r7
 100a39c:	200890fa 	slli	r4,r4,3
 100a3a0:	003fa806 	br	100a244 <__alt_mem_TCDM+0xff009244>
 100a3a4:	00803fc4 	movi	r2,255
 100a3a8:	14c5803a 	cmpltu	r2,r2,r19
 100a3ac:	100490fa 	slli	r2,r2,3
 100a3b0:	003fc006 	br	100a2b4 <__alt_mem_TCDM+0xff0092b4>
 100a3b4:	00804034 	movhi	r2,256
 100a3b8:	10bfffc4 	addi	r2,r2,-1
 100a3bc:	11808b36 	bltu	r2,r6,100a5ec <__umoddi3+0x4f0>
 100a3c0:	01000404 	movi	r4,16
 100a3c4:	003f6406 	br	100a158 <__alt_mem_TCDM+0xff009158>
 100a3c8:	34c4d83a 	srl	r2,r6,r19
 100a3cc:	3d0e983a 	sll	r7,r7,r20
 100a3d0:	8cf8d83a 	srl	fp,r17,r19
 100a3d4:	8d10983a 	sll	r8,r17,r20
 100a3d8:	38aab03a 	or	r21,r7,r2
 100a3dc:	a82cd43a 	srli	r22,r21,16
 100a3e0:	84e2d83a 	srl	r17,r16,r19
 100a3e4:	e009883a 	mov	r4,fp
 100a3e8:	b00b883a 	mov	r5,r22
 100a3ec:	8a22b03a 	or	r17,r17,r8
 100a3f0:	3524983a 	sll	r18,r6,r20
 100a3f4:	100a7900 	call	100a790 <__umodsi3>
 100a3f8:	e009883a 	mov	r4,fp
 100a3fc:	b00b883a 	mov	r5,r22
 100a400:	102f883a 	mov	r23,r2
 100a404:	100a72c0 	call	100a72c <__udivsi3>
 100a408:	100d883a 	mov	r6,r2
 100a40c:	b808943a 	slli	r4,r23,16
 100a410:	aa3fffcc 	andi	r8,r21,65535
 100a414:	8804d43a 	srli	r2,r17,16
 100a418:	41af383a 	mul	r23,r8,r6
 100a41c:	8520983a 	sll	r16,r16,r20
 100a420:	1104b03a 	or	r2,r2,r4
 100a424:	15c0042e 	bgeu	r2,r23,100a438 <__umoddi3+0x33c>
 100a428:	1545883a 	add	r2,r2,r21
 100a42c:	30ffffc4 	addi	r3,r6,-1
 100a430:	1540742e 	bgeu	r2,r21,100a604 <__umoddi3+0x508>
 100a434:	180d883a 	mov	r6,r3
 100a438:	15efc83a 	sub	r23,r2,r23
 100a43c:	b00b883a 	mov	r5,r22
 100a440:	b809883a 	mov	r4,r23
 100a444:	d9800115 	stw	r6,4(sp)
 100a448:	da000015 	stw	r8,0(sp)
 100a44c:	100a7900 	call	100a790 <__umodsi3>
 100a450:	b00b883a 	mov	r5,r22
 100a454:	b809883a 	mov	r4,r23
 100a458:	1039883a 	mov	fp,r2
 100a45c:	100a72c0 	call	100a72c <__udivsi3>
 100a460:	da000017 	ldw	r8,0(sp)
 100a464:	e038943a 	slli	fp,fp,16
 100a468:	100b883a 	mov	r5,r2
 100a46c:	4089383a 	mul	r4,r8,r2
 100a470:	8a3fffcc 	andi	r8,r17,65535
 100a474:	4710b03a 	or	r8,r8,fp
 100a478:	d9800117 	ldw	r6,4(sp)
 100a47c:	4100042e 	bgeu	r8,r4,100a490 <__umoddi3+0x394>
 100a480:	4551883a 	add	r8,r8,r21
 100a484:	10bfffc4 	addi	r2,r2,-1
 100a488:	45405a2e 	bgeu	r8,r21,100a5f4 <__umoddi3+0x4f8>
 100a48c:	100b883a 	mov	r5,r2
 100a490:	300c943a 	slli	r6,r6,16
 100a494:	91ffffcc 	andi	r7,r18,65535
 100a498:	9004d43a 	srli	r2,r18,16
 100a49c:	314cb03a 	or	r6,r6,r5
 100a4a0:	317fffcc 	andi	r5,r6,65535
 100a4a4:	300cd43a 	srli	r6,r6,16
 100a4a8:	29d3383a 	mul	r9,r5,r7
 100a4ac:	288b383a 	mul	r5,r5,r2
 100a4b0:	31cf383a 	mul	r7,r6,r7
 100a4b4:	4806d43a 	srli	r3,r9,16
 100a4b8:	4111c83a 	sub	r8,r8,r4
 100a4bc:	29cb883a 	add	r5,r5,r7
 100a4c0:	194b883a 	add	r5,r3,r5
 100a4c4:	3085383a 	mul	r2,r6,r2
 100a4c8:	29c0022e 	bgeu	r5,r7,100a4d4 <__umoddi3+0x3d8>
 100a4cc:	00c00074 	movhi	r3,1
 100a4d0:	10c5883a 	add	r2,r2,r3
 100a4d4:	2808d43a 	srli	r4,r5,16
 100a4d8:	280a943a 	slli	r5,r5,16
 100a4dc:	4a7fffcc 	andi	r9,r9,65535
 100a4e0:	2085883a 	add	r2,r4,r2
 100a4e4:	2a4b883a 	add	r5,r5,r9
 100a4e8:	40803636 	bltu	r8,r2,100a5c4 <__umoddi3+0x4c8>
 100a4ec:	40804d26 	beq	r8,r2,100a624 <__umoddi3+0x528>
 100a4f0:	4089c83a 	sub	r4,r8,r2
 100a4f4:	280f883a 	mov	r7,r5
 100a4f8:	81cfc83a 	sub	r7,r16,r7
 100a4fc:	81c7803a 	cmpltu	r3,r16,r7
 100a500:	20c7c83a 	sub	r3,r4,r3
 100a504:	1cc4983a 	sll	r2,r3,r19
 100a508:	3d0ed83a 	srl	r7,r7,r20
 100a50c:	1d06d83a 	srl	r3,r3,r20
 100a510:	11c4b03a 	or	r2,r2,r7
 100a514:	003f9306 	br	100a364 <__alt_mem_TCDM+0xff009364>
 100a518:	9ca6983a 	sll	r19,r19,r18
 100a51c:	88e8d83a 	srl	r20,r17,r3
 100a520:	80c4d83a 	srl	r2,r16,r3
 100a524:	982cd43a 	srli	r22,r19,16
 100a528:	8ca2983a 	sll	r17,r17,r18
 100a52c:	a009883a 	mov	r4,r20
 100a530:	b00b883a 	mov	r5,r22
 100a534:	1478b03a 	or	fp,r2,r17
 100a538:	100a7900 	call	100a790 <__umodsi3>
 100a53c:	a009883a 	mov	r4,r20
 100a540:	b00b883a 	mov	r5,r22
 100a544:	1023883a 	mov	r17,r2
 100a548:	100a72c0 	call	100a72c <__udivsi3>
 100a54c:	9d7fffcc 	andi	r21,r19,65535
 100a550:	880a943a 	slli	r5,r17,16
 100a554:	e008d43a 	srli	r4,fp,16
 100a558:	a885383a 	mul	r2,r21,r2
 100a55c:	84a8983a 	sll	r20,r16,r18
 100a560:	2148b03a 	or	r4,r4,r5
 100a564:	2080042e 	bgeu	r4,r2,100a578 <__umoddi3+0x47c>
 100a568:	24c9883a 	add	r4,r4,r19
 100a56c:	24c00236 	bltu	r4,r19,100a578 <__umoddi3+0x47c>
 100a570:	2080012e 	bgeu	r4,r2,100a578 <__umoddi3+0x47c>
 100a574:	24c9883a 	add	r4,r4,r19
 100a578:	20a3c83a 	sub	r17,r4,r2
 100a57c:	b00b883a 	mov	r5,r22
 100a580:	8809883a 	mov	r4,r17
 100a584:	100a7900 	call	100a790 <__umodsi3>
 100a588:	102f883a 	mov	r23,r2
 100a58c:	8809883a 	mov	r4,r17
 100a590:	b00b883a 	mov	r5,r22
 100a594:	100a72c0 	call	100a72c <__udivsi3>
 100a598:	b82e943a 	slli	r23,r23,16
 100a59c:	a885383a 	mul	r2,r21,r2
 100a5a0:	e13fffcc 	andi	r4,fp,65535
 100a5a4:	25c8b03a 	or	r4,r4,r23
 100a5a8:	2080042e 	bgeu	r4,r2,100a5bc <__umoddi3+0x4c0>
 100a5ac:	24c9883a 	add	r4,r4,r19
 100a5b0:	24c00236 	bltu	r4,r19,100a5bc <__umoddi3+0x4c0>
 100a5b4:	2080012e 	bgeu	r4,r2,100a5bc <__umoddi3+0x4c0>
 100a5b8:	24c9883a 	add	r4,r4,r19
 100a5bc:	20a3c83a 	sub	r17,r4,r2
 100a5c0:	003f4806 	br	100a2e4 <__alt_mem_TCDM+0xff0092e4>
 100a5c4:	2c8fc83a 	sub	r7,r5,r18
 100a5c8:	1545c83a 	sub	r2,r2,r21
 100a5cc:	29cb803a 	cmpltu	r5,r5,r7
 100a5d0:	1145c83a 	sub	r2,r2,r5
 100a5d4:	4089c83a 	sub	r4,r8,r2
 100a5d8:	003fc706 	br	100a4f8 <__alt_mem_TCDM+0xff0094f8>
 100a5dc:	01000604 	movi	r4,24
 100a5e0:	003f1806 	br	100a244 <__alt_mem_TCDM+0xff009244>
 100a5e4:	00800604 	movi	r2,24
 100a5e8:	003f3206 	br	100a2b4 <__alt_mem_TCDM+0xff0092b4>
 100a5ec:	01000604 	movi	r4,24
 100a5f0:	003ed906 	br	100a158 <__alt_mem_TCDM+0xff009158>
 100a5f4:	413fa52e 	bgeu	r8,r4,100a48c <__alt_mem_TCDM+0xff00948c>
 100a5f8:	297fff84 	addi	r5,r5,-2
 100a5fc:	4551883a 	add	r8,r8,r21
 100a600:	003fa306 	br	100a490 <__alt_mem_TCDM+0xff009490>
 100a604:	15ff8b2e 	bgeu	r2,r23,100a434 <__alt_mem_TCDM+0xff009434>
 100a608:	31bfff84 	addi	r6,r6,-2
 100a60c:	1545883a 	add	r2,r2,r21
 100a610:	003f8906 	br	100a438 <__alt_mem_TCDM+0xff009438>
 100a614:	24c9883a 	add	r4,r4,r19
 100a618:	003eee06 	br	100a1d4 <__alt_mem_TCDM+0xff0091d4>
 100a61c:	8005883a 	mov	r2,r16
 100a620:	003f1706 	br	100a280 <__alt_mem_TCDM+0xff009280>
 100a624:	817fe736 	bltu	r16,r5,100a5c4 <__alt_mem_TCDM+0xff0095c4>
 100a628:	280f883a 	mov	r7,r5
 100a62c:	0009883a 	mov	r4,zero
 100a630:	003fb106 	br	100a4f8 <__alt_mem_TCDM+0xff0094f8>

0100a634 <__divsi3>:
 100a634:	20001b16 	blt	r4,zero,100a6a4 <__divsi3+0x70>
 100a638:	000f883a 	mov	r7,zero
 100a63c:	28001616 	blt	r5,zero,100a698 <__divsi3+0x64>
 100a640:	200d883a 	mov	r6,r4
 100a644:	29001a2e 	bgeu	r5,r4,100a6b0 <__divsi3+0x7c>
 100a648:	00800804 	movi	r2,32
 100a64c:	00c00044 	movi	r3,1
 100a650:	00000106 	br	100a658 <__divsi3+0x24>
 100a654:	10000d26 	beq	r2,zero,100a68c <__divsi3+0x58>
 100a658:	294b883a 	add	r5,r5,r5
 100a65c:	10bfffc4 	addi	r2,r2,-1
 100a660:	18c7883a 	add	r3,r3,r3
 100a664:	293ffb36 	bltu	r5,r4,100a654 <__alt_mem_TCDM+0xff009654>
 100a668:	0005883a 	mov	r2,zero
 100a66c:	18000726 	beq	r3,zero,100a68c <__divsi3+0x58>
 100a670:	0005883a 	mov	r2,zero
 100a674:	31400236 	bltu	r6,r5,100a680 <__divsi3+0x4c>
 100a678:	314dc83a 	sub	r6,r6,r5
 100a67c:	10c4b03a 	or	r2,r2,r3
 100a680:	1806d07a 	srli	r3,r3,1
 100a684:	280ad07a 	srli	r5,r5,1
 100a688:	183ffa1e 	bne	r3,zero,100a674 <__alt_mem_TCDM+0xff009674>
 100a68c:	38000126 	beq	r7,zero,100a694 <__divsi3+0x60>
 100a690:	0085c83a 	sub	r2,zero,r2
 100a694:	f800283a 	ret
 100a698:	014bc83a 	sub	r5,zero,r5
 100a69c:	39c0005c 	xori	r7,r7,1
 100a6a0:	003fe706 	br	100a640 <__alt_mem_TCDM+0xff009640>
 100a6a4:	0109c83a 	sub	r4,zero,r4
 100a6a8:	01c00044 	movi	r7,1
 100a6ac:	003fe306 	br	100a63c <__alt_mem_TCDM+0xff00963c>
 100a6b0:	00c00044 	movi	r3,1
 100a6b4:	003fee06 	br	100a670 <__alt_mem_TCDM+0xff009670>

0100a6b8 <__modsi3>:
 100a6b8:	20001716 	blt	r4,zero,100a718 <__modsi3+0x60>
 100a6bc:	000f883a 	mov	r7,zero
 100a6c0:	2005883a 	mov	r2,r4
 100a6c4:	28001216 	blt	r5,zero,100a710 <__modsi3+0x58>
 100a6c8:	2900162e 	bgeu	r5,r4,100a724 <__modsi3+0x6c>
 100a6cc:	01800804 	movi	r6,32
 100a6d0:	00c00044 	movi	r3,1
 100a6d4:	00000106 	br	100a6dc <__modsi3+0x24>
 100a6d8:	30000a26 	beq	r6,zero,100a704 <__modsi3+0x4c>
 100a6dc:	294b883a 	add	r5,r5,r5
 100a6e0:	31bfffc4 	addi	r6,r6,-1
 100a6e4:	18c7883a 	add	r3,r3,r3
 100a6e8:	293ffb36 	bltu	r5,r4,100a6d8 <__alt_mem_TCDM+0xff0096d8>
 100a6ec:	18000526 	beq	r3,zero,100a704 <__modsi3+0x4c>
 100a6f0:	1806d07a 	srli	r3,r3,1
 100a6f4:	11400136 	bltu	r2,r5,100a6fc <__modsi3+0x44>
 100a6f8:	1145c83a 	sub	r2,r2,r5
 100a6fc:	280ad07a 	srli	r5,r5,1
 100a700:	183ffb1e 	bne	r3,zero,100a6f0 <__alt_mem_TCDM+0xff0096f0>
 100a704:	38000126 	beq	r7,zero,100a70c <__modsi3+0x54>
 100a708:	0085c83a 	sub	r2,zero,r2
 100a70c:	f800283a 	ret
 100a710:	014bc83a 	sub	r5,zero,r5
 100a714:	003fec06 	br	100a6c8 <__alt_mem_TCDM+0xff0096c8>
 100a718:	0109c83a 	sub	r4,zero,r4
 100a71c:	01c00044 	movi	r7,1
 100a720:	003fe706 	br	100a6c0 <__alt_mem_TCDM+0xff0096c0>
 100a724:	00c00044 	movi	r3,1
 100a728:	003ff106 	br	100a6f0 <__alt_mem_TCDM+0xff0096f0>

0100a72c <__udivsi3>:
 100a72c:	200d883a 	mov	r6,r4
 100a730:	2900152e 	bgeu	r5,r4,100a788 <__udivsi3+0x5c>
 100a734:	28001416 	blt	r5,zero,100a788 <__udivsi3+0x5c>
 100a738:	00800804 	movi	r2,32
 100a73c:	00c00044 	movi	r3,1
 100a740:	00000206 	br	100a74c <__udivsi3+0x20>
 100a744:	10000e26 	beq	r2,zero,100a780 <__udivsi3+0x54>
 100a748:	28000516 	blt	r5,zero,100a760 <__udivsi3+0x34>
 100a74c:	294b883a 	add	r5,r5,r5
 100a750:	10bfffc4 	addi	r2,r2,-1
 100a754:	18c7883a 	add	r3,r3,r3
 100a758:	293ffa36 	bltu	r5,r4,100a744 <__alt_mem_TCDM+0xff009744>
 100a75c:	18000826 	beq	r3,zero,100a780 <__udivsi3+0x54>
 100a760:	0005883a 	mov	r2,zero
 100a764:	31400236 	bltu	r6,r5,100a770 <__udivsi3+0x44>
 100a768:	314dc83a 	sub	r6,r6,r5
 100a76c:	10c4b03a 	or	r2,r2,r3
 100a770:	1806d07a 	srli	r3,r3,1
 100a774:	280ad07a 	srli	r5,r5,1
 100a778:	183ffa1e 	bne	r3,zero,100a764 <__alt_mem_TCDM+0xff009764>
 100a77c:	f800283a 	ret
 100a780:	0005883a 	mov	r2,zero
 100a784:	f800283a 	ret
 100a788:	00c00044 	movi	r3,1
 100a78c:	003ff406 	br	100a760 <__alt_mem_TCDM+0xff009760>

0100a790 <__umodsi3>:
 100a790:	2005883a 	mov	r2,r4
 100a794:	2900122e 	bgeu	r5,r4,100a7e0 <__umodsi3+0x50>
 100a798:	28001116 	blt	r5,zero,100a7e0 <__umodsi3+0x50>
 100a79c:	01800804 	movi	r6,32
 100a7a0:	00c00044 	movi	r3,1
 100a7a4:	00000206 	br	100a7b0 <__umodsi3+0x20>
 100a7a8:	30000c26 	beq	r6,zero,100a7dc <__umodsi3+0x4c>
 100a7ac:	28000516 	blt	r5,zero,100a7c4 <__umodsi3+0x34>
 100a7b0:	294b883a 	add	r5,r5,r5
 100a7b4:	31bfffc4 	addi	r6,r6,-1
 100a7b8:	18c7883a 	add	r3,r3,r3
 100a7bc:	293ffa36 	bltu	r5,r4,100a7a8 <__alt_mem_TCDM+0xff0097a8>
 100a7c0:	18000626 	beq	r3,zero,100a7dc <__umodsi3+0x4c>
 100a7c4:	1806d07a 	srli	r3,r3,1
 100a7c8:	11400136 	bltu	r2,r5,100a7d0 <__umodsi3+0x40>
 100a7cc:	1145c83a 	sub	r2,r2,r5
 100a7d0:	280ad07a 	srli	r5,r5,1
 100a7d4:	183ffb1e 	bne	r3,zero,100a7c4 <__alt_mem_TCDM+0xff0097c4>
 100a7d8:	f800283a 	ret
 100a7dc:	f800283a 	ret
 100a7e0:	00c00044 	movi	r3,1
 100a7e4:	003ff706 	br	100a7c4 <__alt_mem_TCDM+0xff0097c4>

0100a7e8 <__adddf3>:
 100a7e8:	02c00434 	movhi	r11,16
 100a7ec:	5affffc4 	addi	r11,r11,-1
 100a7f0:	2806d7fa 	srli	r3,r5,31
 100a7f4:	2ad4703a 	and	r10,r5,r11
 100a7f8:	3ad2703a 	and	r9,r7,r11
 100a7fc:	3804d53a 	srli	r2,r7,20
 100a800:	3018d77a 	srli	r12,r6,29
 100a804:	280ad53a 	srli	r5,r5,20
 100a808:	501490fa 	slli	r10,r10,3
 100a80c:	2010d77a 	srli	r8,r4,29
 100a810:	481290fa 	slli	r9,r9,3
 100a814:	380ed7fa 	srli	r7,r7,31
 100a818:	defffb04 	addi	sp,sp,-20
 100a81c:	dc800215 	stw	r18,8(sp)
 100a820:	dc400115 	stw	r17,4(sp)
 100a824:	dc000015 	stw	r16,0(sp)
 100a828:	dfc00415 	stw	ra,16(sp)
 100a82c:	dcc00315 	stw	r19,12(sp)
 100a830:	1c803fcc 	andi	r18,r3,255
 100a834:	2c01ffcc 	andi	r16,r5,2047
 100a838:	5210b03a 	or	r8,r10,r8
 100a83c:	202290fa 	slli	r17,r4,3
 100a840:	1081ffcc 	andi	r2,r2,2047
 100a844:	4b12b03a 	or	r9,r9,r12
 100a848:	300c90fa 	slli	r6,r6,3
 100a84c:	91c07526 	beq	r18,r7,100aa24 <__adddf3+0x23c>
 100a850:	8087c83a 	sub	r3,r16,r2
 100a854:	00c0ab0e 	bge	zero,r3,100ab04 <__adddf3+0x31c>
 100a858:	10002a1e 	bne	r2,zero,100a904 <__adddf3+0x11c>
 100a85c:	4984b03a 	or	r2,r9,r6
 100a860:	1000961e 	bne	r2,zero,100aabc <__adddf3+0x2d4>
 100a864:	888001cc 	andi	r2,r17,7
 100a868:	10000726 	beq	r2,zero,100a888 <__adddf3+0xa0>
 100a86c:	888003cc 	andi	r2,r17,15
 100a870:	00c00104 	movi	r3,4
 100a874:	10c00426 	beq	r2,r3,100a888 <__adddf3+0xa0>
 100a878:	88c7883a 	add	r3,r17,r3
 100a87c:	1c63803a 	cmpltu	r17,r3,r17
 100a880:	4451883a 	add	r8,r8,r17
 100a884:	1823883a 	mov	r17,r3
 100a888:	4080202c 	andhi	r2,r8,128
 100a88c:	10005926 	beq	r2,zero,100a9f4 <__adddf3+0x20c>
 100a890:	84000044 	addi	r16,r16,1
 100a894:	0081ffc4 	movi	r2,2047
 100a898:	8080ba26 	beq	r16,r2,100ab84 <__adddf3+0x39c>
 100a89c:	00bfe034 	movhi	r2,65408
 100a8a0:	10bfffc4 	addi	r2,r2,-1
 100a8a4:	4090703a 	and	r8,r8,r2
 100a8a8:	4004977a 	slli	r2,r8,29
 100a8ac:	4010927a 	slli	r8,r8,9
 100a8b0:	8822d0fa 	srli	r17,r17,3
 100a8b4:	8401ffcc 	andi	r16,r16,2047
 100a8b8:	4010d33a 	srli	r8,r8,12
 100a8bc:	9007883a 	mov	r3,r18
 100a8c0:	1444b03a 	or	r2,r2,r17
 100a8c4:	8401ffcc 	andi	r16,r16,2047
 100a8c8:	8020953a 	slli	r16,r16,20
 100a8cc:	18c03fcc 	andi	r3,r3,255
 100a8d0:	01000434 	movhi	r4,16
 100a8d4:	213fffc4 	addi	r4,r4,-1
 100a8d8:	180697fa 	slli	r3,r3,31
 100a8dc:	4110703a 	and	r8,r8,r4
 100a8e0:	4410b03a 	or	r8,r8,r16
 100a8e4:	40c6b03a 	or	r3,r8,r3
 100a8e8:	dfc00417 	ldw	ra,16(sp)
 100a8ec:	dcc00317 	ldw	r19,12(sp)
 100a8f0:	dc800217 	ldw	r18,8(sp)
 100a8f4:	dc400117 	ldw	r17,4(sp)
 100a8f8:	dc000017 	ldw	r16,0(sp)
 100a8fc:	dec00504 	addi	sp,sp,20
 100a900:	f800283a 	ret
 100a904:	0081ffc4 	movi	r2,2047
 100a908:	80bfd626 	beq	r16,r2,100a864 <__alt_mem_TCDM+0xff009864>
 100a90c:	4a402034 	orhi	r9,r9,128
 100a910:	00800e04 	movi	r2,56
 100a914:	10c09f16 	blt	r2,r3,100ab94 <__adddf3+0x3ac>
 100a918:	008007c4 	movi	r2,31
 100a91c:	10c0c216 	blt	r2,r3,100ac28 <__adddf3+0x440>
 100a920:	00800804 	movi	r2,32
 100a924:	10c5c83a 	sub	r2,r2,r3
 100a928:	488a983a 	sll	r5,r9,r2
 100a92c:	30c8d83a 	srl	r4,r6,r3
 100a930:	3084983a 	sll	r2,r6,r2
 100a934:	48c6d83a 	srl	r3,r9,r3
 100a938:	290cb03a 	or	r6,r5,r4
 100a93c:	1004c03a 	cmpne	r2,r2,zero
 100a940:	308cb03a 	or	r6,r6,r2
 100a944:	898dc83a 	sub	r6,r17,r6
 100a948:	89a3803a 	cmpltu	r17,r17,r6
 100a94c:	40d1c83a 	sub	r8,r8,r3
 100a950:	4451c83a 	sub	r8,r8,r17
 100a954:	3023883a 	mov	r17,r6
 100a958:	4080202c 	andhi	r2,r8,128
 100a95c:	10002326 	beq	r2,zero,100a9ec <__adddf3+0x204>
 100a960:	04c02034 	movhi	r19,128
 100a964:	9cffffc4 	addi	r19,r19,-1
 100a968:	44e6703a 	and	r19,r8,r19
 100a96c:	98007626 	beq	r19,zero,100ab48 <__adddf3+0x360>
 100a970:	9809883a 	mov	r4,r19
 100a974:	100cdec0 	call	100cdec <__clzsi2>
 100a978:	10fffe04 	addi	r3,r2,-8
 100a97c:	010007c4 	movi	r4,31
 100a980:	20c07716 	blt	r4,r3,100ab60 <__adddf3+0x378>
 100a984:	00800804 	movi	r2,32
 100a988:	10c5c83a 	sub	r2,r2,r3
 100a98c:	8884d83a 	srl	r2,r17,r2
 100a990:	98d0983a 	sll	r8,r19,r3
 100a994:	88e2983a 	sll	r17,r17,r3
 100a998:	1204b03a 	or	r2,r2,r8
 100a99c:	1c007416 	blt	r3,r16,100ab70 <__adddf3+0x388>
 100a9a0:	1c21c83a 	sub	r16,r3,r16
 100a9a4:	82000044 	addi	r8,r16,1
 100a9a8:	00c007c4 	movi	r3,31
 100a9ac:	1a009116 	blt	r3,r8,100abf4 <__adddf3+0x40c>
 100a9b0:	00c00804 	movi	r3,32
 100a9b4:	1a07c83a 	sub	r3,r3,r8
 100a9b8:	8a08d83a 	srl	r4,r17,r8
 100a9bc:	88e2983a 	sll	r17,r17,r3
 100a9c0:	10c6983a 	sll	r3,r2,r3
 100a9c4:	1210d83a 	srl	r8,r2,r8
 100a9c8:	8804c03a 	cmpne	r2,r17,zero
 100a9cc:	1906b03a 	or	r3,r3,r4
 100a9d0:	18a2b03a 	or	r17,r3,r2
 100a9d4:	0021883a 	mov	r16,zero
 100a9d8:	003fa206 	br	100a864 <__alt_mem_TCDM+0xff009864>
 100a9dc:	1890b03a 	or	r8,r3,r2
 100a9e0:	40017d26 	beq	r8,zero,100afd8 <__adddf3+0x7f0>
 100a9e4:	1011883a 	mov	r8,r2
 100a9e8:	1823883a 	mov	r17,r3
 100a9ec:	888001cc 	andi	r2,r17,7
 100a9f0:	103f9e1e 	bne	r2,zero,100a86c <__alt_mem_TCDM+0xff00986c>
 100a9f4:	4004977a 	slli	r2,r8,29
 100a9f8:	8822d0fa 	srli	r17,r17,3
 100a9fc:	4010d0fa 	srli	r8,r8,3
 100aa00:	9007883a 	mov	r3,r18
 100aa04:	1444b03a 	or	r2,r2,r17
 100aa08:	0101ffc4 	movi	r4,2047
 100aa0c:	81002426 	beq	r16,r4,100aaa0 <__adddf3+0x2b8>
 100aa10:	8120703a 	and	r16,r16,r4
 100aa14:	01000434 	movhi	r4,16
 100aa18:	213fffc4 	addi	r4,r4,-1
 100aa1c:	4110703a 	and	r8,r8,r4
 100aa20:	003fa806 	br	100a8c4 <__alt_mem_TCDM+0xff0098c4>
 100aa24:	8089c83a 	sub	r4,r16,r2
 100aa28:	01005e0e 	bge	zero,r4,100aba4 <__adddf3+0x3bc>
 100aa2c:	10002b26 	beq	r2,zero,100aadc <__adddf3+0x2f4>
 100aa30:	0081ffc4 	movi	r2,2047
 100aa34:	80bf8b26 	beq	r16,r2,100a864 <__alt_mem_TCDM+0xff009864>
 100aa38:	4a402034 	orhi	r9,r9,128
 100aa3c:	00800e04 	movi	r2,56
 100aa40:	1100a40e 	bge	r2,r4,100acd4 <__adddf3+0x4ec>
 100aa44:	498cb03a 	or	r6,r9,r6
 100aa48:	300ac03a 	cmpne	r5,r6,zero
 100aa4c:	0013883a 	mov	r9,zero
 100aa50:	2c4b883a 	add	r5,r5,r17
 100aa54:	2c63803a 	cmpltu	r17,r5,r17
 100aa58:	4a11883a 	add	r8,r9,r8
 100aa5c:	8a11883a 	add	r8,r17,r8
 100aa60:	2823883a 	mov	r17,r5
 100aa64:	4080202c 	andhi	r2,r8,128
 100aa68:	103fe026 	beq	r2,zero,100a9ec <__alt_mem_TCDM+0xff0099ec>
 100aa6c:	84000044 	addi	r16,r16,1
 100aa70:	0081ffc4 	movi	r2,2047
 100aa74:	8080d226 	beq	r16,r2,100adc0 <__adddf3+0x5d8>
 100aa78:	00bfe034 	movhi	r2,65408
 100aa7c:	10bfffc4 	addi	r2,r2,-1
 100aa80:	4090703a 	and	r8,r8,r2
 100aa84:	880ad07a 	srli	r5,r17,1
 100aa88:	400897fa 	slli	r4,r8,31
 100aa8c:	88c0004c 	andi	r3,r17,1
 100aa90:	28e2b03a 	or	r17,r5,r3
 100aa94:	4010d07a 	srli	r8,r8,1
 100aa98:	2462b03a 	or	r17,r4,r17
 100aa9c:	003f7106 	br	100a864 <__alt_mem_TCDM+0xff009864>
 100aaa0:	4088b03a 	or	r4,r8,r2
 100aaa4:	20014526 	beq	r4,zero,100afbc <__adddf3+0x7d4>
 100aaa8:	01000434 	movhi	r4,16
 100aaac:	42000234 	orhi	r8,r8,8
 100aab0:	213fffc4 	addi	r4,r4,-1
 100aab4:	4110703a 	and	r8,r8,r4
 100aab8:	003f8206 	br	100a8c4 <__alt_mem_TCDM+0xff0098c4>
 100aabc:	18ffffc4 	addi	r3,r3,-1
 100aac0:	1800491e 	bne	r3,zero,100abe8 <__adddf3+0x400>
 100aac4:	898bc83a 	sub	r5,r17,r6
 100aac8:	8963803a 	cmpltu	r17,r17,r5
 100aacc:	4251c83a 	sub	r8,r8,r9
 100aad0:	4451c83a 	sub	r8,r8,r17
 100aad4:	2823883a 	mov	r17,r5
 100aad8:	003f9f06 	br	100a958 <__alt_mem_TCDM+0xff009958>
 100aadc:	4984b03a 	or	r2,r9,r6
 100aae0:	103f6026 	beq	r2,zero,100a864 <__alt_mem_TCDM+0xff009864>
 100aae4:	213fffc4 	addi	r4,r4,-1
 100aae8:	2000931e 	bne	r4,zero,100ad38 <__adddf3+0x550>
 100aaec:	898d883a 	add	r6,r17,r6
 100aaf0:	3463803a 	cmpltu	r17,r6,r17
 100aaf4:	4251883a 	add	r8,r8,r9
 100aaf8:	8a11883a 	add	r8,r17,r8
 100aafc:	3023883a 	mov	r17,r6
 100ab00:	003fd806 	br	100aa64 <__alt_mem_TCDM+0xff009a64>
 100ab04:	1800541e 	bne	r3,zero,100ac58 <__adddf3+0x470>
 100ab08:	80800044 	addi	r2,r16,1
 100ab0c:	1081ffcc 	andi	r2,r2,2047
 100ab10:	00c00044 	movi	r3,1
 100ab14:	1880a00e 	bge	r3,r2,100ad98 <__adddf3+0x5b0>
 100ab18:	8989c83a 	sub	r4,r17,r6
 100ab1c:	8905803a 	cmpltu	r2,r17,r4
 100ab20:	4267c83a 	sub	r19,r8,r9
 100ab24:	98a7c83a 	sub	r19,r19,r2
 100ab28:	9880202c 	andhi	r2,r19,128
 100ab2c:	10006326 	beq	r2,zero,100acbc <__adddf3+0x4d4>
 100ab30:	3463c83a 	sub	r17,r6,r17
 100ab34:	4a07c83a 	sub	r3,r9,r8
 100ab38:	344d803a 	cmpltu	r6,r6,r17
 100ab3c:	19a7c83a 	sub	r19,r3,r6
 100ab40:	3825883a 	mov	r18,r7
 100ab44:	983f8a1e 	bne	r19,zero,100a970 <__alt_mem_TCDM+0xff009970>
 100ab48:	8809883a 	mov	r4,r17
 100ab4c:	100cdec0 	call	100cdec <__clzsi2>
 100ab50:	10800804 	addi	r2,r2,32
 100ab54:	10fffe04 	addi	r3,r2,-8
 100ab58:	010007c4 	movi	r4,31
 100ab5c:	20ff890e 	bge	r4,r3,100a984 <__alt_mem_TCDM+0xff009984>
 100ab60:	10bff604 	addi	r2,r2,-40
 100ab64:	8884983a 	sll	r2,r17,r2
 100ab68:	0023883a 	mov	r17,zero
 100ab6c:	1c3f8c0e 	bge	r3,r16,100a9a0 <__alt_mem_TCDM+0xff0099a0>
 100ab70:	023fe034 	movhi	r8,65408
 100ab74:	423fffc4 	addi	r8,r8,-1
 100ab78:	80e1c83a 	sub	r16,r16,r3
 100ab7c:	1210703a 	and	r8,r2,r8
 100ab80:	003f3806 	br	100a864 <__alt_mem_TCDM+0xff009864>
 100ab84:	9007883a 	mov	r3,r18
 100ab88:	0011883a 	mov	r8,zero
 100ab8c:	0005883a 	mov	r2,zero
 100ab90:	003f4c06 	br	100a8c4 <__alt_mem_TCDM+0xff0098c4>
 100ab94:	498cb03a 	or	r6,r9,r6
 100ab98:	300cc03a 	cmpne	r6,r6,zero
 100ab9c:	0007883a 	mov	r3,zero
 100aba0:	003f6806 	br	100a944 <__alt_mem_TCDM+0xff009944>
 100aba4:	20009c1e 	bne	r4,zero,100ae18 <__adddf3+0x630>
 100aba8:	80800044 	addi	r2,r16,1
 100abac:	1141ffcc 	andi	r5,r2,2047
 100abb0:	01000044 	movi	r4,1
 100abb4:	2140670e 	bge	r4,r5,100ad54 <__adddf3+0x56c>
 100abb8:	0101ffc4 	movi	r4,2047
 100abbc:	11007f26 	beq	r2,r4,100adbc <__adddf3+0x5d4>
 100abc0:	898d883a 	add	r6,r17,r6
 100abc4:	4247883a 	add	r3,r8,r9
 100abc8:	3451803a 	cmpltu	r8,r6,r17
 100abcc:	40d1883a 	add	r8,r8,r3
 100abd0:	402297fa 	slli	r17,r8,31
 100abd4:	300cd07a 	srli	r6,r6,1
 100abd8:	4010d07a 	srli	r8,r8,1
 100abdc:	1021883a 	mov	r16,r2
 100abe0:	89a2b03a 	or	r17,r17,r6
 100abe4:	003f1f06 	br	100a864 <__alt_mem_TCDM+0xff009864>
 100abe8:	0081ffc4 	movi	r2,2047
 100abec:	80bf481e 	bne	r16,r2,100a910 <__alt_mem_TCDM+0xff009910>
 100abf0:	003f1c06 	br	100a864 <__alt_mem_TCDM+0xff009864>
 100abf4:	843ff844 	addi	r16,r16,-31
 100abf8:	01000804 	movi	r4,32
 100abfc:	1406d83a 	srl	r3,r2,r16
 100ac00:	41005026 	beq	r8,r4,100ad44 <__adddf3+0x55c>
 100ac04:	01001004 	movi	r4,64
 100ac08:	2211c83a 	sub	r8,r4,r8
 100ac0c:	1204983a 	sll	r2,r2,r8
 100ac10:	88a2b03a 	or	r17,r17,r2
 100ac14:	8822c03a 	cmpne	r17,r17,zero
 100ac18:	1c62b03a 	or	r17,r3,r17
 100ac1c:	0011883a 	mov	r8,zero
 100ac20:	0021883a 	mov	r16,zero
 100ac24:	003f7106 	br	100a9ec <__alt_mem_TCDM+0xff0099ec>
 100ac28:	193ff804 	addi	r4,r3,-32
 100ac2c:	00800804 	movi	r2,32
 100ac30:	4908d83a 	srl	r4,r9,r4
 100ac34:	18804526 	beq	r3,r2,100ad4c <__adddf3+0x564>
 100ac38:	00801004 	movi	r2,64
 100ac3c:	10c5c83a 	sub	r2,r2,r3
 100ac40:	4886983a 	sll	r3,r9,r2
 100ac44:	198cb03a 	or	r6,r3,r6
 100ac48:	300cc03a 	cmpne	r6,r6,zero
 100ac4c:	218cb03a 	or	r6,r4,r6
 100ac50:	0007883a 	mov	r3,zero
 100ac54:	003f3b06 	br	100a944 <__alt_mem_TCDM+0xff009944>
 100ac58:	80002a26 	beq	r16,zero,100ad04 <__adddf3+0x51c>
 100ac5c:	0101ffc4 	movi	r4,2047
 100ac60:	11006826 	beq	r2,r4,100ae04 <__adddf3+0x61c>
 100ac64:	00c7c83a 	sub	r3,zero,r3
 100ac68:	42002034 	orhi	r8,r8,128
 100ac6c:	01000e04 	movi	r4,56
 100ac70:	20c07c16 	blt	r4,r3,100ae64 <__adddf3+0x67c>
 100ac74:	010007c4 	movi	r4,31
 100ac78:	20c0da16 	blt	r4,r3,100afe4 <__adddf3+0x7fc>
 100ac7c:	01000804 	movi	r4,32
 100ac80:	20c9c83a 	sub	r4,r4,r3
 100ac84:	4114983a 	sll	r10,r8,r4
 100ac88:	88cad83a 	srl	r5,r17,r3
 100ac8c:	8908983a 	sll	r4,r17,r4
 100ac90:	40c6d83a 	srl	r3,r8,r3
 100ac94:	5162b03a 	or	r17,r10,r5
 100ac98:	2008c03a 	cmpne	r4,r4,zero
 100ac9c:	8922b03a 	or	r17,r17,r4
 100aca0:	3463c83a 	sub	r17,r6,r17
 100aca4:	48c7c83a 	sub	r3,r9,r3
 100aca8:	344d803a 	cmpltu	r6,r6,r17
 100acac:	1991c83a 	sub	r8,r3,r6
 100acb0:	1021883a 	mov	r16,r2
 100acb4:	3825883a 	mov	r18,r7
 100acb8:	003f2706 	br	100a958 <__alt_mem_TCDM+0xff009958>
 100acbc:	24d0b03a 	or	r8,r4,r19
 100acc0:	40001b1e 	bne	r8,zero,100ad30 <__adddf3+0x548>
 100acc4:	0005883a 	mov	r2,zero
 100acc8:	0007883a 	mov	r3,zero
 100accc:	0021883a 	mov	r16,zero
 100acd0:	003f4d06 	br	100aa08 <__alt_mem_TCDM+0xff009a08>
 100acd4:	008007c4 	movi	r2,31
 100acd8:	11003c16 	blt	r2,r4,100adcc <__adddf3+0x5e4>
 100acdc:	00800804 	movi	r2,32
 100ace0:	1105c83a 	sub	r2,r2,r4
 100ace4:	488e983a 	sll	r7,r9,r2
 100ace8:	310ad83a 	srl	r5,r6,r4
 100acec:	3084983a 	sll	r2,r6,r2
 100acf0:	4912d83a 	srl	r9,r9,r4
 100acf4:	394ab03a 	or	r5,r7,r5
 100acf8:	1004c03a 	cmpne	r2,r2,zero
 100acfc:	288ab03a 	or	r5,r5,r2
 100ad00:	003f5306 	br	100aa50 <__alt_mem_TCDM+0xff009a50>
 100ad04:	4448b03a 	or	r4,r8,r17
 100ad08:	20003e26 	beq	r4,zero,100ae04 <__adddf3+0x61c>
 100ad0c:	00c6303a 	nor	r3,zero,r3
 100ad10:	18003a1e 	bne	r3,zero,100adfc <__adddf3+0x614>
 100ad14:	3463c83a 	sub	r17,r6,r17
 100ad18:	4a07c83a 	sub	r3,r9,r8
 100ad1c:	344d803a 	cmpltu	r6,r6,r17
 100ad20:	1991c83a 	sub	r8,r3,r6
 100ad24:	1021883a 	mov	r16,r2
 100ad28:	3825883a 	mov	r18,r7
 100ad2c:	003f0a06 	br	100a958 <__alt_mem_TCDM+0xff009958>
 100ad30:	2023883a 	mov	r17,r4
 100ad34:	003f0d06 	br	100a96c <__alt_mem_TCDM+0xff00996c>
 100ad38:	0081ffc4 	movi	r2,2047
 100ad3c:	80bf3f1e 	bne	r16,r2,100aa3c <__alt_mem_TCDM+0xff009a3c>
 100ad40:	003ec806 	br	100a864 <__alt_mem_TCDM+0xff009864>
 100ad44:	0005883a 	mov	r2,zero
 100ad48:	003fb106 	br	100ac10 <__alt_mem_TCDM+0xff009c10>
 100ad4c:	0007883a 	mov	r3,zero
 100ad50:	003fbc06 	br	100ac44 <__alt_mem_TCDM+0xff009c44>
 100ad54:	4444b03a 	or	r2,r8,r17
 100ad58:	8000871e 	bne	r16,zero,100af78 <__adddf3+0x790>
 100ad5c:	1000ba26 	beq	r2,zero,100b048 <__adddf3+0x860>
 100ad60:	4984b03a 	or	r2,r9,r6
 100ad64:	103ebf26 	beq	r2,zero,100a864 <__alt_mem_TCDM+0xff009864>
 100ad68:	8985883a 	add	r2,r17,r6
 100ad6c:	4247883a 	add	r3,r8,r9
 100ad70:	1451803a 	cmpltu	r8,r2,r17
 100ad74:	40d1883a 	add	r8,r8,r3
 100ad78:	40c0202c 	andhi	r3,r8,128
 100ad7c:	1023883a 	mov	r17,r2
 100ad80:	183f1a26 	beq	r3,zero,100a9ec <__alt_mem_TCDM+0xff0099ec>
 100ad84:	00bfe034 	movhi	r2,65408
 100ad88:	10bfffc4 	addi	r2,r2,-1
 100ad8c:	2021883a 	mov	r16,r4
 100ad90:	4090703a 	and	r8,r8,r2
 100ad94:	003eb306 	br	100a864 <__alt_mem_TCDM+0xff009864>
 100ad98:	4444b03a 	or	r2,r8,r17
 100ad9c:	8000291e 	bne	r16,zero,100ae44 <__adddf3+0x65c>
 100ada0:	10004b1e 	bne	r2,zero,100aed0 <__adddf3+0x6e8>
 100ada4:	4990b03a 	or	r8,r9,r6
 100ada8:	40008b26 	beq	r8,zero,100afd8 <__adddf3+0x7f0>
 100adac:	4811883a 	mov	r8,r9
 100adb0:	3023883a 	mov	r17,r6
 100adb4:	3825883a 	mov	r18,r7
 100adb8:	003eaa06 	br	100a864 <__alt_mem_TCDM+0xff009864>
 100adbc:	1021883a 	mov	r16,r2
 100adc0:	0011883a 	mov	r8,zero
 100adc4:	0005883a 	mov	r2,zero
 100adc8:	003f0f06 	br	100aa08 <__alt_mem_TCDM+0xff009a08>
 100adcc:	217ff804 	addi	r5,r4,-32
 100add0:	00800804 	movi	r2,32
 100add4:	494ad83a 	srl	r5,r9,r5
 100add8:	20807d26 	beq	r4,r2,100afd0 <__adddf3+0x7e8>
 100addc:	00801004 	movi	r2,64
 100ade0:	1109c83a 	sub	r4,r2,r4
 100ade4:	4912983a 	sll	r9,r9,r4
 100ade8:	498cb03a 	or	r6,r9,r6
 100adec:	300cc03a 	cmpne	r6,r6,zero
 100adf0:	298ab03a 	or	r5,r5,r6
 100adf4:	0013883a 	mov	r9,zero
 100adf8:	003f1506 	br	100aa50 <__alt_mem_TCDM+0xff009a50>
 100adfc:	0101ffc4 	movi	r4,2047
 100ae00:	113f9a1e 	bne	r2,r4,100ac6c <__alt_mem_TCDM+0xff009c6c>
 100ae04:	4811883a 	mov	r8,r9
 100ae08:	3023883a 	mov	r17,r6
 100ae0c:	1021883a 	mov	r16,r2
 100ae10:	3825883a 	mov	r18,r7
 100ae14:	003e9306 	br	100a864 <__alt_mem_TCDM+0xff009864>
 100ae18:	8000161e 	bne	r16,zero,100ae74 <__adddf3+0x68c>
 100ae1c:	444ab03a 	or	r5,r8,r17
 100ae20:	28005126 	beq	r5,zero,100af68 <__adddf3+0x780>
 100ae24:	0108303a 	nor	r4,zero,r4
 100ae28:	20004d1e 	bne	r4,zero,100af60 <__adddf3+0x778>
 100ae2c:	89a3883a 	add	r17,r17,r6
 100ae30:	4253883a 	add	r9,r8,r9
 100ae34:	898d803a 	cmpltu	r6,r17,r6
 100ae38:	3251883a 	add	r8,r6,r9
 100ae3c:	1021883a 	mov	r16,r2
 100ae40:	003f0806 	br	100aa64 <__alt_mem_TCDM+0xff009a64>
 100ae44:	1000301e 	bne	r2,zero,100af08 <__adddf3+0x720>
 100ae48:	4984b03a 	or	r2,r9,r6
 100ae4c:	10007126 	beq	r2,zero,100b014 <__adddf3+0x82c>
 100ae50:	4811883a 	mov	r8,r9
 100ae54:	3023883a 	mov	r17,r6
 100ae58:	3825883a 	mov	r18,r7
 100ae5c:	0401ffc4 	movi	r16,2047
 100ae60:	003e8006 	br	100a864 <__alt_mem_TCDM+0xff009864>
 100ae64:	4462b03a 	or	r17,r8,r17
 100ae68:	8822c03a 	cmpne	r17,r17,zero
 100ae6c:	0007883a 	mov	r3,zero
 100ae70:	003f8b06 	br	100aca0 <__alt_mem_TCDM+0xff009ca0>
 100ae74:	0141ffc4 	movi	r5,2047
 100ae78:	11403b26 	beq	r2,r5,100af68 <__adddf3+0x780>
 100ae7c:	0109c83a 	sub	r4,zero,r4
 100ae80:	42002034 	orhi	r8,r8,128
 100ae84:	01400e04 	movi	r5,56
 100ae88:	29006716 	blt	r5,r4,100b028 <__adddf3+0x840>
 100ae8c:	014007c4 	movi	r5,31
 100ae90:	29007016 	blt	r5,r4,100b054 <__adddf3+0x86c>
 100ae94:	01400804 	movi	r5,32
 100ae98:	290bc83a 	sub	r5,r5,r4
 100ae9c:	4154983a 	sll	r10,r8,r5
 100aea0:	890ed83a 	srl	r7,r17,r4
 100aea4:	894a983a 	sll	r5,r17,r5
 100aea8:	4108d83a 	srl	r4,r8,r4
 100aeac:	51e2b03a 	or	r17,r10,r7
 100aeb0:	280ac03a 	cmpne	r5,r5,zero
 100aeb4:	8962b03a 	or	r17,r17,r5
 100aeb8:	89a3883a 	add	r17,r17,r6
 100aebc:	2253883a 	add	r9,r4,r9
 100aec0:	898d803a 	cmpltu	r6,r17,r6
 100aec4:	3251883a 	add	r8,r6,r9
 100aec8:	1021883a 	mov	r16,r2
 100aecc:	003ee506 	br	100aa64 <__alt_mem_TCDM+0xff009a64>
 100aed0:	4984b03a 	or	r2,r9,r6
 100aed4:	103e6326 	beq	r2,zero,100a864 <__alt_mem_TCDM+0xff009864>
 100aed8:	8987c83a 	sub	r3,r17,r6
 100aedc:	88c9803a 	cmpltu	r4,r17,r3
 100aee0:	4245c83a 	sub	r2,r8,r9
 100aee4:	1105c83a 	sub	r2,r2,r4
 100aee8:	1100202c 	andhi	r4,r2,128
 100aeec:	203ebb26 	beq	r4,zero,100a9dc <__alt_mem_TCDM+0xff0099dc>
 100aef0:	3463c83a 	sub	r17,r6,r17
 100aef4:	4a07c83a 	sub	r3,r9,r8
 100aef8:	344d803a 	cmpltu	r6,r6,r17
 100aefc:	1991c83a 	sub	r8,r3,r6
 100af00:	3825883a 	mov	r18,r7
 100af04:	003e5706 	br	100a864 <__alt_mem_TCDM+0xff009864>
 100af08:	4984b03a 	or	r2,r9,r6
 100af0c:	10002e26 	beq	r2,zero,100afc8 <__adddf3+0x7e0>
 100af10:	4004d0fa 	srli	r2,r8,3
 100af14:	8822d0fa 	srli	r17,r17,3
 100af18:	4010977a 	slli	r8,r8,29
 100af1c:	10c0022c 	andhi	r3,r2,8
 100af20:	4462b03a 	or	r17,r8,r17
 100af24:	18000826 	beq	r3,zero,100af48 <__adddf3+0x760>
 100af28:	4808d0fa 	srli	r4,r9,3
 100af2c:	20c0022c 	andhi	r3,r4,8
 100af30:	1800051e 	bne	r3,zero,100af48 <__adddf3+0x760>
 100af34:	300cd0fa 	srli	r6,r6,3
 100af38:	4806977a 	slli	r3,r9,29
 100af3c:	2005883a 	mov	r2,r4
 100af40:	3825883a 	mov	r18,r7
 100af44:	19a2b03a 	or	r17,r3,r6
 100af48:	8810d77a 	srli	r8,r17,29
 100af4c:	100490fa 	slli	r2,r2,3
 100af50:	882290fa 	slli	r17,r17,3
 100af54:	0401ffc4 	movi	r16,2047
 100af58:	4090b03a 	or	r8,r8,r2
 100af5c:	003e4106 	br	100a864 <__alt_mem_TCDM+0xff009864>
 100af60:	0141ffc4 	movi	r5,2047
 100af64:	117fc71e 	bne	r2,r5,100ae84 <__alt_mem_TCDM+0xff009e84>
 100af68:	4811883a 	mov	r8,r9
 100af6c:	3023883a 	mov	r17,r6
 100af70:	1021883a 	mov	r16,r2
 100af74:	003e3b06 	br	100a864 <__alt_mem_TCDM+0xff009864>
 100af78:	10002f26 	beq	r2,zero,100b038 <__adddf3+0x850>
 100af7c:	4984b03a 	or	r2,r9,r6
 100af80:	10001126 	beq	r2,zero,100afc8 <__adddf3+0x7e0>
 100af84:	4004d0fa 	srli	r2,r8,3
 100af88:	8822d0fa 	srli	r17,r17,3
 100af8c:	4010977a 	slli	r8,r8,29
 100af90:	10c0022c 	andhi	r3,r2,8
 100af94:	4462b03a 	or	r17,r8,r17
 100af98:	183feb26 	beq	r3,zero,100af48 <__alt_mem_TCDM+0xff009f48>
 100af9c:	4808d0fa 	srli	r4,r9,3
 100afa0:	20c0022c 	andhi	r3,r4,8
 100afa4:	183fe81e 	bne	r3,zero,100af48 <__alt_mem_TCDM+0xff009f48>
 100afa8:	300cd0fa 	srli	r6,r6,3
 100afac:	4806977a 	slli	r3,r9,29
 100afb0:	2005883a 	mov	r2,r4
 100afb4:	19a2b03a 	or	r17,r3,r6
 100afb8:	003fe306 	br	100af48 <__alt_mem_TCDM+0xff009f48>
 100afbc:	0011883a 	mov	r8,zero
 100afc0:	0005883a 	mov	r2,zero
 100afc4:	003e3f06 	br	100a8c4 <__alt_mem_TCDM+0xff0098c4>
 100afc8:	0401ffc4 	movi	r16,2047
 100afcc:	003e2506 	br	100a864 <__alt_mem_TCDM+0xff009864>
 100afd0:	0013883a 	mov	r9,zero
 100afd4:	003f8406 	br	100ade8 <__alt_mem_TCDM+0xff009de8>
 100afd8:	0005883a 	mov	r2,zero
 100afdc:	0007883a 	mov	r3,zero
 100afe0:	003e8906 	br	100aa08 <__alt_mem_TCDM+0xff009a08>
 100afe4:	197ff804 	addi	r5,r3,-32
 100afe8:	01000804 	movi	r4,32
 100afec:	414ad83a 	srl	r5,r8,r5
 100aff0:	19002426 	beq	r3,r4,100b084 <__adddf3+0x89c>
 100aff4:	01001004 	movi	r4,64
 100aff8:	20c7c83a 	sub	r3,r4,r3
 100affc:	40c6983a 	sll	r3,r8,r3
 100b000:	1c46b03a 	or	r3,r3,r17
 100b004:	1806c03a 	cmpne	r3,r3,zero
 100b008:	28e2b03a 	or	r17,r5,r3
 100b00c:	0007883a 	mov	r3,zero
 100b010:	003f2306 	br	100aca0 <__alt_mem_TCDM+0xff009ca0>
 100b014:	0007883a 	mov	r3,zero
 100b018:	5811883a 	mov	r8,r11
 100b01c:	00bfffc4 	movi	r2,-1
 100b020:	0401ffc4 	movi	r16,2047
 100b024:	003e7806 	br	100aa08 <__alt_mem_TCDM+0xff009a08>
 100b028:	4462b03a 	or	r17,r8,r17
 100b02c:	8822c03a 	cmpne	r17,r17,zero
 100b030:	0009883a 	mov	r4,zero
 100b034:	003fa006 	br	100aeb8 <__alt_mem_TCDM+0xff009eb8>
 100b038:	4811883a 	mov	r8,r9
 100b03c:	3023883a 	mov	r17,r6
 100b040:	0401ffc4 	movi	r16,2047
 100b044:	003e0706 	br	100a864 <__alt_mem_TCDM+0xff009864>
 100b048:	4811883a 	mov	r8,r9
 100b04c:	3023883a 	mov	r17,r6
 100b050:	003e0406 	br	100a864 <__alt_mem_TCDM+0xff009864>
 100b054:	21fff804 	addi	r7,r4,-32
 100b058:	01400804 	movi	r5,32
 100b05c:	41ced83a 	srl	r7,r8,r7
 100b060:	21400a26 	beq	r4,r5,100b08c <__adddf3+0x8a4>
 100b064:	01401004 	movi	r5,64
 100b068:	2909c83a 	sub	r4,r5,r4
 100b06c:	4108983a 	sll	r4,r8,r4
 100b070:	2448b03a 	or	r4,r4,r17
 100b074:	2008c03a 	cmpne	r4,r4,zero
 100b078:	3922b03a 	or	r17,r7,r4
 100b07c:	0009883a 	mov	r4,zero
 100b080:	003f8d06 	br	100aeb8 <__alt_mem_TCDM+0xff009eb8>
 100b084:	0007883a 	mov	r3,zero
 100b088:	003fdd06 	br	100b000 <__alt_mem_TCDM+0xff00a000>
 100b08c:	0009883a 	mov	r4,zero
 100b090:	003ff706 	br	100b070 <__alt_mem_TCDM+0xff00a070>

0100b094 <__divdf3>:
 100b094:	defff204 	addi	sp,sp,-56
 100b098:	dd400915 	stw	r21,36(sp)
 100b09c:	282ad53a 	srli	r21,r5,20
 100b0a0:	dd000815 	stw	r20,32(sp)
 100b0a4:	2828d7fa 	srli	r20,r5,31
 100b0a8:	dc000415 	stw	r16,16(sp)
 100b0ac:	04000434 	movhi	r16,16
 100b0b0:	df000c15 	stw	fp,48(sp)
 100b0b4:	843fffc4 	addi	r16,r16,-1
 100b0b8:	dfc00d15 	stw	ra,52(sp)
 100b0bc:	ddc00b15 	stw	r23,44(sp)
 100b0c0:	dd800a15 	stw	r22,40(sp)
 100b0c4:	dcc00715 	stw	r19,28(sp)
 100b0c8:	dc800615 	stw	r18,24(sp)
 100b0cc:	dc400515 	stw	r17,20(sp)
 100b0d0:	ad41ffcc 	andi	r21,r21,2047
 100b0d4:	2c20703a 	and	r16,r5,r16
 100b0d8:	a7003fcc 	andi	fp,r20,255
 100b0dc:	a8006126 	beq	r21,zero,100b264 <__divdf3+0x1d0>
 100b0e0:	0081ffc4 	movi	r2,2047
 100b0e4:	2025883a 	mov	r18,r4
 100b0e8:	a8803726 	beq	r21,r2,100b1c8 <__divdf3+0x134>
 100b0ec:	80800434 	orhi	r2,r16,16
 100b0f0:	100490fa 	slli	r2,r2,3
 100b0f4:	2020d77a 	srli	r16,r4,29
 100b0f8:	202490fa 	slli	r18,r4,3
 100b0fc:	ad7f0044 	addi	r21,r21,-1023
 100b100:	80a0b03a 	or	r16,r16,r2
 100b104:	0027883a 	mov	r19,zero
 100b108:	0013883a 	mov	r9,zero
 100b10c:	3804d53a 	srli	r2,r7,20
 100b110:	382cd7fa 	srli	r22,r7,31
 100b114:	04400434 	movhi	r17,16
 100b118:	8c7fffc4 	addi	r17,r17,-1
 100b11c:	1081ffcc 	andi	r2,r2,2047
 100b120:	3011883a 	mov	r8,r6
 100b124:	3c62703a 	and	r17,r7,r17
 100b128:	b5c03fcc 	andi	r23,r22,255
 100b12c:	10006c26 	beq	r2,zero,100b2e0 <__divdf3+0x24c>
 100b130:	00c1ffc4 	movi	r3,2047
 100b134:	10c06426 	beq	r2,r3,100b2c8 <__divdf3+0x234>
 100b138:	88c00434 	orhi	r3,r17,16
 100b13c:	180690fa 	slli	r3,r3,3
 100b140:	3022d77a 	srli	r17,r6,29
 100b144:	301090fa 	slli	r8,r6,3
 100b148:	10bf0044 	addi	r2,r2,-1023
 100b14c:	88e2b03a 	or	r17,r17,r3
 100b150:	000f883a 	mov	r7,zero
 100b154:	a58cf03a 	xor	r6,r20,r22
 100b158:	3cc8b03a 	or	r4,r7,r19
 100b15c:	a8abc83a 	sub	r21,r21,r2
 100b160:	008003c4 	movi	r2,15
 100b164:	3007883a 	mov	r3,r6
 100b168:	34c03fcc 	andi	r19,r6,255
 100b16c:	11009036 	bltu	r2,r4,100b3b0 <__divdf3+0x31c>
 100b170:	200890ba 	slli	r4,r4,2
 100b174:	00804074 	movhi	r2,257
 100b178:	10ac6204 	addi	r2,r2,-20088
 100b17c:	2089883a 	add	r4,r4,r2
 100b180:	20800017 	ldw	r2,0(r4)
 100b184:	1000683a 	jmp	r2
 100b188:	0100b3b0 	cmpltui	r4,zero,718
 100b18c:	0100b200 	call	100b20 <__reset-0xeff4e0>
 100b190:	0100b3a0 	cmpeqi	r4,zero,718
 100b194:	0100b1f4 	movhi	r4,711
 100b198:	0100b3a0 	cmpeqi	r4,zero,718
 100b19c:	0100b374 	movhi	r4,717
 100b1a0:	0100b3a0 	cmpeqi	r4,zero,718
 100b1a4:	0100b1f4 	movhi	r4,711
 100b1a8:	0100b200 	call	100b20 <__reset-0xeff4e0>
 100b1ac:	0100b200 	call	100b20 <__reset-0xeff4e0>
 100b1b0:	0100b374 	movhi	r4,717
 100b1b4:	0100b1f4 	movhi	r4,711
 100b1b8:	0100b1e4 	muli	r4,zero,711
 100b1bc:	0100b1e4 	muli	r4,zero,711
 100b1c0:	0100b1e4 	muli	r4,zero,711
 100b1c4:	0100b694 	movui	r4,730
 100b1c8:	2404b03a 	or	r2,r4,r16
 100b1cc:	1000661e 	bne	r2,zero,100b368 <__divdf3+0x2d4>
 100b1d0:	04c00204 	movi	r19,8
 100b1d4:	0021883a 	mov	r16,zero
 100b1d8:	0025883a 	mov	r18,zero
 100b1dc:	02400084 	movi	r9,2
 100b1e0:	003fca06 	br	100b10c <__alt_mem_TCDM+0xff00a10c>
 100b1e4:	8023883a 	mov	r17,r16
 100b1e8:	9011883a 	mov	r8,r18
 100b1ec:	e02f883a 	mov	r23,fp
 100b1f0:	480f883a 	mov	r7,r9
 100b1f4:	00800084 	movi	r2,2
 100b1f8:	3881311e 	bne	r7,r2,100b6c0 <__divdf3+0x62c>
 100b1fc:	b827883a 	mov	r19,r23
 100b200:	98c0004c 	andi	r3,r19,1
 100b204:	0081ffc4 	movi	r2,2047
 100b208:	000b883a 	mov	r5,zero
 100b20c:	0025883a 	mov	r18,zero
 100b210:	1004953a 	slli	r2,r2,20
 100b214:	18c03fcc 	andi	r3,r3,255
 100b218:	04400434 	movhi	r17,16
 100b21c:	8c7fffc4 	addi	r17,r17,-1
 100b220:	180697fa 	slli	r3,r3,31
 100b224:	2c4a703a 	and	r5,r5,r17
 100b228:	288ab03a 	or	r5,r5,r2
 100b22c:	28c6b03a 	or	r3,r5,r3
 100b230:	9005883a 	mov	r2,r18
 100b234:	dfc00d17 	ldw	ra,52(sp)
 100b238:	df000c17 	ldw	fp,48(sp)
 100b23c:	ddc00b17 	ldw	r23,44(sp)
 100b240:	dd800a17 	ldw	r22,40(sp)
 100b244:	dd400917 	ldw	r21,36(sp)
 100b248:	dd000817 	ldw	r20,32(sp)
 100b24c:	dcc00717 	ldw	r19,28(sp)
 100b250:	dc800617 	ldw	r18,24(sp)
 100b254:	dc400517 	ldw	r17,20(sp)
 100b258:	dc000417 	ldw	r16,16(sp)
 100b25c:	dec00e04 	addi	sp,sp,56
 100b260:	f800283a 	ret
 100b264:	2404b03a 	or	r2,r4,r16
 100b268:	2027883a 	mov	r19,r4
 100b26c:	10003926 	beq	r2,zero,100b354 <__divdf3+0x2c0>
 100b270:	80012e26 	beq	r16,zero,100b72c <__divdf3+0x698>
 100b274:	8009883a 	mov	r4,r16
 100b278:	d9800315 	stw	r6,12(sp)
 100b27c:	d9c00215 	stw	r7,8(sp)
 100b280:	100cdec0 	call	100cdec <__clzsi2>
 100b284:	d9800317 	ldw	r6,12(sp)
 100b288:	d9c00217 	ldw	r7,8(sp)
 100b28c:	113ffd44 	addi	r4,r2,-11
 100b290:	00c00704 	movi	r3,28
 100b294:	19012116 	blt	r3,r4,100b71c <__divdf3+0x688>
 100b298:	00c00744 	movi	r3,29
 100b29c:	147ffe04 	addi	r17,r2,-8
 100b2a0:	1907c83a 	sub	r3,r3,r4
 100b2a4:	8460983a 	sll	r16,r16,r17
 100b2a8:	98c6d83a 	srl	r3,r19,r3
 100b2ac:	9c64983a 	sll	r18,r19,r17
 100b2b0:	1c20b03a 	or	r16,r3,r16
 100b2b4:	1080fcc4 	addi	r2,r2,1011
 100b2b8:	00abc83a 	sub	r21,zero,r2
 100b2bc:	0027883a 	mov	r19,zero
 100b2c0:	0013883a 	mov	r9,zero
 100b2c4:	003f9106 	br	100b10c <__alt_mem_TCDM+0xff00a10c>
 100b2c8:	3446b03a 	or	r3,r6,r17
 100b2cc:	18001f1e 	bne	r3,zero,100b34c <__divdf3+0x2b8>
 100b2d0:	0023883a 	mov	r17,zero
 100b2d4:	0011883a 	mov	r8,zero
 100b2d8:	01c00084 	movi	r7,2
 100b2dc:	003f9d06 	br	100b154 <__alt_mem_TCDM+0xff00a154>
 100b2e0:	3446b03a 	or	r3,r6,r17
 100b2e4:	18001526 	beq	r3,zero,100b33c <__divdf3+0x2a8>
 100b2e8:	88011b26 	beq	r17,zero,100b758 <__divdf3+0x6c4>
 100b2ec:	8809883a 	mov	r4,r17
 100b2f0:	d9800315 	stw	r6,12(sp)
 100b2f4:	da400115 	stw	r9,4(sp)
 100b2f8:	100cdec0 	call	100cdec <__clzsi2>
 100b2fc:	d9800317 	ldw	r6,12(sp)
 100b300:	da400117 	ldw	r9,4(sp)
 100b304:	113ffd44 	addi	r4,r2,-11
 100b308:	00c00704 	movi	r3,28
 100b30c:	19010e16 	blt	r3,r4,100b748 <__divdf3+0x6b4>
 100b310:	00c00744 	movi	r3,29
 100b314:	123ffe04 	addi	r8,r2,-8
 100b318:	1907c83a 	sub	r3,r3,r4
 100b31c:	8a22983a 	sll	r17,r17,r8
 100b320:	30c6d83a 	srl	r3,r6,r3
 100b324:	3210983a 	sll	r8,r6,r8
 100b328:	1c62b03a 	or	r17,r3,r17
 100b32c:	1080fcc4 	addi	r2,r2,1011
 100b330:	0085c83a 	sub	r2,zero,r2
 100b334:	000f883a 	mov	r7,zero
 100b338:	003f8606 	br	100b154 <__alt_mem_TCDM+0xff00a154>
 100b33c:	0023883a 	mov	r17,zero
 100b340:	0011883a 	mov	r8,zero
 100b344:	01c00044 	movi	r7,1
 100b348:	003f8206 	br	100b154 <__alt_mem_TCDM+0xff00a154>
 100b34c:	01c000c4 	movi	r7,3
 100b350:	003f8006 	br	100b154 <__alt_mem_TCDM+0xff00a154>
 100b354:	04c00104 	movi	r19,4
 100b358:	0021883a 	mov	r16,zero
 100b35c:	0025883a 	mov	r18,zero
 100b360:	02400044 	movi	r9,1
 100b364:	003f6906 	br	100b10c <__alt_mem_TCDM+0xff00a10c>
 100b368:	04c00304 	movi	r19,12
 100b36c:	024000c4 	movi	r9,3
 100b370:	003f6606 	br	100b10c <__alt_mem_TCDM+0xff00a10c>
 100b374:	01400434 	movhi	r5,16
 100b378:	0007883a 	mov	r3,zero
 100b37c:	297fffc4 	addi	r5,r5,-1
 100b380:	04bfffc4 	movi	r18,-1
 100b384:	0081ffc4 	movi	r2,2047
 100b388:	003fa106 	br	100b210 <__alt_mem_TCDM+0xff00a210>
 100b38c:	00c00044 	movi	r3,1
 100b390:	1887c83a 	sub	r3,r3,r2
 100b394:	01000e04 	movi	r4,56
 100b398:	20c1210e 	bge	r4,r3,100b820 <__divdf3+0x78c>
 100b39c:	98c0004c 	andi	r3,r19,1
 100b3a0:	0005883a 	mov	r2,zero
 100b3a4:	000b883a 	mov	r5,zero
 100b3a8:	0025883a 	mov	r18,zero
 100b3ac:	003f9806 	br	100b210 <__alt_mem_TCDM+0xff00a210>
 100b3b0:	8c00fd36 	bltu	r17,r16,100b7a8 <__divdf3+0x714>
 100b3b4:	8440fb26 	beq	r16,r17,100b7a4 <__divdf3+0x710>
 100b3b8:	8007883a 	mov	r3,r16
 100b3bc:	ad7fffc4 	addi	r21,r21,-1
 100b3c0:	0021883a 	mov	r16,zero
 100b3c4:	4004d63a 	srli	r2,r8,24
 100b3c8:	8822923a 	slli	r17,r17,8
 100b3cc:	1809883a 	mov	r4,r3
 100b3d0:	402c923a 	slli	r22,r8,8
 100b3d4:	88b8b03a 	or	fp,r17,r2
 100b3d8:	e028d43a 	srli	r20,fp,16
 100b3dc:	d8c00015 	stw	r3,0(sp)
 100b3e0:	e5ffffcc 	andi	r23,fp,65535
 100b3e4:	a00b883a 	mov	r5,r20
 100b3e8:	100a72c0 	call	100a72c <__udivsi3>
 100b3ec:	d8c00017 	ldw	r3,0(sp)
 100b3f0:	a00b883a 	mov	r5,r20
 100b3f4:	d8800315 	stw	r2,12(sp)
 100b3f8:	1809883a 	mov	r4,r3
 100b3fc:	100a7900 	call	100a790 <__umodsi3>
 100b400:	d9800317 	ldw	r6,12(sp)
 100b404:	1006943a 	slli	r3,r2,16
 100b408:	9004d43a 	srli	r2,r18,16
 100b40c:	b9a3383a 	mul	r17,r23,r6
 100b410:	10c4b03a 	or	r2,r2,r3
 100b414:	1440062e 	bgeu	r2,r17,100b430 <__divdf3+0x39c>
 100b418:	1705883a 	add	r2,r2,fp
 100b41c:	30ffffc4 	addi	r3,r6,-1
 100b420:	1700ee36 	bltu	r2,fp,100b7dc <__divdf3+0x748>
 100b424:	1440ed2e 	bgeu	r2,r17,100b7dc <__divdf3+0x748>
 100b428:	31bfff84 	addi	r6,r6,-2
 100b42c:	1705883a 	add	r2,r2,fp
 100b430:	1463c83a 	sub	r17,r2,r17
 100b434:	a00b883a 	mov	r5,r20
 100b438:	8809883a 	mov	r4,r17
 100b43c:	d9800315 	stw	r6,12(sp)
 100b440:	100a72c0 	call	100a72c <__udivsi3>
 100b444:	a00b883a 	mov	r5,r20
 100b448:	8809883a 	mov	r4,r17
 100b44c:	d8800215 	stw	r2,8(sp)
 100b450:	100a7900 	call	100a790 <__umodsi3>
 100b454:	d9c00217 	ldw	r7,8(sp)
 100b458:	1004943a 	slli	r2,r2,16
 100b45c:	94bfffcc 	andi	r18,r18,65535
 100b460:	b9d1383a 	mul	r8,r23,r7
 100b464:	90a4b03a 	or	r18,r18,r2
 100b468:	d9800317 	ldw	r6,12(sp)
 100b46c:	9200062e 	bgeu	r18,r8,100b488 <__divdf3+0x3f4>
 100b470:	9725883a 	add	r18,r18,fp
 100b474:	38bfffc4 	addi	r2,r7,-1
 100b478:	9700d636 	bltu	r18,fp,100b7d4 <__divdf3+0x740>
 100b47c:	9200d52e 	bgeu	r18,r8,100b7d4 <__divdf3+0x740>
 100b480:	39ffff84 	addi	r7,r7,-2
 100b484:	9725883a 	add	r18,r18,fp
 100b488:	3004943a 	slli	r2,r6,16
 100b48c:	b012d43a 	srli	r9,r22,16
 100b490:	b1bfffcc 	andi	r6,r22,65535
 100b494:	11e2b03a 	or	r17,r2,r7
 100b498:	8806d43a 	srli	r3,r17,16
 100b49c:	893fffcc 	andi	r4,r17,65535
 100b4a0:	218b383a 	mul	r5,r4,r6
 100b4a4:	30c5383a 	mul	r2,r6,r3
 100b4a8:	2249383a 	mul	r4,r4,r9
 100b4ac:	280ed43a 	srli	r7,r5,16
 100b4b0:	9225c83a 	sub	r18,r18,r8
 100b4b4:	2089883a 	add	r4,r4,r2
 100b4b8:	3909883a 	add	r4,r7,r4
 100b4bc:	1a47383a 	mul	r3,r3,r9
 100b4c0:	2080022e 	bgeu	r4,r2,100b4cc <__divdf3+0x438>
 100b4c4:	00800074 	movhi	r2,1
 100b4c8:	1887883a 	add	r3,r3,r2
 100b4cc:	2004d43a 	srli	r2,r4,16
 100b4d0:	2008943a 	slli	r4,r4,16
 100b4d4:	297fffcc 	andi	r5,r5,65535
 100b4d8:	10c7883a 	add	r3,r2,r3
 100b4dc:	2149883a 	add	r4,r4,r5
 100b4e0:	90c0a536 	bltu	r18,r3,100b778 <__divdf3+0x6e4>
 100b4e4:	90c0bf26 	beq	r18,r3,100b7e4 <__divdf3+0x750>
 100b4e8:	90c7c83a 	sub	r3,r18,r3
 100b4ec:	810fc83a 	sub	r7,r16,r4
 100b4f0:	81e5803a 	cmpltu	r18,r16,r7
 100b4f4:	1ca5c83a 	sub	r18,r3,r18
 100b4f8:	e480c126 	beq	fp,r18,100b800 <__divdf3+0x76c>
 100b4fc:	a00b883a 	mov	r5,r20
 100b500:	9009883a 	mov	r4,r18
 100b504:	d9800315 	stw	r6,12(sp)
 100b508:	d9c00215 	stw	r7,8(sp)
 100b50c:	da400115 	stw	r9,4(sp)
 100b510:	100a72c0 	call	100a72c <__udivsi3>
 100b514:	a00b883a 	mov	r5,r20
 100b518:	9009883a 	mov	r4,r18
 100b51c:	d8800015 	stw	r2,0(sp)
 100b520:	100a7900 	call	100a790 <__umodsi3>
 100b524:	d9c00217 	ldw	r7,8(sp)
 100b528:	da000017 	ldw	r8,0(sp)
 100b52c:	1006943a 	slli	r3,r2,16
 100b530:	3804d43a 	srli	r2,r7,16
 100b534:	ba21383a 	mul	r16,r23,r8
 100b538:	d9800317 	ldw	r6,12(sp)
 100b53c:	10c4b03a 	or	r2,r2,r3
 100b540:	da400117 	ldw	r9,4(sp)
 100b544:	1400062e 	bgeu	r2,r16,100b560 <__divdf3+0x4cc>
 100b548:	1705883a 	add	r2,r2,fp
 100b54c:	40ffffc4 	addi	r3,r8,-1
 100b550:	1700ad36 	bltu	r2,fp,100b808 <__divdf3+0x774>
 100b554:	1400ac2e 	bgeu	r2,r16,100b808 <__divdf3+0x774>
 100b558:	423fff84 	addi	r8,r8,-2
 100b55c:	1705883a 	add	r2,r2,fp
 100b560:	1421c83a 	sub	r16,r2,r16
 100b564:	a00b883a 	mov	r5,r20
 100b568:	8009883a 	mov	r4,r16
 100b56c:	d9800315 	stw	r6,12(sp)
 100b570:	d9c00215 	stw	r7,8(sp)
 100b574:	da000015 	stw	r8,0(sp)
 100b578:	da400115 	stw	r9,4(sp)
 100b57c:	100a72c0 	call	100a72c <__udivsi3>
 100b580:	8009883a 	mov	r4,r16
 100b584:	a00b883a 	mov	r5,r20
 100b588:	1025883a 	mov	r18,r2
 100b58c:	100a7900 	call	100a790 <__umodsi3>
 100b590:	d9c00217 	ldw	r7,8(sp)
 100b594:	1004943a 	slli	r2,r2,16
 100b598:	bcaf383a 	mul	r23,r23,r18
 100b59c:	393fffcc 	andi	r4,r7,65535
 100b5a0:	2088b03a 	or	r4,r4,r2
 100b5a4:	d9800317 	ldw	r6,12(sp)
 100b5a8:	da000017 	ldw	r8,0(sp)
 100b5ac:	da400117 	ldw	r9,4(sp)
 100b5b0:	25c0062e 	bgeu	r4,r23,100b5cc <__divdf3+0x538>
 100b5b4:	2709883a 	add	r4,r4,fp
 100b5b8:	90bfffc4 	addi	r2,r18,-1
 100b5bc:	27009436 	bltu	r4,fp,100b810 <__divdf3+0x77c>
 100b5c0:	25c0932e 	bgeu	r4,r23,100b810 <__divdf3+0x77c>
 100b5c4:	94bfff84 	addi	r18,r18,-2
 100b5c8:	2709883a 	add	r4,r4,fp
 100b5cc:	4004943a 	slli	r2,r8,16
 100b5d0:	25efc83a 	sub	r23,r4,r23
 100b5d4:	1490b03a 	or	r8,r2,r18
 100b5d8:	4008d43a 	srli	r4,r8,16
 100b5dc:	40ffffcc 	andi	r3,r8,65535
 100b5e0:	30c5383a 	mul	r2,r6,r3
 100b5e4:	1a47383a 	mul	r3,r3,r9
 100b5e8:	310d383a 	mul	r6,r6,r4
 100b5ec:	100ad43a 	srli	r5,r2,16
 100b5f0:	4913383a 	mul	r9,r9,r4
 100b5f4:	1987883a 	add	r3,r3,r6
 100b5f8:	28c7883a 	add	r3,r5,r3
 100b5fc:	1980022e 	bgeu	r3,r6,100b608 <__divdf3+0x574>
 100b600:	01000074 	movhi	r4,1
 100b604:	4913883a 	add	r9,r9,r4
 100b608:	1808d43a 	srli	r4,r3,16
 100b60c:	1806943a 	slli	r3,r3,16
 100b610:	10bfffcc 	andi	r2,r2,65535
 100b614:	2253883a 	add	r9,r4,r9
 100b618:	1887883a 	add	r3,r3,r2
 100b61c:	ba403836 	bltu	r23,r9,100b700 <__divdf3+0x66c>
 100b620:	ba403626 	beq	r23,r9,100b6fc <__divdf3+0x668>
 100b624:	42000054 	ori	r8,r8,1
 100b628:	a880ffc4 	addi	r2,r21,1023
 100b62c:	00bf570e 	bge	zero,r2,100b38c <__alt_mem_TCDM+0xff00a38c>
 100b630:	40c001cc 	andi	r3,r8,7
 100b634:	18000726 	beq	r3,zero,100b654 <__divdf3+0x5c0>
 100b638:	40c003cc 	andi	r3,r8,15
 100b63c:	01000104 	movi	r4,4
 100b640:	19000426 	beq	r3,r4,100b654 <__divdf3+0x5c0>
 100b644:	4107883a 	add	r3,r8,r4
 100b648:	1a11803a 	cmpltu	r8,r3,r8
 100b64c:	8a23883a 	add	r17,r17,r8
 100b650:	1811883a 	mov	r8,r3
 100b654:	88c0402c 	andhi	r3,r17,256
 100b658:	18000426 	beq	r3,zero,100b66c <__divdf3+0x5d8>
 100b65c:	00ffc034 	movhi	r3,65280
 100b660:	18ffffc4 	addi	r3,r3,-1
 100b664:	a8810004 	addi	r2,r21,1024
 100b668:	88e2703a 	and	r17,r17,r3
 100b66c:	00c1ff84 	movi	r3,2046
 100b670:	18bee316 	blt	r3,r2,100b200 <__alt_mem_TCDM+0xff00a200>
 100b674:	8824977a 	slli	r18,r17,29
 100b678:	4010d0fa 	srli	r8,r8,3
 100b67c:	8822927a 	slli	r17,r17,9
 100b680:	1081ffcc 	andi	r2,r2,2047
 100b684:	9224b03a 	or	r18,r18,r8
 100b688:	880ad33a 	srli	r5,r17,12
 100b68c:	98c0004c 	andi	r3,r19,1
 100b690:	003edf06 	br	100b210 <__alt_mem_TCDM+0xff00a210>
 100b694:	8080022c 	andhi	r2,r16,8
 100b698:	10001226 	beq	r2,zero,100b6e4 <__divdf3+0x650>
 100b69c:	8880022c 	andhi	r2,r17,8
 100b6a0:	1000101e 	bne	r2,zero,100b6e4 <__divdf3+0x650>
 100b6a4:	00800434 	movhi	r2,16
 100b6a8:	89400234 	orhi	r5,r17,8
 100b6ac:	10bfffc4 	addi	r2,r2,-1
 100b6b0:	b007883a 	mov	r3,r22
 100b6b4:	288a703a 	and	r5,r5,r2
 100b6b8:	4025883a 	mov	r18,r8
 100b6bc:	003f3106 	br	100b384 <__alt_mem_TCDM+0xff00a384>
 100b6c0:	008000c4 	movi	r2,3
 100b6c4:	3880a626 	beq	r7,r2,100b960 <__divdf3+0x8cc>
 100b6c8:	00800044 	movi	r2,1
 100b6cc:	3880521e 	bne	r7,r2,100b818 <__divdf3+0x784>
 100b6d0:	b807883a 	mov	r3,r23
 100b6d4:	0005883a 	mov	r2,zero
 100b6d8:	000b883a 	mov	r5,zero
 100b6dc:	0025883a 	mov	r18,zero
 100b6e0:	003ecb06 	br	100b210 <__alt_mem_TCDM+0xff00a210>
 100b6e4:	00800434 	movhi	r2,16
 100b6e8:	81400234 	orhi	r5,r16,8
 100b6ec:	10bfffc4 	addi	r2,r2,-1
 100b6f0:	a007883a 	mov	r3,r20
 100b6f4:	288a703a 	and	r5,r5,r2
 100b6f8:	003f2206 	br	100b384 <__alt_mem_TCDM+0xff00a384>
 100b6fc:	183fca26 	beq	r3,zero,100b628 <__alt_mem_TCDM+0xff00a628>
 100b700:	e5ef883a 	add	r23,fp,r23
 100b704:	40bfffc4 	addi	r2,r8,-1
 100b708:	bf00392e 	bgeu	r23,fp,100b7f0 <__divdf3+0x75c>
 100b70c:	1011883a 	mov	r8,r2
 100b710:	ba7fc41e 	bne	r23,r9,100b624 <__alt_mem_TCDM+0xff00a624>
 100b714:	b0ffc31e 	bne	r22,r3,100b624 <__alt_mem_TCDM+0xff00a624>
 100b718:	003fc306 	br	100b628 <__alt_mem_TCDM+0xff00a628>
 100b71c:	143ff604 	addi	r16,r2,-40
 100b720:	9c20983a 	sll	r16,r19,r16
 100b724:	0025883a 	mov	r18,zero
 100b728:	003ee206 	br	100b2b4 <__alt_mem_TCDM+0xff00a2b4>
 100b72c:	d9800315 	stw	r6,12(sp)
 100b730:	d9c00215 	stw	r7,8(sp)
 100b734:	100cdec0 	call	100cdec <__clzsi2>
 100b738:	10800804 	addi	r2,r2,32
 100b73c:	d9c00217 	ldw	r7,8(sp)
 100b740:	d9800317 	ldw	r6,12(sp)
 100b744:	003ed106 	br	100b28c <__alt_mem_TCDM+0xff00a28c>
 100b748:	147ff604 	addi	r17,r2,-40
 100b74c:	3462983a 	sll	r17,r6,r17
 100b750:	0011883a 	mov	r8,zero
 100b754:	003ef506 	br	100b32c <__alt_mem_TCDM+0xff00a32c>
 100b758:	3009883a 	mov	r4,r6
 100b75c:	d9800315 	stw	r6,12(sp)
 100b760:	da400115 	stw	r9,4(sp)
 100b764:	100cdec0 	call	100cdec <__clzsi2>
 100b768:	10800804 	addi	r2,r2,32
 100b76c:	da400117 	ldw	r9,4(sp)
 100b770:	d9800317 	ldw	r6,12(sp)
 100b774:	003ee306 	br	100b304 <__alt_mem_TCDM+0xff00a304>
 100b778:	85a1883a 	add	r16,r16,r22
 100b77c:	8585803a 	cmpltu	r2,r16,r22
 100b780:	1705883a 	add	r2,r2,fp
 100b784:	14a5883a 	add	r18,r2,r18
 100b788:	88bfffc4 	addi	r2,r17,-1
 100b78c:	e4800c2e 	bgeu	fp,r18,100b7c0 <__divdf3+0x72c>
 100b790:	90c03e36 	bltu	r18,r3,100b88c <__divdf3+0x7f8>
 100b794:	1c806926 	beq	r3,r18,100b93c <__divdf3+0x8a8>
 100b798:	90c7c83a 	sub	r3,r18,r3
 100b79c:	1023883a 	mov	r17,r2
 100b7a0:	003f5206 	br	100b4ec <__alt_mem_TCDM+0xff00a4ec>
 100b7a4:	923f0436 	bltu	r18,r8,100b3b8 <__alt_mem_TCDM+0xff00a3b8>
 100b7a8:	800897fa 	slli	r4,r16,31
 100b7ac:	9004d07a 	srli	r2,r18,1
 100b7b0:	8006d07a 	srli	r3,r16,1
 100b7b4:	902097fa 	slli	r16,r18,31
 100b7b8:	20a4b03a 	or	r18,r4,r2
 100b7bc:	003f0106 	br	100b3c4 <__alt_mem_TCDM+0xff00a3c4>
 100b7c0:	e4bff51e 	bne	fp,r18,100b798 <__alt_mem_TCDM+0xff00a798>
 100b7c4:	85bff22e 	bgeu	r16,r22,100b790 <__alt_mem_TCDM+0xff00a790>
 100b7c8:	e0c7c83a 	sub	r3,fp,r3
 100b7cc:	1023883a 	mov	r17,r2
 100b7d0:	003f4606 	br	100b4ec <__alt_mem_TCDM+0xff00a4ec>
 100b7d4:	100f883a 	mov	r7,r2
 100b7d8:	003f2b06 	br	100b488 <__alt_mem_TCDM+0xff00a488>
 100b7dc:	180d883a 	mov	r6,r3
 100b7e0:	003f1306 	br	100b430 <__alt_mem_TCDM+0xff00a430>
 100b7e4:	813fe436 	bltu	r16,r4,100b778 <__alt_mem_TCDM+0xff00a778>
 100b7e8:	0007883a 	mov	r3,zero
 100b7ec:	003f3f06 	br	100b4ec <__alt_mem_TCDM+0xff00a4ec>
 100b7f0:	ba402c36 	bltu	r23,r9,100b8a4 <__divdf3+0x810>
 100b7f4:	4dc05426 	beq	r9,r23,100b948 <__divdf3+0x8b4>
 100b7f8:	1011883a 	mov	r8,r2
 100b7fc:	003f8906 	br	100b624 <__alt_mem_TCDM+0xff00a624>
 100b800:	023fffc4 	movi	r8,-1
 100b804:	003f8806 	br	100b628 <__alt_mem_TCDM+0xff00a628>
 100b808:	1811883a 	mov	r8,r3
 100b80c:	003f5406 	br	100b560 <__alt_mem_TCDM+0xff00a560>
 100b810:	1025883a 	mov	r18,r2
 100b814:	003f6d06 	br	100b5cc <__alt_mem_TCDM+0xff00a5cc>
 100b818:	b827883a 	mov	r19,r23
 100b81c:	003f8206 	br	100b628 <__alt_mem_TCDM+0xff00a628>
 100b820:	010007c4 	movi	r4,31
 100b824:	20c02616 	blt	r4,r3,100b8c0 <__divdf3+0x82c>
 100b828:	00800804 	movi	r2,32
 100b82c:	10c5c83a 	sub	r2,r2,r3
 100b830:	888a983a 	sll	r5,r17,r2
 100b834:	40c8d83a 	srl	r4,r8,r3
 100b838:	4084983a 	sll	r2,r8,r2
 100b83c:	88e2d83a 	srl	r17,r17,r3
 100b840:	2906b03a 	or	r3,r5,r4
 100b844:	1004c03a 	cmpne	r2,r2,zero
 100b848:	1886b03a 	or	r3,r3,r2
 100b84c:	188001cc 	andi	r2,r3,7
 100b850:	10000726 	beq	r2,zero,100b870 <__divdf3+0x7dc>
 100b854:	188003cc 	andi	r2,r3,15
 100b858:	01000104 	movi	r4,4
 100b85c:	11000426 	beq	r2,r4,100b870 <__divdf3+0x7dc>
 100b860:	1805883a 	mov	r2,r3
 100b864:	10c00104 	addi	r3,r2,4
 100b868:	1885803a 	cmpltu	r2,r3,r2
 100b86c:	88a3883a 	add	r17,r17,r2
 100b870:	8880202c 	andhi	r2,r17,128
 100b874:	10002726 	beq	r2,zero,100b914 <__divdf3+0x880>
 100b878:	98c0004c 	andi	r3,r19,1
 100b87c:	00800044 	movi	r2,1
 100b880:	000b883a 	mov	r5,zero
 100b884:	0025883a 	mov	r18,zero
 100b888:	003e6106 	br	100b210 <__alt_mem_TCDM+0xff00a210>
 100b88c:	85a1883a 	add	r16,r16,r22
 100b890:	8585803a 	cmpltu	r2,r16,r22
 100b894:	1705883a 	add	r2,r2,fp
 100b898:	14a5883a 	add	r18,r2,r18
 100b89c:	8c7fff84 	addi	r17,r17,-2
 100b8a0:	003f1106 	br	100b4e8 <__alt_mem_TCDM+0xff00a4e8>
 100b8a4:	b589883a 	add	r4,r22,r22
 100b8a8:	25ad803a 	cmpltu	r22,r4,r22
 100b8ac:	b739883a 	add	fp,r22,fp
 100b8b0:	40bfff84 	addi	r2,r8,-2
 100b8b4:	bf2f883a 	add	r23,r23,fp
 100b8b8:	202d883a 	mov	r22,r4
 100b8bc:	003f9306 	br	100b70c <__alt_mem_TCDM+0xff00a70c>
 100b8c0:	013ff844 	movi	r4,-31
 100b8c4:	2085c83a 	sub	r2,r4,r2
 100b8c8:	8888d83a 	srl	r4,r17,r2
 100b8cc:	00800804 	movi	r2,32
 100b8d0:	18802126 	beq	r3,r2,100b958 <__divdf3+0x8c4>
 100b8d4:	00801004 	movi	r2,64
 100b8d8:	10c5c83a 	sub	r2,r2,r3
 100b8dc:	8884983a 	sll	r2,r17,r2
 100b8e0:	1204b03a 	or	r2,r2,r8
 100b8e4:	1004c03a 	cmpne	r2,r2,zero
 100b8e8:	2084b03a 	or	r2,r4,r2
 100b8ec:	144001cc 	andi	r17,r2,7
 100b8f0:	88000d1e 	bne	r17,zero,100b928 <__divdf3+0x894>
 100b8f4:	000b883a 	mov	r5,zero
 100b8f8:	1024d0fa 	srli	r18,r2,3
 100b8fc:	98c0004c 	andi	r3,r19,1
 100b900:	0005883a 	mov	r2,zero
 100b904:	9464b03a 	or	r18,r18,r17
 100b908:	003e4106 	br	100b210 <__alt_mem_TCDM+0xff00a210>
 100b90c:	1007883a 	mov	r3,r2
 100b910:	0023883a 	mov	r17,zero
 100b914:	880a927a 	slli	r5,r17,9
 100b918:	1805883a 	mov	r2,r3
 100b91c:	8822977a 	slli	r17,r17,29
 100b920:	280ad33a 	srli	r5,r5,12
 100b924:	003ff406 	br	100b8f8 <__alt_mem_TCDM+0xff00a8f8>
 100b928:	10c003cc 	andi	r3,r2,15
 100b92c:	01000104 	movi	r4,4
 100b930:	193ff626 	beq	r3,r4,100b90c <__alt_mem_TCDM+0xff00a90c>
 100b934:	0023883a 	mov	r17,zero
 100b938:	003fca06 	br	100b864 <__alt_mem_TCDM+0xff00a864>
 100b93c:	813fd336 	bltu	r16,r4,100b88c <__alt_mem_TCDM+0xff00a88c>
 100b940:	1023883a 	mov	r17,r2
 100b944:	003fa806 	br	100b7e8 <__alt_mem_TCDM+0xff00a7e8>
 100b948:	b0ffd636 	bltu	r22,r3,100b8a4 <__alt_mem_TCDM+0xff00a8a4>
 100b94c:	1011883a 	mov	r8,r2
 100b950:	b0ff341e 	bne	r22,r3,100b624 <__alt_mem_TCDM+0xff00a624>
 100b954:	003f3406 	br	100b628 <__alt_mem_TCDM+0xff00a628>
 100b958:	0005883a 	mov	r2,zero
 100b95c:	003fe006 	br	100b8e0 <__alt_mem_TCDM+0xff00a8e0>
 100b960:	00800434 	movhi	r2,16
 100b964:	89400234 	orhi	r5,r17,8
 100b968:	10bfffc4 	addi	r2,r2,-1
 100b96c:	b807883a 	mov	r3,r23
 100b970:	288a703a 	and	r5,r5,r2
 100b974:	4025883a 	mov	r18,r8
 100b978:	003e8206 	br	100b384 <__alt_mem_TCDM+0xff00a384>

0100b97c <__eqdf2>:
 100b97c:	2804d53a 	srli	r2,r5,20
 100b980:	3806d53a 	srli	r3,r7,20
 100b984:	02000434 	movhi	r8,16
 100b988:	423fffc4 	addi	r8,r8,-1
 100b98c:	1081ffcc 	andi	r2,r2,2047
 100b990:	0281ffc4 	movi	r10,2047
 100b994:	2a12703a 	and	r9,r5,r8
 100b998:	18c1ffcc 	andi	r3,r3,2047
 100b99c:	3a10703a 	and	r8,r7,r8
 100b9a0:	280ad7fa 	srli	r5,r5,31
 100b9a4:	380ed7fa 	srli	r7,r7,31
 100b9a8:	12801026 	beq	r2,r10,100b9ec <__eqdf2+0x70>
 100b9ac:	0281ffc4 	movi	r10,2047
 100b9b0:	1a800a26 	beq	r3,r10,100b9dc <__eqdf2+0x60>
 100b9b4:	10c00226 	beq	r2,r3,100b9c0 <__eqdf2+0x44>
 100b9b8:	00800044 	movi	r2,1
 100b9bc:	f800283a 	ret
 100b9c0:	4a3ffd1e 	bne	r9,r8,100b9b8 <__alt_mem_TCDM+0xff00a9b8>
 100b9c4:	21bffc1e 	bne	r4,r6,100b9b8 <__alt_mem_TCDM+0xff00a9b8>
 100b9c8:	29c00c26 	beq	r5,r7,100b9fc <__eqdf2+0x80>
 100b9cc:	103ffa1e 	bne	r2,zero,100b9b8 <__alt_mem_TCDM+0xff00a9b8>
 100b9d0:	2244b03a 	or	r2,r4,r9
 100b9d4:	1004c03a 	cmpne	r2,r2,zero
 100b9d8:	f800283a 	ret
 100b9dc:	3214b03a 	or	r10,r6,r8
 100b9e0:	503ff426 	beq	r10,zero,100b9b4 <__alt_mem_TCDM+0xff00a9b4>
 100b9e4:	00800044 	movi	r2,1
 100b9e8:	f800283a 	ret
 100b9ec:	2254b03a 	or	r10,r4,r9
 100b9f0:	503fee26 	beq	r10,zero,100b9ac <__alt_mem_TCDM+0xff00a9ac>
 100b9f4:	00800044 	movi	r2,1
 100b9f8:	f800283a 	ret
 100b9fc:	0005883a 	mov	r2,zero
 100ba00:	f800283a 	ret

0100ba04 <__gedf2>:
 100ba04:	2804d53a 	srli	r2,r5,20
 100ba08:	3806d53a 	srli	r3,r7,20
 100ba0c:	02000434 	movhi	r8,16
 100ba10:	423fffc4 	addi	r8,r8,-1
 100ba14:	1081ffcc 	andi	r2,r2,2047
 100ba18:	0241ffc4 	movi	r9,2047
 100ba1c:	2a14703a 	and	r10,r5,r8
 100ba20:	18c1ffcc 	andi	r3,r3,2047
 100ba24:	3a10703a 	and	r8,r7,r8
 100ba28:	280ad7fa 	srli	r5,r5,31
 100ba2c:	380ed7fa 	srli	r7,r7,31
 100ba30:	12401d26 	beq	r2,r9,100baa8 <__gedf2+0xa4>
 100ba34:	0241ffc4 	movi	r9,2047
 100ba38:	1a401226 	beq	r3,r9,100ba84 <__gedf2+0x80>
 100ba3c:	1000081e 	bne	r2,zero,100ba60 <__gedf2+0x5c>
 100ba40:	2296b03a 	or	r11,r4,r10
 100ba44:	5813003a 	cmpeq	r9,r11,zero
 100ba48:	1800091e 	bne	r3,zero,100ba70 <__gedf2+0x6c>
 100ba4c:	3218b03a 	or	r12,r6,r8
 100ba50:	6000071e 	bne	r12,zero,100ba70 <__gedf2+0x6c>
 100ba54:	0005883a 	mov	r2,zero
 100ba58:	5800101e 	bne	r11,zero,100ba9c <__gedf2+0x98>
 100ba5c:	f800283a 	ret
 100ba60:	18000c1e 	bne	r3,zero,100ba94 <__gedf2+0x90>
 100ba64:	3212b03a 	or	r9,r6,r8
 100ba68:	48000c26 	beq	r9,zero,100ba9c <__gedf2+0x98>
 100ba6c:	0013883a 	mov	r9,zero
 100ba70:	39c03fcc 	andi	r7,r7,255
 100ba74:	48000826 	beq	r9,zero,100ba98 <__gedf2+0x94>
 100ba78:	38000926 	beq	r7,zero,100baa0 <__gedf2+0x9c>
 100ba7c:	00800044 	movi	r2,1
 100ba80:	f800283a 	ret
 100ba84:	3212b03a 	or	r9,r6,r8
 100ba88:	483fec26 	beq	r9,zero,100ba3c <__alt_mem_TCDM+0xff00aa3c>
 100ba8c:	00bfff84 	movi	r2,-2
 100ba90:	f800283a 	ret
 100ba94:	39c03fcc 	andi	r7,r7,255
 100ba98:	29c00626 	beq	r5,r7,100bab4 <__gedf2+0xb0>
 100ba9c:	283ff726 	beq	r5,zero,100ba7c <__alt_mem_TCDM+0xff00aa7c>
 100baa0:	00bfffc4 	movi	r2,-1
 100baa4:	f800283a 	ret
 100baa8:	2292b03a 	or	r9,r4,r10
 100baac:	483fe126 	beq	r9,zero,100ba34 <__alt_mem_TCDM+0xff00aa34>
 100bab0:	003ff606 	br	100ba8c <__alt_mem_TCDM+0xff00aa8c>
 100bab4:	18bff916 	blt	r3,r2,100ba9c <__alt_mem_TCDM+0xff00aa9c>
 100bab8:	10c00316 	blt	r2,r3,100bac8 <__gedf2+0xc4>
 100babc:	42bff736 	bltu	r8,r10,100ba9c <__alt_mem_TCDM+0xff00aa9c>
 100bac0:	52000326 	beq	r10,r8,100bad0 <__gedf2+0xcc>
 100bac4:	5200042e 	bgeu	r10,r8,100bad8 <__gedf2+0xd4>
 100bac8:	283fec1e 	bne	r5,zero,100ba7c <__alt_mem_TCDM+0xff00aa7c>
 100bacc:	003ff406 	br	100baa0 <__alt_mem_TCDM+0xff00aaa0>
 100bad0:	313ff236 	bltu	r6,r4,100ba9c <__alt_mem_TCDM+0xff00aa9c>
 100bad4:	21bffc36 	bltu	r4,r6,100bac8 <__alt_mem_TCDM+0xff00aac8>
 100bad8:	0005883a 	mov	r2,zero
 100badc:	f800283a 	ret

0100bae0 <__ledf2>:
 100bae0:	2804d53a 	srli	r2,r5,20
 100bae4:	3810d53a 	srli	r8,r7,20
 100bae8:	00c00434 	movhi	r3,16
 100baec:	18ffffc4 	addi	r3,r3,-1
 100baf0:	1081ffcc 	andi	r2,r2,2047
 100baf4:	0241ffc4 	movi	r9,2047
 100baf8:	28d4703a 	and	r10,r5,r3
 100bafc:	4201ffcc 	andi	r8,r8,2047
 100bb00:	38c6703a 	and	r3,r7,r3
 100bb04:	280ad7fa 	srli	r5,r5,31
 100bb08:	380ed7fa 	srli	r7,r7,31
 100bb0c:	12401f26 	beq	r2,r9,100bb8c <__ledf2+0xac>
 100bb10:	0241ffc4 	movi	r9,2047
 100bb14:	42401426 	beq	r8,r9,100bb68 <__ledf2+0x88>
 100bb18:	1000091e 	bne	r2,zero,100bb40 <__ledf2+0x60>
 100bb1c:	2296b03a 	or	r11,r4,r10
 100bb20:	5813003a 	cmpeq	r9,r11,zero
 100bb24:	29403fcc 	andi	r5,r5,255
 100bb28:	40000a1e 	bne	r8,zero,100bb54 <__ledf2+0x74>
 100bb2c:	30d8b03a 	or	r12,r6,r3
 100bb30:	6000081e 	bne	r12,zero,100bb54 <__ledf2+0x74>
 100bb34:	0005883a 	mov	r2,zero
 100bb38:	5800111e 	bne	r11,zero,100bb80 <__ledf2+0xa0>
 100bb3c:	f800283a 	ret
 100bb40:	29403fcc 	andi	r5,r5,255
 100bb44:	40000c1e 	bne	r8,zero,100bb78 <__ledf2+0x98>
 100bb48:	30d2b03a 	or	r9,r6,r3
 100bb4c:	48000c26 	beq	r9,zero,100bb80 <__ledf2+0xa0>
 100bb50:	0013883a 	mov	r9,zero
 100bb54:	39c03fcc 	andi	r7,r7,255
 100bb58:	48000826 	beq	r9,zero,100bb7c <__ledf2+0x9c>
 100bb5c:	38001126 	beq	r7,zero,100bba4 <__ledf2+0xc4>
 100bb60:	00800044 	movi	r2,1
 100bb64:	f800283a 	ret
 100bb68:	30d2b03a 	or	r9,r6,r3
 100bb6c:	483fea26 	beq	r9,zero,100bb18 <__alt_mem_TCDM+0xff00ab18>
 100bb70:	00800084 	movi	r2,2
 100bb74:	f800283a 	ret
 100bb78:	39c03fcc 	andi	r7,r7,255
 100bb7c:	39400726 	beq	r7,r5,100bb9c <__ledf2+0xbc>
 100bb80:	2800081e 	bne	r5,zero,100bba4 <__ledf2+0xc4>
 100bb84:	00800044 	movi	r2,1
 100bb88:	f800283a 	ret
 100bb8c:	2292b03a 	or	r9,r4,r10
 100bb90:	483fdf26 	beq	r9,zero,100bb10 <__alt_mem_TCDM+0xff00ab10>
 100bb94:	00800084 	movi	r2,2
 100bb98:	f800283a 	ret
 100bb9c:	4080030e 	bge	r8,r2,100bbac <__ledf2+0xcc>
 100bba0:	383fef26 	beq	r7,zero,100bb60 <__alt_mem_TCDM+0xff00ab60>
 100bba4:	00bfffc4 	movi	r2,-1
 100bba8:	f800283a 	ret
 100bbac:	123feb16 	blt	r2,r8,100bb5c <__alt_mem_TCDM+0xff00ab5c>
 100bbb0:	1abff336 	bltu	r3,r10,100bb80 <__alt_mem_TCDM+0xff00ab80>
 100bbb4:	50c00326 	beq	r10,r3,100bbc4 <__ledf2+0xe4>
 100bbb8:	50c0042e 	bgeu	r10,r3,100bbcc <__ledf2+0xec>
 100bbbc:	283fe81e 	bne	r5,zero,100bb60 <__alt_mem_TCDM+0xff00ab60>
 100bbc0:	003ff806 	br	100bba4 <__alt_mem_TCDM+0xff00aba4>
 100bbc4:	313fee36 	bltu	r6,r4,100bb80 <__alt_mem_TCDM+0xff00ab80>
 100bbc8:	21bffc36 	bltu	r4,r6,100bbbc <__alt_mem_TCDM+0xff00abbc>
 100bbcc:	0005883a 	mov	r2,zero
 100bbd0:	f800283a 	ret

0100bbd4 <__muldf3>:
 100bbd4:	defff304 	addi	sp,sp,-52
 100bbd8:	2804d53a 	srli	r2,r5,20
 100bbdc:	dd800915 	stw	r22,36(sp)
 100bbe0:	282cd7fa 	srli	r22,r5,31
 100bbe4:	dc000315 	stw	r16,12(sp)
 100bbe8:	04000434 	movhi	r16,16
 100bbec:	dd400815 	stw	r21,32(sp)
 100bbf0:	dc800515 	stw	r18,20(sp)
 100bbf4:	843fffc4 	addi	r16,r16,-1
 100bbf8:	dfc00c15 	stw	ra,48(sp)
 100bbfc:	df000b15 	stw	fp,44(sp)
 100bc00:	ddc00a15 	stw	r23,40(sp)
 100bc04:	dd000715 	stw	r20,28(sp)
 100bc08:	dcc00615 	stw	r19,24(sp)
 100bc0c:	dc400415 	stw	r17,16(sp)
 100bc10:	1481ffcc 	andi	r18,r2,2047
 100bc14:	2c20703a 	and	r16,r5,r16
 100bc18:	b02b883a 	mov	r21,r22
 100bc1c:	b2403fcc 	andi	r9,r22,255
 100bc20:	90006026 	beq	r18,zero,100bda4 <__muldf3+0x1d0>
 100bc24:	0081ffc4 	movi	r2,2047
 100bc28:	2029883a 	mov	r20,r4
 100bc2c:	90803626 	beq	r18,r2,100bd08 <__muldf3+0x134>
 100bc30:	80800434 	orhi	r2,r16,16
 100bc34:	100490fa 	slli	r2,r2,3
 100bc38:	2020d77a 	srli	r16,r4,29
 100bc3c:	202890fa 	slli	r20,r4,3
 100bc40:	94bf0044 	addi	r18,r18,-1023
 100bc44:	80a0b03a 	or	r16,r16,r2
 100bc48:	0027883a 	mov	r19,zero
 100bc4c:	0039883a 	mov	fp,zero
 100bc50:	3804d53a 	srli	r2,r7,20
 100bc54:	382ed7fa 	srli	r23,r7,31
 100bc58:	04400434 	movhi	r17,16
 100bc5c:	8c7fffc4 	addi	r17,r17,-1
 100bc60:	1081ffcc 	andi	r2,r2,2047
 100bc64:	3011883a 	mov	r8,r6
 100bc68:	3c62703a 	and	r17,r7,r17
 100bc6c:	ba803fcc 	andi	r10,r23,255
 100bc70:	10006d26 	beq	r2,zero,100be28 <__muldf3+0x254>
 100bc74:	00c1ffc4 	movi	r3,2047
 100bc78:	10c06526 	beq	r2,r3,100be10 <__muldf3+0x23c>
 100bc7c:	88c00434 	orhi	r3,r17,16
 100bc80:	180690fa 	slli	r3,r3,3
 100bc84:	3022d77a 	srli	r17,r6,29
 100bc88:	301090fa 	slli	r8,r6,3
 100bc8c:	10bf0044 	addi	r2,r2,-1023
 100bc90:	88e2b03a 	or	r17,r17,r3
 100bc94:	000b883a 	mov	r5,zero
 100bc98:	9085883a 	add	r2,r18,r2
 100bc9c:	2cc8b03a 	or	r4,r5,r19
 100bca0:	00c003c4 	movi	r3,15
 100bca4:	bdacf03a 	xor	r22,r23,r22
 100bca8:	12c00044 	addi	r11,r2,1
 100bcac:	19009936 	bltu	r3,r4,100bf14 <__muldf3+0x340>
 100bcb0:	200890ba 	slli	r4,r4,2
 100bcb4:	00c04074 	movhi	r3,257
 100bcb8:	18ef3204 	addi	r3,r3,-17208
 100bcbc:	20c9883a 	add	r4,r4,r3
 100bcc0:	20c00017 	ldw	r3,0(r4)
 100bcc4:	1800683a 	jmp	r3
 100bcc8:	0100bf14 	movui	r4,764
 100bccc:	0100bd28 	cmpgeui	r4,zero,756
 100bcd0:	0100bd28 	cmpgeui	r4,zero,756
 100bcd4:	0100bd24 	muli	r4,zero,756
 100bcd8:	0100bef0 	cmpltui	r4,zero,763
 100bcdc:	0100bef0 	cmpltui	r4,zero,763
 100bce0:	0100bed8 	cmpnei	r4,zero,763
 100bce4:	0100bd24 	muli	r4,zero,756
 100bce8:	0100bef0 	cmpltui	r4,zero,763
 100bcec:	0100bed8 	cmpnei	r4,zero,763
 100bcf0:	0100bef0 	cmpltui	r4,zero,763
 100bcf4:	0100bd24 	muli	r4,zero,756
 100bcf8:	0100bf00 	call	100bf0 <__reset-0xeff410>
 100bcfc:	0100bf00 	call	100bf0 <__reset-0xeff410>
 100bd00:	0100bf00 	call	100bf0 <__reset-0xeff410>
 100bd04:	0100c11c 	xori	r4,zero,772
 100bd08:	2404b03a 	or	r2,r4,r16
 100bd0c:	10006f1e 	bne	r2,zero,100becc <__muldf3+0x2f8>
 100bd10:	04c00204 	movi	r19,8
 100bd14:	0021883a 	mov	r16,zero
 100bd18:	0029883a 	mov	r20,zero
 100bd1c:	07000084 	movi	fp,2
 100bd20:	003fcb06 	br	100bc50 <__alt_mem_TCDM+0xff00ac50>
 100bd24:	502d883a 	mov	r22,r10
 100bd28:	00800084 	movi	r2,2
 100bd2c:	28805726 	beq	r5,r2,100be8c <__muldf3+0x2b8>
 100bd30:	008000c4 	movi	r2,3
 100bd34:	28816626 	beq	r5,r2,100c2d0 <__muldf3+0x6fc>
 100bd38:	00800044 	movi	r2,1
 100bd3c:	2881411e 	bne	r5,r2,100c244 <__muldf3+0x670>
 100bd40:	b02b883a 	mov	r21,r22
 100bd44:	0005883a 	mov	r2,zero
 100bd48:	000b883a 	mov	r5,zero
 100bd4c:	0029883a 	mov	r20,zero
 100bd50:	1004953a 	slli	r2,r2,20
 100bd54:	a8c03fcc 	andi	r3,r21,255
 100bd58:	04400434 	movhi	r17,16
 100bd5c:	8c7fffc4 	addi	r17,r17,-1
 100bd60:	180697fa 	slli	r3,r3,31
 100bd64:	2c4a703a 	and	r5,r5,r17
 100bd68:	288ab03a 	or	r5,r5,r2
 100bd6c:	28c6b03a 	or	r3,r5,r3
 100bd70:	a005883a 	mov	r2,r20
 100bd74:	dfc00c17 	ldw	ra,48(sp)
 100bd78:	df000b17 	ldw	fp,44(sp)
 100bd7c:	ddc00a17 	ldw	r23,40(sp)
 100bd80:	dd800917 	ldw	r22,36(sp)
 100bd84:	dd400817 	ldw	r21,32(sp)
 100bd88:	dd000717 	ldw	r20,28(sp)
 100bd8c:	dcc00617 	ldw	r19,24(sp)
 100bd90:	dc800517 	ldw	r18,20(sp)
 100bd94:	dc400417 	ldw	r17,16(sp)
 100bd98:	dc000317 	ldw	r16,12(sp)
 100bd9c:	dec00d04 	addi	sp,sp,52
 100bda0:	f800283a 	ret
 100bda4:	2404b03a 	or	r2,r4,r16
 100bda8:	2027883a 	mov	r19,r4
 100bdac:	10004226 	beq	r2,zero,100beb8 <__muldf3+0x2e4>
 100bdb0:	8000fc26 	beq	r16,zero,100c1a4 <__muldf3+0x5d0>
 100bdb4:	8009883a 	mov	r4,r16
 100bdb8:	d9800215 	stw	r6,8(sp)
 100bdbc:	d9c00015 	stw	r7,0(sp)
 100bdc0:	da400115 	stw	r9,4(sp)
 100bdc4:	100cdec0 	call	100cdec <__clzsi2>
 100bdc8:	d9800217 	ldw	r6,8(sp)
 100bdcc:	d9c00017 	ldw	r7,0(sp)
 100bdd0:	da400117 	ldw	r9,4(sp)
 100bdd4:	113ffd44 	addi	r4,r2,-11
 100bdd8:	00c00704 	movi	r3,28
 100bddc:	1900ed16 	blt	r3,r4,100c194 <__muldf3+0x5c0>
 100bde0:	00c00744 	movi	r3,29
 100bde4:	147ffe04 	addi	r17,r2,-8
 100bde8:	1907c83a 	sub	r3,r3,r4
 100bdec:	8460983a 	sll	r16,r16,r17
 100bdf0:	98c6d83a 	srl	r3,r19,r3
 100bdf4:	9c68983a 	sll	r20,r19,r17
 100bdf8:	1c20b03a 	or	r16,r3,r16
 100bdfc:	1080fcc4 	addi	r2,r2,1011
 100be00:	00a5c83a 	sub	r18,zero,r2
 100be04:	0027883a 	mov	r19,zero
 100be08:	0039883a 	mov	fp,zero
 100be0c:	003f9006 	br	100bc50 <__alt_mem_TCDM+0xff00ac50>
 100be10:	3446b03a 	or	r3,r6,r17
 100be14:	1800261e 	bne	r3,zero,100beb0 <__muldf3+0x2dc>
 100be18:	0023883a 	mov	r17,zero
 100be1c:	0011883a 	mov	r8,zero
 100be20:	01400084 	movi	r5,2
 100be24:	003f9c06 	br	100bc98 <__alt_mem_TCDM+0xff00ac98>
 100be28:	3446b03a 	or	r3,r6,r17
 100be2c:	18001c26 	beq	r3,zero,100bea0 <__muldf3+0x2cc>
 100be30:	8800ce26 	beq	r17,zero,100c16c <__muldf3+0x598>
 100be34:	8809883a 	mov	r4,r17
 100be38:	d9800215 	stw	r6,8(sp)
 100be3c:	da400115 	stw	r9,4(sp)
 100be40:	da800015 	stw	r10,0(sp)
 100be44:	100cdec0 	call	100cdec <__clzsi2>
 100be48:	d9800217 	ldw	r6,8(sp)
 100be4c:	da400117 	ldw	r9,4(sp)
 100be50:	da800017 	ldw	r10,0(sp)
 100be54:	113ffd44 	addi	r4,r2,-11
 100be58:	00c00704 	movi	r3,28
 100be5c:	1900bf16 	blt	r3,r4,100c15c <__muldf3+0x588>
 100be60:	00c00744 	movi	r3,29
 100be64:	123ffe04 	addi	r8,r2,-8
 100be68:	1907c83a 	sub	r3,r3,r4
 100be6c:	8a22983a 	sll	r17,r17,r8
 100be70:	30c6d83a 	srl	r3,r6,r3
 100be74:	3210983a 	sll	r8,r6,r8
 100be78:	1c62b03a 	or	r17,r3,r17
 100be7c:	1080fcc4 	addi	r2,r2,1011
 100be80:	0085c83a 	sub	r2,zero,r2
 100be84:	000b883a 	mov	r5,zero
 100be88:	003f8306 	br	100bc98 <__alt_mem_TCDM+0xff00ac98>
 100be8c:	b02b883a 	mov	r21,r22
 100be90:	0081ffc4 	movi	r2,2047
 100be94:	000b883a 	mov	r5,zero
 100be98:	0029883a 	mov	r20,zero
 100be9c:	003fac06 	br	100bd50 <__alt_mem_TCDM+0xff00ad50>
 100bea0:	0023883a 	mov	r17,zero
 100bea4:	0011883a 	mov	r8,zero
 100bea8:	01400044 	movi	r5,1
 100beac:	003f7a06 	br	100bc98 <__alt_mem_TCDM+0xff00ac98>
 100beb0:	014000c4 	movi	r5,3
 100beb4:	003f7806 	br	100bc98 <__alt_mem_TCDM+0xff00ac98>
 100beb8:	04c00104 	movi	r19,4
 100bebc:	0021883a 	mov	r16,zero
 100bec0:	0029883a 	mov	r20,zero
 100bec4:	07000044 	movi	fp,1
 100bec8:	003f6106 	br	100bc50 <__alt_mem_TCDM+0xff00ac50>
 100becc:	04c00304 	movi	r19,12
 100bed0:	070000c4 	movi	fp,3
 100bed4:	003f5e06 	br	100bc50 <__alt_mem_TCDM+0xff00ac50>
 100bed8:	01400434 	movhi	r5,16
 100bedc:	002b883a 	mov	r21,zero
 100bee0:	297fffc4 	addi	r5,r5,-1
 100bee4:	053fffc4 	movi	r20,-1
 100bee8:	0081ffc4 	movi	r2,2047
 100beec:	003f9806 	br	100bd50 <__alt_mem_TCDM+0xff00ad50>
 100bef0:	8023883a 	mov	r17,r16
 100bef4:	a011883a 	mov	r8,r20
 100bef8:	e00b883a 	mov	r5,fp
 100befc:	003f8a06 	br	100bd28 <__alt_mem_TCDM+0xff00ad28>
 100bf00:	8023883a 	mov	r17,r16
 100bf04:	a011883a 	mov	r8,r20
 100bf08:	482d883a 	mov	r22,r9
 100bf0c:	e00b883a 	mov	r5,fp
 100bf10:	003f8506 	br	100bd28 <__alt_mem_TCDM+0xff00ad28>
 100bf14:	a00ad43a 	srli	r5,r20,16
 100bf18:	401ad43a 	srli	r13,r8,16
 100bf1c:	a53fffcc 	andi	r20,r20,65535
 100bf20:	423fffcc 	andi	r8,r8,65535
 100bf24:	4519383a 	mul	r12,r8,r20
 100bf28:	4147383a 	mul	r3,r8,r5
 100bf2c:	6d09383a 	mul	r4,r13,r20
 100bf30:	600cd43a 	srli	r6,r12,16
 100bf34:	2b5d383a 	mul	r14,r5,r13
 100bf38:	20c9883a 	add	r4,r4,r3
 100bf3c:	310d883a 	add	r6,r6,r4
 100bf40:	30c0022e 	bgeu	r6,r3,100bf4c <__muldf3+0x378>
 100bf44:	00c00074 	movhi	r3,1
 100bf48:	70dd883a 	add	r14,r14,r3
 100bf4c:	8826d43a 	srli	r19,r17,16
 100bf50:	8bffffcc 	andi	r15,r17,65535
 100bf54:	7d23383a 	mul	r17,r15,r20
 100bf58:	7949383a 	mul	r4,r15,r5
 100bf5c:	9d29383a 	mul	r20,r19,r20
 100bf60:	8814d43a 	srli	r10,r17,16
 100bf64:	3012943a 	slli	r9,r6,16
 100bf68:	a129883a 	add	r20,r20,r4
 100bf6c:	633fffcc 	andi	r12,r12,65535
 100bf70:	5515883a 	add	r10,r10,r20
 100bf74:	3006d43a 	srli	r3,r6,16
 100bf78:	4b13883a 	add	r9,r9,r12
 100bf7c:	2ccb383a 	mul	r5,r5,r19
 100bf80:	5100022e 	bgeu	r10,r4,100bf8c <__muldf3+0x3b8>
 100bf84:	01000074 	movhi	r4,1
 100bf88:	290b883a 	add	r5,r5,r4
 100bf8c:	802ad43a 	srli	r21,r16,16
 100bf90:	843fffcc 	andi	r16,r16,65535
 100bf94:	440d383a 	mul	r6,r8,r16
 100bf98:	4565383a 	mul	r18,r8,r21
 100bf9c:	8349383a 	mul	r4,r16,r13
 100bfa0:	500e943a 	slli	r7,r10,16
 100bfa4:	3010d43a 	srli	r8,r6,16
 100bfa8:	5028d43a 	srli	r20,r10,16
 100bfac:	2489883a 	add	r4,r4,r18
 100bfb0:	8abfffcc 	andi	r10,r17,65535
 100bfb4:	3a95883a 	add	r10,r7,r10
 100bfb8:	4119883a 	add	r12,r8,r4
 100bfbc:	a169883a 	add	r20,r20,r5
 100bfc0:	1a87883a 	add	r3,r3,r10
 100bfc4:	6d5b383a 	mul	r13,r13,r21
 100bfc8:	6480022e 	bgeu	r12,r18,100bfd4 <__muldf3+0x400>
 100bfcc:	01000074 	movhi	r4,1
 100bfd0:	691b883a 	add	r13,r13,r4
 100bfd4:	7c25383a 	mul	r18,r15,r16
 100bfd8:	7d4b383a 	mul	r5,r15,r21
 100bfdc:	84cf383a 	mul	r7,r16,r19
 100bfe0:	901ed43a 	srli	r15,r18,16
 100bfe4:	6008d43a 	srli	r4,r12,16
 100bfe8:	6010943a 	slli	r8,r12,16
 100bfec:	394f883a 	add	r7,r7,r5
 100bff0:	333fffcc 	andi	r12,r6,65535
 100bff4:	79df883a 	add	r15,r15,r7
 100bff8:	235b883a 	add	r13,r4,r13
 100bffc:	9d63383a 	mul	r17,r19,r21
 100c000:	4309883a 	add	r4,r8,r12
 100c004:	7940022e 	bgeu	r15,r5,100c010 <__muldf3+0x43c>
 100c008:	01400074 	movhi	r5,1
 100c00c:	8963883a 	add	r17,r17,r5
 100c010:	780a943a 	slli	r5,r15,16
 100c014:	91bfffcc 	andi	r6,r18,65535
 100c018:	70c7883a 	add	r3,r14,r3
 100c01c:	298d883a 	add	r6,r5,r6
 100c020:	1a8f803a 	cmpltu	r7,r3,r10
 100c024:	350b883a 	add	r5,r6,r20
 100c028:	20c7883a 	add	r3,r4,r3
 100c02c:	3955883a 	add	r10,r7,r5
 100c030:	1909803a 	cmpltu	r4,r3,r4
 100c034:	6a91883a 	add	r8,r13,r10
 100c038:	780cd43a 	srli	r6,r15,16
 100c03c:	2219883a 	add	r12,r4,r8
 100c040:	2d0b803a 	cmpltu	r5,r5,r20
 100c044:	51cf803a 	cmpltu	r7,r10,r7
 100c048:	29ceb03a 	or	r7,r5,r7
 100c04c:	4351803a 	cmpltu	r8,r8,r13
 100c050:	610b803a 	cmpltu	r5,r12,r4
 100c054:	4148b03a 	or	r4,r8,r5
 100c058:	398f883a 	add	r7,r7,r6
 100c05c:	3909883a 	add	r4,r7,r4
 100c060:	1810927a 	slli	r8,r3,9
 100c064:	2449883a 	add	r4,r4,r17
 100c068:	2008927a 	slli	r4,r4,9
 100c06c:	6022d5fa 	srli	r17,r12,23
 100c070:	1806d5fa 	srli	r3,r3,23
 100c074:	4252b03a 	or	r9,r8,r9
 100c078:	600a927a 	slli	r5,r12,9
 100c07c:	4810c03a 	cmpne	r8,r9,zero
 100c080:	2462b03a 	or	r17,r4,r17
 100c084:	40c6b03a 	or	r3,r8,r3
 100c088:	8900402c 	andhi	r4,r17,256
 100c08c:	1950b03a 	or	r8,r3,r5
 100c090:	20000726 	beq	r4,zero,100c0b0 <__muldf3+0x4dc>
 100c094:	4006d07a 	srli	r3,r8,1
 100c098:	880497fa 	slli	r2,r17,31
 100c09c:	4200004c 	andi	r8,r8,1
 100c0a0:	8822d07a 	srli	r17,r17,1
 100c0a4:	1a10b03a 	or	r8,r3,r8
 100c0a8:	1210b03a 	or	r8,r2,r8
 100c0ac:	5805883a 	mov	r2,r11
 100c0b0:	1140ffc4 	addi	r5,r2,1023
 100c0b4:	0140440e 	bge	zero,r5,100c1c8 <__muldf3+0x5f4>
 100c0b8:	40c001cc 	andi	r3,r8,7
 100c0bc:	18000726 	beq	r3,zero,100c0dc <__muldf3+0x508>
 100c0c0:	40c003cc 	andi	r3,r8,15
 100c0c4:	01000104 	movi	r4,4
 100c0c8:	19000426 	beq	r3,r4,100c0dc <__muldf3+0x508>
 100c0cc:	4107883a 	add	r3,r8,r4
 100c0d0:	1a11803a 	cmpltu	r8,r3,r8
 100c0d4:	8a23883a 	add	r17,r17,r8
 100c0d8:	1811883a 	mov	r8,r3
 100c0dc:	88c0402c 	andhi	r3,r17,256
 100c0e0:	18000426 	beq	r3,zero,100c0f4 <__muldf3+0x520>
 100c0e4:	11410004 	addi	r5,r2,1024
 100c0e8:	00bfc034 	movhi	r2,65280
 100c0ec:	10bfffc4 	addi	r2,r2,-1
 100c0f0:	88a2703a 	and	r17,r17,r2
 100c0f4:	0081ff84 	movi	r2,2046
 100c0f8:	117f6416 	blt	r2,r5,100be8c <__alt_mem_TCDM+0xff00ae8c>
 100c0fc:	8828977a 	slli	r20,r17,29
 100c100:	4010d0fa 	srli	r8,r8,3
 100c104:	8822927a 	slli	r17,r17,9
 100c108:	2881ffcc 	andi	r2,r5,2047
 100c10c:	a228b03a 	or	r20,r20,r8
 100c110:	880ad33a 	srli	r5,r17,12
 100c114:	b02b883a 	mov	r21,r22
 100c118:	003f0d06 	br	100bd50 <__alt_mem_TCDM+0xff00ad50>
 100c11c:	8080022c 	andhi	r2,r16,8
 100c120:	10000926 	beq	r2,zero,100c148 <__muldf3+0x574>
 100c124:	8880022c 	andhi	r2,r17,8
 100c128:	1000071e 	bne	r2,zero,100c148 <__muldf3+0x574>
 100c12c:	00800434 	movhi	r2,16
 100c130:	89400234 	orhi	r5,r17,8
 100c134:	10bfffc4 	addi	r2,r2,-1
 100c138:	b82b883a 	mov	r21,r23
 100c13c:	288a703a 	and	r5,r5,r2
 100c140:	4029883a 	mov	r20,r8
 100c144:	003f6806 	br	100bee8 <__alt_mem_TCDM+0xff00aee8>
 100c148:	00800434 	movhi	r2,16
 100c14c:	81400234 	orhi	r5,r16,8
 100c150:	10bfffc4 	addi	r2,r2,-1
 100c154:	288a703a 	and	r5,r5,r2
 100c158:	003f6306 	br	100bee8 <__alt_mem_TCDM+0xff00aee8>
 100c15c:	147ff604 	addi	r17,r2,-40
 100c160:	3462983a 	sll	r17,r6,r17
 100c164:	0011883a 	mov	r8,zero
 100c168:	003f4406 	br	100be7c <__alt_mem_TCDM+0xff00ae7c>
 100c16c:	3009883a 	mov	r4,r6
 100c170:	d9800215 	stw	r6,8(sp)
 100c174:	da400115 	stw	r9,4(sp)
 100c178:	da800015 	stw	r10,0(sp)
 100c17c:	100cdec0 	call	100cdec <__clzsi2>
 100c180:	10800804 	addi	r2,r2,32
 100c184:	da800017 	ldw	r10,0(sp)
 100c188:	da400117 	ldw	r9,4(sp)
 100c18c:	d9800217 	ldw	r6,8(sp)
 100c190:	003f3006 	br	100be54 <__alt_mem_TCDM+0xff00ae54>
 100c194:	143ff604 	addi	r16,r2,-40
 100c198:	9c20983a 	sll	r16,r19,r16
 100c19c:	0029883a 	mov	r20,zero
 100c1a0:	003f1606 	br	100bdfc <__alt_mem_TCDM+0xff00adfc>
 100c1a4:	d9800215 	stw	r6,8(sp)
 100c1a8:	d9c00015 	stw	r7,0(sp)
 100c1ac:	da400115 	stw	r9,4(sp)
 100c1b0:	100cdec0 	call	100cdec <__clzsi2>
 100c1b4:	10800804 	addi	r2,r2,32
 100c1b8:	da400117 	ldw	r9,4(sp)
 100c1bc:	d9c00017 	ldw	r7,0(sp)
 100c1c0:	d9800217 	ldw	r6,8(sp)
 100c1c4:	003f0306 	br	100bdd4 <__alt_mem_TCDM+0xff00add4>
 100c1c8:	00c00044 	movi	r3,1
 100c1cc:	1947c83a 	sub	r3,r3,r5
 100c1d0:	00800e04 	movi	r2,56
 100c1d4:	10feda16 	blt	r2,r3,100bd40 <__alt_mem_TCDM+0xff00ad40>
 100c1d8:	008007c4 	movi	r2,31
 100c1dc:	10c01b16 	blt	r2,r3,100c24c <__muldf3+0x678>
 100c1e0:	00800804 	movi	r2,32
 100c1e4:	10c5c83a 	sub	r2,r2,r3
 100c1e8:	888a983a 	sll	r5,r17,r2
 100c1ec:	40c8d83a 	srl	r4,r8,r3
 100c1f0:	4084983a 	sll	r2,r8,r2
 100c1f4:	88e2d83a 	srl	r17,r17,r3
 100c1f8:	2906b03a 	or	r3,r5,r4
 100c1fc:	1004c03a 	cmpne	r2,r2,zero
 100c200:	1886b03a 	or	r3,r3,r2
 100c204:	188001cc 	andi	r2,r3,7
 100c208:	10000726 	beq	r2,zero,100c228 <__muldf3+0x654>
 100c20c:	188003cc 	andi	r2,r3,15
 100c210:	01000104 	movi	r4,4
 100c214:	11000426 	beq	r2,r4,100c228 <__muldf3+0x654>
 100c218:	1805883a 	mov	r2,r3
 100c21c:	10c00104 	addi	r3,r2,4
 100c220:	1885803a 	cmpltu	r2,r3,r2
 100c224:	88a3883a 	add	r17,r17,r2
 100c228:	8880202c 	andhi	r2,r17,128
 100c22c:	10001c26 	beq	r2,zero,100c2a0 <__muldf3+0x6cc>
 100c230:	b02b883a 	mov	r21,r22
 100c234:	00800044 	movi	r2,1
 100c238:	000b883a 	mov	r5,zero
 100c23c:	0029883a 	mov	r20,zero
 100c240:	003ec306 	br	100bd50 <__alt_mem_TCDM+0xff00ad50>
 100c244:	5805883a 	mov	r2,r11
 100c248:	003f9906 	br	100c0b0 <__alt_mem_TCDM+0xff00b0b0>
 100c24c:	00bff844 	movi	r2,-31
 100c250:	1145c83a 	sub	r2,r2,r5
 100c254:	8888d83a 	srl	r4,r17,r2
 100c258:	00800804 	movi	r2,32
 100c25c:	18801a26 	beq	r3,r2,100c2c8 <__muldf3+0x6f4>
 100c260:	00801004 	movi	r2,64
 100c264:	10c5c83a 	sub	r2,r2,r3
 100c268:	8884983a 	sll	r2,r17,r2
 100c26c:	1204b03a 	or	r2,r2,r8
 100c270:	1004c03a 	cmpne	r2,r2,zero
 100c274:	2084b03a 	or	r2,r4,r2
 100c278:	144001cc 	andi	r17,r2,7
 100c27c:	88000d1e 	bne	r17,zero,100c2b4 <__muldf3+0x6e0>
 100c280:	000b883a 	mov	r5,zero
 100c284:	1028d0fa 	srli	r20,r2,3
 100c288:	b02b883a 	mov	r21,r22
 100c28c:	0005883a 	mov	r2,zero
 100c290:	a468b03a 	or	r20,r20,r17
 100c294:	003eae06 	br	100bd50 <__alt_mem_TCDM+0xff00ad50>
 100c298:	1007883a 	mov	r3,r2
 100c29c:	0023883a 	mov	r17,zero
 100c2a0:	880a927a 	slli	r5,r17,9
 100c2a4:	1805883a 	mov	r2,r3
 100c2a8:	8822977a 	slli	r17,r17,29
 100c2ac:	280ad33a 	srli	r5,r5,12
 100c2b0:	003ff406 	br	100c284 <__alt_mem_TCDM+0xff00b284>
 100c2b4:	10c003cc 	andi	r3,r2,15
 100c2b8:	01000104 	movi	r4,4
 100c2bc:	193ff626 	beq	r3,r4,100c298 <__alt_mem_TCDM+0xff00b298>
 100c2c0:	0023883a 	mov	r17,zero
 100c2c4:	003fd506 	br	100c21c <__alt_mem_TCDM+0xff00b21c>
 100c2c8:	0005883a 	mov	r2,zero
 100c2cc:	003fe706 	br	100c26c <__alt_mem_TCDM+0xff00b26c>
 100c2d0:	00800434 	movhi	r2,16
 100c2d4:	89400234 	orhi	r5,r17,8
 100c2d8:	10bfffc4 	addi	r2,r2,-1
 100c2dc:	b02b883a 	mov	r21,r22
 100c2e0:	288a703a 	and	r5,r5,r2
 100c2e4:	4029883a 	mov	r20,r8
 100c2e8:	003eff06 	br	100bee8 <__alt_mem_TCDM+0xff00aee8>

0100c2ec <__subdf3>:
 100c2ec:	02000434 	movhi	r8,16
 100c2f0:	423fffc4 	addi	r8,r8,-1
 100c2f4:	defffb04 	addi	sp,sp,-20
 100c2f8:	2a14703a 	and	r10,r5,r8
 100c2fc:	3812d53a 	srli	r9,r7,20
 100c300:	3a10703a 	and	r8,r7,r8
 100c304:	2006d77a 	srli	r3,r4,29
 100c308:	3004d77a 	srli	r2,r6,29
 100c30c:	dc000015 	stw	r16,0(sp)
 100c310:	501490fa 	slli	r10,r10,3
 100c314:	2820d53a 	srli	r16,r5,20
 100c318:	401090fa 	slli	r8,r8,3
 100c31c:	dc800215 	stw	r18,8(sp)
 100c320:	dc400115 	stw	r17,4(sp)
 100c324:	dfc00415 	stw	ra,16(sp)
 100c328:	202290fa 	slli	r17,r4,3
 100c32c:	dcc00315 	stw	r19,12(sp)
 100c330:	4a41ffcc 	andi	r9,r9,2047
 100c334:	0101ffc4 	movi	r4,2047
 100c338:	2824d7fa 	srli	r18,r5,31
 100c33c:	8401ffcc 	andi	r16,r16,2047
 100c340:	50c6b03a 	or	r3,r10,r3
 100c344:	380ed7fa 	srli	r7,r7,31
 100c348:	408ab03a 	or	r5,r8,r2
 100c34c:	300c90fa 	slli	r6,r6,3
 100c350:	49009626 	beq	r9,r4,100c5ac <__subdf3+0x2c0>
 100c354:	39c0005c 	xori	r7,r7,1
 100c358:	8245c83a 	sub	r2,r16,r9
 100c35c:	3c807426 	beq	r7,r18,100c530 <__subdf3+0x244>
 100c360:	0080af0e 	bge	zero,r2,100c620 <__subdf3+0x334>
 100c364:	48002a1e 	bne	r9,zero,100c410 <__subdf3+0x124>
 100c368:	2988b03a 	or	r4,r5,r6
 100c36c:	20009a1e 	bne	r4,zero,100c5d8 <__subdf3+0x2ec>
 100c370:	888001cc 	andi	r2,r17,7
 100c374:	10000726 	beq	r2,zero,100c394 <__subdf3+0xa8>
 100c378:	888003cc 	andi	r2,r17,15
 100c37c:	01000104 	movi	r4,4
 100c380:	11000426 	beq	r2,r4,100c394 <__subdf3+0xa8>
 100c384:	890b883a 	add	r5,r17,r4
 100c388:	2c63803a 	cmpltu	r17,r5,r17
 100c38c:	1c47883a 	add	r3,r3,r17
 100c390:	2823883a 	mov	r17,r5
 100c394:	1880202c 	andhi	r2,r3,128
 100c398:	10005926 	beq	r2,zero,100c500 <__subdf3+0x214>
 100c39c:	84000044 	addi	r16,r16,1
 100c3a0:	0081ffc4 	movi	r2,2047
 100c3a4:	8080be26 	beq	r16,r2,100c6a0 <__subdf3+0x3b4>
 100c3a8:	017fe034 	movhi	r5,65408
 100c3ac:	297fffc4 	addi	r5,r5,-1
 100c3b0:	1946703a 	and	r3,r3,r5
 100c3b4:	1804977a 	slli	r2,r3,29
 100c3b8:	1806927a 	slli	r3,r3,9
 100c3bc:	8822d0fa 	srli	r17,r17,3
 100c3c0:	8401ffcc 	andi	r16,r16,2047
 100c3c4:	180ad33a 	srli	r5,r3,12
 100c3c8:	9100004c 	andi	r4,r18,1
 100c3cc:	1444b03a 	or	r2,r2,r17
 100c3d0:	80c1ffcc 	andi	r3,r16,2047
 100c3d4:	1820953a 	slli	r16,r3,20
 100c3d8:	20c03fcc 	andi	r3,r4,255
 100c3dc:	180897fa 	slli	r4,r3,31
 100c3e0:	00c00434 	movhi	r3,16
 100c3e4:	18ffffc4 	addi	r3,r3,-1
 100c3e8:	28c6703a 	and	r3,r5,r3
 100c3ec:	1c06b03a 	or	r3,r3,r16
 100c3f0:	1906b03a 	or	r3,r3,r4
 100c3f4:	dfc00417 	ldw	ra,16(sp)
 100c3f8:	dcc00317 	ldw	r19,12(sp)
 100c3fc:	dc800217 	ldw	r18,8(sp)
 100c400:	dc400117 	ldw	r17,4(sp)
 100c404:	dc000017 	ldw	r16,0(sp)
 100c408:	dec00504 	addi	sp,sp,20
 100c40c:	f800283a 	ret
 100c410:	0101ffc4 	movi	r4,2047
 100c414:	813fd626 	beq	r16,r4,100c370 <__alt_mem_TCDM+0xff00b370>
 100c418:	29402034 	orhi	r5,r5,128
 100c41c:	01000e04 	movi	r4,56
 100c420:	2080a316 	blt	r4,r2,100c6b0 <__subdf3+0x3c4>
 100c424:	010007c4 	movi	r4,31
 100c428:	2080c616 	blt	r4,r2,100c744 <__subdf3+0x458>
 100c42c:	01000804 	movi	r4,32
 100c430:	2089c83a 	sub	r4,r4,r2
 100c434:	2910983a 	sll	r8,r5,r4
 100c438:	308ed83a 	srl	r7,r6,r2
 100c43c:	3108983a 	sll	r4,r6,r4
 100c440:	2884d83a 	srl	r2,r5,r2
 100c444:	41ccb03a 	or	r6,r8,r7
 100c448:	2008c03a 	cmpne	r4,r4,zero
 100c44c:	310cb03a 	or	r6,r6,r4
 100c450:	898dc83a 	sub	r6,r17,r6
 100c454:	89a3803a 	cmpltu	r17,r17,r6
 100c458:	1887c83a 	sub	r3,r3,r2
 100c45c:	1c47c83a 	sub	r3,r3,r17
 100c460:	3023883a 	mov	r17,r6
 100c464:	1880202c 	andhi	r2,r3,128
 100c468:	10002326 	beq	r2,zero,100c4f8 <__subdf3+0x20c>
 100c46c:	04c02034 	movhi	r19,128
 100c470:	9cffffc4 	addi	r19,r19,-1
 100c474:	1ce6703a 	and	r19,r3,r19
 100c478:	98007a26 	beq	r19,zero,100c664 <__subdf3+0x378>
 100c47c:	9809883a 	mov	r4,r19
 100c480:	100cdec0 	call	100cdec <__clzsi2>
 100c484:	113ffe04 	addi	r4,r2,-8
 100c488:	00c007c4 	movi	r3,31
 100c48c:	19007b16 	blt	r3,r4,100c67c <__subdf3+0x390>
 100c490:	00800804 	movi	r2,32
 100c494:	1105c83a 	sub	r2,r2,r4
 100c498:	8884d83a 	srl	r2,r17,r2
 100c49c:	9906983a 	sll	r3,r19,r4
 100c4a0:	8922983a 	sll	r17,r17,r4
 100c4a4:	10c4b03a 	or	r2,r2,r3
 100c4a8:	24007816 	blt	r4,r16,100c68c <__subdf3+0x3a0>
 100c4ac:	2421c83a 	sub	r16,r4,r16
 100c4b0:	80c00044 	addi	r3,r16,1
 100c4b4:	010007c4 	movi	r4,31
 100c4b8:	20c09516 	blt	r4,r3,100c710 <__subdf3+0x424>
 100c4bc:	01400804 	movi	r5,32
 100c4c0:	28cbc83a 	sub	r5,r5,r3
 100c4c4:	88c8d83a 	srl	r4,r17,r3
 100c4c8:	8962983a 	sll	r17,r17,r5
 100c4cc:	114a983a 	sll	r5,r2,r5
 100c4d0:	10c6d83a 	srl	r3,r2,r3
 100c4d4:	8804c03a 	cmpne	r2,r17,zero
 100c4d8:	290ab03a 	or	r5,r5,r4
 100c4dc:	28a2b03a 	or	r17,r5,r2
 100c4e0:	0021883a 	mov	r16,zero
 100c4e4:	003fa206 	br	100c370 <__alt_mem_TCDM+0xff00b370>
 100c4e8:	2090b03a 	or	r8,r4,r2
 100c4ec:	40018e26 	beq	r8,zero,100cb28 <__subdf3+0x83c>
 100c4f0:	1007883a 	mov	r3,r2
 100c4f4:	2023883a 	mov	r17,r4
 100c4f8:	888001cc 	andi	r2,r17,7
 100c4fc:	103f9e1e 	bne	r2,zero,100c378 <__alt_mem_TCDM+0xff00b378>
 100c500:	1804977a 	slli	r2,r3,29
 100c504:	8822d0fa 	srli	r17,r17,3
 100c508:	1810d0fa 	srli	r8,r3,3
 100c50c:	9100004c 	andi	r4,r18,1
 100c510:	1444b03a 	or	r2,r2,r17
 100c514:	00c1ffc4 	movi	r3,2047
 100c518:	80c02826 	beq	r16,r3,100c5bc <__subdf3+0x2d0>
 100c51c:	01400434 	movhi	r5,16
 100c520:	297fffc4 	addi	r5,r5,-1
 100c524:	80e0703a 	and	r16,r16,r3
 100c528:	414a703a 	and	r5,r8,r5
 100c52c:	003fa806 	br	100c3d0 <__alt_mem_TCDM+0xff00b3d0>
 100c530:	0080630e 	bge	zero,r2,100c6c0 <__subdf3+0x3d4>
 100c534:	48003026 	beq	r9,zero,100c5f8 <__subdf3+0x30c>
 100c538:	0101ffc4 	movi	r4,2047
 100c53c:	813f8c26 	beq	r16,r4,100c370 <__alt_mem_TCDM+0xff00b370>
 100c540:	29402034 	orhi	r5,r5,128
 100c544:	01000e04 	movi	r4,56
 100c548:	2080a90e 	bge	r4,r2,100c7f0 <__subdf3+0x504>
 100c54c:	298cb03a 	or	r6,r5,r6
 100c550:	3012c03a 	cmpne	r9,r6,zero
 100c554:	0005883a 	mov	r2,zero
 100c558:	4c53883a 	add	r9,r9,r17
 100c55c:	4c63803a 	cmpltu	r17,r9,r17
 100c560:	10c7883a 	add	r3,r2,r3
 100c564:	88c7883a 	add	r3,r17,r3
 100c568:	4823883a 	mov	r17,r9
 100c56c:	1880202c 	andhi	r2,r3,128
 100c570:	1000d026 	beq	r2,zero,100c8b4 <__subdf3+0x5c8>
 100c574:	84000044 	addi	r16,r16,1
 100c578:	0081ffc4 	movi	r2,2047
 100c57c:	8080fe26 	beq	r16,r2,100c978 <__subdf3+0x68c>
 100c580:	00bfe034 	movhi	r2,65408
 100c584:	10bfffc4 	addi	r2,r2,-1
 100c588:	1886703a 	and	r3,r3,r2
 100c58c:	880ad07a 	srli	r5,r17,1
 100c590:	180497fa 	slli	r2,r3,31
 100c594:	8900004c 	andi	r4,r17,1
 100c598:	2922b03a 	or	r17,r5,r4
 100c59c:	1806d07a 	srli	r3,r3,1
 100c5a0:	1462b03a 	or	r17,r2,r17
 100c5a4:	3825883a 	mov	r18,r7
 100c5a8:	003f7106 	br	100c370 <__alt_mem_TCDM+0xff00b370>
 100c5ac:	2984b03a 	or	r2,r5,r6
 100c5b0:	103f6826 	beq	r2,zero,100c354 <__alt_mem_TCDM+0xff00b354>
 100c5b4:	39c03fcc 	andi	r7,r7,255
 100c5b8:	003f6706 	br	100c358 <__alt_mem_TCDM+0xff00b358>
 100c5bc:	4086b03a 	or	r3,r8,r2
 100c5c0:	18015226 	beq	r3,zero,100cb0c <__subdf3+0x820>
 100c5c4:	00c00434 	movhi	r3,16
 100c5c8:	41400234 	orhi	r5,r8,8
 100c5cc:	18ffffc4 	addi	r3,r3,-1
 100c5d0:	28ca703a 	and	r5,r5,r3
 100c5d4:	003f7e06 	br	100c3d0 <__alt_mem_TCDM+0xff00b3d0>
 100c5d8:	10bfffc4 	addi	r2,r2,-1
 100c5dc:	1000491e 	bne	r2,zero,100c704 <__subdf3+0x418>
 100c5e0:	898fc83a 	sub	r7,r17,r6
 100c5e4:	89e3803a 	cmpltu	r17,r17,r7
 100c5e8:	1947c83a 	sub	r3,r3,r5
 100c5ec:	1c47c83a 	sub	r3,r3,r17
 100c5f0:	3823883a 	mov	r17,r7
 100c5f4:	003f9b06 	br	100c464 <__alt_mem_TCDM+0xff00b464>
 100c5f8:	2988b03a 	or	r4,r5,r6
 100c5fc:	203f5c26 	beq	r4,zero,100c370 <__alt_mem_TCDM+0xff00b370>
 100c600:	10bfffc4 	addi	r2,r2,-1
 100c604:	1000931e 	bne	r2,zero,100c854 <__subdf3+0x568>
 100c608:	898d883a 	add	r6,r17,r6
 100c60c:	3463803a 	cmpltu	r17,r6,r17
 100c610:	1947883a 	add	r3,r3,r5
 100c614:	88c7883a 	add	r3,r17,r3
 100c618:	3023883a 	mov	r17,r6
 100c61c:	003fd306 	br	100c56c <__alt_mem_TCDM+0xff00b56c>
 100c620:	1000541e 	bne	r2,zero,100c774 <__subdf3+0x488>
 100c624:	80800044 	addi	r2,r16,1
 100c628:	1081ffcc 	andi	r2,r2,2047
 100c62c:	01000044 	movi	r4,1
 100c630:	2080a20e 	bge	r4,r2,100c8bc <__subdf3+0x5d0>
 100c634:	8989c83a 	sub	r4,r17,r6
 100c638:	8905803a 	cmpltu	r2,r17,r4
 100c63c:	1967c83a 	sub	r19,r3,r5
 100c640:	98a7c83a 	sub	r19,r19,r2
 100c644:	9880202c 	andhi	r2,r19,128
 100c648:	10006326 	beq	r2,zero,100c7d8 <__subdf3+0x4ec>
 100c64c:	3463c83a 	sub	r17,r6,r17
 100c650:	28c7c83a 	sub	r3,r5,r3
 100c654:	344d803a 	cmpltu	r6,r6,r17
 100c658:	19a7c83a 	sub	r19,r3,r6
 100c65c:	3825883a 	mov	r18,r7
 100c660:	983f861e 	bne	r19,zero,100c47c <__alt_mem_TCDM+0xff00b47c>
 100c664:	8809883a 	mov	r4,r17
 100c668:	100cdec0 	call	100cdec <__clzsi2>
 100c66c:	10800804 	addi	r2,r2,32
 100c670:	113ffe04 	addi	r4,r2,-8
 100c674:	00c007c4 	movi	r3,31
 100c678:	193f850e 	bge	r3,r4,100c490 <__alt_mem_TCDM+0xff00b490>
 100c67c:	10bff604 	addi	r2,r2,-40
 100c680:	8884983a 	sll	r2,r17,r2
 100c684:	0023883a 	mov	r17,zero
 100c688:	243f880e 	bge	r4,r16,100c4ac <__alt_mem_TCDM+0xff00b4ac>
 100c68c:	00ffe034 	movhi	r3,65408
 100c690:	18ffffc4 	addi	r3,r3,-1
 100c694:	8121c83a 	sub	r16,r16,r4
 100c698:	10c6703a 	and	r3,r2,r3
 100c69c:	003f3406 	br	100c370 <__alt_mem_TCDM+0xff00b370>
 100c6a0:	9100004c 	andi	r4,r18,1
 100c6a4:	000b883a 	mov	r5,zero
 100c6a8:	0005883a 	mov	r2,zero
 100c6ac:	003f4806 	br	100c3d0 <__alt_mem_TCDM+0xff00b3d0>
 100c6b0:	298cb03a 	or	r6,r5,r6
 100c6b4:	300cc03a 	cmpne	r6,r6,zero
 100c6b8:	0005883a 	mov	r2,zero
 100c6bc:	003f6406 	br	100c450 <__alt_mem_TCDM+0xff00b450>
 100c6c0:	10009a1e 	bne	r2,zero,100c92c <__subdf3+0x640>
 100c6c4:	82400044 	addi	r9,r16,1
 100c6c8:	4881ffcc 	andi	r2,r9,2047
 100c6cc:	02800044 	movi	r10,1
 100c6d0:	5080670e 	bge	r10,r2,100c870 <__subdf3+0x584>
 100c6d4:	0081ffc4 	movi	r2,2047
 100c6d8:	4880af26 	beq	r9,r2,100c998 <__subdf3+0x6ac>
 100c6dc:	898d883a 	add	r6,r17,r6
 100c6e0:	1945883a 	add	r2,r3,r5
 100c6e4:	3447803a 	cmpltu	r3,r6,r17
 100c6e8:	1887883a 	add	r3,r3,r2
 100c6ec:	182297fa 	slli	r17,r3,31
 100c6f0:	300cd07a 	srli	r6,r6,1
 100c6f4:	1806d07a 	srli	r3,r3,1
 100c6f8:	4821883a 	mov	r16,r9
 100c6fc:	89a2b03a 	or	r17,r17,r6
 100c700:	003f1b06 	br	100c370 <__alt_mem_TCDM+0xff00b370>
 100c704:	0101ffc4 	movi	r4,2047
 100c708:	813f441e 	bne	r16,r4,100c41c <__alt_mem_TCDM+0xff00b41c>
 100c70c:	003f1806 	br	100c370 <__alt_mem_TCDM+0xff00b370>
 100c710:	843ff844 	addi	r16,r16,-31
 100c714:	01400804 	movi	r5,32
 100c718:	1408d83a 	srl	r4,r2,r16
 100c71c:	19405026 	beq	r3,r5,100c860 <__subdf3+0x574>
 100c720:	01401004 	movi	r5,64
 100c724:	28c7c83a 	sub	r3,r5,r3
 100c728:	10c4983a 	sll	r2,r2,r3
 100c72c:	88a2b03a 	or	r17,r17,r2
 100c730:	8822c03a 	cmpne	r17,r17,zero
 100c734:	2462b03a 	or	r17,r4,r17
 100c738:	0007883a 	mov	r3,zero
 100c73c:	0021883a 	mov	r16,zero
 100c740:	003f6d06 	br	100c4f8 <__alt_mem_TCDM+0xff00b4f8>
 100c744:	11fff804 	addi	r7,r2,-32
 100c748:	01000804 	movi	r4,32
 100c74c:	29ced83a 	srl	r7,r5,r7
 100c750:	11004526 	beq	r2,r4,100c868 <__subdf3+0x57c>
 100c754:	01001004 	movi	r4,64
 100c758:	2089c83a 	sub	r4,r4,r2
 100c75c:	2904983a 	sll	r2,r5,r4
 100c760:	118cb03a 	or	r6,r2,r6
 100c764:	300cc03a 	cmpne	r6,r6,zero
 100c768:	398cb03a 	or	r6,r7,r6
 100c76c:	0005883a 	mov	r2,zero
 100c770:	003f3706 	br	100c450 <__alt_mem_TCDM+0xff00b450>
 100c774:	80002a26 	beq	r16,zero,100c820 <__subdf3+0x534>
 100c778:	0101ffc4 	movi	r4,2047
 100c77c:	49006626 	beq	r9,r4,100c918 <__subdf3+0x62c>
 100c780:	0085c83a 	sub	r2,zero,r2
 100c784:	18c02034 	orhi	r3,r3,128
 100c788:	01000e04 	movi	r4,56
 100c78c:	20807e16 	blt	r4,r2,100c988 <__subdf3+0x69c>
 100c790:	010007c4 	movi	r4,31
 100c794:	2080e716 	blt	r4,r2,100cb34 <__subdf3+0x848>
 100c798:	01000804 	movi	r4,32
 100c79c:	2089c83a 	sub	r4,r4,r2
 100c7a0:	1914983a 	sll	r10,r3,r4
 100c7a4:	8890d83a 	srl	r8,r17,r2
 100c7a8:	8908983a 	sll	r4,r17,r4
 100c7ac:	1884d83a 	srl	r2,r3,r2
 100c7b0:	5222b03a 	or	r17,r10,r8
 100c7b4:	2006c03a 	cmpne	r3,r4,zero
 100c7b8:	88e2b03a 	or	r17,r17,r3
 100c7bc:	3463c83a 	sub	r17,r6,r17
 100c7c0:	2885c83a 	sub	r2,r5,r2
 100c7c4:	344d803a 	cmpltu	r6,r6,r17
 100c7c8:	1187c83a 	sub	r3,r2,r6
 100c7cc:	4821883a 	mov	r16,r9
 100c7d0:	3825883a 	mov	r18,r7
 100c7d4:	003f2306 	br	100c464 <__alt_mem_TCDM+0xff00b464>
 100c7d8:	24d0b03a 	or	r8,r4,r19
 100c7dc:	40001b1e 	bne	r8,zero,100c84c <__subdf3+0x560>
 100c7e0:	0005883a 	mov	r2,zero
 100c7e4:	0009883a 	mov	r4,zero
 100c7e8:	0021883a 	mov	r16,zero
 100c7ec:	003f4906 	br	100c514 <__alt_mem_TCDM+0xff00b514>
 100c7f0:	010007c4 	movi	r4,31
 100c7f4:	20803a16 	blt	r4,r2,100c8e0 <__subdf3+0x5f4>
 100c7f8:	01000804 	movi	r4,32
 100c7fc:	2089c83a 	sub	r4,r4,r2
 100c800:	2912983a 	sll	r9,r5,r4
 100c804:	3090d83a 	srl	r8,r6,r2
 100c808:	3108983a 	sll	r4,r6,r4
 100c80c:	2884d83a 	srl	r2,r5,r2
 100c810:	4a12b03a 	or	r9,r9,r8
 100c814:	2008c03a 	cmpne	r4,r4,zero
 100c818:	4912b03a 	or	r9,r9,r4
 100c81c:	003f4e06 	br	100c558 <__alt_mem_TCDM+0xff00b558>
 100c820:	1c48b03a 	or	r4,r3,r17
 100c824:	20003c26 	beq	r4,zero,100c918 <__subdf3+0x62c>
 100c828:	0084303a 	nor	r2,zero,r2
 100c82c:	1000381e 	bne	r2,zero,100c910 <__subdf3+0x624>
 100c830:	3463c83a 	sub	r17,r6,r17
 100c834:	28c5c83a 	sub	r2,r5,r3
 100c838:	344d803a 	cmpltu	r6,r6,r17
 100c83c:	1187c83a 	sub	r3,r2,r6
 100c840:	4821883a 	mov	r16,r9
 100c844:	3825883a 	mov	r18,r7
 100c848:	003f0606 	br	100c464 <__alt_mem_TCDM+0xff00b464>
 100c84c:	2023883a 	mov	r17,r4
 100c850:	003f0906 	br	100c478 <__alt_mem_TCDM+0xff00b478>
 100c854:	0101ffc4 	movi	r4,2047
 100c858:	813f3a1e 	bne	r16,r4,100c544 <__alt_mem_TCDM+0xff00b544>
 100c85c:	003ec406 	br	100c370 <__alt_mem_TCDM+0xff00b370>
 100c860:	0005883a 	mov	r2,zero
 100c864:	003fb106 	br	100c72c <__alt_mem_TCDM+0xff00b72c>
 100c868:	0005883a 	mov	r2,zero
 100c86c:	003fbc06 	br	100c760 <__alt_mem_TCDM+0xff00b760>
 100c870:	1c44b03a 	or	r2,r3,r17
 100c874:	80008e1e 	bne	r16,zero,100cab0 <__subdf3+0x7c4>
 100c878:	1000c826 	beq	r2,zero,100cb9c <__subdf3+0x8b0>
 100c87c:	2984b03a 	or	r2,r5,r6
 100c880:	103ebb26 	beq	r2,zero,100c370 <__alt_mem_TCDM+0xff00b370>
 100c884:	8989883a 	add	r4,r17,r6
 100c888:	1945883a 	add	r2,r3,r5
 100c88c:	2447803a 	cmpltu	r3,r4,r17
 100c890:	1887883a 	add	r3,r3,r2
 100c894:	1880202c 	andhi	r2,r3,128
 100c898:	2023883a 	mov	r17,r4
 100c89c:	103f1626 	beq	r2,zero,100c4f8 <__alt_mem_TCDM+0xff00b4f8>
 100c8a0:	00bfe034 	movhi	r2,65408
 100c8a4:	10bfffc4 	addi	r2,r2,-1
 100c8a8:	5021883a 	mov	r16,r10
 100c8ac:	1886703a 	and	r3,r3,r2
 100c8b0:	003eaf06 	br	100c370 <__alt_mem_TCDM+0xff00b370>
 100c8b4:	3825883a 	mov	r18,r7
 100c8b8:	003f0f06 	br	100c4f8 <__alt_mem_TCDM+0xff00b4f8>
 100c8bc:	1c44b03a 	or	r2,r3,r17
 100c8c0:	8000251e 	bne	r16,zero,100c958 <__subdf3+0x66c>
 100c8c4:	1000661e 	bne	r2,zero,100ca60 <__subdf3+0x774>
 100c8c8:	2990b03a 	or	r8,r5,r6
 100c8cc:	40009626 	beq	r8,zero,100cb28 <__subdf3+0x83c>
 100c8d0:	2807883a 	mov	r3,r5
 100c8d4:	3023883a 	mov	r17,r6
 100c8d8:	3825883a 	mov	r18,r7
 100c8dc:	003ea406 	br	100c370 <__alt_mem_TCDM+0xff00b370>
 100c8e0:	127ff804 	addi	r9,r2,-32
 100c8e4:	01000804 	movi	r4,32
 100c8e8:	2a52d83a 	srl	r9,r5,r9
 100c8ec:	11008c26 	beq	r2,r4,100cb20 <__subdf3+0x834>
 100c8f0:	01001004 	movi	r4,64
 100c8f4:	2085c83a 	sub	r2,r4,r2
 100c8f8:	2884983a 	sll	r2,r5,r2
 100c8fc:	118cb03a 	or	r6,r2,r6
 100c900:	300cc03a 	cmpne	r6,r6,zero
 100c904:	4992b03a 	or	r9,r9,r6
 100c908:	0005883a 	mov	r2,zero
 100c90c:	003f1206 	br	100c558 <__alt_mem_TCDM+0xff00b558>
 100c910:	0101ffc4 	movi	r4,2047
 100c914:	493f9c1e 	bne	r9,r4,100c788 <__alt_mem_TCDM+0xff00b788>
 100c918:	2807883a 	mov	r3,r5
 100c91c:	3023883a 	mov	r17,r6
 100c920:	4821883a 	mov	r16,r9
 100c924:	3825883a 	mov	r18,r7
 100c928:	003e9106 	br	100c370 <__alt_mem_TCDM+0xff00b370>
 100c92c:	80001f1e 	bne	r16,zero,100c9ac <__subdf3+0x6c0>
 100c930:	1c48b03a 	or	r4,r3,r17
 100c934:	20005a26 	beq	r4,zero,100caa0 <__subdf3+0x7b4>
 100c938:	0084303a 	nor	r2,zero,r2
 100c93c:	1000561e 	bne	r2,zero,100ca98 <__subdf3+0x7ac>
 100c940:	89a3883a 	add	r17,r17,r6
 100c944:	1945883a 	add	r2,r3,r5
 100c948:	898d803a 	cmpltu	r6,r17,r6
 100c94c:	3087883a 	add	r3,r6,r2
 100c950:	4821883a 	mov	r16,r9
 100c954:	003f0506 	br	100c56c <__alt_mem_TCDM+0xff00b56c>
 100c958:	10002b1e 	bne	r2,zero,100ca08 <__subdf3+0x71c>
 100c95c:	2984b03a 	or	r2,r5,r6
 100c960:	10008026 	beq	r2,zero,100cb64 <__subdf3+0x878>
 100c964:	2807883a 	mov	r3,r5
 100c968:	3023883a 	mov	r17,r6
 100c96c:	3825883a 	mov	r18,r7
 100c970:	0401ffc4 	movi	r16,2047
 100c974:	003e7e06 	br	100c370 <__alt_mem_TCDM+0xff00b370>
 100c978:	3809883a 	mov	r4,r7
 100c97c:	0011883a 	mov	r8,zero
 100c980:	0005883a 	mov	r2,zero
 100c984:	003ee306 	br	100c514 <__alt_mem_TCDM+0xff00b514>
 100c988:	1c62b03a 	or	r17,r3,r17
 100c98c:	8822c03a 	cmpne	r17,r17,zero
 100c990:	0005883a 	mov	r2,zero
 100c994:	003f8906 	br	100c7bc <__alt_mem_TCDM+0xff00b7bc>
 100c998:	3809883a 	mov	r4,r7
 100c99c:	4821883a 	mov	r16,r9
 100c9a0:	0011883a 	mov	r8,zero
 100c9a4:	0005883a 	mov	r2,zero
 100c9a8:	003eda06 	br	100c514 <__alt_mem_TCDM+0xff00b514>
 100c9ac:	0101ffc4 	movi	r4,2047
 100c9b0:	49003b26 	beq	r9,r4,100caa0 <__subdf3+0x7b4>
 100c9b4:	0085c83a 	sub	r2,zero,r2
 100c9b8:	18c02034 	orhi	r3,r3,128
 100c9bc:	01000e04 	movi	r4,56
 100c9c0:	20806e16 	blt	r4,r2,100cb7c <__subdf3+0x890>
 100c9c4:	010007c4 	movi	r4,31
 100c9c8:	20807716 	blt	r4,r2,100cba8 <__subdf3+0x8bc>
 100c9cc:	01000804 	movi	r4,32
 100c9d0:	2089c83a 	sub	r4,r4,r2
 100c9d4:	1914983a 	sll	r10,r3,r4
 100c9d8:	8890d83a 	srl	r8,r17,r2
 100c9dc:	8908983a 	sll	r4,r17,r4
 100c9e0:	1884d83a 	srl	r2,r3,r2
 100c9e4:	5222b03a 	or	r17,r10,r8
 100c9e8:	2006c03a 	cmpne	r3,r4,zero
 100c9ec:	88e2b03a 	or	r17,r17,r3
 100c9f0:	89a3883a 	add	r17,r17,r6
 100c9f4:	1145883a 	add	r2,r2,r5
 100c9f8:	898d803a 	cmpltu	r6,r17,r6
 100c9fc:	3087883a 	add	r3,r6,r2
 100ca00:	4821883a 	mov	r16,r9
 100ca04:	003ed906 	br	100c56c <__alt_mem_TCDM+0xff00b56c>
 100ca08:	2984b03a 	or	r2,r5,r6
 100ca0c:	10004226 	beq	r2,zero,100cb18 <__subdf3+0x82c>
 100ca10:	1808d0fa 	srli	r4,r3,3
 100ca14:	8822d0fa 	srli	r17,r17,3
 100ca18:	1806977a 	slli	r3,r3,29
 100ca1c:	2080022c 	andhi	r2,r4,8
 100ca20:	1c62b03a 	or	r17,r3,r17
 100ca24:	10000826 	beq	r2,zero,100ca48 <__subdf3+0x75c>
 100ca28:	2812d0fa 	srli	r9,r5,3
 100ca2c:	4880022c 	andhi	r2,r9,8
 100ca30:	1000051e 	bne	r2,zero,100ca48 <__subdf3+0x75c>
 100ca34:	300cd0fa 	srli	r6,r6,3
 100ca38:	2804977a 	slli	r2,r5,29
 100ca3c:	4809883a 	mov	r4,r9
 100ca40:	3825883a 	mov	r18,r7
 100ca44:	11a2b03a 	or	r17,r2,r6
 100ca48:	8806d77a 	srli	r3,r17,29
 100ca4c:	200890fa 	slli	r4,r4,3
 100ca50:	882290fa 	slli	r17,r17,3
 100ca54:	0401ffc4 	movi	r16,2047
 100ca58:	1906b03a 	or	r3,r3,r4
 100ca5c:	003e4406 	br	100c370 <__alt_mem_TCDM+0xff00b370>
 100ca60:	2984b03a 	or	r2,r5,r6
 100ca64:	103e4226 	beq	r2,zero,100c370 <__alt_mem_TCDM+0xff00b370>
 100ca68:	8989c83a 	sub	r4,r17,r6
 100ca6c:	8911803a 	cmpltu	r8,r17,r4
 100ca70:	1945c83a 	sub	r2,r3,r5
 100ca74:	1205c83a 	sub	r2,r2,r8
 100ca78:	1200202c 	andhi	r8,r2,128
 100ca7c:	403e9a26 	beq	r8,zero,100c4e8 <__alt_mem_TCDM+0xff00b4e8>
 100ca80:	3463c83a 	sub	r17,r6,r17
 100ca84:	28c5c83a 	sub	r2,r5,r3
 100ca88:	344d803a 	cmpltu	r6,r6,r17
 100ca8c:	1187c83a 	sub	r3,r2,r6
 100ca90:	3825883a 	mov	r18,r7
 100ca94:	003e3606 	br	100c370 <__alt_mem_TCDM+0xff00b370>
 100ca98:	0101ffc4 	movi	r4,2047
 100ca9c:	493fc71e 	bne	r9,r4,100c9bc <__alt_mem_TCDM+0xff00b9bc>
 100caa0:	2807883a 	mov	r3,r5
 100caa4:	3023883a 	mov	r17,r6
 100caa8:	4821883a 	mov	r16,r9
 100caac:	003e3006 	br	100c370 <__alt_mem_TCDM+0xff00b370>
 100cab0:	10003626 	beq	r2,zero,100cb8c <__subdf3+0x8a0>
 100cab4:	2984b03a 	or	r2,r5,r6
 100cab8:	10001726 	beq	r2,zero,100cb18 <__subdf3+0x82c>
 100cabc:	1808d0fa 	srli	r4,r3,3
 100cac0:	8822d0fa 	srli	r17,r17,3
 100cac4:	1806977a 	slli	r3,r3,29
 100cac8:	2080022c 	andhi	r2,r4,8
 100cacc:	1c62b03a 	or	r17,r3,r17
 100cad0:	10000726 	beq	r2,zero,100caf0 <__subdf3+0x804>
 100cad4:	2812d0fa 	srli	r9,r5,3
 100cad8:	4880022c 	andhi	r2,r9,8
 100cadc:	1000041e 	bne	r2,zero,100caf0 <__subdf3+0x804>
 100cae0:	300cd0fa 	srli	r6,r6,3
 100cae4:	2804977a 	slli	r2,r5,29
 100cae8:	4809883a 	mov	r4,r9
 100caec:	11a2b03a 	or	r17,r2,r6
 100caf0:	8806d77a 	srli	r3,r17,29
 100caf4:	200890fa 	slli	r4,r4,3
 100caf8:	882290fa 	slli	r17,r17,3
 100cafc:	3825883a 	mov	r18,r7
 100cb00:	1906b03a 	or	r3,r3,r4
 100cb04:	0401ffc4 	movi	r16,2047
 100cb08:	003e1906 	br	100c370 <__alt_mem_TCDM+0xff00b370>
 100cb0c:	000b883a 	mov	r5,zero
 100cb10:	0005883a 	mov	r2,zero
 100cb14:	003e2e06 	br	100c3d0 <__alt_mem_TCDM+0xff00b3d0>
 100cb18:	0401ffc4 	movi	r16,2047
 100cb1c:	003e1406 	br	100c370 <__alt_mem_TCDM+0xff00b370>
 100cb20:	0005883a 	mov	r2,zero
 100cb24:	003f7506 	br	100c8fc <__alt_mem_TCDM+0xff00b8fc>
 100cb28:	0005883a 	mov	r2,zero
 100cb2c:	0009883a 	mov	r4,zero
 100cb30:	003e7806 	br	100c514 <__alt_mem_TCDM+0xff00b514>
 100cb34:	123ff804 	addi	r8,r2,-32
 100cb38:	01000804 	movi	r4,32
 100cb3c:	1a10d83a 	srl	r8,r3,r8
 100cb40:	11002526 	beq	r2,r4,100cbd8 <__subdf3+0x8ec>
 100cb44:	01001004 	movi	r4,64
 100cb48:	2085c83a 	sub	r2,r4,r2
 100cb4c:	1884983a 	sll	r2,r3,r2
 100cb50:	1444b03a 	or	r2,r2,r17
 100cb54:	1004c03a 	cmpne	r2,r2,zero
 100cb58:	40a2b03a 	or	r17,r8,r2
 100cb5c:	0005883a 	mov	r2,zero
 100cb60:	003f1606 	br	100c7bc <__alt_mem_TCDM+0xff00b7bc>
 100cb64:	02000434 	movhi	r8,16
 100cb68:	0009883a 	mov	r4,zero
 100cb6c:	423fffc4 	addi	r8,r8,-1
 100cb70:	00bfffc4 	movi	r2,-1
 100cb74:	0401ffc4 	movi	r16,2047
 100cb78:	003e6606 	br	100c514 <__alt_mem_TCDM+0xff00b514>
 100cb7c:	1c62b03a 	or	r17,r3,r17
 100cb80:	8822c03a 	cmpne	r17,r17,zero
 100cb84:	0005883a 	mov	r2,zero
 100cb88:	003f9906 	br	100c9f0 <__alt_mem_TCDM+0xff00b9f0>
 100cb8c:	2807883a 	mov	r3,r5
 100cb90:	3023883a 	mov	r17,r6
 100cb94:	0401ffc4 	movi	r16,2047
 100cb98:	003df506 	br	100c370 <__alt_mem_TCDM+0xff00b370>
 100cb9c:	2807883a 	mov	r3,r5
 100cba0:	3023883a 	mov	r17,r6
 100cba4:	003df206 	br	100c370 <__alt_mem_TCDM+0xff00b370>
 100cba8:	123ff804 	addi	r8,r2,-32
 100cbac:	01000804 	movi	r4,32
 100cbb0:	1a10d83a 	srl	r8,r3,r8
 100cbb4:	11000a26 	beq	r2,r4,100cbe0 <__subdf3+0x8f4>
 100cbb8:	01001004 	movi	r4,64
 100cbbc:	2085c83a 	sub	r2,r4,r2
 100cbc0:	1884983a 	sll	r2,r3,r2
 100cbc4:	1444b03a 	or	r2,r2,r17
 100cbc8:	1004c03a 	cmpne	r2,r2,zero
 100cbcc:	40a2b03a 	or	r17,r8,r2
 100cbd0:	0005883a 	mov	r2,zero
 100cbd4:	003f8606 	br	100c9f0 <__alt_mem_TCDM+0xff00b9f0>
 100cbd8:	0005883a 	mov	r2,zero
 100cbdc:	003fdc06 	br	100cb50 <__alt_mem_TCDM+0xff00bb50>
 100cbe0:	0005883a 	mov	r2,zero
 100cbe4:	003ff706 	br	100cbc4 <__alt_mem_TCDM+0xff00bbc4>

0100cbe8 <__fixdfsi>:
 100cbe8:	280cd53a 	srli	r6,r5,20
 100cbec:	00c00434 	movhi	r3,16
 100cbf0:	18ffffc4 	addi	r3,r3,-1
 100cbf4:	3181ffcc 	andi	r6,r6,2047
 100cbf8:	01c0ff84 	movi	r7,1022
 100cbfc:	28c6703a 	and	r3,r5,r3
 100cc00:	280ad7fa 	srli	r5,r5,31
 100cc04:	3980120e 	bge	r7,r6,100cc50 <__fixdfsi+0x68>
 100cc08:	00810744 	movi	r2,1053
 100cc0c:	11800c16 	blt	r2,r6,100cc40 <__fixdfsi+0x58>
 100cc10:	00810cc4 	movi	r2,1075
 100cc14:	1185c83a 	sub	r2,r2,r6
 100cc18:	01c007c4 	movi	r7,31
 100cc1c:	18c00434 	orhi	r3,r3,16
 100cc20:	38800d16 	blt	r7,r2,100cc58 <__fixdfsi+0x70>
 100cc24:	31befb44 	addi	r6,r6,-1043
 100cc28:	2084d83a 	srl	r2,r4,r2
 100cc2c:	1986983a 	sll	r3,r3,r6
 100cc30:	1884b03a 	or	r2,r3,r2
 100cc34:	28000726 	beq	r5,zero,100cc54 <__fixdfsi+0x6c>
 100cc38:	0085c83a 	sub	r2,zero,r2
 100cc3c:	f800283a 	ret
 100cc40:	00a00034 	movhi	r2,32768
 100cc44:	10bfffc4 	addi	r2,r2,-1
 100cc48:	2885883a 	add	r2,r5,r2
 100cc4c:	f800283a 	ret
 100cc50:	0005883a 	mov	r2,zero
 100cc54:	f800283a 	ret
 100cc58:	008104c4 	movi	r2,1043
 100cc5c:	1185c83a 	sub	r2,r2,r6
 100cc60:	1884d83a 	srl	r2,r3,r2
 100cc64:	003ff306 	br	100cc34 <__alt_mem_TCDM+0xff00bc34>

0100cc68 <__floatsidf>:
 100cc68:	defffd04 	addi	sp,sp,-12
 100cc6c:	dfc00215 	stw	ra,8(sp)
 100cc70:	dc400115 	stw	r17,4(sp)
 100cc74:	dc000015 	stw	r16,0(sp)
 100cc78:	20002b26 	beq	r4,zero,100cd28 <__floatsidf+0xc0>
 100cc7c:	2023883a 	mov	r17,r4
 100cc80:	2020d7fa 	srli	r16,r4,31
 100cc84:	20002d16 	blt	r4,zero,100cd3c <__floatsidf+0xd4>
 100cc88:	8809883a 	mov	r4,r17
 100cc8c:	100cdec0 	call	100cdec <__clzsi2>
 100cc90:	01410784 	movi	r5,1054
 100cc94:	288bc83a 	sub	r5,r5,r2
 100cc98:	01010cc4 	movi	r4,1075
 100cc9c:	2149c83a 	sub	r4,r4,r5
 100cca0:	00c007c4 	movi	r3,31
 100cca4:	1900160e 	bge	r3,r4,100cd00 <__floatsidf+0x98>
 100cca8:	00c104c4 	movi	r3,1043
 100ccac:	1947c83a 	sub	r3,r3,r5
 100ccb0:	88c6983a 	sll	r3,r17,r3
 100ccb4:	00800434 	movhi	r2,16
 100ccb8:	10bfffc4 	addi	r2,r2,-1
 100ccbc:	1886703a 	and	r3,r3,r2
 100ccc0:	2941ffcc 	andi	r5,r5,2047
 100ccc4:	800d883a 	mov	r6,r16
 100ccc8:	0005883a 	mov	r2,zero
 100cccc:	280a953a 	slli	r5,r5,20
 100ccd0:	31803fcc 	andi	r6,r6,255
 100ccd4:	01000434 	movhi	r4,16
 100ccd8:	300c97fa 	slli	r6,r6,31
 100ccdc:	213fffc4 	addi	r4,r4,-1
 100cce0:	1906703a 	and	r3,r3,r4
 100cce4:	1946b03a 	or	r3,r3,r5
 100cce8:	1986b03a 	or	r3,r3,r6
 100ccec:	dfc00217 	ldw	ra,8(sp)
 100ccf0:	dc400117 	ldw	r17,4(sp)
 100ccf4:	dc000017 	ldw	r16,0(sp)
 100ccf8:	dec00304 	addi	sp,sp,12
 100ccfc:	f800283a 	ret
 100cd00:	00c002c4 	movi	r3,11
 100cd04:	1887c83a 	sub	r3,r3,r2
 100cd08:	88c6d83a 	srl	r3,r17,r3
 100cd0c:	8904983a 	sll	r2,r17,r4
 100cd10:	01000434 	movhi	r4,16
 100cd14:	213fffc4 	addi	r4,r4,-1
 100cd18:	2941ffcc 	andi	r5,r5,2047
 100cd1c:	1906703a 	and	r3,r3,r4
 100cd20:	800d883a 	mov	r6,r16
 100cd24:	003fe906 	br	100cccc <__alt_mem_TCDM+0xff00bccc>
 100cd28:	000d883a 	mov	r6,zero
 100cd2c:	000b883a 	mov	r5,zero
 100cd30:	0007883a 	mov	r3,zero
 100cd34:	0005883a 	mov	r2,zero
 100cd38:	003fe406 	br	100cccc <__alt_mem_TCDM+0xff00bccc>
 100cd3c:	0123c83a 	sub	r17,zero,r4
 100cd40:	003fd106 	br	100cc88 <__alt_mem_TCDM+0xff00bc88>

0100cd44 <__floatunsidf>:
 100cd44:	defffe04 	addi	sp,sp,-8
 100cd48:	dc000015 	stw	r16,0(sp)
 100cd4c:	dfc00115 	stw	ra,4(sp)
 100cd50:	2021883a 	mov	r16,r4
 100cd54:	20002226 	beq	r4,zero,100cde0 <__floatunsidf+0x9c>
 100cd58:	100cdec0 	call	100cdec <__clzsi2>
 100cd5c:	01010784 	movi	r4,1054
 100cd60:	2089c83a 	sub	r4,r4,r2
 100cd64:	01810cc4 	movi	r6,1075
 100cd68:	310dc83a 	sub	r6,r6,r4
 100cd6c:	00c007c4 	movi	r3,31
 100cd70:	1980120e 	bge	r3,r6,100cdbc <__floatunsidf+0x78>
 100cd74:	00c104c4 	movi	r3,1043
 100cd78:	1907c83a 	sub	r3,r3,r4
 100cd7c:	80ca983a 	sll	r5,r16,r3
 100cd80:	00800434 	movhi	r2,16
 100cd84:	10bfffc4 	addi	r2,r2,-1
 100cd88:	2101ffcc 	andi	r4,r4,2047
 100cd8c:	0021883a 	mov	r16,zero
 100cd90:	288a703a 	and	r5,r5,r2
 100cd94:	2008953a 	slli	r4,r4,20
 100cd98:	00c00434 	movhi	r3,16
 100cd9c:	18ffffc4 	addi	r3,r3,-1
 100cda0:	28c6703a 	and	r3,r5,r3
 100cda4:	8005883a 	mov	r2,r16
 100cda8:	1906b03a 	or	r3,r3,r4
 100cdac:	dfc00117 	ldw	ra,4(sp)
 100cdb0:	dc000017 	ldw	r16,0(sp)
 100cdb4:	dec00204 	addi	sp,sp,8
 100cdb8:	f800283a 	ret
 100cdbc:	00c002c4 	movi	r3,11
 100cdc0:	188bc83a 	sub	r5,r3,r2
 100cdc4:	814ad83a 	srl	r5,r16,r5
 100cdc8:	00c00434 	movhi	r3,16
 100cdcc:	18ffffc4 	addi	r3,r3,-1
 100cdd0:	81a0983a 	sll	r16,r16,r6
 100cdd4:	2101ffcc 	andi	r4,r4,2047
 100cdd8:	28ca703a 	and	r5,r5,r3
 100cddc:	003fed06 	br	100cd94 <__alt_mem_TCDM+0xff00bd94>
 100cde0:	0009883a 	mov	r4,zero
 100cde4:	000b883a 	mov	r5,zero
 100cde8:	003fea06 	br	100cd94 <__alt_mem_TCDM+0xff00bd94>

0100cdec <__clzsi2>:
 100cdec:	00bfffd4 	movui	r2,65535
 100cdf0:	11000536 	bltu	r2,r4,100ce08 <__clzsi2+0x1c>
 100cdf4:	00803fc4 	movi	r2,255
 100cdf8:	11000f36 	bltu	r2,r4,100ce38 <__clzsi2+0x4c>
 100cdfc:	00800804 	movi	r2,32
 100ce00:	0007883a 	mov	r3,zero
 100ce04:	00000506 	br	100ce1c <__clzsi2+0x30>
 100ce08:	00804034 	movhi	r2,256
 100ce0c:	10bfffc4 	addi	r2,r2,-1
 100ce10:	11000c2e 	bgeu	r2,r4,100ce44 <__clzsi2+0x58>
 100ce14:	00800204 	movi	r2,8
 100ce18:	00c00604 	movi	r3,24
 100ce1c:	20c8d83a 	srl	r4,r4,r3
 100ce20:	00c04074 	movhi	r3,257
 100ce24:	18ffc704 	addi	r3,r3,-228
 100ce28:	1909883a 	add	r4,r3,r4
 100ce2c:	20c00003 	ldbu	r3,0(r4)
 100ce30:	10c5c83a 	sub	r2,r2,r3
 100ce34:	f800283a 	ret
 100ce38:	00800604 	movi	r2,24
 100ce3c:	00c00204 	movi	r3,8
 100ce40:	003ff606 	br	100ce1c <__alt_mem_TCDM+0xff00be1c>
 100ce44:	00800404 	movi	r2,16
 100ce48:	1007883a 	mov	r3,r2
 100ce4c:	003ff306 	br	100ce1c <__alt_mem_TCDM+0xff00be1c>

0100ce50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100ce50:	defffe04 	addi	sp,sp,-8
 100ce54:	dfc00115 	stw	ra,4(sp)
 100ce58:	df000015 	stw	fp,0(sp)
 100ce5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100ce60:	d0a00b17 	ldw	r2,-32724(gp)
 100ce64:	10000326 	beq	r2,zero,100ce74 <alt_get_errno+0x24>
 100ce68:	d0a00b17 	ldw	r2,-32724(gp)
 100ce6c:	103ee83a 	callr	r2
 100ce70:	00000106 	br	100ce78 <alt_get_errno+0x28>
 100ce74:	d0a6d104 	addi	r2,gp,-25788
}
 100ce78:	e037883a 	mov	sp,fp
 100ce7c:	dfc00117 	ldw	ra,4(sp)
 100ce80:	df000017 	ldw	fp,0(sp)
 100ce84:	dec00204 	addi	sp,sp,8
 100ce88:	f800283a 	ret

0100ce8c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100ce8c:	defffb04 	addi	sp,sp,-20
 100ce90:	dfc00415 	stw	ra,16(sp)
 100ce94:	df000315 	stw	fp,12(sp)
 100ce98:	df000304 	addi	fp,sp,12
 100ce9c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100cea0:	e0bfff17 	ldw	r2,-4(fp)
 100cea4:	10000616 	blt	r2,zero,100cec0 <close+0x34>
 100cea8:	e0bfff17 	ldw	r2,-4(fp)
 100ceac:	10c00324 	muli	r3,r2,12
 100ceb0:	00804074 	movhi	r2,257
 100ceb4:	10828504 	addi	r2,r2,2580
 100ceb8:	1885883a 	add	r2,r3,r2
 100cebc:	00000106 	br	100cec4 <close+0x38>
 100cec0:	0005883a 	mov	r2,zero
 100cec4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 100cec8:	e0bffd17 	ldw	r2,-12(fp)
 100cecc:	10001926 	beq	r2,zero,100cf34 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100ced0:	e0bffd17 	ldw	r2,-12(fp)
 100ced4:	10800017 	ldw	r2,0(r2)
 100ced8:	10800417 	ldw	r2,16(r2)
 100cedc:	10000626 	beq	r2,zero,100cef8 <close+0x6c>
 100cee0:	e0bffd17 	ldw	r2,-12(fp)
 100cee4:	10800017 	ldw	r2,0(r2)
 100cee8:	10800417 	ldw	r2,16(r2)
 100ceec:	e13ffd17 	ldw	r4,-12(fp)
 100cef0:	103ee83a 	callr	r2
 100cef4:	00000106 	br	100cefc <close+0x70>
 100cef8:	0005883a 	mov	r2,zero
 100cefc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100cf00:	e13fff17 	ldw	r4,-4(fp)
 100cf04:	100d6cc0 	call	100d6cc <alt_release_fd>
    if (rval < 0)
 100cf08:	e0bffe17 	ldw	r2,-8(fp)
 100cf0c:	1000070e 	bge	r2,zero,100cf2c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 100cf10:	100ce500 	call	100ce50 <alt_get_errno>
 100cf14:	1007883a 	mov	r3,r2
 100cf18:	e0bffe17 	ldw	r2,-8(fp)
 100cf1c:	0085c83a 	sub	r2,zero,r2
 100cf20:	18800015 	stw	r2,0(r3)
      return -1;
 100cf24:	00bfffc4 	movi	r2,-1
 100cf28:	00000706 	br	100cf48 <close+0xbc>
    }
    return 0;
 100cf2c:	0005883a 	mov	r2,zero
 100cf30:	00000506 	br	100cf48 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100cf34:	100ce500 	call	100ce50 <alt_get_errno>
 100cf38:	1007883a 	mov	r3,r2
 100cf3c:	00801444 	movi	r2,81
 100cf40:	18800015 	stw	r2,0(r3)
    return -1;
 100cf44:	00bfffc4 	movi	r2,-1
  }
}
 100cf48:	e037883a 	mov	sp,fp
 100cf4c:	dfc00117 	ldw	ra,4(sp)
 100cf50:	df000017 	ldw	fp,0(sp)
 100cf54:	dec00204 	addi	sp,sp,8
 100cf58:	f800283a 	ret

0100cf5c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100cf5c:	defffc04 	addi	sp,sp,-16
 100cf60:	df000315 	stw	fp,12(sp)
 100cf64:	df000304 	addi	fp,sp,12
 100cf68:	e13ffd15 	stw	r4,-12(fp)
 100cf6c:	e17ffe15 	stw	r5,-8(fp)
 100cf70:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100cf74:	e0bfff17 	ldw	r2,-4(fp)
}
 100cf78:	e037883a 	mov	sp,fp
 100cf7c:	df000017 	ldw	fp,0(sp)
 100cf80:	dec00104 	addi	sp,sp,4
 100cf84:	f800283a 	ret

0100cf88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100cf88:	defffe04 	addi	sp,sp,-8
 100cf8c:	dfc00115 	stw	ra,4(sp)
 100cf90:	df000015 	stw	fp,0(sp)
 100cf94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100cf98:	d0a00b17 	ldw	r2,-32724(gp)
 100cf9c:	10000326 	beq	r2,zero,100cfac <alt_get_errno+0x24>
 100cfa0:	d0a00b17 	ldw	r2,-32724(gp)
 100cfa4:	103ee83a 	callr	r2
 100cfa8:	00000106 	br	100cfb0 <alt_get_errno+0x28>
 100cfac:	d0a6d104 	addi	r2,gp,-25788
}
 100cfb0:	e037883a 	mov	sp,fp
 100cfb4:	dfc00117 	ldw	ra,4(sp)
 100cfb8:	df000017 	ldw	fp,0(sp)
 100cfbc:	dec00204 	addi	sp,sp,8
 100cfc0:	f800283a 	ret

0100cfc4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100cfc4:	defffb04 	addi	sp,sp,-20
 100cfc8:	dfc00415 	stw	ra,16(sp)
 100cfcc:	df000315 	stw	fp,12(sp)
 100cfd0:	df000304 	addi	fp,sp,12
 100cfd4:	e13ffe15 	stw	r4,-8(fp)
 100cfd8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100cfdc:	e0bffe17 	ldw	r2,-8(fp)
 100cfe0:	10000616 	blt	r2,zero,100cffc <fstat+0x38>
 100cfe4:	e0bffe17 	ldw	r2,-8(fp)
 100cfe8:	10c00324 	muli	r3,r2,12
 100cfec:	00804074 	movhi	r2,257
 100cff0:	10828504 	addi	r2,r2,2580
 100cff4:	1885883a 	add	r2,r3,r2
 100cff8:	00000106 	br	100d000 <fstat+0x3c>
 100cffc:	0005883a 	mov	r2,zero
 100d000:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 100d004:	e0bffd17 	ldw	r2,-12(fp)
 100d008:	10001026 	beq	r2,zero,100d04c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100d00c:	e0bffd17 	ldw	r2,-12(fp)
 100d010:	10800017 	ldw	r2,0(r2)
 100d014:	10800817 	ldw	r2,32(r2)
 100d018:	10000726 	beq	r2,zero,100d038 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 100d01c:	e0bffd17 	ldw	r2,-12(fp)
 100d020:	10800017 	ldw	r2,0(r2)
 100d024:	10800817 	ldw	r2,32(r2)
 100d028:	e17fff17 	ldw	r5,-4(fp)
 100d02c:	e13ffd17 	ldw	r4,-12(fp)
 100d030:	103ee83a 	callr	r2
 100d034:	00000a06 	br	100d060 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100d038:	e0bfff17 	ldw	r2,-4(fp)
 100d03c:	00c80004 	movi	r3,8192
 100d040:	10c00115 	stw	r3,4(r2)
      return 0;
 100d044:	0005883a 	mov	r2,zero
 100d048:	00000506 	br	100d060 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100d04c:	100cf880 	call	100cf88 <alt_get_errno>
 100d050:	1007883a 	mov	r3,r2
 100d054:	00801444 	movi	r2,81
 100d058:	18800015 	stw	r2,0(r3)
    return -1;
 100d05c:	00bfffc4 	movi	r2,-1
  }
}
 100d060:	e037883a 	mov	sp,fp
 100d064:	dfc00117 	ldw	ra,4(sp)
 100d068:	df000017 	ldw	fp,0(sp)
 100d06c:	dec00204 	addi	sp,sp,8
 100d070:	f800283a 	ret

0100d074 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 100d074:	defff004 	addi	sp,sp,-64
 100d078:	df000f15 	stw	fp,60(sp)
 100d07c:	df000f04 	addi	fp,sp,60
 100d080:	e13ffd15 	stw	r4,-12(fp)
 100d084:	e17ffe15 	stw	r5,-8(fp)
 100d088:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 100d08c:	00bffa84 	movi	r2,-22
 100d090:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100d094:	e0bffd17 	ldw	r2,-12(fp)
 100d098:	10800828 	cmpgeui	r2,r2,32
 100d09c:	1000501e 	bne	r2,zero,100d1e0 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d0a0:	0005303a 	rdctl	r2,status
 100d0a4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d0a8:	e0fff617 	ldw	r3,-40(fp)
 100d0ac:	00bfff84 	movi	r2,-2
 100d0b0:	1884703a 	and	r2,r3,r2
 100d0b4:	1001703a 	wrctl	status,r2
  
  return context;
 100d0b8:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 100d0bc:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 100d0c0:	00804074 	movhi	r2,257
 100d0c4:	108de004 	addi	r2,r2,14208
 100d0c8:	e0fffd17 	ldw	r3,-12(fp)
 100d0cc:	180690fa 	slli	r3,r3,3
 100d0d0:	10c5883a 	add	r2,r2,r3
 100d0d4:	e0ffff17 	ldw	r3,-4(fp)
 100d0d8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 100d0dc:	00804074 	movhi	r2,257
 100d0e0:	108de004 	addi	r2,r2,14208
 100d0e4:	e0fffd17 	ldw	r3,-12(fp)
 100d0e8:	180690fa 	slli	r3,r3,3
 100d0ec:	10c5883a 	add	r2,r2,r3
 100d0f0:	10800104 	addi	r2,r2,4
 100d0f4:	e0fffe17 	ldw	r3,-8(fp)
 100d0f8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 100d0fc:	e0bfff17 	ldw	r2,-4(fp)
 100d100:	10001926 	beq	r2,zero,100d168 <alt_irq_register+0xf4>
 100d104:	e0bffd17 	ldw	r2,-12(fp)
 100d108:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d10c:	0005303a 	rdctl	r2,status
 100d110:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d114:	e0fff717 	ldw	r3,-36(fp)
 100d118:	00bfff84 	movi	r2,-2
 100d11c:	1884703a 	and	r2,r3,r2
 100d120:	1001703a 	wrctl	status,r2
  
  return context;
 100d124:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100d128:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 100d12c:	00c00044 	movi	r3,1
 100d130:	e0bff217 	ldw	r2,-56(fp)
 100d134:	1884983a 	sll	r2,r3,r2
 100d138:	1007883a 	mov	r3,r2
 100d13c:	d0a6d217 	ldw	r2,-25784(gp)
 100d140:	1884b03a 	or	r2,r3,r2
 100d144:	d0a6d215 	stw	r2,-25784(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100d148:	d0a6d217 	ldw	r2,-25784(gp)
 100d14c:	100170fa 	wrctl	ienable,r2
 100d150:	e0bff817 	ldw	r2,-32(fp)
 100d154:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d158:	e0bff917 	ldw	r2,-28(fp)
 100d15c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100d160:	0005883a 	mov	r2,zero
 100d164:	00001906 	br	100d1cc <alt_irq_register+0x158>
 100d168:	e0bffd17 	ldw	r2,-12(fp)
 100d16c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d170:	0005303a 	rdctl	r2,status
 100d174:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d178:	e0fffa17 	ldw	r3,-24(fp)
 100d17c:	00bfff84 	movi	r2,-2
 100d180:	1884703a 	and	r2,r3,r2
 100d184:	1001703a 	wrctl	status,r2
  
  return context;
 100d188:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100d18c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 100d190:	00c00044 	movi	r3,1
 100d194:	e0bff417 	ldw	r2,-48(fp)
 100d198:	1884983a 	sll	r2,r3,r2
 100d19c:	0084303a 	nor	r2,zero,r2
 100d1a0:	1007883a 	mov	r3,r2
 100d1a4:	d0a6d217 	ldw	r2,-25784(gp)
 100d1a8:	1884703a 	and	r2,r3,r2
 100d1ac:	d0a6d215 	stw	r2,-25784(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100d1b0:	d0a6d217 	ldw	r2,-25784(gp)
 100d1b4:	100170fa 	wrctl	ienable,r2
 100d1b8:	e0bffb17 	ldw	r2,-20(fp)
 100d1bc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d1c0:	e0bffc17 	ldw	r2,-16(fp)
 100d1c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100d1c8:	0005883a 	mov	r2,zero
 100d1cc:	e0bff115 	stw	r2,-60(fp)
 100d1d0:	e0bff317 	ldw	r2,-52(fp)
 100d1d4:	e0bff515 	stw	r2,-44(fp)
 100d1d8:	e0bff517 	ldw	r2,-44(fp)
 100d1dc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 100d1e0:	e0bff117 	ldw	r2,-60(fp)
}
 100d1e4:	e037883a 	mov	sp,fp
 100d1e8:	df000017 	ldw	fp,0(sp)
 100d1ec:	dec00104 	addi	sp,sp,4
 100d1f0:	f800283a 	ret

0100d1f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d1f4:	defffe04 	addi	sp,sp,-8
 100d1f8:	dfc00115 	stw	ra,4(sp)
 100d1fc:	df000015 	stw	fp,0(sp)
 100d200:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100d204:	d0a00b17 	ldw	r2,-32724(gp)
 100d208:	10000326 	beq	r2,zero,100d218 <alt_get_errno+0x24>
 100d20c:	d0a00b17 	ldw	r2,-32724(gp)
 100d210:	103ee83a 	callr	r2
 100d214:	00000106 	br	100d21c <alt_get_errno+0x28>
 100d218:	d0a6d104 	addi	r2,gp,-25788
}
 100d21c:	e037883a 	mov	sp,fp
 100d220:	dfc00117 	ldw	ra,4(sp)
 100d224:	df000017 	ldw	fp,0(sp)
 100d228:	dec00204 	addi	sp,sp,8
 100d22c:	f800283a 	ret

0100d230 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100d230:	deffed04 	addi	sp,sp,-76
 100d234:	dfc01215 	stw	ra,72(sp)
 100d238:	df001115 	stw	fp,68(sp)
 100d23c:	df001104 	addi	fp,sp,68
 100d240:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100d244:	e0bfff17 	ldw	r2,-4(fp)
 100d248:	10000616 	blt	r2,zero,100d264 <isatty+0x34>
 100d24c:	e0bfff17 	ldw	r2,-4(fp)
 100d250:	10c00324 	muli	r3,r2,12
 100d254:	00804074 	movhi	r2,257
 100d258:	10828504 	addi	r2,r2,2580
 100d25c:	1885883a 	add	r2,r3,r2
 100d260:	00000106 	br	100d268 <isatty+0x38>
 100d264:	0005883a 	mov	r2,zero
 100d268:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 100d26c:	e0bfef17 	ldw	r2,-68(fp)
 100d270:	10000e26 	beq	r2,zero,100d2ac <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100d274:	e0bfef17 	ldw	r2,-68(fp)
 100d278:	10800017 	ldw	r2,0(r2)
 100d27c:	10800817 	ldw	r2,32(r2)
 100d280:	1000021e 	bne	r2,zero,100d28c <isatty+0x5c>
    {
      return 1;
 100d284:	00800044 	movi	r2,1
 100d288:	00000d06 	br	100d2c0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100d28c:	e0bff004 	addi	r2,fp,-64
 100d290:	100b883a 	mov	r5,r2
 100d294:	e13fff17 	ldw	r4,-4(fp)
 100d298:	100cfc40 	call	100cfc4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100d29c:	e0bff117 	ldw	r2,-60(fp)
 100d2a0:	10880020 	cmpeqi	r2,r2,8192
 100d2a4:	10803fcc 	andi	r2,r2,255
 100d2a8:	00000506 	br	100d2c0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100d2ac:	100d1f40 	call	100d1f4 <alt_get_errno>
 100d2b0:	1007883a 	mov	r3,r2
 100d2b4:	00801444 	movi	r2,81
 100d2b8:	18800015 	stw	r2,0(r3)
    return 0;
 100d2bc:	0005883a 	mov	r2,zero
  }
}
 100d2c0:	e037883a 	mov	sp,fp
 100d2c4:	dfc00117 	ldw	ra,4(sp)
 100d2c8:	df000017 	ldw	fp,0(sp)
 100d2cc:	dec00204 	addi	sp,sp,8
 100d2d0:	f800283a 	ret

0100d2d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100d2d4:	defffc04 	addi	sp,sp,-16
 100d2d8:	df000315 	stw	fp,12(sp)
 100d2dc:	df000304 	addi	fp,sp,12
 100d2e0:	e13ffd15 	stw	r4,-12(fp)
 100d2e4:	e17ffe15 	stw	r5,-8(fp)
 100d2e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100d2ec:	e0fffe17 	ldw	r3,-8(fp)
 100d2f0:	e0bffd17 	ldw	r2,-12(fp)
 100d2f4:	18800c26 	beq	r3,r2,100d328 <alt_load_section+0x54>
  {
    while( to != end )
 100d2f8:	00000806 	br	100d31c <alt_load_section+0x48>
    {
      *to++ = *from++;
 100d2fc:	e0bffe17 	ldw	r2,-8(fp)
 100d300:	10c00104 	addi	r3,r2,4
 100d304:	e0fffe15 	stw	r3,-8(fp)
 100d308:	e0fffd17 	ldw	r3,-12(fp)
 100d30c:	19000104 	addi	r4,r3,4
 100d310:	e13ffd15 	stw	r4,-12(fp)
 100d314:	18c00017 	ldw	r3,0(r3)
 100d318:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100d31c:	e0fffe17 	ldw	r3,-8(fp)
 100d320:	e0bfff17 	ldw	r2,-4(fp)
 100d324:	18bff51e 	bne	r3,r2,100d2fc <__alt_mem_TCDM+0xff00c2fc>
    {
      *to++ = *from++;
    }
  }
}
 100d328:	0001883a 	nop
 100d32c:	e037883a 	mov	sp,fp
 100d330:	df000017 	ldw	fp,0(sp)
 100d334:	dec00104 	addi	sp,sp,4
 100d338:	f800283a 	ret

0100d33c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100d33c:	defffe04 	addi	sp,sp,-8
 100d340:	dfc00115 	stw	ra,4(sp)
 100d344:	df000015 	stw	fp,0(sp)
 100d348:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100d34c:	01804074 	movhi	r6,257
 100d350:	31870d04 	addi	r6,r6,7220
 100d354:	01404074 	movhi	r5,257
 100d358:	29405204 	addi	r5,r5,328
 100d35c:	01004074 	movhi	r4,257
 100d360:	21070d04 	addi	r4,r4,7220
 100d364:	100d2d40 	call	100d2d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100d368:	01808034 	movhi	r6,512
 100d36c:	3180c104 	addi	r6,r6,772
 100d370:	01408034 	movhi	r5,512
 100d374:	29400804 	addi	r5,r5,32
 100d378:	01004034 	movhi	r4,256
 100d37c:	21000804 	addi	r4,r4,32
 100d380:	100d2d40 	call	100d2d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100d384:	01804074 	movhi	r6,257
 100d388:	31805204 	addi	r6,r6,328
 100d38c:	01404074 	movhi	r5,257
 100d390:	297f0404 	addi	r5,r5,-1008
 100d394:	01004074 	movhi	r4,257
 100d398:	213f0404 	addi	r4,r4,-1008
 100d39c:	100d2d40 	call	100d2d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100d3a0:	100ea8c0 	call	100ea8c <alt_dcache_flush_all>
  alt_icache_flush_all();
 100d3a4:	100ec740 	call	100ec74 <alt_icache_flush_all>
}
 100d3a8:	0001883a 	nop
 100d3ac:	e037883a 	mov	sp,fp
 100d3b0:	dfc00117 	ldw	ra,4(sp)
 100d3b4:	df000017 	ldw	fp,0(sp)
 100d3b8:	dec00204 	addi	sp,sp,8
 100d3bc:	f800283a 	ret

0100d3c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d3c0:	defffe04 	addi	sp,sp,-8
 100d3c4:	dfc00115 	stw	ra,4(sp)
 100d3c8:	df000015 	stw	fp,0(sp)
 100d3cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100d3d0:	d0a00b17 	ldw	r2,-32724(gp)
 100d3d4:	10000326 	beq	r2,zero,100d3e4 <alt_get_errno+0x24>
 100d3d8:	d0a00b17 	ldw	r2,-32724(gp)
 100d3dc:	103ee83a 	callr	r2
 100d3e0:	00000106 	br	100d3e8 <alt_get_errno+0x28>
 100d3e4:	d0a6d104 	addi	r2,gp,-25788
}
 100d3e8:	e037883a 	mov	sp,fp
 100d3ec:	dfc00117 	ldw	ra,4(sp)
 100d3f0:	df000017 	ldw	fp,0(sp)
 100d3f4:	dec00204 	addi	sp,sp,8
 100d3f8:	f800283a 	ret

0100d3fc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100d3fc:	defff904 	addi	sp,sp,-28
 100d400:	dfc00615 	stw	ra,24(sp)
 100d404:	df000515 	stw	fp,20(sp)
 100d408:	df000504 	addi	fp,sp,20
 100d40c:	e13ffd15 	stw	r4,-12(fp)
 100d410:	e17ffe15 	stw	r5,-8(fp)
 100d414:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100d418:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100d41c:	e0bffd17 	ldw	r2,-12(fp)
 100d420:	10000616 	blt	r2,zero,100d43c <lseek+0x40>
 100d424:	e0bffd17 	ldw	r2,-12(fp)
 100d428:	10c00324 	muli	r3,r2,12
 100d42c:	00804074 	movhi	r2,257
 100d430:	10828504 	addi	r2,r2,2580
 100d434:	1885883a 	add	r2,r3,r2
 100d438:	00000106 	br	100d440 <lseek+0x44>
 100d43c:	0005883a 	mov	r2,zero
 100d440:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 100d444:	e0bffc17 	ldw	r2,-16(fp)
 100d448:	10001026 	beq	r2,zero,100d48c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100d44c:	e0bffc17 	ldw	r2,-16(fp)
 100d450:	10800017 	ldw	r2,0(r2)
 100d454:	10800717 	ldw	r2,28(r2)
 100d458:	10000926 	beq	r2,zero,100d480 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100d45c:	e0bffc17 	ldw	r2,-16(fp)
 100d460:	10800017 	ldw	r2,0(r2)
 100d464:	10800717 	ldw	r2,28(r2)
 100d468:	e1bfff17 	ldw	r6,-4(fp)
 100d46c:	e17ffe17 	ldw	r5,-8(fp)
 100d470:	e13ffc17 	ldw	r4,-16(fp)
 100d474:	103ee83a 	callr	r2
 100d478:	e0bffb15 	stw	r2,-20(fp)
 100d47c:	00000506 	br	100d494 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100d480:	00bfde84 	movi	r2,-134
 100d484:	e0bffb15 	stw	r2,-20(fp)
 100d488:	00000206 	br	100d494 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 100d48c:	00bfebc4 	movi	r2,-81
 100d490:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 100d494:	e0bffb17 	ldw	r2,-20(fp)
 100d498:	1000070e 	bge	r2,zero,100d4b8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 100d49c:	100d3c00 	call	100d3c0 <alt_get_errno>
 100d4a0:	1007883a 	mov	r3,r2
 100d4a4:	e0bffb17 	ldw	r2,-20(fp)
 100d4a8:	0085c83a 	sub	r2,zero,r2
 100d4ac:	18800015 	stw	r2,0(r3)
    rc = -1;
 100d4b0:	00bfffc4 	movi	r2,-1
 100d4b4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 100d4b8:	e0bffb17 	ldw	r2,-20(fp)
}
 100d4bc:	e037883a 	mov	sp,fp
 100d4c0:	dfc00117 	ldw	ra,4(sp)
 100d4c4:	df000017 	ldw	fp,0(sp)
 100d4c8:	dec00204 	addi	sp,sp,8
 100d4cc:	f800283a 	ret

0100d4d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100d4d0:	defffd04 	addi	sp,sp,-12
 100d4d4:	dfc00215 	stw	ra,8(sp)
 100d4d8:	df000115 	stw	fp,4(sp)
 100d4dc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100d4e0:	0009883a 	mov	r4,zero
 100d4e4:	100d9480 	call	100d948 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 100d4e8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100d4ec:	100d9800 	call	100d980 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100d4f0:	01804074 	movhi	r6,257
 100d4f4:	31800a04 	addi	r6,r6,40
 100d4f8:	01404074 	movhi	r5,257
 100d4fc:	29400a04 	addi	r5,r5,40
 100d500:	01004074 	movhi	r4,257
 100d504:	21000a04 	addi	r4,r4,40
 100d508:	100f00c0 	call	100f00c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100d50c:	100ebb40 	call	100ebb4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100d510:	01004074 	movhi	r4,257
 100d514:	213b0504 	addi	r4,r4,-5100
 100d518:	100f80c0 	call	100f80c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100d51c:	d0a6d317 	ldw	r2,-25780(gp)
 100d520:	d0e6d417 	ldw	r3,-25776(gp)
 100d524:	d126d517 	ldw	r4,-25772(gp)
 100d528:	200d883a 	mov	r6,r4
 100d52c:	180b883a 	mov	r5,r3
 100d530:	1009883a 	mov	r4,r2
 100d534:	10003500 	call	1000350 <main>
 100d538:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100d53c:	01000044 	movi	r4,1
 100d540:	100ce8c0 	call	100ce8c <close>
  exit (result);
 100d544:	e13fff17 	ldw	r4,-4(fp)
 100d548:	100f8200 	call	100f820 <exit>

0100d54c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100d54c:	defffe04 	addi	sp,sp,-8
 100d550:	df000115 	stw	fp,4(sp)
 100d554:	df000104 	addi	fp,sp,4
 100d558:	e13fff15 	stw	r4,-4(fp)
}
 100d55c:	0001883a 	nop
 100d560:	e037883a 	mov	sp,fp
 100d564:	df000017 	ldw	fp,0(sp)
 100d568:	dec00104 	addi	sp,sp,4
 100d56c:	f800283a 	ret

0100d570 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100d570:	defffe04 	addi	sp,sp,-8
 100d574:	df000115 	stw	fp,4(sp)
 100d578:	df000104 	addi	fp,sp,4
 100d57c:	e13fff15 	stw	r4,-4(fp)
}
 100d580:	0001883a 	nop
 100d584:	e037883a 	mov	sp,fp
 100d588:	df000017 	ldw	fp,0(sp)
 100d58c:	dec00104 	addi	sp,sp,4
 100d590:	f800283a 	ret

0100d594 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d594:	defffe04 	addi	sp,sp,-8
 100d598:	dfc00115 	stw	ra,4(sp)
 100d59c:	df000015 	stw	fp,0(sp)
 100d5a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100d5a4:	d0a00b17 	ldw	r2,-32724(gp)
 100d5a8:	10000326 	beq	r2,zero,100d5b8 <alt_get_errno+0x24>
 100d5ac:	d0a00b17 	ldw	r2,-32724(gp)
 100d5b0:	103ee83a 	callr	r2
 100d5b4:	00000106 	br	100d5bc <alt_get_errno+0x28>
 100d5b8:	d0a6d104 	addi	r2,gp,-25788
}
 100d5bc:	e037883a 	mov	sp,fp
 100d5c0:	dfc00117 	ldw	ra,4(sp)
 100d5c4:	df000017 	ldw	fp,0(sp)
 100d5c8:	dec00204 	addi	sp,sp,8
 100d5cc:	f800283a 	ret

0100d5d0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100d5d0:	defff904 	addi	sp,sp,-28
 100d5d4:	dfc00615 	stw	ra,24(sp)
 100d5d8:	df000515 	stw	fp,20(sp)
 100d5dc:	df000504 	addi	fp,sp,20
 100d5e0:	e13ffd15 	stw	r4,-12(fp)
 100d5e4:	e17ffe15 	stw	r5,-8(fp)
 100d5e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100d5ec:	e0bffd17 	ldw	r2,-12(fp)
 100d5f0:	10000616 	blt	r2,zero,100d60c <read+0x3c>
 100d5f4:	e0bffd17 	ldw	r2,-12(fp)
 100d5f8:	10c00324 	muli	r3,r2,12
 100d5fc:	00804074 	movhi	r2,257
 100d600:	10828504 	addi	r2,r2,2580
 100d604:	1885883a 	add	r2,r3,r2
 100d608:	00000106 	br	100d610 <read+0x40>
 100d60c:	0005883a 	mov	r2,zero
 100d610:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100d614:	e0bffb17 	ldw	r2,-20(fp)
 100d618:	10002226 	beq	r2,zero,100d6a4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100d61c:	e0bffb17 	ldw	r2,-20(fp)
 100d620:	10800217 	ldw	r2,8(r2)
 100d624:	108000cc 	andi	r2,r2,3
 100d628:	10800060 	cmpeqi	r2,r2,1
 100d62c:	1000181e 	bne	r2,zero,100d690 <read+0xc0>
        (fd->dev->read))
 100d630:	e0bffb17 	ldw	r2,-20(fp)
 100d634:	10800017 	ldw	r2,0(r2)
 100d638:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100d63c:	10001426 	beq	r2,zero,100d690 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100d640:	e0bffb17 	ldw	r2,-20(fp)
 100d644:	10800017 	ldw	r2,0(r2)
 100d648:	10800517 	ldw	r2,20(r2)
 100d64c:	e0ffff17 	ldw	r3,-4(fp)
 100d650:	180d883a 	mov	r6,r3
 100d654:	e17ffe17 	ldw	r5,-8(fp)
 100d658:	e13ffb17 	ldw	r4,-20(fp)
 100d65c:	103ee83a 	callr	r2
 100d660:	e0bffc15 	stw	r2,-16(fp)
 100d664:	e0bffc17 	ldw	r2,-16(fp)
 100d668:	1000070e 	bge	r2,zero,100d688 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 100d66c:	100d5940 	call	100d594 <alt_get_errno>
 100d670:	1007883a 	mov	r3,r2
 100d674:	e0bffc17 	ldw	r2,-16(fp)
 100d678:	0085c83a 	sub	r2,zero,r2
 100d67c:	18800015 	stw	r2,0(r3)
          return -1;
 100d680:	00bfffc4 	movi	r2,-1
 100d684:	00000c06 	br	100d6b8 <read+0xe8>
        }
        return rval;
 100d688:	e0bffc17 	ldw	r2,-16(fp)
 100d68c:	00000a06 	br	100d6b8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100d690:	100d5940 	call	100d594 <alt_get_errno>
 100d694:	1007883a 	mov	r3,r2
 100d698:	00800344 	movi	r2,13
 100d69c:	18800015 	stw	r2,0(r3)
 100d6a0:	00000406 	br	100d6b4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100d6a4:	100d5940 	call	100d594 <alt_get_errno>
 100d6a8:	1007883a 	mov	r3,r2
 100d6ac:	00801444 	movi	r2,81
 100d6b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100d6b4:	00bfffc4 	movi	r2,-1
}
 100d6b8:	e037883a 	mov	sp,fp
 100d6bc:	dfc00117 	ldw	ra,4(sp)
 100d6c0:	df000017 	ldw	fp,0(sp)
 100d6c4:	dec00204 	addi	sp,sp,8
 100d6c8:	f800283a 	ret

0100d6cc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100d6cc:	defffe04 	addi	sp,sp,-8
 100d6d0:	df000115 	stw	fp,4(sp)
 100d6d4:	df000104 	addi	fp,sp,4
 100d6d8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100d6dc:	e0bfff17 	ldw	r2,-4(fp)
 100d6e0:	108000d0 	cmplti	r2,r2,3
 100d6e4:	10000d1e 	bne	r2,zero,100d71c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 100d6e8:	00804074 	movhi	r2,257
 100d6ec:	10828504 	addi	r2,r2,2580
 100d6f0:	e0ffff17 	ldw	r3,-4(fp)
 100d6f4:	18c00324 	muli	r3,r3,12
 100d6f8:	10c5883a 	add	r2,r2,r3
 100d6fc:	10800204 	addi	r2,r2,8
 100d700:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100d704:	00804074 	movhi	r2,257
 100d708:	10828504 	addi	r2,r2,2580
 100d70c:	e0ffff17 	ldw	r3,-4(fp)
 100d710:	18c00324 	muli	r3,r3,12
 100d714:	10c5883a 	add	r2,r2,r3
 100d718:	10000015 	stw	zero,0(r2)
  }
}
 100d71c:	0001883a 	nop
 100d720:	e037883a 	mov	sp,fp
 100d724:	df000017 	ldw	fp,0(sp)
 100d728:	dec00104 	addi	sp,sp,4
 100d72c:	f800283a 	ret

0100d730 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100d730:	defff904 	addi	sp,sp,-28
 100d734:	df000615 	stw	fp,24(sp)
 100d738:	df000604 	addi	fp,sp,24
 100d73c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d740:	0005303a 	rdctl	r2,status
 100d744:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d748:	e0fffe17 	ldw	r3,-8(fp)
 100d74c:	00bfff84 	movi	r2,-2
 100d750:	1884703a 	and	r2,r3,r2
 100d754:	1001703a 	wrctl	status,r2
  
  return context;
 100d758:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100d75c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100d760:	d0a00d17 	ldw	r2,-32716(gp)
 100d764:	10c000c4 	addi	r3,r2,3
 100d768:	00bfff04 	movi	r2,-4
 100d76c:	1884703a 	and	r2,r3,r2
 100d770:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100d774:	d0e00d17 	ldw	r3,-32716(gp)
 100d778:	e0bfff17 	ldw	r2,-4(fp)
 100d77c:	1887883a 	add	r3,r3,r2
 100d780:	00808034 	movhi	r2,512
 100d784:	10800004 	addi	r2,r2,0
 100d788:	10c0062e 	bgeu	r2,r3,100d7a4 <sbrk+0x74>
 100d78c:	e0bffb17 	ldw	r2,-20(fp)
 100d790:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d794:	e0bffa17 	ldw	r2,-24(fp)
 100d798:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100d79c:	00bfffc4 	movi	r2,-1
 100d7a0:	00000b06 	br	100d7d0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 100d7a4:	d0a00d17 	ldw	r2,-32716(gp)
 100d7a8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 100d7ac:	d0e00d17 	ldw	r3,-32716(gp)
 100d7b0:	e0bfff17 	ldw	r2,-4(fp)
 100d7b4:	1885883a 	add	r2,r3,r2
 100d7b8:	d0a00d15 	stw	r2,-32716(gp)
 100d7bc:	e0bffb17 	ldw	r2,-20(fp)
 100d7c0:	e0bffc15 	stw	r2,-16(fp)
 100d7c4:	e0bffc17 	ldw	r2,-16(fp)
 100d7c8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100d7cc:	e0bffd17 	ldw	r2,-12(fp)
} 
 100d7d0:	e037883a 	mov	sp,fp
 100d7d4:	df000017 	ldw	fp,0(sp)
 100d7d8:	dec00104 	addi	sp,sp,4
 100d7dc:	f800283a 	ret

0100d7e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d7e0:	defffe04 	addi	sp,sp,-8
 100d7e4:	dfc00115 	stw	ra,4(sp)
 100d7e8:	df000015 	stw	fp,0(sp)
 100d7ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100d7f0:	d0a00b17 	ldw	r2,-32724(gp)
 100d7f4:	10000326 	beq	r2,zero,100d804 <alt_get_errno+0x24>
 100d7f8:	d0a00b17 	ldw	r2,-32724(gp)
 100d7fc:	103ee83a 	callr	r2
 100d800:	00000106 	br	100d808 <alt_get_errno+0x28>
 100d804:	d0a6d104 	addi	r2,gp,-25788
}
 100d808:	e037883a 	mov	sp,fp
 100d80c:	dfc00117 	ldw	ra,4(sp)
 100d810:	df000017 	ldw	fp,0(sp)
 100d814:	dec00204 	addi	sp,sp,8
 100d818:	f800283a 	ret

0100d81c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100d81c:	defff904 	addi	sp,sp,-28
 100d820:	dfc00615 	stw	ra,24(sp)
 100d824:	df000515 	stw	fp,20(sp)
 100d828:	df000504 	addi	fp,sp,20
 100d82c:	e13ffd15 	stw	r4,-12(fp)
 100d830:	e17ffe15 	stw	r5,-8(fp)
 100d834:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100d838:	e0bffd17 	ldw	r2,-12(fp)
 100d83c:	10000616 	blt	r2,zero,100d858 <write+0x3c>
 100d840:	e0bffd17 	ldw	r2,-12(fp)
 100d844:	10c00324 	muli	r3,r2,12
 100d848:	00804074 	movhi	r2,257
 100d84c:	10828504 	addi	r2,r2,2580
 100d850:	1885883a 	add	r2,r3,r2
 100d854:	00000106 	br	100d85c <write+0x40>
 100d858:	0005883a 	mov	r2,zero
 100d85c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100d860:	e0bffb17 	ldw	r2,-20(fp)
 100d864:	10002126 	beq	r2,zero,100d8ec <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100d868:	e0bffb17 	ldw	r2,-20(fp)
 100d86c:	10800217 	ldw	r2,8(r2)
 100d870:	108000cc 	andi	r2,r2,3
 100d874:	10001826 	beq	r2,zero,100d8d8 <write+0xbc>
 100d878:	e0bffb17 	ldw	r2,-20(fp)
 100d87c:	10800017 	ldw	r2,0(r2)
 100d880:	10800617 	ldw	r2,24(r2)
 100d884:	10001426 	beq	r2,zero,100d8d8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100d888:	e0bffb17 	ldw	r2,-20(fp)
 100d88c:	10800017 	ldw	r2,0(r2)
 100d890:	10800617 	ldw	r2,24(r2)
 100d894:	e0ffff17 	ldw	r3,-4(fp)
 100d898:	180d883a 	mov	r6,r3
 100d89c:	e17ffe17 	ldw	r5,-8(fp)
 100d8a0:	e13ffb17 	ldw	r4,-20(fp)
 100d8a4:	103ee83a 	callr	r2
 100d8a8:	e0bffc15 	stw	r2,-16(fp)
 100d8ac:	e0bffc17 	ldw	r2,-16(fp)
 100d8b0:	1000070e 	bge	r2,zero,100d8d0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 100d8b4:	100d7e00 	call	100d7e0 <alt_get_errno>
 100d8b8:	1007883a 	mov	r3,r2
 100d8bc:	e0bffc17 	ldw	r2,-16(fp)
 100d8c0:	0085c83a 	sub	r2,zero,r2
 100d8c4:	18800015 	stw	r2,0(r3)
        return -1;
 100d8c8:	00bfffc4 	movi	r2,-1
 100d8cc:	00000c06 	br	100d900 <write+0xe4>
      }
      return rval;
 100d8d0:	e0bffc17 	ldw	r2,-16(fp)
 100d8d4:	00000a06 	br	100d900 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100d8d8:	100d7e00 	call	100d7e0 <alt_get_errno>
 100d8dc:	1007883a 	mov	r3,r2
 100d8e0:	00800344 	movi	r2,13
 100d8e4:	18800015 	stw	r2,0(r3)
 100d8e8:	00000406 	br	100d8fc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100d8ec:	100d7e00 	call	100d7e0 <alt_get_errno>
 100d8f0:	1007883a 	mov	r3,r2
 100d8f4:	00801444 	movi	r2,81
 100d8f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100d8fc:	00bfffc4 	movi	r2,-1
}
 100d900:	e037883a 	mov	sp,fp
 100d904:	dfc00117 	ldw	ra,4(sp)
 100d908:	df000017 	ldw	fp,0(sp)
 100d90c:	dec00204 	addi	sp,sp,8
 100d910:	f800283a 	ret

0100d914 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100d914:	defffd04 	addi	sp,sp,-12
 100d918:	dfc00215 	stw	ra,8(sp)
 100d91c:	df000115 	stw	fp,4(sp)
 100d920:	df000104 	addi	fp,sp,4
 100d924:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100d928:	d1600804 	addi	r5,gp,-32736
 100d92c:	e13fff17 	ldw	r4,-4(fp)
 100d930:	100eb100 	call	100eb10 <alt_dev_llist_insert>
}
 100d934:	e037883a 	mov	sp,fp
 100d938:	dfc00117 	ldw	ra,4(sp)
 100d93c:	df000017 	ldw	fp,0(sp)
 100d940:	dec00204 	addi	sp,sp,8
 100d944:	f800283a 	ret

0100d948 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100d948:	defffd04 	addi	sp,sp,-12
 100d94c:	dfc00215 	stw	ra,8(sp)
 100d950:	df000115 	stw	fp,4(sp)
 100d954:	df000104 	addi	fp,sp,4
 100d958:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
 100d95c:	100f4800 	call	100f480 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100d960:	00800044 	movi	r2,1
 100d964:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100d968:	0001883a 	nop
 100d96c:	e037883a 	mov	sp,fp
 100d970:	dfc00117 	ldw	ra,4(sp)
 100d974:	df000017 	ldw	fp,0(sp)
 100d978:	dec00204 	addi	sp,sp,8
 100d97c:	f800283a 	ret

0100d980 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100d980:	defffe04 	addi	sp,sp,-8
 100d984:	dfc00115 	stw	ra,4(sp)
 100d988:	df000015 	stw	fp,0(sp)
 100d98c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 100d990:	01c01904 	movi	r7,100
 100d994:	01800044 	movi	r6,1
 100d998:	000b883a 	mov	r5,zero
 100d99c:	01008034 	movhi	r4,512
 100d9a0:	210c2004 	addi	r4,r4,12416
 100d9a4:	100e6640 	call	100e664 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 100d9a8:	000d883a 	mov	r6,zero
 100d9ac:	000b883a 	mov	r5,zero
 100d9b0:	01004074 	movhi	r4,257
 100d9b4:	2102ef04 	addi	r4,r4,3004
 100d9b8:	100db580 	call	100db58 <altera_avalon_jtag_uart_init>
 100d9bc:	01004074 	movhi	r4,257
 100d9c0:	2102e504 	addi	r4,r4,2964
 100d9c4:	100d9140 	call	100d914 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 100d9c8:	00c00044 	movi	r3,1
 100d9cc:	00808034 	movhi	r2,512
 100d9d0:	108c0004 	addi	r2,r2,12288
 100d9d4:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 100d9d8:	0001883a 	nop
}
 100d9dc:	0001883a 	nop
 100d9e0:	e037883a 	mov	sp,fp
 100d9e4:	dfc00117 	ldw	ra,4(sp)
 100d9e8:	df000017 	ldw	fp,0(sp)
 100d9ec:	dec00204 	addi	sp,sp,8
 100d9f0:	f800283a 	ret

0100d9f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100d9f4:	defffa04 	addi	sp,sp,-24
 100d9f8:	dfc00515 	stw	ra,20(sp)
 100d9fc:	df000415 	stw	fp,16(sp)
 100da00:	df000404 	addi	fp,sp,16
 100da04:	e13ffd15 	stw	r4,-12(fp)
 100da08:	e17ffe15 	stw	r5,-8(fp)
 100da0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100da10:	e0bffd17 	ldw	r2,-12(fp)
 100da14:	10800017 	ldw	r2,0(r2)
 100da18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100da1c:	e0bffc17 	ldw	r2,-16(fp)
 100da20:	10c00a04 	addi	r3,r2,40
 100da24:	e0bffd17 	ldw	r2,-12(fp)
 100da28:	10800217 	ldw	r2,8(r2)
 100da2c:	100f883a 	mov	r7,r2
 100da30:	e1bfff17 	ldw	r6,-4(fp)
 100da34:	e17ffe17 	ldw	r5,-8(fp)
 100da38:	1809883a 	mov	r4,r3
 100da3c:	100e01c0 	call	100e01c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100da40:	e037883a 	mov	sp,fp
 100da44:	dfc00117 	ldw	ra,4(sp)
 100da48:	df000017 	ldw	fp,0(sp)
 100da4c:	dec00204 	addi	sp,sp,8
 100da50:	f800283a 	ret

0100da54 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100da54:	defffa04 	addi	sp,sp,-24
 100da58:	dfc00515 	stw	ra,20(sp)
 100da5c:	df000415 	stw	fp,16(sp)
 100da60:	df000404 	addi	fp,sp,16
 100da64:	e13ffd15 	stw	r4,-12(fp)
 100da68:	e17ffe15 	stw	r5,-8(fp)
 100da6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100da70:	e0bffd17 	ldw	r2,-12(fp)
 100da74:	10800017 	ldw	r2,0(r2)
 100da78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100da7c:	e0bffc17 	ldw	r2,-16(fp)
 100da80:	10c00a04 	addi	r3,r2,40
 100da84:	e0bffd17 	ldw	r2,-12(fp)
 100da88:	10800217 	ldw	r2,8(r2)
 100da8c:	100f883a 	mov	r7,r2
 100da90:	e1bfff17 	ldw	r6,-4(fp)
 100da94:	e17ffe17 	ldw	r5,-8(fp)
 100da98:	1809883a 	mov	r4,r3
 100da9c:	100e2380 	call	100e238 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100daa0:	e037883a 	mov	sp,fp
 100daa4:	dfc00117 	ldw	ra,4(sp)
 100daa8:	df000017 	ldw	fp,0(sp)
 100daac:	dec00204 	addi	sp,sp,8
 100dab0:	f800283a 	ret

0100dab4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100dab4:	defffc04 	addi	sp,sp,-16
 100dab8:	dfc00315 	stw	ra,12(sp)
 100dabc:	df000215 	stw	fp,8(sp)
 100dac0:	df000204 	addi	fp,sp,8
 100dac4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100dac8:	e0bfff17 	ldw	r2,-4(fp)
 100dacc:	10800017 	ldw	r2,0(r2)
 100dad0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100dad4:	e0bffe17 	ldw	r2,-8(fp)
 100dad8:	10c00a04 	addi	r3,r2,40
 100dadc:	e0bfff17 	ldw	r2,-4(fp)
 100dae0:	10800217 	ldw	r2,8(r2)
 100dae4:	100b883a 	mov	r5,r2
 100dae8:	1809883a 	mov	r4,r3
 100daec:	100dec40 	call	100dec4 <altera_avalon_jtag_uart_close>
}
 100daf0:	e037883a 	mov	sp,fp
 100daf4:	dfc00117 	ldw	ra,4(sp)
 100daf8:	df000017 	ldw	fp,0(sp)
 100dafc:	dec00204 	addi	sp,sp,8
 100db00:	f800283a 	ret

0100db04 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100db04:	defffa04 	addi	sp,sp,-24
 100db08:	dfc00515 	stw	ra,20(sp)
 100db0c:	df000415 	stw	fp,16(sp)
 100db10:	df000404 	addi	fp,sp,16
 100db14:	e13ffd15 	stw	r4,-12(fp)
 100db18:	e17ffe15 	stw	r5,-8(fp)
 100db1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100db20:	e0bffd17 	ldw	r2,-12(fp)
 100db24:	10800017 	ldw	r2,0(r2)
 100db28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100db2c:	e0bffc17 	ldw	r2,-16(fp)
 100db30:	10800a04 	addi	r2,r2,40
 100db34:	e1bfff17 	ldw	r6,-4(fp)
 100db38:	e17ffe17 	ldw	r5,-8(fp)
 100db3c:	1009883a 	mov	r4,r2
 100db40:	100df2c0 	call	100df2c <altera_avalon_jtag_uart_ioctl>
}
 100db44:	e037883a 	mov	sp,fp
 100db48:	dfc00117 	ldw	ra,4(sp)
 100db4c:	df000017 	ldw	fp,0(sp)
 100db50:	dec00204 	addi	sp,sp,8
 100db54:	f800283a 	ret

0100db58 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100db58:	defffa04 	addi	sp,sp,-24
 100db5c:	dfc00515 	stw	ra,20(sp)
 100db60:	df000415 	stw	fp,16(sp)
 100db64:	df000404 	addi	fp,sp,16
 100db68:	e13ffd15 	stw	r4,-12(fp)
 100db6c:	e17ffe15 	stw	r5,-8(fp)
 100db70:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100db74:	e0bffd17 	ldw	r2,-12(fp)
 100db78:	00c00044 	movi	r3,1
 100db7c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100db80:	e0bffd17 	ldw	r2,-12(fp)
 100db84:	10800017 	ldw	r2,0(r2)
 100db88:	10800104 	addi	r2,r2,4
 100db8c:	1007883a 	mov	r3,r2
 100db90:	e0bffd17 	ldw	r2,-12(fp)
 100db94:	10800817 	ldw	r2,32(r2)
 100db98:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 100db9c:	e0bffe17 	ldw	r2,-8(fp)
 100dba0:	e0ffff17 	ldw	r3,-4(fp)
 100dba4:	d8000015 	stw	zero,0(sp)
 100dba8:	e1fffd17 	ldw	r7,-12(fp)
 100dbac:	01804074 	movhi	r6,257
 100dbb0:	31b70604 	addi	r6,r6,-9192
 100dbb4:	180b883a 	mov	r5,r3
 100dbb8:	1009883a 	mov	r4,r2
 100dbbc:	100eca80 	call	100eca8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100dbc0:	e0bffd17 	ldw	r2,-12(fp)
 100dbc4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100dbc8:	e0bffd17 	ldw	r2,-12(fp)
 100dbcc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100dbd0:	d0e6d617 	ldw	r3,-25768(gp)
 100dbd4:	e1fffd17 	ldw	r7,-12(fp)
 100dbd8:	01804074 	movhi	r6,257
 100dbdc:	31b78904 	addi	r6,r6,-8668
 100dbe0:	180b883a 	mov	r5,r3
 100dbe4:	1009883a 	mov	r4,r2
 100dbe8:	100e9600 	call	100e960 <alt_alarm_start>
 100dbec:	1000040e 	bge	r2,zero,100dc00 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100dbf0:	e0fffd17 	ldw	r3,-12(fp)
 100dbf4:	00a00034 	movhi	r2,32768
 100dbf8:	10bfffc4 	addi	r2,r2,-1
 100dbfc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100dc00:	0001883a 	nop
 100dc04:	e037883a 	mov	sp,fp
 100dc08:	dfc00117 	ldw	ra,4(sp)
 100dc0c:	df000017 	ldw	fp,0(sp)
 100dc10:	dec00204 	addi	sp,sp,8
 100dc14:	f800283a 	ret

0100dc18 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100dc18:	defff804 	addi	sp,sp,-32
 100dc1c:	df000715 	stw	fp,28(sp)
 100dc20:	df000704 	addi	fp,sp,28
 100dc24:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100dc28:	e0bfff17 	ldw	r2,-4(fp)
 100dc2c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 100dc30:	e0bffb17 	ldw	r2,-20(fp)
 100dc34:	10800017 	ldw	r2,0(r2)
 100dc38:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100dc3c:	e0bffc17 	ldw	r2,-16(fp)
 100dc40:	10800104 	addi	r2,r2,4
 100dc44:	10800037 	ldwio	r2,0(r2)
 100dc48:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100dc4c:	e0bffd17 	ldw	r2,-12(fp)
 100dc50:	1080c00c 	andi	r2,r2,768
 100dc54:	10006d26 	beq	r2,zero,100de0c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100dc58:	e0bffd17 	ldw	r2,-12(fp)
 100dc5c:	1080400c 	andi	r2,r2,256
 100dc60:	10003526 	beq	r2,zero,100dd38 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100dc64:	00800074 	movhi	r2,1
 100dc68:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100dc6c:	e0bffb17 	ldw	r2,-20(fp)
 100dc70:	10800a17 	ldw	r2,40(r2)
 100dc74:	10800044 	addi	r2,r2,1
 100dc78:	1081ffcc 	andi	r2,r2,2047
 100dc7c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 100dc80:	e0bffb17 	ldw	r2,-20(fp)
 100dc84:	10c00b17 	ldw	r3,44(r2)
 100dc88:	e0bffe17 	ldw	r2,-8(fp)
 100dc8c:	18801526 	beq	r3,r2,100dce4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100dc90:	e0bffc17 	ldw	r2,-16(fp)
 100dc94:	10800037 	ldwio	r2,0(r2)
 100dc98:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100dc9c:	e0bff917 	ldw	r2,-28(fp)
 100dca0:	10a0000c 	andi	r2,r2,32768
 100dca4:	10001126 	beq	r2,zero,100dcec <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100dca8:	e0bffb17 	ldw	r2,-20(fp)
 100dcac:	10800a17 	ldw	r2,40(r2)
 100dcb0:	e0fff917 	ldw	r3,-28(fp)
 100dcb4:	1809883a 	mov	r4,r3
 100dcb8:	e0fffb17 	ldw	r3,-20(fp)
 100dcbc:	1885883a 	add	r2,r3,r2
 100dcc0:	10800e04 	addi	r2,r2,56
 100dcc4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100dcc8:	e0bffb17 	ldw	r2,-20(fp)
 100dccc:	10800a17 	ldw	r2,40(r2)
 100dcd0:	10800044 	addi	r2,r2,1
 100dcd4:	10c1ffcc 	andi	r3,r2,2047
 100dcd8:	e0bffb17 	ldw	r2,-20(fp)
 100dcdc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100dce0:	003fe206 	br	100dc6c <__alt_mem_TCDM+0xff00cc6c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 100dce4:	0001883a 	nop
 100dce8:	00000106 	br	100dcf0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 100dcec:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100dcf0:	e0bff917 	ldw	r2,-28(fp)
 100dcf4:	10bfffec 	andhi	r2,r2,65535
 100dcf8:	10000f26 	beq	r2,zero,100dd38 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100dcfc:	e0bffb17 	ldw	r2,-20(fp)
 100dd00:	10c00817 	ldw	r3,32(r2)
 100dd04:	00bfff84 	movi	r2,-2
 100dd08:	1886703a 	and	r3,r3,r2
 100dd0c:	e0bffb17 	ldw	r2,-20(fp)
 100dd10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100dd14:	e0bffc17 	ldw	r2,-16(fp)
 100dd18:	10800104 	addi	r2,r2,4
 100dd1c:	1007883a 	mov	r3,r2
 100dd20:	e0bffb17 	ldw	r2,-20(fp)
 100dd24:	10800817 	ldw	r2,32(r2)
 100dd28:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100dd2c:	e0bffc17 	ldw	r2,-16(fp)
 100dd30:	10800104 	addi	r2,r2,4
 100dd34:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100dd38:	e0bffd17 	ldw	r2,-12(fp)
 100dd3c:	1080800c 	andi	r2,r2,512
 100dd40:	103fbe26 	beq	r2,zero,100dc3c <__alt_mem_TCDM+0xff00cc3c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100dd44:	e0bffd17 	ldw	r2,-12(fp)
 100dd48:	1004d43a 	srli	r2,r2,16
 100dd4c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100dd50:	00001406 	br	100dda4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100dd54:	e0bffc17 	ldw	r2,-16(fp)
 100dd58:	e0fffb17 	ldw	r3,-20(fp)
 100dd5c:	18c00d17 	ldw	r3,52(r3)
 100dd60:	e13ffb17 	ldw	r4,-20(fp)
 100dd64:	20c7883a 	add	r3,r4,r3
 100dd68:	18c20e04 	addi	r3,r3,2104
 100dd6c:	18c00003 	ldbu	r3,0(r3)
 100dd70:	18c03fcc 	andi	r3,r3,255
 100dd74:	18c0201c 	xori	r3,r3,128
 100dd78:	18ffe004 	addi	r3,r3,-128
 100dd7c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100dd80:	e0bffb17 	ldw	r2,-20(fp)
 100dd84:	10800d17 	ldw	r2,52(r2)
 100dd88:	10800044 	addi	r2,r2,1
 100dd8c:	10c1ffcc 	andi	r3,r2,2047
 100dd90:	e0bffb17 	ldw	r2,-20(fp)
 100dd94:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100dd98:	e0bffa17 	ldw	r2,-24(fp)
 100dd9c:	10bfffc4 	addi	r2,r2,-1
 100dda0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100dda4:	e0bffa17 	ldw	r2,-24(fp)
 100dda8:	10000526 	beq	r2,zero,100ddc0 <altera_avalon_jtag_uart_irq+0x1a8>
 100ddac:	e0bffb17 	ldw	r2,-20(fp)
 100ddb0:	10c00d17 	ldw	r3,52(r2)
 100ddb4:	e0bffb17 	ldw	r2,-20(fp)
 100ddb8:	10800c17 	ldw	r2,48(r2)
 100ddbc:	18bfe51e 	bne	r3,r2,100dd54 <__alt_mem_TCDM+0xff00cd54>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100ddc0:	e0bffa17 	ldw	r2,-24(fp)
 100ddc4:	103f9d26 	beq	r2,zero,100dc3c <__alt_mem_TCDM+0xff00cc3c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100ddc8:	e0bffb17 	ldw	r2,-20(fp)
 100ddcc:	10c00817 	ldw	r3,32(r2)
 100ddd0:	00bfff44 	movi	r2,-3
 100ddd4:	1886703a 	and	r3,r3,r2
 100ddd8:	e0bffb17 	ldw	r2,-20(fp)
 100dddc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100dde0:	e0bffb17 	ldw	r2,-20(fp)
 100dde4:	10800017 	ldw	r2,0(r2)
 100dde8:	10800104 	addi	r2,r2,4
 100ddec:	1007883a 	mov	r3,r2
 100ddf0:	e0bffb17 	ldw	r2,-20(fp)
 100ddf4:	10800817 	ldw	r2,32(r2)
 100ddf8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100ddfc:	e0bffc17 	ldw	r2,-16(fp)
 100de00:	10800104 	addi	r2,r2,4
 100de04:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100de08:	003f8c06 	br	100dc3c <__alt_mem_TCDM+0xff00cc3c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 100de0c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 100de10:	0001883a 	nop
 100de14:	e037883a 	mov	sp,fp
 100de18:	df000017 	ldw	fp,0(sp)
 100de1c:	dec00104 	addi	sp,sp,4
 100de20:	f800283a 	ret

0100de24 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100de24:	defff804 	addi	sp,sp,-32
 100de28:	df000715 	stw	fp,28(sp)
 100de2c:	df000704 	addi	fp,sp,28
 100de30:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100de34:	e0bffb17 	ldw	r2,-20(fp)
 100de38:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100de3c:	e0bff917 	ldw	r2,-28(fp)
 100de40:	10800017 	ldw	r2,0(r2)
 100de44:	10800104 	addi	r2,r2,4
 100de48:	10800037 	ldwio	r2,0(r2)
 100de4c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100de50:	e0bffa17 	ldw	r2,-24(fp)
 100de54:	1081000c 	andi	r2,r2,1024
 100de58:	10000b26 	beq	r2,zero,100de88 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100de5c:	e0bff917 	ldw	r2,-28(fp)
 100de60:	10800017 	ldw	r2,0(r2)
 100de64:	10800104 	addi	r2,r2,4
 100de68:	1007883a 	mov	r3,r2
 100de6c:	e0bff917 	ldw	r2,-28(fp)
 100de70:	10800817 	ldw	r2,32(r2)
 100de74:	10810014 	ori	r2,r2,1024
 100de78:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 100de7c:	e0bff917 	ldw	r2,-28(fp)
 100de80:	10000915 	stw	zero,36(r2)
 100de84:	00000a06 	br	100deb0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100de88:	e0bff917 	ldw	r2,-28(fp)
 100de8c:	10c00917 	ldw	r3,36(r2)
 100de90:	00a00034 	movhi	r2,32768
 100de94:	10bfff04 	addi	r2,r2,-4
 100de98:	10c00536 	bltu	r2,r3,100deb0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 100de9c:	e0bff917 	ldw	r2,-28(fp)
 100dea0:	10800917 	ldw	r2,36(r2)
 100dea4:	10c00044 	addi	r3,r2,1
 100dea8:	e0bff917 	ldw	r2,-28(fp)
 100deac:	10c00915 	stw	r3,36(r2)
 100deb0:	d0a6d617 	ldw	r2,-25768(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100deb4:	e037883a 	mov	sp,fp
 100deb8:	df000017 	ldw	fp,0(sp)
 100debc:	dec00104 	addi	sp,sp,4
 100dec0:	f800283a 	ret

0100dec4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100dec4:	defffd04 	addi	sp,sp,-12
 100dec8:	df000215 	stw	fp,8(sp)
 100decc:	df000204 	addi	fp,sp,8
 100ded0:	e13ffe15 	stw	r4,-8(fp)
 100ded4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100ded8:	00000506 	br	100def0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 100dedc:	e0bfff17 	ldw	r2,-4(fp)
 100dee0:	1090000c 	andi	r2,r2,16384
 100dee4:	10000226 	beq	r2,zero,100def0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 100dee8:	00bffd44 	movi	r2,-11
 100deec:	00000b06 	br	100df1c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100def0:	e0bffe17 	ldw	r2,-8(fp)
 100def4:	10c00d17 	ldw	r3,52(r2)
 100def8:	e0bffe17 	ldw	r2,-8(fp)
 100defc:	10800c17 	ldw	r2,48(r2)
 100df00:	18800526 	beq	r3,r2,100df18 <altera_avalon_jtag_uart_close+0x54>
 100df04:	e0bffe17 	ldw	r2,-8(fp)
 100df08:	10c00917 	ldw	r3,36(r2)
 100df0c:	e0bffe17 	ldw	r2,-8(fp)
 100df10:	10800117 	ldw	r2,4(r2)
 100df14:	18bff136 	bltu	r3,r2,100dedc <__alt_mem_TCDM+0xff00cedc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100df18:	0005883a 	mov	r2,zero
}
 100df1c:	e037883a 	mov	sp,fp
 100df20:	df000017 	ldw	fp,0(sp)
 100df24:	dec00104 	addi	sp,sp,4
 100df28:	f800283a 	ret

0100df2c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100df2c:	defffa04 	addi	sp,sp,-24
 100df30:	df000515 	stw	fp,20(sp)
 100df34:	df000504 	addi	fp,sp,20
 100df38:	e13ffd15 	stw	r4,-12(fp)
 100df3c:	e17ffe15 	stw	r5,-8(fp)
 100df40:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 100df44:	00bff9c4 	movi	r2,-25
 100df48:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 100df4c:	e0bffe17 	ldw	r2,-8(fp)
 100df50:	10da8060 	cmpeqi	r3,r2,27137
 100df54:	1800031e 	bne	r3,zero,100df64 <altera_avalon_jtag_uart_ioctl+0x38>
 100df58:	109a80a0 	cmpeqi	r2,r2,27138
 100df5c:	1000181e 	bne	r2,zero,100dfc0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 100df60:	00002906 	br	100e008 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100df64:	e0bffd17 	ldw	r2,-12(fp)
 100df68:	10c00117 	ldw	r3,4(r2)
 100df6c:	00a00034 	movhi	r2,32768
 100df70:	10bfffc4 	addi	r2,r2,-1
 100df74:	18802126 	beq	r3,r2,100dffc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 100df78:	e0bfff17 	ldw	r2,-4(fp)
 100df7c:	10800017 	ldw	r2,0(r2)
 100df80:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100df84:	e0bffc17 	ldw	r2,-16(fp)
 100df88:	10800090 	cmplti	r2,r2,2
 100df8c:	1000061e 	bne	r2,zero,100dfa8 <altera_avalon_jtag_uart_ioctl+0x7c>
 100df90:	e0fffc17 	ldw	r3,-16(fp)
 100df94:	00a00034 	movhi	r2,32768
 100df98:	10bfffc4 	addi	r2,r2,-1
 100df9c:	18800226 	beq	r3,r2,100dfa8 <altera_avalon_jtag_uart_ioctl+0x7c>
 100dfa0:	e0bffc17 	ldw	r2,-16(fp)
 100dfa4:	00000206 	br	100dfb0 <altera_avalon_jtag_uart_ioctl+0x84>
 100dfa8:	00a00034 	movhi	r2,32768
 100dfac:	10bfff84 	addi	r2,r2,-2
 100dfb0:	e0fffd17 	ldw	r3,-12(fp)
 100dfb4:	18800115 	stw	r2,4(r3)
      rc = 0;
 100dfb8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 100dfbc:	00000f06 	br	100dffc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100dfc0:	e0bffd17 	ldw	r2,-12(fp)
 100dfc4:	10c00117 	ldw	r3,4(r2)
 100dfc8:	00a00034 	movhi	r2,32768
 100dfcc:	10bfffc4 	addi	r2,r2,-1
 100dfd0:	18800c26 	beq	r3,r2,100e004 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100dfd4:	e0bffd17 	ldw	r2,-12(fp)
 100dfd8:	10c00917 	ldw	r3,36(r2)
 100dfdc:	e0bffd17 	ldw	r2,-12(fp)
 100dfe0:	10800117 	ldw	r2,4(r2)
 100dfe4:	1885803a 	cmpltu	r2,r3,r2
 100dfe8:	10c03fcc 	andi	r3,r2,255
 100dfec:	e0bfff17 	ldw	r2,-4(fp)
 100dff0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 100dff4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 100dff8:	00000206 	br	100e004 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 100dffc:	0001883a 	nop
 100e000:	00000106 	br	100e008 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 100e004:	0001883a 	nop

  default:
    break;
  }

  return rc;
 100e008:	e0bffb17 	ldw	r2,-20(fp)
}
 100e00c:	e037883a 	mov	sp,fp
 100e010:	df000017 	ldw	fp,0(sp)
 100e014:	dec00104 	addi	sp,sp,4
 100e018:	f800283a 	ret

0100e01c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100e01c:	defff304 	addi	sp,sp,-52
 100e020:	dfc00c15 	stw	ra,48(sp)
 100e024:	df000b15 	stw	fp,44(sp)
 100e028:	df000b04 	addi	fp,sp,44
 100e02c:	e13ffc15 	stw	r4,-16(fp)
 100e030:	e17ffd15 	stw	r5,-12(fp)
 100e034:	e1bffe15 	stw	r6,-8(fp)
 100e038:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 100e03c:	e0bffd17 	ldw	r2,-12(fp)
 100e040:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100e044:	00004706 	br	100e164 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100e048:	e0bffc17 	ldw	r2,-16(fp)
 100e04c:	10800a17 	ldw	r2,40(r2)
 100e050:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100e054:	e0bffc17 	ldw	r2,-16(fp)
 100e058:	10800b17 	ldw	r2,44(r2)
 100e05c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 100e060:	e0fff717 	ldw	r3,-36(fp)
 100e064:	e0bff817 	ldw	r2,-32(fp)
 100e068:	18800536 	bltu	r3,r2,100e080 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100e06c:	e0fff717 	ldw	r3,-36(fp)
 100e070:	e0bff817 	ldw	r2,-32(fp)
 100e074:	1885c83a 	sub	r2,r3,r2
 100e078:	e0bff615 	stw	r2,-40(fp)
 100e07c:	00000406 	br	100e090 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100e080:	00c20004 	movi	r3,2048
 100e084:	e0bff817 	ldw	r2,-32(fp)
 100e088:	1885c83a 	sub	r2,r3,r2
 100e08c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 100e090:	e0bff617 	ldw	r2,-40(fp)
 100e094:	10001e26 	beq	r2,zero,100e110 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 100e098:	e0fffe17 	ldw	r3,-8(fp)
 100e09c:	e0bff617 	ldw	r2,-40(fp)
 100e0a0:	1880022e 	bgeu	r3,r2,100e0ac <altera_avalon_jtag_uart_read+0x90>
        n = space;
 100e0a4:	e0bffe17 	ldw	r2,-8(fp)
 100e0a8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100e0ac:	e0bffc17 	ldw	r2,-16(fp)
 100e0b0:	10c00e04 	addi	r3,r2,56
 100e0b4:	e0bff817 	ldw	r2,-32(fp)
 100e0b8:	1885883a 	add	r2,r3,r2
 100e0bc:	e1bff617 	ldw	r6,-40(fp)
 100e0c0:	100b883a 	mov	r5,r2
 100e0c4:	e13ff517 	ldw	r4,-44(fp)
 100e0c8:	1005ffc0 	call	1005ffc <memcpy>
      ptr   += n;
 100e0cc:	e0fff517 	ldw	r3,-44(fp)
 100e0d0:	e0bff617 	ldw	r2,-40(fp)
 100e0d4:	1885883a 	add	r2,r3,r2
 100e0d8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 100e0dc:	e0fffe17 	ldw	r3,-8(fp)
 100e0e0:	e0bff617 	ldw	r2,-40(fp)
 100e0e4:	1885c83a 	sub	r2,r3,r2
 100e0e8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100e0ec:	e0fff817 	ldw	r3,-32(fp)
 100e0f0:	e0bff617 	ldw	r2,-40(fp)
 100e0f4:	1885883a 	add	r2,r3,r2
 100e0f8:	10c1ffcc 	andi	r3,r2,2047
 100e0fc:	e0bffc17 	ldw	r2,-16(fp)
 100e100:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100e104:	e0bffe17 	ldw	r2,-8(fp)
 100e108:	00bfcf16 	blt	zero,r2,100e048 <__alt_mem_TCDM+0xff00d048>
 100e10c:	00000106 	br	100e114 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 100e110:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 100e114:	e0fff517 	ldw	r3,-44(fp)
 100e118:	e0bffd17 	ldw	r2,-12(fp)
 100e11c:	1880141e 	bne	r3,r2,100e170 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100e120:	e0bfff17 	ldw	r2,-4(fp)
 100e124:	1090000c 	andi	r2,r2,16384
 100e128:	1000131e 	bne	r2,zero,100e178 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100e12c:	0001883a 	nop
 100e130:	e0bffc17 	ldw	r2,-16(fp)
 100e134:	10c00a17 	ldw	r3,40(r2)
 100e138:	e0bff717 	ldw	r2,-36(fp)
 100e13c:	1880051e 	bne	r3,r2,100e154 <altera_avalon_jtag_uart_read+0x138>
 100e140:	e0bffc17 	ldw	r2,-16(fp)
 100e144:	10c00917 	ldw	r3,36(r2)
 100e148:	e0bffc17 	ldw	r2,-16(fp)
 100e14c:	10800117 	ldw	r2,4(r2)
 100e150:	18bff736 	bltu	r3,r2,100e130 <__alt_mem_TCDM+0xff00d130>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100e154:	e0bffc17 	ldw	r2,-16(fp)
 100e158:	10c00a17 	ldw	r3,40(r2)
 100e15c:	e0bff717 	ldw	r2,-36(fp)
 100e160:	18800726 	beq	r3,r2,100e180 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100e164:	e0bffe17 	ldw	r2,-8(fp)
 100e168:	00bfb716 	blt	zero,r2,100e048 <__alt_mem_TCDM+0xff00d048>
 100e16c:	00000506 	br	100e184 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 100e170:	0001883a 	nop
 100e174:	00000306 	br	100e184 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 100e178:	0001883a 	nop
 100e17c:	00000106 	br	100e184 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 100e180:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100e184:	e0fff517 	ldw	r3,-44(fp)
 100e188:	e0bffd17 	ldw	r2,-12(fp)
 100e18c:	18801826 	beq	r3,r2,100e1f0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e190:	0005303a 	rdctl	r2,status
 100e194:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e198:	e0fffb17 	ldw	r3,-20(fp)
 100e19c:	00bfff84 	movi	r2,-2
 100e1a0:	1884703a 	and	r2,r3,r2
 100e1a4:	1001703a 	wrctl	status,r2
  
  return context;
 100e1a8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100e1ac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100e1b0:	e0bffc17 	ldw	r2,-16(fp)
 100e1b4:	10800817 	ldw	r2,32(r2)
 100e1b8:	10c00054 	ori	r3,r2,1
 100e1bc:	e0bffc17 	ldw	r2,-16(fp)
 100e1c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100e1c4:	e0bffc17 	ldw	r2,-16(fp)
 100e1c8:	10800017 	ldw	r2,0(r2)
 100e1cc:	10800104 	addi	r2,r2,4
 100e1d0:	1007883a 	mov	r3,r2
 100e1d4:	e0bffc17 	ldw	r2,-16(fp)
 100e1d8:	10800817 	ldw	r2,32(r2)
 100e1dc:	18800035 	stwio	r2,0(r3)
 100e1e0:	e0bffa17 	ldw	r2,-24(fp)
 100e1e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e1e8:	e0bff917 	ldw	r2,-28(fp)
 100e1ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100e1f0:	e0fff517 	ldw	r3,-44(fp)
 100e1f4:	e0bffd17 	ldw	r2,-12(fp)
 100e1f8:	18800426 	beq	r3,r2,100e20c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 100e1fc:	e0fff517 	ldw	r3,-44(fp)
 100e200:	e0bffd17 	ldw	r2,-12(fp)
 100e204:	1885c83a 	sub	r2,r3,r2
 100e208:	00000606 	br	100e224 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 100e20c:	e0bfff17 	ldw	r2,-4(fp)
 100e210:	1090000c 	andi	r2,r2,16384
 100e214:	10000226 	beq	r2,zero,100e220 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100e218:	00bffd44 	movi	r2,-11
 100e21c:	00000106 	br	100e224 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 100e220:	00bffec4 	movi	r2,-5
}
 100e224:	e037883a 	mov	sp,fp
 100e228:	dfc00117 	ldw	ra,4(sp)
 100e22c:	df000017 	ldw	fp,0(sp)
 100e230:	dec00204 	addi	sp,sp,8
 100e234:	f800283a 	ret

0100e238 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100e238:	defff304 	addi	sp,sp,-52
 100e23c:	dfc00c15 	stw	ra,48(sp)
 100e240:	df000b15 	stw	fp,44(sp)
 100e244:	df000b04 	addi	fp,sp,44
 100e248:	e13ffc15 	stw	r4,-16(fp)
 100e24c:	e17ffd15 	stw	r5,-12(fp)
 100e250:	e1bffe15 	stw	r6,-8(fp)
 100e254:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100e258:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100e25c:	e0bffd17 	ldw	r2,-12(fp)
 100e260:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100e264:	00003706 	br	100e344 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100e268:	e0bffc17 	ldw	r2,-16(fp)
 100e26c:	10800c17 	ldw	r2,48(r2)
 100e270:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 100e274:	e0bffc17 	ldw	r2,-16(fp)
 100e278:	10800d17 	ldw	r2,52(r2)
 100e27c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 100e280:	e0fff917 	ldw	r3,-28(fp)
 100e284:	e0bff517 	ldw	r2,-44(fp)
 100e288:	1880062e 	bgeu	r3,r2,100e2a4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100e28c:	e0fff517 	ldw	r3,-44(fp)
 100e290:	e0bff917 	ldw	r2,-28(fp)
 100e294:	1885c83a 	sub	r2,r3,r2
 100e298:	10bfffc4 	addi	r2,r2,-1
 100e29c:	e0bff615 	stw	r2,-40(fp)
 100e2a0:	00000b06 	br	100e2d0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 100e2a4:	e0bff517 	ldw	r2,-44(fp)
 100e2a8:	10000526 	beq	r2,zero,100e2c0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100e2ac:	00c20004 	movi	r3,2048
 100e2b0:	e0bff917 	ldw	r2,-28(fp)
 100e2b4:	1885c83a 	sub	r2,r3,r2
 100e2b8:	e0bff615 	stw	r2,-40(fp)
 100e2bc:	00000406 	br	100e2d0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100e2c0:	00c1ffc4 	movi	r3,2047
 100e2c4:	e0bff917 	ldw	r2,-28(fp)
 100e2c8:	1885c83a 	sub	r2,r3,r2
 100e2cc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 100e2d0:	e0bff617 	ldw	r2,-40(fp)
 100e2d4:	10001e26 	beq	r2,zero,100e350 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 100e2d8:	e0fffe17 	ldw	r3,-8(fp)
 100e2dc:	e0bff617 	ldw	r2,-40(fp)
 100e2e0:	1880022e 	bgeu	r3,r2,100e2ec <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 100e2e4:	e0bffe17 	ldw	r2,-8(fp)
 100e2e8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100e2ec:	e0bffc17 	ldw	r2,-16(fp)
 100e2f0:	10c20e04 	addi	r3,r2,2104
 100e2f4:	e0bff917 	ldw	r2,-28(fp)
 100e2f8:	1885883a 	add	r2,r3,r2
 100e2fc:	e1bff617 	ldw	r6,-40(fp)
 100e300:	e17ffd17 	ldw	r5,-12(fp)
 100e304:	1009883a 	mov	r4,r2
 100e308:	1005ffc0 	call	1005ffc <memcpy>
      ptr   += n;
 100e30c:	e0fffd17 	ldw	r3,-12(fp)
 100e310:	e0bff617 	ldw	r2,-40(fp)
 100e314:	1885883a 	add	r2,r3,r2
 100e318:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 100e31c:	e0fffe17 	ldw	r3,-8(fp)
 100e320:	e0bff617 	ldw	r2,-40(fp)
 100e324:	1885c83a 	sub	r2,r3,r2
 100e328:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100e32c:	e0fff917 	ldw	r3,-28(fp)
 100e330:	e0bff617 	ldw	r2,-40(fp)
 100e334:	1885883a 	add	r2,r3,r2
 100e338:	10c1ffcc 	andi	r3,r2,2047
 100e33c:	e0bffc17 	ldw	r2,-16(fp)
 100e340:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100e344:	e0bffe17 	ldw	r2,-8(fp)
 100e348:	00bfc716 	blt	zero,r2,100e268 <__alt_mem_TCDM+0xff00d268>
 100e34c:	00000106 	br	100e354 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 100e350:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e354:	0005303a 	rdctl	r2,status
 100e358:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e35c:	e0fffb17 	ldw	r3,-20(fp)
 100e360:	00bfff84 	movi	r2,-2
 100e364:	1884703a 	and	r2,r3,r2
 100e368:	1001703a 	wrctl	status,r2
  
  return context;
 100e36c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100e370:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100e374:	e0bffc17 	ldw	r2,-16(fp)
 100e378:	10800817 	ldw	r2,32(r2)
 100e37c:	10c00094 	ori	r3,r2,2
 100e380:	e0bffc17 	ldw	r2,-16(fp)
 100e384:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100e388:	e0bffc17 	ldw	r2,-16(fp)
 100e38c:	10800017 	ldw	r2,0(r2)
 100e390:	10800104 	addi	r2,r2,4
 100e394:	1007883a 	mov	r3,r2
 100e398:	e0bffc17 	ldw	r2,-16(fp)
 100e39c:	10800817 	ldw	r2,32(r2)
 100e3a0:	18800035 	stwio	r2,0(r3)
 100e3a4:	e0bffa17 	ldw	r2,-24(fp)
 100e3a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e3ac:	e0bff817 	ldw	r2,-32(fp)
 100e3b0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100e3b4:	e0bffe17 	ldw	r2,-8(fp)
 100e3b8:	0080100e 	bge	zero,r2,100e3fc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 100e3bc:	e0bfff17 	ldw	r2,-4(fp)
 100e3c0:	1090000c 	andi	r2,r2,16384
 100e3c4:	1000101e 	bne	r2,zero,100e408 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100e3c8:	0001883a 	nop
 100e3cc:	e0bffc17 	ldw	r2,-16(fp)
 100e3d0:	10c00d17 	ldw	r3,52(r2)
 100e3d4:	e0bff517 	ldw	r2,-44(fp)
 100e3d8:	1880051e 	bne	r3,r2,100e3f0 <altera_avalon_jtag_uart_write+0x1b8>
 100e3dc:	e0bffc17 	ldw	r2,-16(fp)
 100e3e0:	10c00917 	ldw	r3,36(r2)
 100e3e4:	e0bffc17 	ldw	r2,-16(fp)
 100e3e8:	10800117 	ldw	r2,4(r2)
 100e3ec:	18bff736 	bltu	r3,r2,100e3cc <__alt_mem_TCDM+0xff00d3cc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 100e3f0:	e0bffc17 	ldw	r2,-16(fp)
 100e3f4:	10800917 	ldw	r2,36(r2)
 100e3f8:	1000051e 	bne	r2,zero,100e410 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 100e3fc:	e0bffe17 	ldw	r2,-8(fp)
 100e400:	00bfd016 	blt	zero,r2,100e344 <__alt_mem_TCDM+0xff00d344>
 100e404:	00000306 	br	100e414 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 100e408:	0001883a 	nop
 100e40c:	00000106 	br	100e414 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 100e410:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100e414:	e0fffd17 	ldw	r3,-12(fp)
 100e418:	e0bff717 	ldw	r2,-36(fp)
 100e41c:	18800426 	beq	r3,r2,100e430 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 100e420:	e0fffd17 	ldw	r3,-12(fp)
 100e424:	e0bff717 	ldw	r2,-36(fp)
 100e428:	1885c83a 	sub	r2,r3,r2
 100e42c:	00000606 	br	100e448 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 100e430:	e0bfff17 	ldw	r2,-4(fp)
 100e434:	1090000c 	andi	r2,r2,16384
 100e438:	10000226 	beq	r2,zero,100e444 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 100e43c:	00bffd44 	movi	r2,-11
 100e440:	00000106 	br	100e448 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 100e444:	00bffec4 	movi	r2,-5
}
 100e448:	e037883a 	mov	sp,fp
 100e44c:	dfc00117 	ldw	ra,4(sp)
 100e450:	df000017 	ldw	fp,0(sp)
 100e454:	dec00204 	addi	sp,sp,8
 100e458:	f800283a 	ret

0100e45c <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
 100e45c:	defff904 	addi	sp,sp,-28
 100e460:	df000615 	stw	fp,24(sp)
 100e464:	df000604 	addi	fp,sp,24
 100e468:	e13ffe15 	stw	r4,-8(fp)
 100e46c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
 100e470:	e03ffa15 	stw	zero,-24(fp)
 100e474:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
 100e478:	000b883a 	mov	r5,zero
 100e47c:	e13ffe17 	ldw	r4,-8(fp)
 100e480:	21400035 	stwio	r5,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
 100e484:	e13fff17 	ldw	r4,-4(fp)
 100e488:	2008913a 	slli	r4,r4,4
 100e48c:	200b883a 	mov	r5,r4
 100e490:	e13ffe17 	ldw	r4,-8(fp)
 100e494:	2149883a 	add	r4,r4,r5
 100e498:	21000037 	ldwio	r4,0(r4)
 100e49c:	e13ffc15 	stw	r4,-16(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
 100e4a0:	e13fff17 	ldw	r4,-4(fp)
 100e4a4:	2008913a 	slli	r4,r4,4
 100e4a8:	21000104 	addi	r4,r4,4
 100e4ac:	200b883a 	mov	r5,r4
 100e4b0:	e13ffe17 	ldw	r4,-8(fp)
 100e4b4:	2149883a 	add	r4,r4,r5
 100e4b8:	21000037 	ldwio	r4,0(r4)
 100e4bc:	e13ffd15 	stw	r4,-12(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
 100e4c0:	e13ffd17 	ldw	r4,-12(fp)
 100e4c4:	2011883a 	mov	r8,r4
 100e4c8:	0013883a 	mov	r9,zero
 100e4cc:	4006983a 	sll	r3,r8,zero
 100e4d0:	0005883a 	mov	r2,zero
           ((alt_u64)(((alt_u64) lo)                 ))  ;
 100e4d4:	e13ffc17 	ldw	r4,-16(fp)
 100e4d8:	200d883a 	mov	r6,r4
 100e4dc:	000f883a 	mov	r7,zero

  PERF_STOP_MEASURING(hw_base_address);
  lo = IORD(hw_base_address, ( which_section*4   ));
  hi = IORD(hw_base_address, ((which_section*4)+1));

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
 100e4e0:	1188b03a 	or	r4,r2,r6
 100e4e4:	e13ffa15 	stw	r4,-24(fp)
 100e4e8:	19c4b03a 	or	r2,r3,r7
 100e4ec:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
 100e4f0:	e0bffa17 	ldw	r2,-24(fp)
 100e4f4:	e0fffb17 	ldw	r3,-20(fp)
 100e4f8:	1009883a 	mov	r4,r2
 100e4fc:	180b883a 	mov	r5,r3
}
 100e500:	2005883a 	mov	r2,r4
 100e504:	2807883a 	mov	r3,r5
 100e508:	e037883a 	mov	sp,fp
 100e50c:	df000017 	ldw	fp,0(sp)
 100e510:	dec00104 	addi	sp,sp,4
 100e514:	f800283a 	ret

0100e518 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
 100e518:	defffd04 	addi	sp,sp,-12
 100e51c:	dfc00215 	stw	ra,8(sp)
 100e520:	df000115 	stw	fp,4(sp)
 100e524:	df000104 	addi	fp,sp,4
 100e528:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
 100e52c:	000b883a 	mov	r5,zero
 100e530:	e13fff17 	ldw	r4,-4(fp)
 100e534:	100e45c0 	call	100e45c <perf_get_section_time>
 100e538:	100b883a 	mov	r5,r2
 100e53c:	180d883a 	mov	r6,r3
 100e540:	2807883a 	mov	r3,r5
 100e544:	3009883a 	mov	r4,r6
}
 100e548:	1805883a 	mov	r2,r3
 100e54c:	2007883a 	mov	r3,r4
 100e550:	e037883a 	mov	sp,fp
 100e554:	dfc00117 	ldw	ra,4(sp)
 100e558:	df000017 	ldw	fp,0(sp)
 100e55c:	dec00204 	addi	sp,sp,8
 100e560:	f800283a 	ret

0100e564 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
 100e564:	defffd04 	addi	sp,sp,-12
 100e568:	df000215 	stw	fp,8(sp)
 100e56c:	df000204 	addi	fp,sp,8
 100e570:	e13ffe15 	stw	r4,-8(fp)
 100e574:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
 100e578:	e0bfff17 	ldw	r2,-4(fp)
 100e57c:	1004913a 	slli	r2,r2,4
 100e580:	10800204 	addi	r2,r2,8
 100e584:	1007883a 	mov	r3,r2
 100e588:	e0bffe17 	ldw	r2,-8(fp)
 100e58c:	10c5883a 	add	r2,r2,r3
 100e590:	10800037 	ldwio	r2,0(r2)
}
 100e594:	e037883a 	mov	sp,fp
 100e598:	df000017 	ldw	fp,0(sp)
 100e59c:	dec00104 	addi	sp,sp,4
 100e5a0:	f800283a 	ret

0100e5a4 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
 100e5a4:	deffff04 	addi	sp,sp,-4
 100e5a8:	df000015 	stw	fp,0(sp)
 100e5ac:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
 100e5b0:	00808034 	movhi	r2,512
 100e5b4:	108c0004 	addi	r2,r2,12288
#else
    return (void*)0;
#endif
}
 100e5b8:	e037883a 	mov	sp,fp
 100e5bc:	df000017 	ldw	fp,0(sp)
 100e5c0:	dec00104 	addi	sp,sp,4
 100e5c4:	f800283a 	ret

0100e5c8 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
 100e5c8:	deffff04 	addi	sp,sp,-4
 100e5cc:	df000015 	stw	fp,0(sp)
 100e5d0:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
 100e5d4:	0080bef4 	movhi	r2,763
 100e5d8:	10bc2004 	addi	r2,r2,-3968
}
 100e5dc:	e037883a 	mov	sp,fp
 100e5e0:	df000017 	ldw	fp,0(sp)
 100e5e4:	dec00104 	addi	sp,sp,4
 100e5e8:	f800283a 	ret

0100e5ec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 100e5ec:	defffa04 	addi	sp,sp,-24
 100e5f0:	dfc00515 	stw	ra,20(sp)
 100e5f4:	df000415 	stw	fp,16(sp)
 100e5f8:	df000404 	addi	fp,sp,16
 100e5fc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 100e600:	0007883a 	mov	r3,zero
 100e604:	e0bfff17 	ldw	r2,-4(fp)
 100e608:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 100e60c:	e0bfff17 	ldw	r2,-4(fp)
 100e610:	10800104 	addi	r2,r2,4
 100e614:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e618:	0005303a 	rdctl	r2,status
 100e61c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e620:	e0fffd17 	ldw	r3,-12(fp)
 100e624:	00bfff84 	movi	r2,-2
 100e628:	1884703a 	and	r2,r3,r2
 100e62c:	1001703a 	wrctl	status,r2
  
  return context;
 100e630:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 100e634:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 100e638:	100f3780 	call	100f378 <alt_tick>
 100e63c:	e0bffc17 	ldw	r2,-16(fp)
 100e640:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e644:	e0bffe17 	ldw	r2,-8(fp)
 100e648:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 100e64c:	0001883a 	nop
 100e650:	e037883a 	mov	sp,fp
 100e654:	dfc00117 	ldw	ra,4(sp)
 100e658:	df000017 	ldw	fp,0(sp)
 100e65c:	dec00204 	addi	sp,sp,8
 100e660:	f800283a 	ret

0100e664 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 100e664:	defff804 	addi	sp,sp,-32
 100e668:	dfc00715 	stw	ra,28(sp)
 100e66c:	df000615 	stw	fp,24(sp)
 100e670:	df000604 	addi	fp,sp,24
 100e674:	e13ffc15 	stw	r4,-16(fp)
 100e678:	e17ffd15 	stw	r5,-12(fp)
 100e67c:	e1bffe15 	stw	r6,-8(fp)
 100e680:	e1ffff15 	stw	r7,-4(fp)
 100e684:	e0bfff17 	ldw	r2,-4(fp)
 100e688:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 100e68c:	d0a6d617 	ldw	r2,-25768(gp)
 100e690:	1000021e 	bne	r2,zero,100e69c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 100e694:	e0bffb17 	ldw	r2,-20(fp)
 100e698:	d0a6d615 	stw	r2,-25768(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 100e69c:	e0bffc17 	ldw	r2,-16(fp)
 100e6a0:	10800104 	addi	r2,r2,4
 100e6a4:	00c001c4 	movi	r3,7
 100e6a8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 100e6ac:	d8000015 	stw	zero,0(sp)
 100e6b0:	e1fffc17 	ldw	r7,-16(fp)
 100e6b4:	01804074 	movhi	r6,257
 100e6b8:	31b97b04 	addi	r6,r6,-6676
 100e6bc:	e17ffe17 	ldw	r5,-8(fp)
 100e6c0:	e13ffd17 	ldw	r4,-12(fp)
 100e6c4:	100eca80 	call	100eca8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 100e6c8:	0001883a 	nop
 100e6cc:	e037883a 	mov	sp,fp
 100e6d0:	dfc00117 	ldw	ra,4(sp)
 100e6d4:	df000017 	ldw	fp,0(sp)
 100e6d8:	dec00204 	addi	sp,sp,8
 100e6dc:	f800283a 	ret

0100e6e0 <perf_print_formatted_report>:

#ifndef SMALL_C_LIB 
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
 100e6e0:	deffe504 	addi	sp,sp,-108
 100e6e4:	dfc01915 	stw	ra,100(sp)
 100e6e8:	df001815 	stw	fp,96(sp)
 100e6ec:	dcc01715 	stw	r19,92(sp)
 100e6f0:	dc801615 	stw	r18,88(sp)
 100e6f4:	dc401515 	stw	r17,84(sp)
 100e6f8:	dc001415 	stw	r16,80(sp)
 100e6fc:	df001804 	addi	fp,sp,96
 100e700:	e13ff915 	stw	r4,-28(fp)
 100e704:	e17ffa15 	stw	r5,-24(fp)
 100e708:	e1bffb15 	stw	r6,-20(fp)
 100e70c:	e1c00215 	stw	r7,8(fp)
  va_list name_args;
  double total_sec;
  alt_u64 total_clocks;
  alt_u64 section_clocks;
  char* section_name;
  int section_num = 1;
 100e710:	00800044 	movi	r2,1
 100e714:	e0bfef15 	stw	r2,-68(fp)

  const char* separator = 
 100e718:	00804074 	movhi	r2,257
 100e71c:	10801204 	addi	r2,r2,72
 100e720:	e0bff015 	stw	r2,-64(fp)
    "+---------------+-----+-----------+---------------+-----------+\n";
  const char* column_header = 
 100e724:	00804074 	movhi	r2,257
 100e728:	10802304 	addi	r2,r2,140
 100e72c:	e0bff115 	stw	r2,-60(fp)
    "| Section       |  %  | Time (sec)|  Time (clocks)|Occurrences|\n";

  PERF_STOP_MEASURING (perf_base);
 100e730:	0007883a 	mov	r3,zero
 100e734:	e0bff917 	ldw	r2,-28(fp)
 100e738:	10c00035 	stwio	r3,0(r2)

  va_start (name_args, num_sections);
 100e73c:	e0800204 	addi	r2,fp,8
 100e740:	e0bff815 	stw	r2,-32(fp)

  total_clocks = perf_get_total_time (perf_base);
 100e744:	e13ff917 	ldw	r4,-28(fp)
 100e748:	100e5180 	call	100e518 <perf_get_total_time>
 100e74c:	e0bff215 	stw	r2,-56(fp)
 100e750:	e0fff315 	stw	r3,-52(fp)
  total_sec    = ((double)total_clocks) / clock_freq_hertz;
 100e754:	e13ff217 	ldw	r4,-56(fp)
 100e758:	e17ff317 	ldw	r5,-52(fp)
 100e75c:	100fb6c0 	call	100fb6c <__floatundidf>
 100e760:	1021883a 	mov	r16,r2
 100e764:	1823883a 	mov	r17,r3
 100e768:	e13ffa17 	ldw	r4,-24(fp)
 100e76c:	100cd440 	call	100cd44 <__floatunsidf>
 100e770:	1009883a 	mov	r4,r2
 100e774:	180b883a 	mov	r5,r3
 100e778:	200d883a 	mov	r6,r4
 100e77c:	280f883a 	mov	r7,r5
 100e780:	8009883a 	mov	r4,r16
 100e784:	880b883a 	mov	r5,r17
 100e788:	100b0940 	call	100b094 <__divdf3>
 100e78c:	1009883a 	mov	r4,r2
 100e790:	180b883a 	mov	r5,r3
 100e794:	e13ff415 	stw	r4,-48(fp)
 100e798:	e17ff515 	stw	r5,-44(fp)

  // Print the total at the top:
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
 100e79c:	e0bff017 	ldw	r2,-64(fp)
 100e7a0:	d8800315 	stw	r2,12(sp)
 100e7a4:	e0bff117 	ldw	r2,-60(fp)
 100e7a8:	d8800215 	stw	r2,8(sp)
 100e7ac:	e0bff017 	ldw	r2,-64(fp)
 100e7b0:	d8800115 	stw	r2,4(sp)
 100e7b4:	e0bff317 	ldw	r2,-52(fp)
 100e7b8:	d8800015 	stw	r2,0(sp)
 100e7bc:	e1fff217 	ldw	r7,-56(fp)
 100e7c0:	e17ff417 	ldw	r5,-48(fp)
 100e7c4:	e1bff517 	ldw	r6,-44(fp)
 100e7c8:	01004074 	movhi	r4,257
 100e7cc:	21003404 	addi	r4,r4,208
 100e7d0:	10005600 	call	1000560 <printf>
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);
 100e7d4:	e0bff817 	ldw	r2,-32(fp)
 100e7d8:	10c00104 	addi	r3,r2,4
 100e7dc:	e0fff815 	stw	r3,-32(fp)
 100e7e0:	10800017 	ldw	r2,0(r2)
 100e7e4:	e0bfee15 	stw	r2,-72(fp)

  for (section_num = 1; section_num <= num_sections; section_num++)
 100e7e8:	00800044 	movi	r2,1
 100e7ec:	e0bfef15 	stw	r2,-68(fp)
 100e7f0:	00004e06 	br	100e92c <perf_print_formatted_report+0x24c>
    {
      section_clocks = perf_get_section_time (perf_base, section_num);
 100e7f4:	e17fef17 	ldw	r5,-68(fp)
 100e7f8:	e13ff917 	ldw	r4,-28(fp)
 100e7fc:	100e45c0 	call	100e45c <perf_get_section_time>
 100e800:	e0bff615 	stw	r2,-40(fp)
 100e804:	e0fff715 	stw	r3,-36(fp)

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
 100e808:	e13ff617 	ldw	r4,-40(fp)
 100e80c:	e17ff717 	ldw	r5,-36(fp)
 100e810:	100fb6c0 	call	100fb6c <__floatundidf>
 100e814:	1011883a 	mov	r8,r2
 100e818:	1813883a 	mov	r9,r3
 100e81c:	000d883a 	mov	r6,zero
 100e820:	01d01674 	movhi	r7,16473
 100e824:	4009883a 	mov	r4,r8
 100e828:	480b883a 	mov	r5,r9
 100e82c:	100bbd40 	call	100bbd4 <__muldf3>
 100e830:	1009883a 	mov	r4,r2
 100e834:	180b883a 	mov	r5,r3
 100e838:	2021883a 	mov	r16,r4
 100e83c:	2823883a 	mov	r17,r5

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
 100e840:	e13ff217 	ldw	r4,-56(fp)
 100e844:	e17ff317 	ldw	r5,-52(fp)
 100e848:	100fb6c0 	call	100fb6c <__floatundidf>
 100e84c:	1009883a 	mov	r4,r2
 100e850:	180b883a 	mov	r5,r3
 100e854:	200d883a 	mov	r6,r4
 100e858:	280f883a 	mov	r7,r5
 100e85c:	8009883a 	mov	r4,r16
 100e860:	880b883a 	mov	r5,r17
 100e864:	100b0940 	call	100b094 <__divdf3>
 100e868:	1009883a 	mov	r4,r2
 100e86c:	180b883a 	mov	r5,r3
 100e870:	2025883a 	mov	r18,r4
 100e874:	2827883a 	mov	r19,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
 100e878:	e13ff617 	ldw	r4,-40(fp)
 100e87c:	e17ff717 	ldw	r5,-36(fp)
 100e880:	100fb6c0 	call	100fb6c <__floatundidf>
 100e884:	1021883a 	mov	r16,r2
 100e888:	1823883a 	mov	r17,r3

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
 100e88c:	e13ffa17 	ldw	r4,-24(fp)
 100e890:	100cd440 	call	100cd44 <__floatunsidf>
 100e894:	1009883a 	mov	r4,r2
 100e898:	180b883a 	mov	r5,r3
 100e89c:	200d883a 	mov	r6,r4
 100e8a0:	280f883a 	mov	r7,r5
 100e8a4:	8009883a 	mov	r4,r16
 100e8a8:	880b883a 	mov	r5,r17
 100e8ac:	100b0940 	call	100b094 <__divdf3>
 100e8b0:	1009883a 	mov	r4,r2
 100e8b4:	180b883a 	mov	r5,r3
 100e8b8:	2021883a 	mov	r16,r4
 100e8bc:	2823883a 	mov	r17,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
 100e8c0:	e17fef17 	ldw	r5,-68(fp)
 100e8c4:	e13ff917 	ldw	r4,-28(fp)
 100e8c8:	100e5640 	call	100e564 <perf_get_num_starts>
 100e8cc:	1007883a 	mov	r3,r2

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
 100e8d0:	e0bff017 	ldw	r2,-64(fp)
 100e8d4:	d8800515 	stw	r2,20(sp)
 100e8d8:	d8c00415 	stw	r3,16(sp)
 100e8dc:	e0bff617 	ldw	r2,-40(fp)
 100e8e0:	d8800215 	stw	r2,8(sp)
 100e8e4:	e0bff717 	ldw	r2,-36(fp)
 100e8e8:	d8800315 	stw	r2,12(sp)
 100e8ec:	dc000015 	stw	r16,0(sp)
 100e8f0:	dc400115 	stw	r17,4(sp)
 100e8f4:	900d883a 	mov	r6,r18
 100e8f8:	980f883a 	mov	r7,r19
 100e8fc:	e17fee17 	ldw	r5,-72(fp)
 100e900:	01004074 	movhi	r4,257
 100e904:	21004904 	addi	r4,r4,292
 100e908:	10005600 	call	1000560 <printf>
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
              separator
              );

      section_name = va_arg(name_args, char*);
 100e90c:	e0bff817 	ldw	r2,-32(fp)
 100e910:	10c00104 	addi	r3,r2,4
 100e914:	e0fff815 	stw	r3,-32(fp)
 100e918:	10800017 	ldw	r2,0(r2)
 100e91c:	e0bfee15 	stw	r2,-72(fp)
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);

  for (section_num = 1; section_num <= num_sections; section_num++)
 100e920:	e0bfef17 	ldw	r2,-68(fp)
 100e924:	10800044 	addi	r2,r2,1
 100e928:	e0bfef15 	stw	r2,-68(fp)
 100e92c:	e0bfef17 	ldw	r2,-68(fp)
 100e930:	e0fffb17 	ldw	r3,-20(fp)
 100e934:	18bfaf0e 	bge	r3,r2,100e7f4 <__alt_mem_TCDM+0xff00d7f4>
      section_name = va_arg(name_args, char*);
    }

  va_end (name_args);

  return 0;
 100e938:	0005883a 	mov	r2,zero
}
 100e93c:	e6fffc04 	addi	sp,fp,-16
 100e940:	dfc00517 	ldw	ra,20(sp)
 100e944:	df000417 	ldw	fp,16(sp)
 100e948:	dcc00317 	ldw	r19,12(sp)
 100e94c:	dc800217 	ldw	r18,8(sp)
 100e950:	dc400117 	ldw	r17,4(sp)
 100e954:	dc000017 	ldw	r16,0(sp)
 100e958:	dec00704 	addi	sp,sp,28
 100e95c:	f800283a 	ret

0100e960 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100e960:	defff504 	addi	sp,sp,-44
 100e964:	df000a15 	stw	fp,40(sp)
 100e968:	df000a04 	addi	fp,sp,40
 100e96c:	e13ffc15 	stw	r4,-16(fp)
 100e970:	e17ffd15 	stw	r5,-12(fp)
 100e974:	e1bffe15 	stw	r6,-8(fp)
 100e978:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100e97c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100e980:	d0a6d617 	ldw	r2,-25768(gp)
  
  if (alt_ticks_per_second ())
 100e984:	10003c26 	beq	r2,zero,100ea78 <alt_alarm_start+0x118>
  {
    if (alarm)
 100e988:	e0bffc17 	ldw	r2,-16(fp)
 100e98c:	10003826 	beq	r2,zero,100ea70 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 100e990:	e0bffc17 	ldw	r2,-16(fp)
 100e994:	e0fffe17 	ldw	r3,-8(fp)
 100e998:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 100e99c:	e0bffc17 	ldw	r2,-16(fp)
 100e9a0:	e0ffff17 	ldw	r3,-4(fp)
 100e9a4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e9a8:	0005303a 	rdctl	r2,status
 100e9ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e9b0:	e0fff917 	ldw	r3,-28(fp)
 100e9b4:	00bfff84 	movi	r2,-2
 100e9b8:	1884703a 	and	r2,r3,r2
 100e9bc:	1001703a 	wrctl	status,r2
  
  return context;
 100e9c0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 100e9c4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 100e9c8:	d0a6d717 	ldw	r2,-25764(gp)
      
      current_nticks = alt_nticks();
 100e9cc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 100e9d0:	e0fffd17 	ldw	r3,-12(fp)
 100e9d4:	e0bff617 	ldw	r2,-40(fp)
 100e9d8:	1885883a 	add	r2,r3,r2
 100e9dc:	10c00044 	addi	r3,r2,1
 100e9e0:	e0bffc17 	ldw	r2,-16(fp)
 100e9e4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100e9e8:	e0bffc17 	ldw	r2,-16(fp)
 100e9ec:	10c00217 	ldw	r3,8(r2)
 100e9f0:	e0bff617 	ldw	r2,-40(fp)
 100e9f4:	1880042e 	bgeu	r3,r2,100ea08 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 100e9f8:	e0bffc17 	ldw	r2,-16(fp)
 100e9fc:	00c00044 	movi	r3,1
 100ea00:	10c00405 	stb	r3,16(r2)
 100ea04:	00000206 	br	100ea10 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 100ea08:	e0bffc17 	ldw	r2,-16(fp)
 100ea0c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 100ea10:	e0bffc17 	ldw	r2,-16(fp)
 100ea14:	d0e00e04 	addi	r3,gp,-32712
 100ea18:	e0fffa15 	stw	r3,-24(fp)
 100ea1c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100ea20:	e0bffb17 	ldw	r2,-20(fp)
 100ea24:	e0fffa17 	ldw	r3,-24(fp)
 100ea28:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 100ea2c:	e0bffa17 	ldw	r2,-24(fp)
 100ea30:	10c00017 	ldw	r3,0(r2)
 100ea34:	e0bffb17 	ldw	r2,-20(fp)
 100ea38:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100ea3c:	e0bffa17 	ldw	r2,-24(fp)
 100ea40:	10800017 	ldw	r2,0(r2)
 100ea44:	e0fffb17 	ldw	r3,-20(fp)
 100ea48:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 100ea4c:	e0bffa17 	ldw	r2,-24(fp)
 100ea50:	e0fffb17 	ldw	r3,-20(fp)
 100ea54:	10c00015 	stw	r3,0(r2)
 100ea58:	e0bff817 	ldw	r2,-32(fp)
 100ea5c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ea60:	e0bff717 	ldw	r2,-36(fp)
 100ea64:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100ea68:	0005883a 	mov	r2,zero
 100ea6c:	00000306 	br	100ea7c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 100ea70:	00bffa84 	movi	r2,-22
 100ea74:	00000106 	br	100ea7c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 100ea78:	00bfde84 	movi	r2,-134
  }
}
 100ea7c:	e037883a 	mov	sp,fp
 100ea80:	df000017 	ldw	fp,0(sp)
 100ea84:	dec00104 	addi	sp,sp,4
 100ea88:	f800283a 	ret

0100ea8c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 100ea8c:	defffe04 	addi	sp,sp,-8
 100ea90:	df000115 	stw	fp,4(sp)
 100ea94:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100ea98:	e03fff15 	stw	zero,-4(fp)
 100ea9c:	00000506 	br	100eab4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 100eaa0:	e0bfff17 	ldw	r2,-4(fp)
 100eaa4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100eaa8:	e0bfff17 	ldw	r2,-4(fp)
 100eaac:	10800804 	addi	r2,r2,32
 100eab0:	e0bfff15 	stw	r2,-4(fp)
 100eab4:	e0bfff17 	ldw	r2,-4(fp)
 100eab8:	10820030 	cmpltui	r2,r2,2048
 100eabc:	103ff81e 	bne	r2,zero,100eaa0 <__alt_mem_TCDM+0xff00daa0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 100eac0:	0001883a 	nop
 100eac4:	e037883a 	mov	sp,fp
 100eac8:	df000017 	ldw	fp,0(sp)
 100eacc:	dec00104 	addi	sp,sp,4
 100ead0:	f800283a 	ret

0100ead4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100ead4:	defffe04 	addi	sp,sp,-8
 100ead8:	dfc00115 	stw	ra,4(sp)
 100eadc:	df000015 	stw	fp,0(sp)
 100eae0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100eae4:	d0a00b17 	ldw	r2,-32724(gp)
 100eae8:	10000326 	beq	r2,zero,100eaf8 <alt_get_errno+0x24>
 100eaec:	d0a00b17 	ldw	r2,-32724(gp)
 100eaf0:	103ee83a 	callr	r2
 100eaf4:	00000106 	br	100eafc <alt_get_errno+0x28>
 100eaf8:	d0a6d104 	addi	r2,gp,-25788
}
 100eafc:	e037883a 	mov	sp,fp
 100eb00:	dfc00117 	ldw	ra,4(sp)
 100eb04:	df000017 	ldw	fp,0(sp)
 100eb08:	dec00204 	addi	sp,sp,8
 100eb0c:	f800283a 	ret

0100eb10 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 100eb10:	defffa04 	addi	sp,sp,-24
 100eb14:	dfc00515 	stw	ra,20(sp)
 100eb18:	df000415 	stw	fp,16(sp)
 100eb1c:	df000404 	addi	fp,sp,16
 100eb20:	e13ffe15 	stw	r4,-8(fp)
 100eb24:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 100eb28:	e0bffe17 	ldw	r2,-8(fp)
 100eb2c:	10000326 	beq	r2,zero,100eb3c <alt_dev_llist_insert+0x2c>
 100eb30:	e0bffe17 	ldw	r2,-8(fp)
 100eb34:	10800217 	ldw	r2,8(r2)
 100eb38:	1000061e 	bne	r2,zero,100eb54 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 100eb3c:	100ead40 	call	100ead4 <alt_get_errno>
 100eb40:	1007883a 	mov	r3,r2
 100eb44:	00800584 	movi	r2,22
 100eb48:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 100eb4c:	00bffa84 	movi	r2,-22
 100eb50:	00001306 	br	100eba0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 100eb54:	e0bffe17 	ldw	r2,-8(fp)
 100eb58:	e0ffff17 	ldw	r3,-4(fp)
 100eb5c:	e0fffc15 	stw	r3,-16(fp)
 100eb60:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100eb64:	e0bffd17 	ldw	r2,-12(fp)
 100eb68:	e0fffc17 	ldw	r3,-16(fp)
 100eb6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 100eb70:	e0bffc17 	ldw	r2,-16(fp)
 100eb74:	10c00017 	ldw	r3,0(r2)
 100eb78:	e0bffd17 	ldw	r2,-12(fp)
 100eb7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100eb80:	e0bffc17 	ldw	r2,-16(fp)
 100eb84:	10800017 	ldw	r2,0(r2)
 100eb88:	e0fffd17 	ldw	r3,-12(fp)
 100eb8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 100eb90:	e0bffc17 	ldw	r2,-16(fp)
 100eb94:	e0fffd17 	ldw	r3,-12(fp)
 100eb98:	10c00015 	stw	r3,0(r2)

  return 0;  
 100eb9c:	0005883a 	mov	r2,zero
}
 100eba0:	e037883a 	mov	sp,fp
 100eba4:	dfc00117 	ldw	ra,4(sp)
 100eba8:	df000017 	ldw	fp,0(sp)
 100ebac:	dec00204 	addi	sp,sp,8
 100ebb0:	f800283a 	ret

0100ebb4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 100ebb4:	defffd04 	addi	sp,sp,-12
 100ebb8:	dfc00215 	stw	ra,8(sp)
 100ebbc:	df000115 	stw	fp,4(sp)
 100ebc0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100ebc4:	00804074 	movhi	r2,257
 100ebc8:	10bf0304 	addi	r2,r2,-1012
 100ebcc:	e0bfff15 	stw	r2,-4(fp)
 100ebd0:	00000606 	br	100ebec <_do_ctors+0x38>
        (*ctor) (); 
 100ebd4:	e0bfff17 	ldw	r2,-4(fp)
 100ebd8:	10800017 	ldw	r2,0(r2)
 100ebdc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100ebe0:	e0bfff17 	ldw	r2,-4(fp)
 100ebe4:	10bfff04 	addi	r2,r2,-4
 100ebe8:	e0bfff15 	stw	r2,-4(fp)
 100ebec:	e0ffff17 	ldw	r3,-4(fp)
 100ebf0:	00804074 	movhi	r2,257
 100ebf4:	10bf0404 	addi	r2,r2,-1008
 100ebf8:	18bff62e 	bgeu	r3,r2,100ebd4 <__alt_mem_TCDM+0xff00dbd4>
        (*ctor) (); 
}
 100ebfc:	0001883a 	nop
 100ec00:	e037883a 	mov	sp,fp
 100ec04:	dfc00117 	ldw	ra,4(sp)
 100ec08:	df000017 	ldw	fp,0(sp)
 100ec0c:	dec00204 	addi	sp,sp,8
 100ec10:	f800283a 	ret

0100ec14 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 100ec14:	defffd04 	addi	sp,sp,-12
 100ec18:	dfc00215 	stw	ra,8(sp)
 100ec1c:	df000115 	stw	fp,4(sp)
 100ec20:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100ec24:	00804074 	movhi	r2,257
 100ec28:	10bf0304 	addi	r2,r2,-1012
 100ec2c:	e0bfff15 	stw	r2,-4(fp)
 100ec30:	00000606 	br	100ec4c <_do_dtors+0x38>
        (*dtor) (); 
 100ec34:	e0bfff17 	ldw	r2,-4(fp)
 100ec38:	10800017 	ldw	r2,0(r2)
 100ec3c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100ec40:	e0bfff17 	ldw	r2,-4(fp)
 100ec44:	10bfff04 	addi	r2,r2,-4
 100ec48:	e0bfff15 	stw	r2,-4(fp)
 100ec4c:	e0ffff17 	ldw	r3,-4(fp)
 100ec50:	00804074 	movhi	r2,257
 100ec54:	10bf0404 	addi	r2,r2,-1008
 100ec58:	18bff62e 	bgeu	r3,r2,100ec34 <__alt_mem_TCDM+0xff00dc34>
        (*dtor) (); 
}
 100ec5c:	0001883a 	nop
 100ec60:	e037883a 	mov	sp,fp
 100ec64:	dfc00117 	ldw	ra,4(sp)
 100ec68:	df000017 	ldw	fp,0(sp)
 100ec6c:	dec00204 	addi	sp,sp,8
 100ec70:	f800283a 	ret

0100ec74 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 100ec74:	defffe04 	addi	sp,sp,-8
 100ec78:	dfc00115 	stw	ra,4(sp)
 100ec7c:	df000015 	stw	fp,0(sp)
 100ec80:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 100ec84:	01440004 	movi	r5,4096
 100ec88:	0009883a 	mov	r4,zero
 100ec8c:	100f6e00 	call	100f6e0 <alt_icache_flush>
#endif
}
 100ec90:	0001883a 	nop
 100ec94:	e037883a 	mov	sp,fp
 100ec98:	dfc00117 	ldw	ra,4(sp)
 100ec9c:	df000017 	ldw	fp,0(sp)
 100eca0:	dec00204 	addi	sp,sp,8
 100eca4:	f800283a 	ret

0100eca8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100eca8:	defff904 	addi	sp,sp,-28
 100ecac:	dfc00615 	stw	ra,24(sp)
 100ecb0:	df000515 	stw	fp,20(sp)
 100ecb4:	df000504 	addi	fp,sp,20
 100ecb8:	e13ffc15 	stw	r4,-16(fp)
 100ecbc:	e17ffd15 	stw	r5,-12(fp)
 100ecc0:	e1bffe15 	stw	r6,-8(fp)
 100ecc4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 100ecc8:	e0800217 	ldw	r2,8(fp)
 100eccc:	d8800015 	stw	r2,0(sp)
 100ecd0:	e1ffff17 	ldw	r7,-4(fp)
 100ecd4:	e1bffe17 	ldw	r6,-8(fp)
 100ecd8:	e17ffd17 	ldw	r5,-12(fp)
 100ecdc:	e13ffc17 	ldw	r4,-16(fp)
 100ece0:	100ee580 	call	100ee58 <alt_iic_isr_register>
}  
 100ece4:	e037883a 	mov	sp,fp
 100ece8:	dfc00117 	ldw	ra,4(sp)
 100ecec:	df000017 	ldw	fp,0(sp)
 100ecf0:	dec00204 	addi	sp,sp,8
 100ecf4:	f800283a 	ret

0100ecf8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 100ecf8:	defff904 	addi	sp,sp,-28
 100ecfc:	df000615 	stw	fp,24(sp)
 100ed00:	df000604 	addi	fp,sp,24
 100ed04:	e13ffe15 	stw	r4,-8(fp)
 100ed08:	e17fff15 	stw	r5,-4(fp)
 100ed0c:	e0bfff17 	ldw	r2,-4(fp)
 100ed10:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ed14:	0005303a 	rdctl	r2,status
 100ed18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ed1c:	e0fffb17 	ldw	r3,-20(fp)
 100ed20:	00bfff84 	movi	r2,-2
 100ed24:	1884703a 	and	r2,r3,r2
 100ed28:	1001703a 	wrctl	status,r2
  
  return context;
 100ed2c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100ed30:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 100ed34:	00c00044 	movi	r3,1
 100ed38:	e0bffa17 	ldw	r2,-24(fp)
 100ed3c:	1884983a 	sll	r2,r3,r2
 100ed40:	1007883a 	mov	r3,r2
 100ed44:	d0a6d217 	ldw	r2,-25784(gp)
 100ed48:	1884b03a 	or	r2,r3,r2
 100ed4c:	d0a6d215 	stw	r2,-25784(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100ed50:	d0a6d217 	ldw	r2,-25784(gp)
 100ed54:	100170fa 	wrctl	ienable,r2
 100ed58:	e0bffc17 	ldw	r2,-16(fp)
 100ed5c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ed60:	e0bffd17 	ldw	r2,-12(fp)
 100ed64:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100ed68:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 100ed6c:	0001883a 	nop
}
 100ed70:	e037883a 	mov	sp,fp
 100ed74:	df000017 	ldw	fp,0(sp)
 100ed78:	dec00104 	addi	sp,sp,4
 100ed7c:	f800283a 	ret

0100ed80 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 100ed80:	defff904 	addi	sp,sp,-28
 100ed84:	df000615 	stw	fp,24(sp)
 100ed88:	df000604 	addi	fp,sp,24
 100ed8c:	e13ffe15 	stw	r4,-8(fp)
 100ed90:	e17fff15 	stw	r5,-4(fp)
 100ed94:	e0bfff17 	ldw	r2,-4(fp)
 100ed98:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ed9c:	0005303a 	rdctl	r2,status
 100eda0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100eda4:	e0fffb17 	ldw	r3,-20(fp)
 100eda8:	00bfff84 	movi	r2,-2
 100edac:	1884703a 	and	r2,r3,r2
 100edb0:	1001703a 	wrctl	status,r2
  
  return context;
 100edb4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100edb8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 100edbc:	00c00044 	movi	r3,1
 100edc0:	e0bffa17 	ldw	r2,-24(fp)
 100edc4:	1884983a 	sll	r2,r3,r2
 100edc8:	0084303a 	nor	r2,zero,r2
 100edcc:	1007883a 	mov	r3,r2
 100edd0:	d0a6d217 	ldw	r2,-25784(gp)
 100edd4:	1884703a 	and	r2,r3,r2
 100edd8:	d0a6d215 	stw	r2,-25784(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100eddc:	d0a6d217 	ldw	r2,-25784(gp)
 100ede0:	100170fa 	wrctl	ienable,r2
 100ede4:	e0bffc17 	ldw	r2,-16(fp)
 100ede8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100edec:	e0bffd17 	ldw	r2,-12(fp)
 100edf0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100edf4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 100edf8:	0001883a 	nop
}
 100edfc:	e037883a 	mov	sp,fp
 100ee00:	df000017 	ldw	fp,0(sp)
 100ee04:	dec00104 	addi	sp,sp,4
 100ee08:	f800283a 	ret

0100ee0c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 100ee0c:	defffc04 	addi	sp,sp,-16
 100ee10:	df000315 	stw	fp,12(sp)
 100ee14:	df000304 	addi	fp,sp,12
 100ee18:	e13ffe15 	stw	r4,-8(fp)
 100ee1c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 100ee20:	000530fa 	rdctl	r2,ienable
 100ee24:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 100ee28:	00c00044 	movi	r3,1
 100ee2c:	e0bfff17 	ldw	r2,-4(fp)
 100ee30:	1884983a 	sll	r2,r3,r2
 100ee34:	1007883a 	mov	r3,r2
 100ee38:	e0bffd17 	ldw	r2,-12(fp)
 100ee3c:	1884703a 	and	r2,r3,r2
 100ee40:	1004c03a 	cmpne	r2,r2,zero
 100ee44:	10803fcc 	andi	r2,r2,255
}
 100ee48:	e037883a 	mov	sp,fp
 100ee4c:	df000017 	ldw	fp,0(sp)
 100ee50:	dec00104 	addi	sp,sp,4
 100ee54:	f800283a 	ret

0100ee58 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100ee58:	defff504 	addi	sp,sp,-44
 100ee5c:	dfc00a15 	stw	ra,40(sp)
 100ee60:	df000915 	stw	fp,36(sp)
 100ee64:	df000904 	addi	fp,sp,36
 100ee68:	e13ffc15 	stw	r4,-16(fp)
 100ee6c:	e17ffd15 	stw	r5,-12(fp)
 100ee70:	e1bffe15 	stw	r6,-8(fp)
 100ee74:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 100ee78:	00bffa84 	movi	r2,-22
 100ee7c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 100ee80:	e0bffd17 	ldw	r2,-12(fp)
 100ee84:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100ee88:	e0bff817 	ldw	r2,-32(fp)
 100ee8c:	10800808 	cmpgei	r2,r2,32
 100ee90:	1000271e 	bne	r2,zero,100ef30 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ee94:	0005303a 	rdctl	r2,status
 100ee98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ee9c:	e0fffb17 	ldw	r3,-20(fp)
 100eea0:	00bfff84 	movi	r2,-2
 100eea4:	1884703a 	and	r2,r3,r2
 100eea8:	1001703a 	wrctl	status,r2
  
  return context;
 100eeac:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 100eeb0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 100eeb4:	00804074 	movhi	r2,257
 100eeb8:	108de004 	addi	r2,r2,14208
 100eebc:	e0fff817 	ldw	r3,-32(fp)
 100eec0:	180690fa 	slli	r3,r3,3
 100eec4:	10c5883a 	add	r2,r2,r3
 100eec8:	e0fffe17 	ldw	r3,-8(fp)
 100eecc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 100eed0:	00804074 	movhi	r2,257
 100eed4:	108de004 	addi	r2,r2,14208
 100eed8:	e0fff817 	ldw	r3,-32(fp)
 100eedc:	180690fa 	slli	r3,r3,3
 100eee0:	10c5883a 	add	r2,r2,r3
 100eee4:	10800104 	addi	r2,r2,4
 100eee8:	e0ffff17 	ldw	r3,-4(fp)
 100eeec:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 100eef0:	e0bffe17 	ldw	r2,-8(fp)
 100eef4:	10000526 	beq	r2,zero,100ef0c <alt_iic_isr_register+0xb4>
 100eef8:	e0bff817 	ldw	r2,-32(fp)
 100eefc:	100b883a 	mov	r5,r2
 100ef00:	e13ffc17 	ldw	r4,-16(fp)
 100ef04:	100ecf80 	call	100ecf8 <alt_ic_irq_enable>
 100ef08:	00000406 	br	100ef1c <alt_iic_isr_register+0xc4>
 100ef0c:	e0bff817 	ldw	r2,-32(fp)
 100ef10:	100b883a 	mov	r5,r2
 100ef14:	e13ffc17 	ldw	r4,-16(fp)
 100ef18:	100ed800 	call	100ed80 <alt_ic_irq_disable>
 100ef1c:	e0bff715 	stw	r2,-36(fp)
 100ef20:	e0bffa17 	ldw	r2,-24(fp)
 100ef24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ef28:	e0bff917 	ldw	r2,-28(fp)
 100ef2c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 100ef30:	e0bff717 	ldw	r2,-36(fp)
}
 100ef34:	e037883a 	mov	sp,fp
 100ef38:	dfc00117 	ldw	ra,4(sp)
 100ef3c:	df000017 	ldw	fp,0(sp)
 100ef40:	dec00204 	addi	sp,sp,8
 100ef44:	f800283a 	ret

0100ef48 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100ef48:	defff904 	addi	sp,sp,-28
 100ef4c:	dfc00615 	stw	ra,24(sp)
 100ef50:	df000515 	stw	fp,20(sp)
 100ef54:	df000504 	addi	fp,sp,20
 100ef58:	e13ffc15 	stw	r4,-16(fp)
 100ef5c:	e17ffd15 	stw	r5,-12(fp)
 100ef60:	e1bffe15 	stw	r6,-8(fp)
 100ef64:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 100ef68:	e1bfff17 	ldw	r6,-4(fp)
 100ef6c:	e17ffe17 	ldw	r5,-8(fp)
 100ef70:	e13ffd17 	ldw	r4,-12(fp)
 100ef74:	100f1880 	call	100f188 <open>
 100ef78:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 100ef7c:	e0bffb17 	ldw	r2,-20(fp)
 100ef80:	10001c16 	blt	r2,zero,100eff4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 100ef84:	00804074 	movhi	r2,257
 100ef88:	10828504 	addi	r2,r2,2580
 100ef8c:	e0fffb17 	ldw	r3,-20(fp)
 100ef90:	18c00324 	muli	r3,r3,12
 100ef94:	10c5883a 	add	r2,r2,r3
 100ef98:	10c00017 	ldw	r3,0(r2)
 100ef9c:	e0bffc17 	ldw	r2,-16(fp)
 100efa0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 100efa4:	00804074 	movhi	r2,257
 100efa8:	10828504 	addi	r2,r2,2580
 100efac:	e0fffb17 	ldw	r3,-20(fp)
 100efb0:	18c00324 	muli	r3,r3,12
 100efb4:	10c5883a 	add	r2,r2,r3
 100efb8:	10800104 	addi	r2,r2,4
 100efbc:	10c00017 	ldw	r3,0(r2)
 100efc0:	e0bffc17 	ldw	r2,-16(fp)
 100efc4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 100efc8:	00804074 	movhi	r2,257
 100efcc:	10828504 	addi	r2,r2,2580
 100efd0:	e0fffb17 	ldw	r3,-20(fp)
 100efd4:	18c00324 	muli	r3,r3,12
 100efd8:	10c5883a 	add	r2,r2,r3
 100efdc:	10800204 	addi	r2,r2,8
 100efe0:	10c00017 	ldw	r3,0(r2)
 100efe4:	e0bffc17 	ldw	r2,-16(fp)
 100efe8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 100efec:	e13ffb17 	ldw	r4,-20(fp)
 100eff0:	100d6cc0 	call	100d6cc <alt_release_fd>
  }
} 
 100eff4:	0001883a 	nop
 100eff8:	e037883a 	mov	sp,fp
 100effc:	dfc00117 	ldw	ra,4(sp)
 100f000:	df000017 	ldw	fp,0(sp)
 100f004:	dec00204 	addi	sp,sp,8
 100f008:	f800283a 	ret

0100f00c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 100f00c:	defffb04 	addi	sp,sp,-20
 100f010:	dfc00415 	stw	ra,16(sp)
 100f014:	df000315 	stw	fp,12(sp)
 100f018:	df000304 	addi	fp,sp,12
 100f01c:	e13ffd15 	stw	r4,-12(fp)
 100f020:	e17ffe15 	stw	r5,-8(fp)
 100f024:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 100f028:	01c07fc4 	movi	r7,511
 100f02c:	01800044 	movi	r6,1
 100f030:	e17ffd17 	ldw	r5,-12(fp)
 100f034:	01004074 	movhi	r4,257
 100f038:	21028804 	addi	r4,r4,2592
 100f03c:	100ef480 	call	100ef48 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 100f040:	01c07fc4 	movi	r7,511
 100f044:	000d883a 	mov	r6,zero
 100f048:	e17ffe17 	ldw	r5,-8(fp)
 100f04c:	01004074 	movhi	r4,257
 100f050:	21028504 	addi	r4,r4,2580
 100f054:	100ef480 	call	100ef48 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 100f058:	01c07fc4 	movi	r7,511
 100f05c:	01800044 	movi	r6,1
 100f060:	e17fff17 	ldw	r5,-4(fp)
 100f064:	01004074 	movhi	r4,257
 100f068:	21028b04 	addi	r4,r4,2604
 100f06c:	100ef480 	call	100ef48 <alt_open_fd>
}  
 100f070:	0001883a 	nop
 100f074:	e037883a 	mov	sp,fp
 100f078:	dfc00117 	ldw	ra,4(sp)
 100f07c:	df000017 	ldw	fp,0(sp)
 100f080:	dec00204 	addi	sp,sp,8
 100f084:	f800283a 	ret

0100f088 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f088:	defffe04 	addi	sp,sp,-8
 100f08c:	dfc00115 	stw	ra,4(sp)
 100f090:	df000015 	stw	fp,0(sp)
 100f094:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100f098:	d0a00b17 	ldw	r2,-32724(gp)
 100f09c:	10000326 	beq	r2,zero,100f0ac <alt_get_errno+0x24>
 100f0a0:	d0a00b17 	ldw	r2,-32724(gp)
 100f0a4:	103ee83a 	callr	r2
 100f0a8:	00000106 	br	100f0b0 <alt_get_errno+0x28>
 100f0ac:	d0a6d104 	addi	r2,gp,-25788
}
 100f0b0:	e037883a 	mov	sp,fp
 100f0b4:	dfc00117 	ldw	ra,4(sp)
 100f0b8:	df000017 	ldw	fp,0(sp)
 100f0bc:	dec00204 	addi	sp,sp,8
 100f0c0:	f800283a 	ret

0100f0c4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100f0c4:	defffd04 	addi	sp,sp,-12
 100f0c8:	df000215 	stw	fp,8(sp)
 100f0cc:	df000204 	addi	fp,sp,8
 100f0d0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100f0d4:	e0bfff17 	ldw	r2,-4(fp)
 100f0d8:	10800217 	ldw	r2,8(r2)
 100f0dc:	10d00034 	orhi	r3,r2,16384
 100f0e0:	e0bfff17 	ldw	r2,-4(fp)
 100f0e4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100f0e8:	e03ffe15 	stw	zero,-8(fp)
 100f0ec:	00001d06 	br	100f164 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100f0f0:	00804074 	movhi	r2,257
 100f0f4:	10828504 	addi	r2,r2,2580
 100f0f8:	e0fffe17 	ldw	r3,-8(fp)
 100f0fc:	18c00324 	muli	r3,r3,12
 100f100:	10c5883a 	add	r2,r2,r3
 100f104:	10c00017 	ldw	r3,0(r2)
 100f108:	e0bfff17 	ldw	r2,-4(fp)
 100f10c:	10800017 	ldw	r2,0(r2)
 100f110:	1880111e 	bne	r3,r2,100f158 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 100f114:	00804074 	movhi	r2,257
 100f118:	10828504 	addi	r2,r2,2580
 100f11c:	e0fffe17 	ldw	r3,-8(fp)
 100f120:	18c00324 	muli	r3,r3,12
 100f124:	10c5883a 	add	r2,r2,r3
 100f128:	10800204 	addi	r2,r2,8
 100f12c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100f130:	1000090e 	bge	r2,zero,100f158 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 100f134:	e0bffe17 	ldw	r2,-8(fp)
 100f138:	10c00324 	muli	r3,r2,12
 100f13c:	00804074 	movhi	r2,257
 100f140:	10828504 	addi	r2,r2,2580
 100f144:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 100f148:	e0bfff17 	ldw	r2,-4(fp)
 100f14c:	18800226 	beq	r3,r2,100f158 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 100f150:	00bffcc4 	movi	r2,-13
 100f154:	00000806 	br	100f178 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100f158:	e0bffe17 	ldw	r2,-8(fp)
 100f15c:	10800044 	addi	r2,r2,1
 100f160:	e0bffe15 	stw	r2,-8(fp)
 100f164:	d0a00a17 	ldw	r2,-32728(gp)
 100f168:	1007883a 	mov	r3,r2
 100f16c:	e0bffe17 	ldw	r2,-8(fp)
 100f170:	18bfdf2e 	bgeu	r3,r2,100f0f0 <__alt_mem_TCDM+0xff00e0f0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 100f174:	0005883a 	mov	r2,zero
}
 100f178:	e037883a 	mov	sp,fp
 100f17c:	df000017 	ldw	fp,0(sp)
 100f180:	dec00104 	addi	sp,sp,4
 100f184:	f800283a 	ret

0100f188 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100f188:	defff604 	addi	sp,sp,-40
 100f18c:	dfc00915 	stw	ra,36(sp)
 100f190:	df000815 	stw	fp,32(sp)
 100f194:	df000804 	addi	fp,sp,32
 100f198:	e13ffd15 	stw	r4,-12(fp)
 100f19c:	e17ffe15 	stw	r5,-8(fp)
 100f1a0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 100f1a4:	00bfffc4 	movi	r2,-1
 100f1a8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 100f1ac:	00bffb44 	movi	r2,-19
 100f1b0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 100f1b4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100f1b8:	d1600804 	addi	r5,gp,-32736
 100f1bc:	e13ffd17 	ldw	r4,-12(fp)
 100f1c0:	100f4a40 	call	100f4a4 <alt_find_dev>
 100f1c4:	e0bff815 	stw	r2,-32(fp)
 100f1c8:	e0bff817 	ldw	r2,-32(fp)
 100f1cc:	1000051e 	bne	r2,zero,100f1e4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100f1d0:	e13ffd17 	ldw	r4,-12(fp)
 100f1d4:	100f5340 	call	100f534 <alt_find_file>
 100f1d8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 100f1dc:	00800044 	movi	r2,1
 100f1e0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100f1e4:	e0bff817 	ldw	r2,-32(fp)
 100f1e8:	10002926 	beq	r2,zero,100f290 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100f1ec:	e13ff817 	ldw	r4,-32(fp)
 100f1f0:	100f63c0 	call	100f63c <alt_get_fd>
 100f1f4:	e0bff915 	stw	r2,-28(fp)
 100f1f8:	e0bff917 	ldw	r2,-28(fp)
 100f1fc:	1000030e 	bge	r2,zero,100f20c <open+0x84>
    {
      status = index;
 100f200:	e0bff917 	ldw	r2,-28(fp)
 100f204:	e0bffa15 	stw	r2,-24(fp)
 100f208:	00002306 	br	100f298 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 100f20c:	e0bff917 	ldw	r2,-28(fp)
 100f210:	10c00324 	muli	r3,r2,12
 100f214:	00804074 	movhi	r2,257
 100f218:	10828504 	addi	r2,r2,2580
 100f21c:	1885883a 	add	r2,r3,r2
 100f220:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100f224:	e0fffe17 	ldw	r3,-8(fp)
 100f228:	00900034 	movhi	r2,16384
 100f22c:	10bfffc4 	addi	r2,r2,-1
 100f230:	1886703a 	and	r3,r3,r2
 100f234:	e0bffc17 	ldw	r2,-16(fp)
 100f238:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100f23c:	e0bffb17 	ldw	r2,-20(fp)
 100f240:	1000051e 	bne	r2,zero,100f258 <open+0xd0>
 100f244:	e13ffc17 	ldw	r4,-16(fp)
 100f248:	100f0c40 	call	100f0c4 <alt_file_locked>
 100f24c:	e0bffa15 	stw	r2,-24(fp)
 100f250:	e0bffa17 	ldw	r2,-24(fp)
 100f254:	10001016 	blt	r2,zero,100f298 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 100f258:	e0bff817 	ldw	r2,-32(fp)
 100f25c:	10800317 	ldw	r2,12(r2)
 100f260:	10000826 	beq	r2,zero,100f284 <open+0xfc>
 100f264:	e0bff817 	ldw	r2,-32(fp)
 100f268:	10800317 	ldw	r2,12(r2)
 100f26c:	e1ffff17 	ldw	r7,-4(fp)
 100f270:	e1bffe17 	ldw	r6,-8(fp)
 100f274:	e17ffd17 	ldw	r5,-12(fp)
 100f278:	e13ffc17 	ldw	r4,-16(fp)
 100f27c:	103ee83a 	callr	r2
 100f280:	00000106 	br	100f288 <open+0x100>
 100f284:	0005883a 	mov	r2,zero
 100f288:	e0bffa15 	stw	r2,-24(fp)
 100f28c:	00000206 	br	100f298 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 100f290:	00bffb44 	movi	r2,-19
 100f294:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 100f298:	e0bffa17 	ldw	r2,-24(fp)
 100f29c:	1000090e 	bge	r2,zero,100f2c4 <open+0x13c>
  {
    alt_release_fd (index);  
 100f2a0:	e13ff917 	ldw	r4,-28(fp)
 100f2a4:	100d6cc0 	call	100d6cc <alt_release_fd>
    ALT_ERRNO = -status;
 100f2a8:	100f0880 	call	100f088 <alt_get_errno>
 100f2ac:	1007883a 	mov	r3,r2
 100f2b0:	e0bffa17 	ldw	r2,-24(fp)
 100f2b4:	0085c83a 	sub	r2,zero,r2
 100f2b8:	18800015 	stw	r2,0(r3)
    return -1;
 100f2bc:	00bfffc4 	movi	r2,-1
 100f2c0:	00000106 	br	100f2c8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 100f2c4:	e0bff917 	ldw	r2,-28(fp)
}
 100f2c8:	e037883a 	mov	sp,fp
 100f2cc:	dfc00117 	ldw	ra,4(sp)
 100f2d0:	df000017 	ldw	fp,0(sp)
 100f2d4:	dec00204 	addi	sp,sp,8
 100f2d8:	f800283a 	ret

0100f2dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100f2dc:	defffa04 	addi	sp,sp,-24
 100f2e0:	df000515 	stw	fp,20(sp)
 100f2e4:	df000504 	addi	fp,sp,20
 100f2e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f2ec:	0005303a 	rdctl	r2,status
 100f2f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f2f4:	e0fffc17 	ldw	r3,-16(fp)
 100f2f8:	00bfff84 	movi	r2,-2
 100f2fc:	1884703a 	and	r2,r3,r2
 100f300:	1001703a 	wrctl	status,r2
  
  return context;
 100f304:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100f308:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 100f30c:	e0bfff17 	ldw	r2,-4(fp)
 100f310:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100f314:	e0bffd17 	ldw	r2,-12(fp)
 100f318:	10800017 	ldw	r2,0(r2)
 100f31c:	e0fffd17 	ldw	r3,-12(fp)
 100f320:	18c00117 	ldw	r3,4(r3)
 100f324:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 100f328:	e0bffd17 	ldw	r2,-12(fp)
 100f32c:	10800117 	ldw	r2,4(r2)
 100f330:	e0fffd17 	ldw	r3,-12(fp)
 100f334:	18c00017 	ldw	r3,0(r3)
 100f338:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100f33c:	e0bffd17 	ldw	r2,-12(fp)
 100f340:	e0fffd17 	ldw	r3,-12(fp)
 100f344:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 100f348:	e0bffd17 	ldw	r2,-12(fp)
 100f34c:	e0fffd17 	ldw	r3,-12(fp)
 100f350:	10c00015 	stw	r3,0(r2)
 100f354:	e0bffb17 	ldw	r2,-20(fp)
 100f358:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f35c:	e0bffe17 	ldw	r2,-8(fp)
 100f360:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 100f364:	0001883a 	nop
 100f368:	e037883a 	mov	sp,fp
 100f36c:	df000017 	ldw	fp,0(sp)
 100f370:	dec00104 	addi	sp,sp,4
 100f374:	f800283a 	ret

0100f378 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100f378:	defffb04 	addi	sp,sp,-20
 100f37c:	dfc00415 	stw	ra,16(sp)
 100f380:	df000315 	stw	fp,12(sp)
 100f384:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100f388:	d0a00e17 	ldw	r2,-32712(gp)
 100f38c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100f390:	d0a6d717 	ldw	r2,-25764(gp)
 100f394:	10800044 	addi	r2,r2,1
 100f398:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100f39c:	00002e06 	br	100f458 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 100f3a0:	e0bffd17 	ldw	r2,-12(fp)
 100f3a4:	10800017 	ldw	r2,0(r2)
 100f3a8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100f3ac:	e0bffd17 	ldw	r2,-12(fp)
 100f3b0:	10800403 	ldbu	r2,16(r2)
 100f3b4:	10803fcc 	andi	r2,r2,255
 100f3b8:	10000426 	beq	r2,zero,100f3cc <alt_tick+0x54>
 100f3bc:	d0a6d717 	ldw	r2,-25764(gp)
 100f3c0:	1000021e 	bne	r2,zero,100f3cc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 100f3c4:	e0bffd17 	ldw	r2,-12(fp)
 100f3c8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100f3cc:	e0bffd17 	ldw	r2,-12(fp)
 100f3d0:	10800217 	ldw	r2,8(r2)
 100f3d4:	d0e6d717 	ldw	r3,-25764(gp)
 100f3d8:	18801d36 	bltu	r3,r2,100f450 <alt_tick+0xd8>
 100f3dc:	e0bffd17 	ldw	r2,-12(fp)
 100f3e0:	10800403 	ldbu	r2,16(r2)
 100f3e4:	10803fcc 	andi	r2,r2,255
 100f3e8:	1000191e 	bne	r2,zero,100f450 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 100f3ec:	e0bffd17 	ldw	r2,-12(fp)
 100f3f0:	10800317 	ldw	r2,12(r2)
 100f3f4:	e0fffd17 	ldw	r3,-12(fp)
 100f3f8:	18c00517 	ldw	r3,20(r3)
 100f3fc:	1809883a 	mov	r4,r3
 100f400:	103ee83a 	callr	r2
 100f404:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100f408:	e0bfff17 	ldw	r2,-4(fp)
 100f40c:	1000031e 	bne	r2,zero,100f41c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 100f410:	e13ffd17 	ldw	r4,-12(fp)
 100f414:	100f2dc0 	call	100f2dc <alt_alarm_stop>
 100f418:	00000d06 	br	100f450 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 100f41c:	e0bffd17 	ldw	r2,-12(fp)
 100f420:	10c00217 	ldw	r3,8(r2)
 100f424:	e0bfff17 	ldw	r2,-4(fp)
 100f428:	1887883a 	add	r3,r3,r2
 100f42c:	e0bffd17 	ldw	r2,-12(fp)
 100f430:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100f434:	e0bffd17 	ldw	r2,-12(fp)
 100f438:	10c00217 	ldw	r3,8(r2)
 100f43c:	d0a6d717 	ldw	r2,-25764(gp)
 100f440:	1880032e 	bgeu	r3,r2,100f450 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 100f444:	e0bffd17 	ldw	r2,-12(fp)
 100f448:	00c00044 	movi	r3,1
 100f44c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 100f450:	e0bffe17 	ldw	r2,-8(fp)
 100f454:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100f458:	e0fffd17 	ldw	r3,-12(fp)
 100f45c:	d0a00e04 	addi	r2,gp,-32712
 100f460:	18bfcf1e 	bne	r3,r2,100f3a0 <__alt_mem_TCDM+0xff00e3a0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 100f464:	0001883a 	nop
}
 100f468:	0001883a 	nop
 100f46c:	e037883a 	mov	sp,fp
 100f470:	dfc00117 	ldw	ra,4(sp)
 100f474:	df000017 	ldw	fp,0(sp)
 100f478:	dec00204 	addi	sp,sp,8
 100f47c:	f800283a 	ret

0100f480 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 100f480:	deffff04 	addi	sp,sp,-4
 100f484:	df000015 	stw	fp,0(sp)
 100f488:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 100f48c:	000170fa 	wrctl	ienable,zero
}
 100f490:	0001883a 	nop
 100f494:	e037883a 	mov	sp,fp
 100f498:	df000017 	ldw	fp,0(sp)
 100f49c:	dec00104 	addi	sp,sp,4
 100f4a0:	f800283a 	ret

0100f4a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 100f4a4:	defffa04 	addi	sp,sp,-24
 100f4a8:	dfc00515 	stw	ra,20(sp)
 100f4ac:	df000415 	stw	fp,16(sp)
 100f4b0:	df000404 	addi	fp,sp,16
 100f4b4:	e13ffe15 	stw	r4,-8(fp)
 100f4b8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 100f4bc:	e0bfff17 	ldw	r2,-4(fp)
 100f4c0:	10800017 	ldw	r2,0(r2)
 100f4c4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 100f4c8:	e13ffe17 	ldw	r4,-8(fp)
 100f4cc:	10006700 	call	1000670 <strlen>
 100f4d0:	10800044 	addi	r2,r2,1
 100f4d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100f4d8:	00000d06 	br	100f510 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 100f4dc:	e0bffc17 	ldw	r2,-16(fp)
 100f4e0:	10800217 	ldw	r2,8(r2)
 100f4e4:	e0fffd17 	ldw	r3,-12(fp)
 100f4e8:	180d883a 	mov	r6,r3
 100f4ec:	e17ffe17 	ldw	r5,-8(fp)
 100f4f0:	1009883a 	mov	r4,r2
 100f4f4:	100f8580 	call	100f858 <memcmp>
 100f4f8:	1000021e 	bne	r2,zero,100f504 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 100f4fc:	e0bffc17 	ldw	r2,-16(fp)
 100f500:	00000706 	br	100f520 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 100f504:	e0bffc17 	ldw	r2,-16(fp)
 100f508:	10800017 	ldw	r2,0(r2)
 100f50c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100f510:	e0fffc17 	ldw	r3,-16(fp)
 100f514:	e0bfff17 	ldw	r2,-4(fp)
 100f518:	18bff01e 	bne	r3,r2,100f4dc <__alt_mem_TCDM+0xff00e4dc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 100f51c:	0005883a 	mov	r2,zero
}
 100f520:	e037883a 	mov	sp,fp
 100f524:	dfc00117 	ldw	ra,4(sp)
 100f528:	df000017 	ldw	fp,0(sp)
 100f52c:	dec00204 	addi	sp,sp,8
 100f530:	f800283a 	ret

0100f534 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100f534:	defffb04 	addi	sp,sp,-20
 100f538:	dfc00415 	stw	ra,16(sp)
 100f53c:	df000315 	stw	fp,12(sp)
 100f540:	df000304 	addi	fp,sp,12
 100f544:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 100f548:	d0a00617 	ldw	r2,-32744(gp)
 100f54c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100f550:	00003106 	br	100f618 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 100f554:	e0bffd17 	ldw	r2,-12(fp)
 100f558:	10800217 	ldw	r2,8(r2)
 100f55c:	1009883a 	mov	r4,r2
 100f560:	10006700 	call	1000670 <strlen>
 100f564:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 100f568:	e0bffd17 	ldw	r2,-12(fp)
 100f56c:	10c00217 	ldw	r3,8(r2)
 100f570:	e0bffe17 	ldw	r2,-8(fp)
 100f574:	10bfffc4 	addi	r2,r2,-1
 100f578:	1885883a 	add	r2,r3,r2
 100f57c:	10800003 	ldbu	r2,0(r2)
 100f580:	10803fcc 	andi	r2,r2,255
 100f584:	1080201c 	xori	r2,r2,128
 100f588:	10bfe004 	addi	r2,r2,-128
 100f58c:	10800bd8 	cmpnei	r2,r2,47
 100f590:	1000031e 	bne	r2,zero,100f5a0 <alt_find_file+0x6c>
    {
      len -= 1;
 100f594:	e0bffe17 	ldw	r2,-8(fp)
 100f598:	10bfffc4 	addi	r2,r2,-1
 100f59c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100f5a0:	e0bffe17 	ldw	r2,-8(fp)
 100f5a4:	e0ffff17 	ldw	r3,-4(fp)
 100f5a8:	1885883a 	add	r2,r3,r2
 100f5ac:	10800003 	ldbu	r2,0(r2)
 100f5b0:	10803fcc 	andi	r2,r2,255
 100f5b4:	1080201c 	xori	r2,r2,128
 100f5b8:	10bfe004 	addi	r2,r2,-128
 100f5bc:	10800be0 	cmpeqi	r2,r2,47
 100f5c0:	1000081e 	bne	r2,zero,100f5e4 <alt_find_file+0xb0>
 100f5c4:	e0bffe17 	ldw	r2,-8(fp)
 100f5c8:	e0ffff17 	ldw	r3,-4(fp)
 100f5cc:	1885883a 	add	r2,r3,r2
 100f5d0:	10800003 	ldbu	r2,0(r2)
 100f5d4:	10803fcc 	andi	r2,r2,255
 100f5d8:	1080201c 	xori	r2,r2,128
 100f5dc:	10bfe004 	addi	r2,r2,-128
 100f5e0:	10000a1e 	bne	r2,zero,100f60c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 100f5e4:	e0bffd17 	ldw	r2,-12(fp)
 100f5e8:	10800217 	ldw	r2,8(r2)
 100f5ec:	e0fffe17 	ldw	r3,-8(fp)
 100f5f0:	180d883a 	mov	r6,r3
 100f5f4:	e17fff17 	ldw	r5,-4(fp)
 100f5f8:	1009883a 	mov	r4,r2
 100f5fc:	100f8580 	call	100f858 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100f600:	1000021e 	bne	r2,zero,100f60c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 100f604:	e0bffd17 	ldw	r2,-12(fp)
 100f608:	00000706 	br	100f628 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 100f60c:	e0bffd17 	ldw	r2,-12(fp)
 100f610:	10800017 	ldw	r2,0(r2)
 100f614:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100f618:	e0fffd17 	ldw	r3,-12(fp)
 100f61c:	d0a00604 	addi	r2,gp,-32744
 100f620:	18bfcc1e 	bne	r3,r2,100f554 <__alt_mem_TCDM+0xff00e554>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 100f624:	0005883a 	mov	r2,zero
}
 100f628:	e037883a 	mov	sp,fp
 100f62c:	dfc00117 	ldw	ra,4(sp)
 100f630:	df000017 	ldw	fp,0(sp)
 100f634:	dec00204 	addi	sp,sp,8
 100f638:	f800283a 	ret

0100f63c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 100f63c:	defffc04 	addi	sp,sp,-16
 100f640:	df000315 	stw	fp,12(sp)
 100f644:	df000304 	addi	fp,sp,12
 100f648:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 100f64c:	00bffa04 	movi	r2,-24
 100f650:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100f654:	e03ffd15 	stw	zero,-12(fp)
 100f658:	00001906 	br	100f6c0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 100f65c:	00804074 	movhi	r2,257
 100f660:	10828504 	addi	r2,r2,2580
 100f664:	e0fffd17 	ldw	r3,-12(fp)
 100f668:	18c00324 	muli	r3,r3,12
 100f66c:	10c5883a 	add	r2,r2,r3
 100f670:	10800017 	ldw	r2,0(r2)
 100f674:	10000f1e 	bne	r2,zero,100f6b4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 100f678:	00804074 	movhi	r2,257
 100f67c:	10828504 	addi	r2,r2,2580
 100f680:	e0fffd17 	ldw	r3,-12(fp)
 100f684:	18c00324 	muli	r3,r3,12
 100f688:	10c5883a 	add	r2,r2,r3
 100f68c:	e0ffff17 	ldw	r3,-4(fp)
 100f690:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 100f694:	d0e00a17 	ldw	r3,-32728(gp)
 100f698:	e0bffd17 	ldw	r2,-12(fp)
 100f69c:	1880020e 	bge	r3,r2,100f6a8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 100f6a0:	e0bffd17 	ldw	r2,-12(fp)
 100f6a4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 100f6a8:	e0bffd17 	ldw	r2,-12(fp)
 100f6ac:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 100f6b0:	00000606 	br	100f6cc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100f6b4:	e0bffd17 	ldw	r2,-12(fp)
 100f6b8:	10800044 	addi	r2,r2,1
 100f6bc:	e0bffd15 	stw	r2,-12(fp)
 100f6c0:	e0bffd17 	ldw	r2,-12(fp)
 100f6c4:	10800810 	cmplti	r2,r2,32
 100f6c8:	103fe41e 	bne	r2,zero,100f65c <__alt_mem_TCDM+0xff00e65c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 100f6cc:	e0bffe17 	ldw	r2,-8(fp)
}
 100f6d0:	e037883a 	mov	sp,fp
 100f6d4:	df000017 	ldw	fp,0(sp)
 100f6d8:	dec00104 	addi	sp,sp,4
 100f6dc:	f800283a 	ret

0100f6e0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 100f6e0:	defffb04 	addi	sp,sp,-20
 100f6e4:	df000415 	stw	fp,16(sp)
 100f6e8:	df000404 	addi	fp,sp,16
 100f6ec:	e13ffe15 	stw	r4,-8(fp)
 100f6f0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 100f6f4:	e0bfff17 	ldw	r2,-4(fp)
 100f6f8:	10840070 	cmpltui	r2,r2,4097
 100f6fc:	1000021e 	bne	r2,zero,100f708 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 100f700:	00840004 	movi	r2,4096
 100f704:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 100f708:	e0fffe17 	ldw	r3,-8(fp)
 100f70c:	e0bfff17 	ldw	r2,-4(fp)
 100f710:	1885883a 	add	r2,r3,r2
 100f714:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100f718:	e0bffe17 	ldw	r2,-8(fp)
 100f71c:	e0bffc15 	stw	r2,-16(fp)
 100f720:	00000506 	br	100f738 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 100f724:	e0bffc17 	ldw	r2,-16(fp)
 100f728:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 100f72c:	e0bffc17 	ldw	r2,-16(fp)
 100f730:	10800804 	addi	r2,r2,32
 100f734:	e0bffc15 	stw	r2,-16(fp)
 100f738:	e0fffc17 	ldw	r3,-16(fp)
 100f73c:	e0bffd17 	ldw	r2,-12(fp)
 100f740:	18bff836 	bltu	r3,r2,100f724 <__alt_mem_TCDM+0xff00e724>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 100f744:	e0bffe17 	ldw	r2,-8(fp)
 100f748:	108007cc 	andi	r2,r2,31
 100f74c:	10000226 	beq	r2,zero,100f758 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 100f750:	e0bffc17 	ldw	r2,-16(fp)
 100f754:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 100f758:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 100f75c:	0001883a 	nop
 100f760:	e037883a 	mov	sp,fp
 100f764:	df000017 	ldw	fp,0(sp)
 100f768:	dec00104 	addi	sp,sp,4
 100f76c:	f800283a 	ret

0100f770 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 100f770:	defffe04 	addi	sp,sp,-8
 100f774:	df000115 	stw	fp,4(sp)
 100f778:	df000104 	addi	fp,sp,4
 100f77c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 100f780:	e0bfff17 	ldw	r2,-4(fp)
 100f784:	10bffe84 	addi	r2,r2,-6
 100f788:	10c00428 	cmpgeui	r3,r2,16
 100f78c:	18001a1e 	bne	r3,zero,100f7f8 <alt_exception_cause_generated_bad_addr+0x88>
 100f790:	100690ba 	slli	r3,r2,2
 100f794:	00804074 	movhi	r2,257
 100f798:	10bdea04 	addi	r2,r2,-2136
 100f79c:	1885883a 	add	r2,r3,r2
 100f7a0:	10800017 	ldw	r2,0(r2)
 100f7a4:	1000683a 	jmp	r2
 100f7a8:	0100f7e8 	cmpgeui	r4,zero,991
 100f7ac:	0100f7e8 	cmpgeui	r4,zero,991
 100f7b0:	0100f7f8 	rdprs	r4,zero,991
 100f7b4:	0100f7f8 	rdprs	r4,zero,991
 100f7b8:	0100f7f8 	rdprs	r4,zero,991
 100f7bc:	0100f7e8 	cmpgeui	r4,zero,991
 100f7c0:	0100f7f0 	cmpltui	r4,zero,991
 100f7c4:	0100f7f8 	rdprs	r4,zero,991
 100f7c8:	0100f7e8 	cmpgeui	r4,zero,991
 100f7cc:	0100f7e8 	cmpgeui	r4,zero,991
 100f7d0:	0100f7f8 	rdprs	r4,zero,991
 100f7d4:	0100f7e8 	cmpgeui	r4,zero,991
 100f7d8:	0100f7f0 	cmpltui	r4,zero,991
 100f7dc:	0100f7f8 	rdprs	r4,zero,991
 100f7e0:	0100f7f8 	rdprs	r4,zero,991
 100f7e4:	0100f7e8 	cmpgeui	r4,zero,991
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 100f7e8:	00800044 	movi	r2,1
 100f7ec:	00000306 	br	100f7fc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 100f7f0:	0005883a 	mov	r2,zero
 100f7f4:	00000106 	br	100f7fc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 100f7f8:	0005883a 	mov	r2,zero
  }
}
 100f7fc:	e037883a 	mov	sp,fp
 100f800:	df000017 	ldw	fp,0(sp)
 100f804:	dec00104 	addi	sp,sp,4
 100f808:	f800283a 	ret

0100f80c <atexit>:
 100f80c:	200b883a 	mov	r5,r4
 100f810:	000f883a 	mov	r7,zero
 100f814:	000d883a 	mov	r6,zero
 100f818:	0009883a 	mov	r4,zero
 100f81c:	100f8d41 	jmpi	100f8d4 <__register_exitproc>

0100f820 <exit>:
 100f820:	defffe04 	addi	sp,sp,-8
 100f824:	000b883a 	mov	r5,zero
 100f828:	dc000015 	stw	r16,0(sp)
 100f82c:	dfc00115 	stw	ra,4(sp)
 100f830:	2021883a 	mov	r16,r4
 100f834:	100f9ec0 	call	100f9ec <__call_exitprocs>
 100f838:	00804074 	movhi	r2,257
 100f83c:	1086fd04 	addi	r2,r2,7156
 100f840:	11000017 	ldw	r4,0(r2)
 100f844:	20800f17 	ldw	r2,60(r4)
 100f848:	10000126 	beq	r2,zero,100f850 <exit+0x30>
 100f84c:	103ee83a 	callr	r2
 100f850:	8009883a 	mov	r4,r16
 100f854:	100fbdc0 	call	100fbdc <_exit>

0100f858 <memcmp>:
 100f858:	01c000c4 	movi	r7,3
 100f85c:	3980192e 	bgeu	r7,r6,100f8c4 <memcmp+0x6c>
 100f860:	2144b03a 	or	r2,r4,r5
 100f864:	11c4703a 	and	r2,r2,r7
 100f868:	10000f26 	beq	r2,zero,100f8a8 <memcmp+0x50>
 100f86c:	20800003 	ldbu	r2,0(r4)
 100f870:	28c00003 	ldbu	r3,0(r5)
 100f874:	10c0151e 	bne	r2,r3,100f8cc <memcmp+0x74>
 100f878:	31bfff84 	addi	r6,r6,-2
 100f87c:	01ffffc4 	movi	r7,-1
 100f880:	00000406 	br	100f894 <memcmp+0x3c>
 100f884:	20800003 	ldbu	r2,0(r4)
 100f888:	28c00003 	ldbu	r3,0(r5)
 100f88c:	31bfffc4 	addi	r6,r6,-1
 100f890:	10c00e1e 	bne	r2,r3,100f8cc <memcmp+0x74>
 100f894:	21000044 	addi	r4,r4,1
 100f898:	29400044 	addi	r5,r5,1
 100f89c:	31fff91e 	bne	r6,r7,100f884 <__alt_mem_TCDM+0xff00e884>
 100f8a0:	0005883a 	mov	r2,zero
 100f8a4:	f800283a 	ret
 100f8a8:	20c00017 	ldw	r3,0(r4)
 100f8ac:	28800017 	ldw	r2,0(r5)
 100f8b0:	18bfee1e 	bne	r3,r2,100f86c <__alt_mem_TCDM+0xff00e86c>
 100f8b4:	31bfff04 	addi	r6,r6,-4
 100f8b8:	21000104 	addi	r4,r4,4
 100f8bc:	29400104 	addi	r5,r5,4
 100f8c0:	39bff936 	bltu	r7,r6,100f8a8 <__alt_mem_TCDM+0xff00e8a8>
 100f8c4:	303fe91e 	bne	r6,zero,100f86c <__alt_mem_TCDM+0xff00e86c>
 100f8c8:	003ff506 	br	100f8a0 <__alt_mem_TCDM+0xff00e8a0>
 100f8cc:	10c5c83a 	sub	r2,r2,r3
 100f8d0:	f800283a 	ret

0100f8d4 <__register_exitproc>:
 100f8d4:	defffa04 	addi	sp,sp,-24
 100f8d8:	dc000315 	stw	r16,12(sp)
 100f8dc:	04004074 	movhi	r16,257
 100f8e0:	8406fd04 	addi	r16,r16,7156
 100f8e4:	80c00017 	ldw	r3,0(r16)
 100f8e8:	dc400415 	stw	r17,16(sp)
 100f8ec:	dfc00515 	stw	ra,20(sp)
 100f8f0:	18805217 	ldw	r2,328(r3)
 100f8f4:	2023883a 	mov	r17,r4
 100f8f8:	10003726 	beq	r2,zero,100f9d8 <__register_exitproc+0x104>
 100f8fc:	10c00117 	ldw	r3,4(r2)
 100f900:	010007c4 	movi	r4,31
 100f904:	20c00e16 	blt	r4,r3,100f940 <__register_exitproc+0x6c>
 100f908:	1a000044 	addi	r8,r3,1
 100f90c:	8800221e 	bne	r17,zero,100f998 <__register_exitproc+0xc4>
 100f910:	18c00084 	addi	r3,r3,2
 100f914:	18c7883a 	add	r3,r3,r3
 100f918:	18c7883a 	add	r3,r3,r3
 100f91c:	12000115 	stw	r8,4(r2)
 100f920:	10c7883a 	add	r3,r2,r3
 100f924:	19400015 	stw	r5,0(r3)
 100f928:	0005883a 	mov	r2,zero
 100f92c:	dfc00517 	ldw	ra,20(sp)
 100f930:	dc400417 	ldw	r17,16(sp)
 100f934:	dc000317 	ldw	r16,12(sp)
 100f938:	dec00604 	addi	sp,sp,24
 100f93c:	f800283a 	ret
 100f940:	00800034 	movhi	r2,0
 100f944:	10800004 	addi	r2,r2,0
 100f948:	10002626 	beq	r2,zero,100f9e4 <__register_exitproc+0x110>
 100f94c:	01006404 	movi	r4,400
 100f950:	d9400015 	stw	r5,0(sp)
 100f954:	d9800115 	stw	r6,4(sp)
 100f958:	d9c00215 	stw	r7,8(sp)
 100f95c:	00000000 	call	0 <__reset-0x1000000>
 100f960:	d9400017 	ldw	r5,0(sp)
 100f964:	d9800117 	ldw	r6,4(sp)
 100f968:	d9c00217 	ldw	r7,8(sp)
 100f96c:	10001d26 	beq	r2,zero,100f9e4 <__register_exitproc+0x110>
 100f970:	81000017 	ldw	r4,0(r16)
 100f974:	10000115 	stw	zero,4(r2)
 100f978:	02000044 	movi	r8,1
 100f97c:	22405217 	ldw	r9,328(r4)
 100f980:	0007883a 	mov	r3,zero
 100f984:	12400015 	stw	r9,0(r2)
 100f988:	20805215 	stw	r2,328(r4)
 100f98c:	10006215 	stw	zero,392(r2)
 100f990:	10006315 	stw	zero,396(r2)
 100f994:	883fde26 	beq	r17,zero,100f910 <__alt_mem_TCDM+0xff00e910>
 100f998:	18c9883a 	add	r4,r3,r3
 100f99c:	2109883a 	add	r4,r4,r4
 100f9a0:	1109883a 	add	r4,r2,r4
 100f9a4:	21802215 	stw	r6,136(r4)
 100f9a8:	01800044 	movi	r6,1
 100f9ac:	12406217 	ldw	r9,392(r2)
 100f9b0:	30cc983a 	sll	r6,r6,r3
 100f9b4:	4992b03a 	or	r9,r9,r6
 100f9b8:	12406215 	stw	r9,392(r2)
 100f9bc:	21c04215 	stw	r7,264(r4)
 100f9c0:	01000084 	movi	r4,2
 100f9c4:	893fd21e 	bne	r17,r4,100f910 <__alt_mem_TCDM+0xff00e910>
 100f9c8:	11006317 	ldw	r4,396(r2)
 100f9cc:	218cb03a 	or	r6,r4,r6
 100f9d0:	11806315 	stw	r6,396(r2)
 100f9d4:	003fce06 	br	100f910 <__alt_mem_TCDM+0xff00e910>
 100f9d8:	18805304 	addi	r2,r3,332
 100f9dc:	18805215 	stw	r2,328(r3)
 100f9e0:	003fc606 	br	100f8fc <__alt_mem_TCDM+0xff00e8fc>
 100f9e4:	00bfffc4 	movi	r2,-1
 100f9e8:	003fd006 	br	100f92c <__alt_mem_TCDM+0xff00e92c>

0100f9ec <__call_exitprocs>:
 100f9ec:	defff504 	addi	sp,sp,-44
 100f9f0:	df000915 	stw	fp,36(sp)
 100f9f4:	dd400615 	stw	r21,24(sp)
 100f9f8:	dc800315 	stw	r18,12(sp)
 100f9fc:	dfc00a15 	stw	ra,40(sp)
 100fa00:	ddc00815 	stw	r23,32(sp)
 100fa04:	dd800715 	stw	r22,28(sp)
 100fa08:	dd000515 	stw	r20,20(sp)
 100fa0c:	dcc00415 	stw	r19,16(sp)
 100fa10:	dc400215 	stw	r17,8(sp)
 100fa14:	dc000115 	stw	r16,4(sp)
 100fa18:	d9000015 	stw	r4,0(sp)
 100fa1c:	2839883a 	mov	fp,r5
 100fa20:	04800044 	movi	r18,1
 100fa24:	057fffc4 	movi	r21,-1
 100fa28:	00804074 	movhi	r2,257
 100fa2c:	1086fd04 	addi	r2,r2,7156
 100fa30:	12000017 	ldw	r8,0(r2)
 100fa34:	45005217 	ldw	r20,328(r8)
 100fa38:	44c05204 	addi	r19,r8,328
 100fa3c:	a0001c26 	beq	r20,zero,100fab0 <__call_exitprocs+0xc4>
 100fa40:	a0800117 	ldw	r2,4(r20)
 100fa44:	15ffffc4 	addi	r23,r2,-1
 100fa48:	b8000d16 	blt	r23,zero,100fa80 <__call_exitprocs+0x94>
 100fa4c:	14000044 	addi	r16,r2,1
 100fa50:	8421883a 	add	r16,r16,r16
 100fa54:	8421883a 	add	r16,r16,r16
 100fa58:	84402004 	addi	r17,r16,128
 100fa5c:	a463883a 	add	r17,r20,r17
 100fa60:	a421883a 	add	r16,r20,r16
 100fa64:	e0001e26 	beq	fp,zero,100fae0 <__call_exitprocs+0xf4>
 100fa68:	80804017 	ldw	r2,256(r16)
 100fa6c:	e0801c26 	beq	fp,r2,100fae0 <__call_exitprocs+0xf4>
 100fa70:	bdffffc4 	addi	r23,r23,-1
 100fa74:	843fff04 	addi	r16,r16,-4
 100fa78:	8c7fff04 	addi	r17,r17,-4
 100fa7c:	bd7ff91e 	bne	r23,r21,100fa64 <__alt_mem_TCDM+0xff00ea64>
 100fa80:	00800034 	movhi	r2,0
 100fa84:	10800004 	addi	r2,r2,0
 100fa88:	10000926 	beq	r2,zero,100fab0 <__call_exitprocs+0xc4>
 100fa8c:	a0800117 	ldw	r2,4(r20)
 100fa90:	1000301e 	bne	r2,zero,100fb54 <__call_exitprocs+0x168>
 100fa94:	a0800017 	ldw	r2,0(r20)
 100fa98:	10003226 	beq	r2,zero,100fb64 <__call_exitprocs+0x178>
 100fa9c:	a009883a 	mov	r4,r20
 100faa0:	98800015 	stw	r2,0(r19)
 100faa4:	00000000 	call	0 <__reset-0x1000000>
 100faa8:	9d000017 	ldw	r20,0(r19)
 100faac:	a03fe41e 	bne	r20,zero,100fa40 <__alt_mem_TCDM+0xff00ea40>
 100fab0:	dfc00a17 	ldw	ra,40(sp)
 100fab4:	df000917 	ldw	fp,36(sp)
 100fab8:	ddc00817 	ldw	r23,32(sp)
 100fabc:	dd800717 	ldw	r22,28(sp)
 100fac0:	dd400617 	ldw	r21,24(sp)
 100fac4:	dd000517 	ldw	r20,20(sp)
 100fac8:	dcc00417 	ldw	r19,16(sp)
 100facc:	dc800317 	ldw	r18,12(sp)
 100fad0:	dc400217 	ldw	r17,8(sp)
 100fad4:	dc000117 	ldw	r16,4(sp)
 100fad8:	dec00b04 	addi	sp,sp,44
 100fadc:	f800283a 	ret
 100fae0:	a0800117 	ldw	r2,4(r20)
 100fae4:	80c00017 	ldw	r3,0(r16)
 100fae8:	10bfffc4 	addi	r2,r2,-1
 100faec:	15c01426 	beq	r2,r23,100fb40 <__call_exitprocs+0x154>
 100faf0:	80000015 	stw	zero,0(r16)
 100faf4:	183fde26 	beq	r3,zero,100fa70 <__alt_mem_TCDM+0xff00ea70>
 100faf8:	95c8983a 	sll	r4,r18,r23
 100fafc:	a0806217 	ldw	r2,392(r20)
 100fb00:	a5800117 	ldw	r22,4(r20)
 100fb04:	2084703a 	and	r2,r4,r2
 100fb08:	10000b26 	beq	r2,zero,100fb38 <__call_exitprocs+0x14c>
 100fb0c:	a0806317 	ldw	r2,396(r20)
 100fb10:	2088703a 	and	r4,r4,r2
 100fb14:	20000c1e 	bne	r4,zero,100fb48 <__call_exitprocs+0x15c>
 100fb18:	89400017 	ldw	r5,0(r17)
 100fb1c:	d9000017 	ldw	r4,0(sp)
 100fb20:	183ee83a 	callr	r3
 100fb24:	a0800117 	ldw	r2,4(r20)
 100fb28:	15bfbf1e 	bne	r2,r22,100fa28 <__alt_mem_TCDM+0xff00ea28>
 100fb2c:	98800017 	ldw	r2,0(r19)
 100fb30:	153fcf26 	beq	r2,r20,100fa70 <__alt_mem_TCDM+0xff00ea70>
 100fb34:	003fbc06 	br	100fa28 <__alt_mem_TCDM+0xff00ea28>
 100fb38:	183ee83a 	callr	r3
 100fb3c:	003ff906 	br	100fb24 <__alt_mem_TCDM+0xff00eb24>
 100fb40:	a5c00115 	stw	r23,4(r20)
 100fb44:	003feb06 	br	100faf4 <__alt_mem_TCDM+0xff00eaf4>
 100fb48:	89000017 	ldw	r4,0(r17)
 100fb4c:	183ee83a 	callr	r3
 100fb50:	003ff406 	br	100fb24 <__alt_mem_TCDM+0xff00eb24>
 100fb54:	a0800017 	ldw	r2,0(r20)
 100fb58:	a027883a 	mov	r19,r20
 100fb5c:	1029883a 	mov	r20,r2
 100fb60:	003fb606 	br	100fa3c <__alt_mem_TCDM+0xff00ea3c>
 100fb64:	0005883a 	mov	r2,zero
 100fb68:	003ffb06 	br	100fb58 <__alt_mem_TCDM+0xff00eb58>

0100fb6c <__floatundidf>:
 100fb6c:	defffc04 	addi	sp,sp,-16
 100fb70:	dc800215 	stw	r18,8(sp)
 100fb74:	2025883a 	mov	r18,r4
 100fb78:	2809883a 	mov	r4,r5
 100fb7c:	dfc00315 	stw	ra,12(sp)
 100fb80:	dc400115 	stw	r17,4(sp)
 100fb84:	dc000015 	stw	r16,0(sp)
 100fb88:	100cd440 	call	100cd44 <__floatunsidf>
 100fb8c:	000d883a 	mov	r6,zero
 100fb90:	01d07c34 	movhi	r7,16880
 100fb94:	180b883a 	mov	r5,r3
 100fb98:	1009883a 	mov	r4,r2
 100fb9c:	100bbd40 	call	100bbd4 <__muldf3>
 100fba0:	9009883a 	mov	r4,r18
 100fba4:	1023883a 	mov	r17,r2
 100fba8:	1821883a 	mov	r16,r3
 100fbac:	100cd440 	call	100cd44 <__floatunsidf>
 100fbb0:	880d883a 	mov	r6,r17
 100fbb4:	800f883a 	mov	r7,r16
 100fbb8:	1009883a 	mov	r4,r2
 100fbbc:	180b883a 	mov	r5,r3
 100fbc0:	100a7e80 	call	100a7e8 <__adddf3>
 100fbc4:	dfc00317 	ldw	ra,12(sp)
 100fbc8:	dc800217 	ldw	r18,8(sp)
 100fbcc:	dc400117 	ldw	r17,4(sp)
 100fbd0:	dc000017 	ldw	r16,0(sp)
 100fbd4:	dec00404 	addi	sp,sp,16
 100fbd8:	f800283a 	ret

0100fbdc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 100fbdc:	defffd04 	addi	sp,sp,-12
 100fbe0:	df000215 	stw	fp,8(sp)
 100fbe4:	df000204 	addi	fp,sp,8
 100fbe8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 100fbec:	0001883a 	nop
 100fbf0:	e0bfff17 	ldw	r2,-4(fp)
 100fbf4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 100fbf8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100fbfc:	10000226 	beq	r2,zero,100fc08 <_exit+0x2c>
    ALT_SIM_FAIL();
 100fc00:	002af070 	cmpltui	zero,zero,43969
 100fc04:	00000106 	br	100fc0c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 100fc08:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 100fc0c:	003fff06 	br	100fc0c <__alt_mem_TCDM+0xff00ec0c>
